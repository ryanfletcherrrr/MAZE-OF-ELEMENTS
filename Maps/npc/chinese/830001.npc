<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Help, me young man, oh please, help me! </speech>
            <speech>My bones... They hurt. I live in middle of nowhere, and I am not strong enough to travel around anymore.</speech>
            <speech>My bones are shaking. I badly need a Marrow-Potion. Could you try and get one for me?</speech>
            <speech>I have heard that it is smuggled in some forest near New Dawn Town.</speech>
        </speeches>
        <speeches id="2">
            <speech>You&apos;re back! Please tell me you have good news for me. </speech>
            <speech>Do you have Marrow-Potion with you?</speech>
        </speeches>
        <speeches id="3">
            <speech>*Sheds a tear* Oh no... </speech>
            <speech>*You see the old man fell down.* </speech>
        </speeches>
        <speeches id="4">
            <speech>Oh thank you, young traveller.</speech>
            <speech>I wish I could repay you with something, but the only thing I had got stolen by a boy some time ago.</speech>
            <speech>You can keep it if you are able to find it. I will see you sometime later. I will leave the city and buy some more potions for myself.</speech>
        </speeches>
        <speeches id="5">
            <speech>Oh thank you, young traveller.</speech>
            <speech>I wish I could repay you with something, but the only thing I had got stolen by a boy some time ago.</speech>
            <speech>You can keep it if you are able to find it. I will see you sometime later. I will leave the city and buy some more potions for myself.</speech>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>I see that you found the reward.</speech>
            <speech>Well done young trainer, trainers like you get my blood flowing.</speech>
            <speech>I hope you liked what I offered you.</speech>
            <speech>I have also got a massive supply of Marrow-Potion now. I will soon leave this house and move to a better place where I can get a proper treatment for my condition.</speech>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>Help, me young man, oh please, help me! </speech>
            <speech>My bones... They hurt. I live in middle of nowhere, and I am not strong enough to travel around anymore.</speech>
            <speech>My bones are shaking. I badly need a Marrow-Potion. Could you try and get one for me?</speech>
            <speech>I have heard that it is smuggled in some forest near New Dawn Town.</speech>
        </speeches>
        <speeches id="2">
            <speech>My bones are shaking. I badly need a Marrow-Potion. Could you try and get one for me?</speech>
            <speech>I have heard that it is smuggled in some forest near New Dawn Town.</speech>
        </speeches>
    </conversation>
</npcs>