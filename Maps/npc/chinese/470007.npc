<npcs>
    <npc direction="DOWN" id="1000" name="Guide Hari" sprite="23" x="14" y="41">
        <speech>Greetings, challenger! Arturo is a user of ground-type Pokemon.</speech>
        <speech>Water, grass and ice-types all fare well against him.</speech>
        <speech>Don't underestimate his ground-types, especially in a sandstorm.</speech>
        <speech>Remember Sand Rush is to ground type pokemon what Adrenaline rush is to humans. Good luck!</speech>
    </npc>
    <conversation id="1">
        <speeches id="1">
            <speech>You've come here to challenge Arturo?</speech>
            <speech>Before that, let's see if you're even worth his time!</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh, alright. You're not too bad, you know.</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh, alright. You're not too bad, you know.</speech>
        </speeches>
        <speeches id="4">
            <speech>Go back, you'll just waste his time.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Troll ... troll in the dungeon!</speech>
        </speeches>
        <speeches id="2">
            <speech>I was just kidding about the whole 'troll' thing. Don't take it so seriously!</speech>
        </speeches>
        <speeches id="3">
            <speech>I was just kidding about the whole 'troll' thing. Don't take it so seriously!</speech>
        </speeches>
        <speeches id="4">
            <speech>The troll has been vanquished! Haha</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Looks like you've been trapped by the sand puzzle. Too bad, since your fortune is about to get a whole lot worse!</speech>
        </speeches>
        <speeches id="2">
            <speech>I was wrong. Your fortune shines brightly, and it may just lead you to Arturo, I believe.</speech>
        </speeches>
        <speeches id="3">
            <speech>I was wrong. Your fortune shines brightly, and it may just lead you to Arturo, I believe.</speech>
        </speeches>
        <speeches id="4">
            <speech>And that's the kiss of death!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Watch as the sand takes away your strength, and my Pokemon steal your spirit!</speech>
        </speeches>
        <speeches id="2">
            <speech>Your spirit is strong - stronger than my Pokemon.</speech>
        </speeches>
        <speeches id="3">
            <speech>Your spirit is strong - stronger than my Pokemon.</speech>
        </speeches>
        <speeches id="4">
            <speech>Now rest in eternal darkness!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>You really think you can beat Arturo? That's a lot of confidence, or is it just misplaced arrogance?</speech>
        </speeches>
        <speeches id="2">
            <speech>I see that your confidence is justified, but simply being confident isn't enough to overcome Arturo.</speech>
        </speeches>
        <speeches id="3">
            <speech>You must become adaptable, because only then can you truly stand a chance against someone with the calibre of Arturo.</speech>
        </speeches>
        <speeches id="4">
            <speech>So it was arrogance after all.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Where do you think you going kid?</speech>
        </speeches>
        <speeches id="2">
            <speech>You are headed in the right direction.</speech>
        </speeches>
        <speeches id="3">
            <speech>Once you chose a path, stick to it until you succeed. Those are the words of Arturo.</speech>
        </speeches>
        <speeches id="4">
            <speech>You need to chose your path wisely, Kid!</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>You've come to challenge Arturo?</speech>
            <speech>Alright. But first, show me what you've learnt up until now!</speech>
        </speeches>
        <speeches id="2">
            <speech>Arturo once said that one learns from his/her failures.</speech>
        </speeches>
        <speeches id="3">
            <speech>Arturo once said that one learns from his/her failures.</speech>
        </speeches>
        <speeches id="4">
            <speech>You need to learn from your failures!</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>I like looking for rare Pokemon to fulfill my dream as a trainer.</speech>
            <speech>But right now, it seems like defeating you will make me feel better.</speech>
        </speeches>
        <speeches id="2">
            <speech>I once found a Pupitar here.. I will continue my search for such Pokemons.</speech>
        </speeches>
        <speeches id="3">
            <speech>I once found a Pupitar here.. I will continue my search for such Pokemons.</speech>
        </speeches>
        <speeches id="4">
            <speech>I feel so good...</speech>
        </speeches>
    </conversation>
</npcs>
