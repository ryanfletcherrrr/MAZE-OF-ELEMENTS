<npcs>
    <npc direction="RIGHT" id="1000" name="Monk Boo Jong" sprite="167" x="10" y="8">
        <speech>If in need of inspiration, one could always look towards the past and the work of great individuals who
            lived in those times.
        </speech>
        <speech>Even if these individuals are no longer alive, their thoughts and emotions continue to live-on in their
            writings.
        </speech>
        <speech>These records by old monks, for instance, form part of a valuable historical archive that can help guide
            humanity to a better future.
        </speech>
    </npc>
    <npc direction="LEFT" id="1001" name="Monk Dreyfus" sprite="167" x="1" y="8">
        <speech>Many of these writing contain details of seven 'mystical' shards, shaped in the form of a wing.</speech>
        <speech>Some monks have even claimed that these shards are not a myth, but a reality.</speech>
        <speech>Come to think about it, the carvings made by ancient folk do seem to resemble some kind of a bird, so
            there may be more to this than we know of.
        </speech>
    </npc>
    <npc direction="UP" id="1002" name="Monk Zachary" sprite="167" x="13" y="22">
        <speech>Every year we commemorate the anniversary of the rebirth by honouring Ho-Oh.</speech>
        <speech>And yet, none of us have ever seen it in our lifetimes, and may never even be privileged enough to witness its presence.</speech>
        <speech>However, it is going to change this year in the festival of Ho-Oh.</speech>
    </npc>
    <npc direction="LEFT" id="1003" name="Monk Janardhan" sprite="167" x="18" y="7">
        <speech>"Four bring destruction, and seven bring joy"</speech>
        <speech>What is that, you ask? Why, of course, this is an excerpt from the tales of Monk Joo Lah - one of the
            founders of this monastery.
        </speech>
        <speech>He describes the time when humanity lived in close harmony with both nature, an era of close cooperation
            between both humans and Pokemon.
        </speech>
        <speech>And though I'm not an expert, I do believe that these words may be linked with the power of the flames -
            the mystical flame of death and rebirth.
        </speech>
    </npc>
    <npc direction="UP" id="1004" name="Monk Ramiel" randomRotation="true" sprite="167" x="14" y="5">
        <speech>"There was a time when some people, driven by greed and blind ambition, sought to establish their</speech>
        <speech>dominance over the natural world."</speech>
        <speech>"To achieve this goal, they tried to invoke the power of the flames,</speech>
        <speech>to cleanse everything and start</speech>
        <speech>anew."</speech>
        <speech>"These people, certain of their motivations, summoned the phoenix to exercise it's power on this world</speech>
        <speech>and rinse it of those who these people thought as weak."</speech>
        <speech>"The phoenix, however, could see the doubt that lingered in their minds. And in the absence of</speech>
        <speech>conviction, there is only fear -"</speech>
        <speech>"and so, the phoenix, rather than follow these humans, chose instead to punish them."</speech>
        <speech>"That was the last anyone saw of these people, and - as future generations would come to acknowledge -</speech>
        <speech>the reason for the prolonged peace in the land of flame"</speech>
    </npc>
    <conversation canSkip="false" id="2">
        <speeches id="1">
            <speech/>
        </speeches>
        <speeches id="2">
            <speech>Yes, I am Ching Ling's brother.</speech>
            <speech>I see.. Its sad that he cannot remember the prayers anymore.</speech>
            <speech>Do you want to help him by handing over this Book to him? I need to leave for Barfi to meditate else I would have handed the book myself.</speech>
        </speeches>
        <speeches id="3">
            <speech>I am extremely disappointed, $PLAYER_NAME. You should never say no to someone in need...</speech>
        </speeches>
        <speeches id="4">
            <speech>Thank you. I shall leave for Barfi mountains to meditate.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
</npcs>
