<npcs>
    <movingNpc direction="DOWN" id="1" name="Delcatty" shouldSleep="" speed="1" sprite="301" type="pokemon" x="4" y="13">
        <path>LEFTx2,RIGHTx2</path>
        <onCollisionSpeech gap="4">:3</onCollisionSpeech>
        <speech>¿mewmew? :3</speech>
    </movingNpc>
    <npc direction="LEFT" hidden="false" id="2" name="Leo" randomRotation="false" sprite="5" x="11" y="5">
        <speech>Me gusta mucho el rediseño que ha sufrido el edificio del Centro Pokémon a lo largo de los años.</speech>
        <speech>El mejor que he visto en mi vida hasta ahora.</speech>
        <speech>Vivir una larga vida puede tener sus recompensas.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="3" name="Randy" randomRotation="true" sprite="26" x="2" y="9">
        <speech>Siéntete libre de usar este PC, ¡es para todos!</speech>
    </npc>

    <conversation id="7">
        <speeches id="1">
            <speech>Ah, la emoción de coleccionar Pokémon, no hay nada igual, ¿verdad?</speech>
            <speech>Como persona acostumbrada a las cosas finas, elegir el próximo Pokémon para mi prestigiosa colección me parece todo un calvario.</speech>
            <speech>¿Sería tan amable de concederme un breve respiro? Necesito reflexionar sobre qué espécimen raro admirar a continuación.</speech>
            <speech>Vuelve en $DURATION, y seguro que tendré una tarea tentadora para nosotros.</speech>
            <speech>Mi colección es enorme, pero siempre hay sitio para más.</speech>
        </speeches>
    </conversation>

    <conversation id="8">
        <speeches id="2">
            <speech>¡Hola! Creo que no nos conocemos. Puedes llamarme el Entusiasta Pokémon.</speech>
            <speech>Últimamente he estado bastante aburrido, holgazaneando con todos los lujos con los que uno podría soñar... excepto alguna emoción genuina.</speech>
            <speech>He aquí una idea: He desarrollado una repentina fascinación por Poochyena.</speech>
            <speech>Es un Pokémon muy luchador, ¿verdad?</speech>
            <speech>Enséñame una Poochyena de nivel 10, ¿quieres?</speech>
            <speech>Me encantaría ver uno de cerca, y estoy dispuesto a hacer que merezca la pena.</speech>
        </speeches>
        <speeches id="3">
            <speech>¿No te interesa? Qué terrible decepción.</speech>
            <speech>Pero supongo que no todo el mundo comparte mi pasión por Pokémon.</speech>
            <speech>Bueno, si cambias de opinión, ¡házmelo saber!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Fantástico! Sabía que veía en ti a un compañero aficionado a las cosas finas.</speech>
            <speech>Tráeme un Poochyena de nivel 10 y te prometo que la recompensa será muy generosa.</speech>
            <speech>Siempre cumplo mi palabra, sobre todo cuando se trata de mis caprichos.</speech>
        </speeches>
    </conversation>

    <conversation id="9">
        <speeches id="1">
            <speech>¿Has conseguido ver ya a ese Poochyena de nivel 10? Me pica la curiosidad.</speech>
        </speeches>

        <speeches id="2">
            <speech>Ah, ¿así que te has encontrado con un Poochyena de nivel 10? ¡Maravilloso! ¿Puedo echar un vistazo? No todos los días se ve un espécimen así.</speech>
            <speech>Ver criaturas así aviva aún más mi pasión por Pokémon. ¿Quieres enseñarme lo que has encontrado?</speech>
        </speeches>

        <speeches id="3">
            <speech>¿No te sientes a la altura? Es un poco decepcionante, pero lo entiendo.</speech>
            <speech>No todo el mundo tiene facilidad para atender peticiones caprichosas.</speech>
            <speech>No obstante, agradecemos sus contribuciones hasta ahora.</speech>
            <speech>Si le asalta de nuevo el espíritu aventurero, no dude en volver.</speech>
        </speeches>

        <speeches id="4">
            <speech>Su esfuerzo por satisfacer mi curiosidad es realmente encomiable.</speech>
            <speech>Ya estoy pensando en qué Pokémon me gustaría conocer después.</speech>
            <speech>Permíteme un momento para decidir nuestra próxima aventura Pokémon. Tu ayuda ha sido tan entretenida como instructiva.</speech>
            <speech>Gracias por tu dedicación. Como muestra de mi gratitud, aquí tienes algo por las molestias.</speech>
            <speech>Le aseguro que es bastante generoso.</speech>
        </speeches>
    </conversation>

    <conversation id="10">
        <speeches id="2">
            <speech>Ya veo que has vuelto. Su último hallazgo fue realmente un espectáculo para la vista. ¡Qué experiencia tan estimulante!</speech>
            <speech>Sabes, mi interés ha cambiado a algo más bien... eléctrico. ¿Has oído hablar del Hisuian Voltorb?</speech>
            <speech>No es un Voltorb cualquiera. Es de la región de Hisui, ¡rebosante de historia y misticismo!</speech>
            <speech>¿Estarías dispuesto a enseñarme un Voltorb Hisuian? He oído que son todo un espectáculo.</speech>
            <speech>Y sí, me aseguraré de que la recompensa sea, como siempre, muy atractiva.</speech>
        </speeches>
        <speeches id="3">
            <speech>¿No te tienta el encanto de Hisuian Voltorb? Menuda sorpresa, viniendo de un aventurero como tú.</speech>
            <speech>Sin embargo, respeto tu elección. Recuerda, mi oferta sigue en pie si alguna vez la curiosidad te supera.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Maravillosa decisión! Estoy deseando ver un Hisuian Voltorb con mis propios ojos.</speech>
            <speech>Tráeme uno al nivel 12 y te aseguro que la recompensa reflejará mi inmenso aprecio por tus esfuerzos.</speech>
        </speeches>
    </conversation>

    <conversation id="11">
        <speeches id="1">
            <speech>¿Te has encontrado ya con un Hisuian Voltorb de nivel 12? Mi expectación está por las nubes.</speech>
        </speeches>
        <speeches id="2">
            <speech>¿Un Hisuian Voltorb de nivel 12? ¡Espléndido! ¿Puedo echarle un vistazo? Tales rarezas son un espectáculo para la vista.</speech>
            <speech>Cada nuevo Pokémon que me enseñas amplía mis horizontes. ¿Te importaría compartir este descubrimiento?</speech>
        </speeches>
        <speeches id="3">
            <speech>¿Decidiste no hacerlo? Un poco decepcionante, pero lo entiendo.</speech>
            <speech>Perseguir a determinados Pokémon no es del agrado de todo el mundo.</speech>
            <speech>Sin embargo, tus esfuerzos hasta ahora no han pasado desapercibidos.</speech>
            <speech>Si alguna vez deseas reavivar la emoción de la caza, mi puerta está siempre abierta.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Maravilloso! Tu persistencia en complacer mis caprichos nunca deja de sorprenderme.</speech>
            <speech>Necesitaré un momento para pensar qué Pokémon será el próximo que me llame la atención...</speech>
            <speech>Tus aventuras aportan historias tan vibrantes a mis días, que de otro modo serían aburridos.</speech>
            <speech>Acepte esta muestra de mi agradecimiento por su duro trabajo y dedicación.</speech>
            <speech>Tenga la seguridad de que es una recompensa suntuosa.</speech>
        </speeches>
    </conversation>

    <conversation id="12">
        <speeches id="2">
            <speech>Nuestro último descubrimiento ha marcado realmente un nuevo hito. Su dedicación es encomiable.</speech>
            <speech>Esta vez, me he fijado en algo bastante electrizante. ¿Conoces Tynamo?</speech>
            <speech>Un Tynamo de nivel 10, para ser exactos. Es una criatura que late con vigor eléctrico y encanto.</speech>
            <speech>Tengo ganas de ver uno en persona. ¿Qué te parece? ¿Traerás un Tynamo de nivel 10 para deslumbrarme?</speech>
            <speech>Y no te preocupes, seguro que la recompensa te electrizará a cambio.</speech>
        </speeches>
        <speeches id="3">
            <speech>¿Elegir pasar por alto la búsqueda de Tynamo? Debo admitir que estoy un poco decepcionado.</speech>
            <speech>Sin embargo, la puerta sigue abierta, por si la chispa de la curiosidad vuelve a encenderse en su interior.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Tu voluntad de sumergirte en este desafío me electriza! Un Tynamo de nivel 10 será sin duda un espectáculo digno de contemplar.</speech>
            <speech>Espero con impaciencia su llegada. Tráiganlo e iluminemos juntos la emoción.</speech>
        </speeches>
    </conversation>

    <conversation id="13">
        <speeches id="1">
            <speech>¿Un Tynamo de nivel 10 ilumina ya tu viaje? Mi entusiasmo está cargado de energía positiva.</speech>
        </speeches>
        <speeches id="2">
            <speech>¿Contemplar un Tynamo de nivel 10? ¡Eso sí que es un pensamiento energizante! ¿Puedo deleitarme con su brillo?</speech>
            <speech>Sus aventuras siguen despertando fascinación. Por favor, comparta sus electrizantes hallazgos conmigo.</speech>
        </speeches>
        <speeches id="3">
            <speech>¿Dudando en seguir la pista de Tynamo? Soy todo oídos para escuchar las razones, pero recuerda que la oferta sigue sobre la mesa.</speech>
            <speech>Si las corrientes le guían de vuelta, sepa que le espera un público ansioso.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Increíble! La corriente de tu determinación fluye con más fuerza que nunca.</speech>
            <speech>Mientras reflexiono sobre la próxima maravilla que perseguir, toma esto como muestra de mi gratitud por la eléctrica muestra de compromiso.</speech>
        </speeches>
    </conversation>

</npcs>