<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Ah, ¡saludos, intrépido explorador! Has tropezado con la guarida del último fanático de los fósiles: ¡ese soy yo!</speech>
            <speech>Vivo por la emoción de desenterrar el pasado, fósil a fósil. Las historias que susurran estas antiguas reliquias... ¡Ah, música para mis oídos!</speech>
            <speech>¿Lo sabía? Las minas son un tesoro de estas maravillas prehistóricas.</speech>
            <speech>A un golpe de pico de descubrir la historia.</speech>
            <speech>¿Qué me dices? ¿Tienes algún fósil?</speech>
            <speech>Entrégamelos y los cambiaré por cofres rebosantes de maravillas.</speech>
            <speech>¡Elige bien! Cada fósil guarda un secreto único, una historia que espera ser contada. ¿Cuál me confiarás hoy?</speech>
        </speeches>
        <speeches id="2">
            <speech>¿No hay fósiles para intercambiar hoy? ¡Es como encontrar una roca donde esperabas un Kabuto!</speech>
            <speech>Pero no temas. Las minas aguardan, llenas de secretos de épocas pasadas. ¿Quién sabe qué descubrimientos te deparará tu próxima aventura?</speech>
            <speech>Cada fósil que encuentra es un fragmento de historia, una pieza del rompecabezas de un mundo desaparecido hace mucho tiempo.</speech>
            <speech>Estaré aquí, listo para cuando vuelvas con tus tesoros.</speech>
            <speech>Así que coge tu pico y ponte en marcha. Las profundidades de la tierra esconden maravillas que esperan que alguien como tú las descubra.</speech>
            <speech>Espero con impaciencia su próxima visita.</speech>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>Saludos, $PLAYER_NAME. Te encuentras en una encrucijada de la historia y la leyenda.</speech>
            <speech>Busco los fragmentos de una época pasada, concretamente vinculados a Aerodactyl, un titán de los cielos antiguos.</speech>
            <speech>Fragmento de ala de avión, fragmento de mandíbula prehistórica,</speech>
            <speech>Segmento de garra fosilizado, fragmento de costilla antigua y rodaja de aleta caudal son las claves para descifrar este rompecabezas.</speech>
            <speech>Si te encuentras con estas reliquias en tus viajes, piensa en su poder y en el papel que podrías desempeñar para revivir una leyenda.</speech>
            <speech>Cada fragmento es una historia, un trozo de historia que espera ser contada. La Aerodacylite, una piedra de inmenso poder, puede forjarse a partir de estos fragmentos.</speech>
            <speech>Imagina, $PLAYER_NAME, la oportunidad de presenciar el resurgimiento de Aerodactyl, de estar al lado de una criatura mítica y poderosa.</speech>
            <speech>Si esta búsqueda te llama, busca estos fragmentos. Cuando estés listo, estaré aquí, esperando para guiarte en este viaje por los anales del tiempo.</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Has reunido todos los fragmentos! Juntas, estas reliquias hablan de una época en la que Aerodactyl dominaba los cielos.</speech>
            <speech>¿Estás preparado para confiarme estas piezas? A cambio, te ofrezco la Aerodacylite, un conducto al pasado, una llave para despertar el poder de Aerodactyl.</speech>
            <speech>Esta decisión es monumental, $PLAYER_NAME. No se trata sólo de revivir una leyenda; se trata de volver a conectar con el mundo antiguo</speech>
        </speeches>
        <speeches id="3">
            <speech>Comprendo sus dudas. Las reliquias del pasado tienen peso, historias no contadas y misterios por desentrañar.</speech>
            <speech>Si su camino le lleva de vuelta a mí, sepa que la Aerodacylite y la leyenda que alberga esperan su decisión.</speech>
        </speeches>
        <speeches id="4">
            <speech>Su decisión de compartir estas reliquias ha abierto una puerta al pasado.</speech>
            <speech>Aquí, toma la Aerodacylite, un símbolo de nuestro viaje para revivir Aerodactyl.</speech>
            <speech>Que esta piedra sirva como testamento de tu valentía y curiosidad. Juntos, hemos convertido la leyenda en realidad.</speech>
        </speeches>
    </conversation>

</npcs>