<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>¿Qué haces aquí? ¡He cerrado la puerta!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Esto es un error!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Esto es un error!</speech>
        </speeches>
        <speeches id="4">
            <speech>No te atrevas a meterte con nosotros nunca más.</speech>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>Parece que Jessa olvidó cerrar la puerta. No significa que puedas entrar y meterte con nosotros.</speech>
        </speeches>
        <speeches id="2">
            <speech>¡¡¡¡¡¡¡¡AAAAAAAAAAAAAAAAAAAAA!!!!!!!!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡¡¡¡¡¡¡¡AAAAAAAAAAAAAAAAAAAAA!!!!!!!!</speech>
        </speeches>
        <speeches id="4">
            <speech>No te atrevas a meterte con nosotros nunca más.</speech>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>¿Por qué estás aquí? No tienes nada que ver con nuestro negocio.</speech>
            <speech>La misión en la que estamos está más allá de su comprensión.</speech>
        </speeches>
        <speeches id="2">
            <speech>Hmm .. Eras más duro de lo que esperaba.</speech>
            <speech>Este no era mi equipo más fuerte, así que no te emociones.</speech>
            <speech>De todos modos, ya he terminado con mis asuntos aquí.</speech>
            <speech>Un día todo Jvaloh estará bajo mi control y los niños como tú apreciarán el hecho de haber podido luchar contra mí.</speech>
            <speech>Jessa y Zames, ¡están despedidos!</speech>
        </speeches>
        <speeches id="4">
            <speech>Eres fuerte, lo reconozco, pero no lo suficiente para derrotarme.</speech>
            <speech>No vuelvas a merodear por esta Mansión.</speech>
        </speeches>
    </conversation>

    <conversation id="4">
        <speeches id="1">
            <speech>Vaya, qué valiente. Eres solo un joven entrenador pero posees una inmensa fuerza y coraje</speech>
            <speech>Theo o quienquiera que fuese, hablaba de alguna región de Jvaloh y de cómo sólo los más fuertes pueden sobrevivir allí.</speech>
            <speech>Dijo que los mayores trituradores del Mundo Pokémon llegan allí y lo abandonan al no poder sobrevivir.</speech>
            <speech>Como muestra de agradecimiento, me gustaría ofrecerle esta Placa Pixie.</speech>
        </speeches>
        <speeches id="2">
            <speech>No sé para qué sirve, pero los gruñones intentaban arrebatármelo antes de que Theo les pidiera que se detuvieran.</speech>
            <speech>Por ahora, me iré a descansar. Espero verte otro día.</speech>
        </speeches>
    </conversation>
</npcs>