<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Hola, soy Soy jardinero. Mis tijeras son mis únicas amigas de verdad.</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Sabía que odiaba a los humanos! ¡Todo lo que necesito son tijeras!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Sabía que odiaba a los humanos! ¡Todo lo que necesito son tijeras!</speech>
        </speeches>
        <speeches id="4">
            <speech>Mi especialidad y mi afición son cortar cosas. Mi movimiento favorito con las tijeras es la guillotina.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Mi estrategia consiste en engañar a mis adversarios con mi velocidad.</speech>
        </speeches>
        <speeches id="2">
            <speech>¿Cómo puedes ser más rápido que yo? ¿Qué llevas puesto?</speech>
        </speeches>
        <speeches id="3">
            <speech>¿Cómo puedes ser más rápido que yo? ¿Qué llevas puesto?</speech>
        </speeches>
        <speeches id="4">
            <speech>Ahaha... ¿Cómo fue? Seguro que te mareaste.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Vine aquí por mi hermano mayor que siempre se esconde en su habitación.</speech>
        </speeches>
        <speeches id="2">
            <speech>Ojalá mi hermano mayor saliera de su habitación y jugara conmigo...</speech>
        </speeches>
        <speeches id="3">
            <speech>Ojalá mi hermano mayor saliera de su habitación y jugara conmigo...</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Mi hermano mayor, mira afuera por una vez! ¡Gané por ti! ¡Así que sal a jugar!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>¡Allá voy! ¡Lucho por el honor de la sucursal!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Urk! ¡Adiós por ahora! ¡Recordaré esto, niña!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Urk! ¡Adiós por ahora! ¡Recordaré esto, niña!</speech>
        </speeches>
        <speeches id="4">
            <speech>Soy director de una sucursal del Club de Fans Pokémon, ¡y he ganado!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Cuando te canses de entrenar Pokémon, ¡es hora de combatir! ¡Ese es el truco para trabajar como Criador!</speech>
        </speeches>
        <speeches id="2">
            <speech>Si pierdo, eso te dice que sólo estaba matando el tiempo. No daña mi ego en absoluto.</speech>
        </speeches>
        <speeches id="3">
            <speech>Si pierdo, eso te dice que sólo estaba matando el tiempo. No daña mi ego en absoluto.</speech>
        </speeches>
        <speeches id="4">
            <speech>Tengo tanto talento que puedo ganar sólo para cambiar de humor.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Empecé a patinar porque había oído que a las chicas les gustaban los chicos que patinan. No funciona para nada.</speech>
        </speeches>
        <speeches id="2">
            <speech>De todas formas, hay pocos sitios donde se pueda patinar. Sinceramente, no sirven para desplazarse.</speech>
        </speeches>
        <speeches id="3">
            <speech>De todas formas, hay pocos sitios donde se pueda patinar. Sinceramente, no sirven para desplazarse.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Y también soy terrible en las batallas Pokémon! Ahora nunca voy a conseguir novia...</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>En mi país, decimos que el blanco puede ocultar todo tipo de pecados. ¿No es genial?</speech>
        </speeches>
        <speeches id="2">
            <speech>No me importa si gano o pierdo, mientras pueda escapar de este tedio.</speech>
        </speeches>
        <speeches id="3">
            <speech>No me importa si gano o pierdo, mientras pueda escapar de este tedio.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Oh, olvídalo! ¡He terminado con la ropa elegante! ¡Me desharé de este atuendo e iré a broncearme!</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>Los lugares que dan miedo son los mejores para mí. Me encantaría vivir en un cementerio...</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Derrotarme es increíble! ¡Tú también debes estar un poco maldito!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Derrotarme es increíble! ¡Tú también debes estar un poco maldito!</speech>
        </speeches>
        <speeches id="4">
            <speech>En un cementerio donde la fiesta empieza cuando acaba el día. Sí, esa es mi vida...</speech>
        </speeches>
    </conversation>
</npcs>