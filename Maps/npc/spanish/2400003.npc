<npcs>
    <conversation id="1">
        <!-- First Battle (Classic Koga Style) -->
        <speeches id="1">
            <speech>¡Fwahaha! ¿Un simple niño se atreve a desafiarme?</speech>
            <speech>Muy bien. Soy {COLOR=PURPLE}Koga{ENDCOLOR}, ¡el líder del gimnasio de Ciudad Fucsia!</speech>
            <speech>¡Mis intrincadas técnicas te confundirán y desmantelarán!</speech>
            <speech>{COLOR=PURPLE}El veneno{ENDCOLOR} corre por mis venas, y mis Pokémon son maestros de la resistencia y el engaño.</speech>
            <speech>¿Podrás resistir nuestro implacable asalto, o sucumbirás al veneno rastrero?</speech>
            <speech>¡Que comience la batalla!</speech>
        </speeches>
        <speeches id="2">
            <speech>Ah... Has demostrado ser muy formidable.</speech>
            <speech>Como prueba de tu victoria, te concedo la {COLOR=ORO}Insignia del Alma{ENDCOLOR}.</speech>
            <speech>Con esta insignia, los Pokémon de hasta {COLOR=CYAN}Nivel 60{ENDCOLOR} obedecerán tus órdenes.</speech>
            <speech>¡Toma esto también{COLOR=PURPLE}TM84 Poison Jab{ENDCOLOR}!</speech>
            <speech>Es un golpe feroz infundido con veneno, capaz de golpear con rapidez y dejar debilitados a tus enemigos.</speech>
            <speech>Utilízala con sabiduría y que tu técnica se afine con cada batalla.</speech>
        </speeches>
        <speeches id="3">
            <speech>Hmph. Tus habilidades aún no han alcanzado su punto álgido.</speech>
            <speech>Vuelve cuando hayas perfeccionado tu mente y tu cuerpo para resistir mis técnicas tóxicas.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ah, ¿dudas? Un guerrero sabio sabe cuándo luchar y cuándo retirarse.</speech>
            <speech>Cuando tu determinación sea absoluta, da un paso al frente y lucharemos una vez más.</speech>
        </speeches>
        <!-- Repeated Battle (More Intense & Thematic) -->
        <speeches id="5">
            <speech>Una vez más, ¿intentas desafiar mi disciplina?</speech>
            <speech>¡Muy bien! ¡Un verdadero ninja nunca se estanca, ni permite que su espada se oxide!</speech>
            <speech>{COLOR=PURPLE}¡El veneno es paciente... espera, debilita y vence!{ENDCOLOR}</speech>
            <speech>¡Muéstrame si tu espíritu permanece inquebrantable!</speech>
        </speeches>
        <speeches id="6">
            <speech>Impresionante... Una vez más, has soportado mis implacables tácticas.</speech>
            <speech>Esto marca su {COLOR=GOLD}$TOTAL_VICTORY{ENDCOLOR} victoria contra mí, con {COLOR=CYAN}$CONSECUTIVE{ENDCOLOR} consecutiva.</speech>
            <speech>Tu maestría crece como una hoja afilada: mortal, precisa.</speech>
        </speeches>
        <speeches id="7">
            <speech>Incluso el guerrero más disciplinado puede flaquear.</speech>
            <speech>No dejes que esta derrota te consuma. Estudia mis técnicas, perfecciona tu estrategia y regresa cuando estés preparado.</speech>
            <speech>Las sombras esperarán tu regreso.</speech>
        </speeches>
        <speeches id="8">
            <speech>¿Vacilaciones? Quizás un momento de paciencia le vendrá bien.</speech>
            <speech>Cuando estés listo, da un paso adelante y te pondré a prueba una vez más.</speech>
        </speeches>
        <speeches id="9">
            <speech>Tu resistencia me impresiona, pero incluso un ninja debe recuperarse.</speech>
            <speech>Vuelve en {COLOR=YELLOW}$DURATION{ENDCOLOR}, y entonces veremos si realmente has depurado tu técnica.</speech>
        </speeches>
        <!-- Special Condition: Battle Requirement Not Met -->
        <speeches id="10">
            <speech>Hmm... Buscas la revancha, pero no cumples los criterios del desafío.</speech>
            <speech>Para volver a poner a prueba tus habilidades contra mí, debes tener {COLOR=PURPLE}al menos 3 Pokémon de tipo Veneno{ENDCOLOR} en tu equipo.</speech>
            <speech>Vuelve cuando estés realmente preparado, y veremos si puedes soportar mi ataque tóxico.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Las enseñanzas de Koga fluyen como veneno lento, constante y letal.</speech>
        </speeches>
        <speeches id="2">
            <speech>Has resistido más de lo que esperaba... impresionante.</speech>
        </speeches>
        <speeches id="3">
            <speech>Has resistido más de lo que esperaba... impresionante.</speech>
        </speeches>
        <speeches id="4">
            <speech>El maestro Koga siempre dice... la victoria pertenece al paciente.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>La precisión del maestro Koga es inigualable. ¡He estudiado sus tácticas durante años!</speech>
        </speeches>
        <speeches id="2">
            <speech>Tan cerca... Pensé que te tenía resuelto.</speech>
        </speeches>
        <speeches id="3">
            <speech>Tan cerca... Pensé que te tenía resuelto.</speech>
        </speeches>
        <speeches id="4">
            <speech>Precisión y paciencia, ¡así es Koga!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>La batalla se trata de despistar. ¿Puedes ver a través de mis trucos?</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Ja! Supongo que viste a través de mí ...</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Ja! Supongo que viste a través de mí ...</speech>
        </speeches>
        <speeches id="4">
            <speech>Con un poco de engaño se llega muy lejos.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>El veneno fluye como un aliento invisible, pero mortal. ¿Puedes soportarlo?</speech>
        </speeches>
        <speeches id="2">
            <speech>Tus movimientos... son más agudos de lo que esperaba.</speech>
        </speeches>
        <speeches id="3">
            <speech>Tus movimientos... son más agudos de lo que esperaba.</speech>
        </speeches>
        <speeches id="4">
            <speech>Dudaste. El veneno sólo necesita un momento para arraigarse.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>¡Fíjate bien! Un paso en falso, y estarás atrapado en mi juego.</speech>
        </speeches>
        <speeches id="2">
            <speech>Has sido más rápido de lo que esperaba... ¡impresionante!</speech>
        </speeches>
        <speeches id="3">
            <speech>Has sido más rápido de lo que esperaba... ¡impresionante!</speech>
        </speeches>
        <speeches id="4">
            <speech>El veneno prospera en la confusión... y yo sé cómo mantenerte adivinando.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Los colmillos de mi Pokémon gotean veneno. ¿Quieres poner a prueba tu resistencia?</speech>
        </speeches>
        <speeches id="2">
            <speech>Ni siquiera mis bestias más feroces pudieron sacudirte.</speech>
        </speeches>
        <speeches id="3">
            <speech>Ni siquiera mis bestias más feroces pudieron sacudirte.</speech>
        </speeches>
        <speeches id="4">
            <speech>No subestimes los instintos de mis Pokémon. Siempre saben cuándo atacar.</speech>
        </speeches>
    </conversation>
</npcs>