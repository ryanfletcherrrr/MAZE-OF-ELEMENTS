<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>¡Ayúdame, jovencito, por favor, ayúdame!</speech>
            <speech>Me han robado a mi amigo más querido.</speech>
            <speech>¡Mi amada Spiritomb ha desaparecido!</speech>
            <speech>¿Serías tan amable de encontrar y devolverme a mi alma gemela?</speech>
        </speeches>
        <speeches id="2">
        <speech>¡Has vuelto! Por favor, dime que tienes buenas noticias para mí.</speech>
        <speech>¿Has venido a devolverme mi tumba espiritual?</speech>
        </speeches>
        <speeches id="3">
            <speech>*Sheds a tear* Oh no...</speech>
            <speech>*Ves que la anciana tiene el corazón roto y se ha quedado sola*</speech>
        </speeches>
        <speeches id="4">
            <speech>Gracias, joven viajero.</speech>
            <speech>Espero que mi amigo no te haya causado demasiados problemas.</speech>
            <speech>Err, quería decir Spiritomb...</speech>
            <speech>Adiós, por ahora...</speech>
        </speeches>
        <speeches id="5">
            <speech>Gracias, joven viajero.</speech>
            <speech>Espero que mi amigo no te haya causado demasiados problemas.</speech>
            <speech>Err, quería decir Spiritomb...</speech>
            <speech>Adiós, por ahora...</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Un espectro en las sombras;
                siniestro y oscuro;
                saborea tu vida;
                pero no deja huella</speech>
        </speeches>
        <speeches id="2">
            <speech>Un espectro en las sombras;
                siniestro y oscuro;
                saborea tu vida:
                pero no deja huella~</speech>
            <speech>Llámame raro, llámame friki, pero, $PLAYER_NAME, ¿es este el pokémon que busco?</speech>
        </speeches>
        <speeches id="3">
            <speech>No hay bien, no hay mal, pero esto no es lo que quiero; ¡VETE!</speech>
        </speeches>
        <speeches id="4">
            <speech>Espléndido, joven maestro, me alegro por usted.</speech>
            <speech>Pero dime, querido $PLAYER_NAME: ¿estás listo para el segundo asalto?</speech>
        </speeches>
        <speeches id="5">
            <speech>Espléndido, joven maestro, me alegro por usted.</speech>
            <speech>Pero dime, querido $PLAYER_NAME: ¿estás listo para el segundo asalto?</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Trae la plaga, o eso dicen:
                "Es la némesis del trigo y del heno~"
                Se mueve en grupos y se multiplica;
                podría hacer mucho más, pero nunca lo intenta.</speech>
        </speeches>
        <speeches id="2">
            <speech>Me gusta cómo lo hacías, ¿has captado mi sutil pista?</speech>
        </speeches>
        <speeches id="3">
            <speech>Por un momento pensé que tu mente era aguda y única.
                Poco sabes, pocos viajeros han sido tan débiles.</speech>
        </speeches>
        <speeches id="4">
            <speech>Esto es lo que anhelaba, ¡esto es lo que yo llamo un trato!
                Querido $PLAYER_NAME, bienvenido al Culto de los Espíritus, por favor toma este sello.</speech>
            <speech>Con este pequeño sello de papel, podrás ver a otros miembros de la secta en todo el mundo.</speech>
            <speech>Ten cuidado con eso, $PLAYER_NAME. Porque una vez que has mostrado tu devoción, ¡no puedes volver atrás!</speech>
            <speech>¿Una ráfaga infernal, una ola de humedad,
                ¿O los propios pétalos de la naturaleza? No te arrepentirás
                Decídete, desconfía de tu elección;
                Si tu alma y tu mente están alineadas, te regocijarás.</speech>
        </speeches>
        <speeches id="5">
            <speech>Esto es lo que anhelaba, ¡esto es lo que yo llamo un trato!
                Querido $PLAYER_NAME, bienvenido al Culto de los Espíritus, por favor toma este sello.</speech>
            <speech>Con este pequeño sello de papel, podrás ver a otros miembros de la secta en todo el mundo.</speech>
            <speech>Ten cuidado con eso, $PLAYER_NAME. Porque una vez que has mostrado tu devoción, ¡no puedes volver atrás!</speech>
            <speech>¿Una ráfaga infernal, una ola de humedad,
                ¿O los propios pétalos de la naturaleza? No te arrepentirás
                Decídete, desconfía de tu elección;
                Si tu alma y tu mente están alineadas, te regocijarás.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Buscas las llamas místicas; disfrutas con los juegos ardientes~</speech>
            <speech>Si deseas sobrepasar tus límites; entonces debes traer a los sabuesos.</speech>
            <speech>Haz lo que te digo y la llama te mostrará el camino~</speech>
        </speeches>
        <speeches id="2">
            <speech>Trae a los sabuesos; es hora de más rondas~</speech>
            <speech>Mira como el fuego del infierno ruge; haciéndose eco de la voz de los sabios~</speech>
            <speech>¿Excede tus límites; desata a los sabuesos?</speech>
        </speeches>
        <speeches id="3">
            <speech>Anhelas las llamas; pero frenas su furia</speech>
            <speech>Por desgracia, nunca llegarás a la mayoría de edad...</speech>
        </speeches>
        <speeches id="4">
            <speech>Las llamas responderán; en la noche en que comience~</speech>
            <speech>Los mundos se alinearán; ¡en una armonía de llamas!</speech>
        </speeches>
        <speeches id="5">
            <speech>Busca el santuario; busca la llama</speech>
            <speech>En la noche oscura y fatídica; te mostrará el verdadero camino</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Buscas las mareas místicas; disfrutas de las acometidas de los mares~</speech>
            <speech>Tráeme la oscuridad del mar; para que sólo quede la luz~.</speech>
            <speech>Haz lo que te digo y las mareas te llevarán a la gloria~</speech>
        </speeches>
        <speeches id="2">
            <speech>Traes la oscuridad, tal como te pedí...</speech>
            <speech>Mira como los malditos océanos se elevan; exponiendo lo que estaba enmascarado~</speech>
            <speech>Traed los mares; dadme lo que quiero, por favor...</speech>
        </speeches>
        <speeches id="3">
            <speech>Rechazas las mareas; abandonas los mares~</speech>
            <speech>Ahora verás como su poder te pone de rodillas~</speech>
        </speeches>
        <speeches id="4">
            <speech>Las mareas responderán; en la noche en que comience~</speech>
            <speech>Los mundos se alinearán; en una armonía de opereta oceánica~</speech>
        </speeches>
        <speeches id="5">
            <speech>Busca el santuario; busca los océanos~</speech>
            <speech>En la oscura y fatídica noche; te mostrarán tus verdaderas emociones~</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Buscas los bosques encantados; no temes las capuchas de la parca~</speech>
            <speech>Tráeme la espina; tráeme su maldición~</speech>
            <speech>Haz lo que te digo; si no, nuestro destino será peor~</speech>
        </speeches>
        <speeches id="2">
            <speech>Traes la espina; traes su oscuro dolor~</speech>
            <speech>Ahora los bosques malditos responderán; con truenos y lluvia~</speech>
            <speech>El horror, la vergüenza; no es un juego~</speech>
            <speech>Créeme, jovencito, desearías no haber nacido...</speech>
            <speech>¿Así que aligera tu carga y dame la espina?</speech>
        </speeches>
        <speeches id="3">
            <speech>Anhelas el bosque; pero no muestras dedicación~</speech>
            <speech>Lo que necesitas hacer es mucha meditiación~</speech>
        </speeches>
        <speeches id="4">
            <speech>Los aullidos del bosque responderán; en la noche en que comience~</speech>
            <speech>Los mundos se alinearán y los bosques brotarán.</speech>
        </speeches>
        <speeches id="5">
            <speech>Busca el santuario; busca el bosque;</speech>
            <speech>En la oscura y fatídica noche; te mostrarán la realidad~</speech>
        </speeches>
    </conversation>
</npcs>