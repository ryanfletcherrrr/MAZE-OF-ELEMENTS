<npcs>
    <conversation id="1">
        <!-- First Battle (Classic Sabrina Style) -->
        <speeches id="1">
            <speech>{COLOR=PINK}Sabía que vendrías...{ENDCOLOR}</speech>
            <speech>La previsión es un don... o una maldición. He visto todas las posibilidades, pero debo probarlas todas.</speech>
            <speech>Mi nombre es {COLOR=PINK}Sabrina{ENDCOLOR}, la líder del Gimnasio Azafrán.</speech>
            <speech>Mis Pokémon de tipo psíquico ven lo que tú no ves, atacan antes de que te muevas y controlan el campo de batalla.</speech>
            <speech>Veamos si tu mente es lo bastante fuerte para resistir lo invisible.</speech>
        </speeches>
        <speeches id="2">
            <speech>...fascinante.</speech>
            <speech>Has superado mis visiones y alterado el propio destino.</speech>
            <speech>Coge esto: la {COLOR=ORO}Insignia de Marsh{ENDCOLOR}. Con ella, los Pokémon de hasta {COLOR=CYAN}Nivel 70{ENDCOLOR} te obedecerán.</speech>
            <speech>Y esta TM... {COLOR=CYAN}Fuerza Expansiva{ENDCOLOR}. Un movimiento que se fortalece cuando la mente domina el campo de batalla.</speech>
            <speech>Tal vez tú también seas capaz de alcanzar un estado superior del ser.</speech>
        </speeches>
        <speeches id="3">
            <speech>El destino ha hablado, y tú aún no estabas preparado.</speech>
            <speech>Entrena tu mente, agudiza tu conciencia y regresa cuando cambie el resultado.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ah... Dudas. La duda nubla tu mente.</speech>
            <speech>Vuelve cuando tu espíritu esté limpio, y probaré tu fuerza una vez más.</speech>
        </speeches>
        <!-- Repeated Battle (More Intense & Thematic) -->
        <speeches id="5">
            <speech>¿Así que vuelves, buscando reescribir el destino una vez más?</speech>
            <speech>Muy bien... {COLOR=CYAN}La mente no tiene límites, evoluciona más allá de lo que podemos comprender.{ENDCOLOR}</speech>
            <speech>Muéstrame si tus pensamientos han superado sus límites anteriores.</speech>
        </speeches>
        <speeches id="6">
            <speech>Curioso... Tu poder sigue creciendo.</speech>
            <speech>{COLOR=GOLD}$TOTAL_VICTORY{ENDCOLOR} victorias... y {COLOR=CYAN}$CONSECUTIVE{ENDCOLOR} sucesivamente.</speech>
            <speech>Tu presencia dobla la propia probabilidad. Debo seguir estudiando tu potencial.</speech>
        </speeches>
        <speeches id="7">
            <speech>Incluso las mentes más fuertes se enfrentan a la derrota.</speech>
            <speech>No desespere: el fracaso no es más que otra visión del futuro, una visión que aún puede cambiarse.</speech>
            <speech>Vuelve cuando tu determinación se haya fortalecido.</speech>
        </speeches>
        <speeches id="8">
            <speech>¿Aún no estás preparado? Ya veo...</speech>
            <speech>Cuando llegue el momento, da un paso al frente. Yo estaré esperando.</speech>
        </speeches>
        <speeches id="9">
            <speech>La mente debe descansar para agudizar sus sentidos.</speech>
            <speech>Vuelve en {COLOR=YELLOW}$DURATION{ENDCOLOR}, y veremos si tu voluntad se ha fortalecido.</speech>
        </speeches>
        <!-- Special Condition: Battle Requirement Not Met -->
        <speeches id="10">
            <speech>Ah... Buscas otra batalla, pero tu mente está desenfocada.</speech>
            <speech>Para volver a enfrentarte a mí, debes tener {COLOR=CYAN}al menos 3 Pokémon de tipo Psíquico{ENDCOLOR} en tu equipo.</speech>
            <speech>Cuando estés listo para desafiar al destino mismo, vuelve a mí.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Las sombras susurran en este gimnasio. Mis Psíquicos se hacen eco de sus cánticos. ¿Puedes enfrentarte al vacío?</speech>
        </speeches>
        <speeches id="2">
            <speech>¡La oscuridad retrocedió! Tu mente atravesó la mía. La llamaré de vuelta.</speech>
        </speeches>
        <speeches id="3">
            <speech>¡La oscuridad retrocedió! Tu mente atravesó la mía. La llamaré de vuelta.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡La penumbra de Sabrina me levanta! El abismo te reclama. ¡Mi maldición se mantiene fuerte!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Tus pensamientos ondean demasiado alto. Mis tipos psíquicos detectan cada defecto. ¿Puedes proteger tu mente?</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Mi visión se ha nublado! Me has nublado la concentración. Meditaré más profundamente.</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Mi visión se ha nublado! Me has nublado la concentración. Meditaré más profundamente.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Tu destino está sellado! Sabrina me enseñó bien. ¡Mi mente eclipsa la tuya!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Veo tu próximo movimiento. Mis Pokémon doblan la realidad. ¿Listo para perderte?</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Un punto ciego! Tu voluntad rompió la mía. Realinearé mi aura.</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Un punto ciego! Tu voluntad rompió la mía. Realinearé mi aura.</speech>
        </speeches>
        <speeches id="4">
            <speech>Reina la claridad. El poder de Sabrina fluye en mí. ¡Tu futuro se oscurece!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>He perfeccionado mi mente y mi equipo. El mejor alumno de Sabrina está aquí. ¿Listo para ser superado?</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Estrategia fallida! Tienes habilidad. Afilaré mi filo.</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Estrategia fallida! Tienes habilidad. Afilaré mi filo.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡La perfección se impone! El entrenamiento de Sabrina brilla. No eres rival</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Mis tipos psíquicos son impecables. He dominado el arte de Sabrina. ¿Puedes mantener el ritmo?</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Superado! Eres más listo de lo que pensaba. Me adaptaré.</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Superado! Eres más listo de lo que pensaba. Me adaptaré.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡La victoria es mía! Las lecciones de Sabrina mandan. ¡Estás un paso atrás!</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Tus miedos pulsan demasiado claro. Mis tipos psíquicos se aprovechan de la duda. ¿Puedes resistirte?</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Mi enfoque destrozado! Has enmascarado tu mente. La perforaré la próxima vez.</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Mi enfoque destrozado! Has enmascarado tu mente. La perforaré la próxima vez.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡La voluntad de Sabrina fluye a través de mí! Tus pensamientos se doblan. ¡He ganado!</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>Los espíritus atraviesan estas paredes. Mis Pokémon tejen su pavor. ¿Sientes ya su mirada?</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Un parpadeo ha roto mi trance!   Has agitado lo invisible. Lo ataré más fuerte.</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Un parpadeo ha roto mi trance!   Has agitado lo invisible. Lo ataré más fuerte.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡El éter se inclina ante mí! El poder de Sabrina alimenta mi hechizo. ¡Ahora estás marcado!</speech>
        </speeches>
    </conversation>
</npcs>