<npcs>
    <conversation id="8">
        <speeches id="1">
            <speech>¡Un enorme {COLOR=YELLOW}Snorlax{ENDCOLOR} está profundamente dormido, bloqueando el camino!</speech>
            <speech>Su respiración es lenta y profunda... No parece despertarse, hagas lo que hagas.</speech>
            <speech>Quizá haya algo que pueda despertarlo...</speech>
        </speeches>
    </conversation>

    <conversation id="1">
        <speeches id="1">
            <speech>¡Un enorme {COLOR=YELLOW}Snorlax{ENDCOLOR} está profundamente dormido, bloqueando el camino!</speech>
            <speech>Su respiración es lenta y profunda... No parece despertarse, hagas lo que hagas.</speech>
            <speech>Quizá haya algo que pueda despertarlo...</speech>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>¡Un enorme {COLOR=YELLOW}Snorlax{ENDCOLOR} está profundamente dormido, bloqueando el camino!</speech>
            <speech>Su respiración es lenta y profunda... No parece despertarse, hagas lo que hagas.</speech>
            <speech>Quizá haya algo que pueda despertarlo...</speech>
        </speeches>

        <speeches id="2">
            <speech>El {COLOR=YELLOW}Snorlax{ENDCOLOR}se agita ligeramente cuando te acercas.</speech>
            <speech>¿Quieres tocar la {COLOR=CYAN}Flauta Poké{ENDCOLOR} para intentar despertarlo?</speech>
        </speeches>

        <speeches id="3">
            <speech>Decides no tocar la {COLOR=CYAN}Flauta Poké{ENDCOLOR}.</speech>
            <speech>El {COLOR=YELLOW}Snorlax{ENDCOLOR} permanece profundamente dormido, bloqueando el camino.</speech>
        </speeches>

        <speeches id="4">
            <speech>Tocas la {COLOR=CYAN}Flauta Poké{ENDCOLOR}. Una melodía relajante llena el aire...</speech>
            <speech>El {COLOR=YELLOW}Snorlax{ENDCOLOR}se agita, ¡sus ojos parpadean abiertos!</speech>
            <speech>¡Parece {COLOR=ROJO}enfadado{ENDCOLOR}! ¡Snorlax ataca malhumorado y huye!</speech>
        </speeches>

        <completion id="5">
            <!-- This can remain empty as instructed -->
        </completion>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>¿Sabes lo que pasa cuando respiras demasiado gas Muk? Empiezas a ver doble... ¡y a perder batallas!</speech>
        </speeches>
        <speeches id="2">
            <speech>Urgh... se siente como si me hubiera tragado los vapores de Weezing..</speech>
        </speeches>
        <speeches id="3">
            <speech>Urgh... se siente como si me hubiera tragado los vapores de Weezing..</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Ese aguijón? Sí... eso es veneno asentándose. ¡Buena suerte caminando derecho!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Te estás buscando una paliza... o peor, ¡un Venoshock!</speech>
        </speeches>
        <speeches id="2">
            <speech>Uf... es como si me hubiera enredado en mi propia cadena...</speech>
        </speeches>
        <speeches id="3">
            <speech>Uf... es como si me hubiera enredado en mi propia cadena...</speech>
        </speeches>
        <speeches id="4">
            <speech>La próxima vez, trae antídotos. A menos que te guste sentirte mareado.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Espero que hayas traído calcetines extra... ¡porque mi Grimer está a punto de derretir los tuyos!</speech>
        </speeches>
        <speeches id="2">
            <speech>Bah ... tal vez mi Grimer es demasiado frío hoy.</speech>
        </speeches>
        <speeches id="3">
            <speech>Bah ... tal vez mi Grimer es demasiado frío hoy.</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Ruta 16? Es NUESTRA. ¡No vuelvas a menos que te guste perder!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Tío, le enseñé a mi Koffing a rodar como un neumático... ¡ahora es más rápida que mi moto!</speech>
        </speeches>
        <speeches id="2">
            <speech>Supongo que Koffing sigue trabajando en esos giros...</speech>
        </speeches>
        <speeches id="3">
            <speech>Supongo que Koffing sigue trabajando en esos giros...</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Sí! ¡Somos un verdadero combo tóxico! Jaja... ¿lo pillas? ¿No? Lo que sea.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Las batallas son como montar a caballo... constantes al principio, ¡y luego a toda pastilla!</speech>
        </speeches>
        <speeches id="2">
            <speech>Supongo que me equivoqué de camino... directo a la derrota.</speech>
        </speeches>
        <speeches id="3">
            <speech>Supongo que me equivoqué de camino... directo a la derrota.</speech>
        </speeches>
        <speeches id="4">
            <speech>Los tipos venenosos juegan sucio... ¡y yo juego aún más sucio!</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>Así que deseas aprender el arte del vuelo, ¿verdad? Hmph.</speech>
            <speech>Tienes el espíritu, pero no las alas, todavía no.</speech>
            <speech>Tráeme un Pidgeot. Pero no cualquier volador emplumado.</speech>
            <speech>Hablo de uno que escuche al cielo tanto como te escucha a ti. Un verdadero compañero.</speech>
            <speech>{COLOR=ORO}Nivel 100{ENDCOLOR}, {COLOR=ORO}brillante{ENDCOLOR}, y capturado por tu propia mano - sin intercambios, sin regalos.</speech>
            <speech>Debe tener una naturaleza que fluya con el viento - {COLOR=ORO}Tímido{ENDCOLOR} o {COLOR=ORO}Modesto{ENDCOLOR}.</speech>
            <speech>Entrénalo. Crea lazos con él. Que el viento conozca vuestros nombres.</speech>
            <speech>Entonces vuelve a mí. Si tu conexión es real, el cielo responderá.</speech>
        </speeches>
        <speeches id="2">
            <speech>...Esa mirada en sus ojos. Esa calma en su postura.</speech>
            <speech>Lo has conseguido. No solo has criado un Pidgeot, sino que te has besado con uno.</speech>
            <speech>Pero antes de entregarte el Pidgeotite, hay una última corriente ascendente para que montes:</speech>
            <speech>{Tendrás que conquistarme.</speech>
            <speech>¿Estás preparado para enfrentarte a la prueba final del Sky Commander?</speech>
        </speeches>
        <speeches id="3">
            <speech>Los vientos pueden esperar. Cuando estés listo para reclamar los cielos, ya sabes dónde encontrarme.</speech>
        </speeches>
        <speeches id="4">
            <speech>Bien. Pero esta batalla... no será como las otras.</speech>
            <speech>Cuando los maestros del aire se enfrentan, el aire tiembla. Vientos huracanados, caídas de presión... es peligroso para los espectadores.</speech>
            <speech>Sígueme a mi morada. Allí, podremos desatar todo nuestro poder sin miedo.</speech>
            <speech>La prueba final del Sky Commander aguarda entre esos muros.</speech>
        </speeches>
    </conversation>
</npcs>