<npcs>
    <npc direction="UP" hidden="false" id="1" name="Zoe" sprite="12" x="21" y="13">
        <speech>Pienso visitar Jvaloh algún día. Dicen que la región está llena de misterios. Me pregunto qué esconderá.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="2" name="Julia" sprite="27" x="16" y="6">
        <speech>¿No son aromáticas estas plantas?</speech>
    </npc>
    <movingNpc direction="LEFT" id="3" name="Raticate" shouldSleep="" speed="1" sprite="20" type="pokemon" x="5" y="12">
        <path>LEFTx2,RIGHTx2</path>
        <onCollisionSpeech gap="4">Ouch.. This Raticate is trying to bite me</onCollisionSpeech>
        <speech>¡Rati... Rati...!</speech>
    </movingNpc>
    <npc direction="UP" hidden="false" id="4" name="Alex" sprite="2" x="0" y="20">
        <speech>¡Hay un Raticate en el 1er piso de este PokeCentro que estaba tratando de morderme!</speech>
        <speech>Me escondo de ella.</speech>
    </npc>
    <npc direction="UP" hidden="false" id="5" name="Eugene" sprite="24" x="20" y="20">
        <speech>Me pregunto si en Jvaloh tendrán mejores Pokemon bicho que en Sinnoh.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="6" name="Noriko" sprite="39" x="14" y="16">
        <speech>Recientemente han renovado todos los PokeCentros de Sinnoh.</speech>
        <speech>Las baldosas de madera se fabrican con madera importada del pueblo de Nuzbar, en la región de Jvaloh.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="7" name="Sam" sprite="2" x="5" y="11">
        <speech>A mi hermano le dan miedo las ratas, mientras que a mí me encanta jugar con ellas.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="8" name="Ronald" sprite="5" x="19" y="10">
        <speech>Me gusta venir al PokeCentro y relajarme. ¿Quieres venir conmigo?</speech>
    </npc>
    <npc direction="UP" hidden="false" id="9" name="Danny" sprite="5" x="11" y="4">
        <speech>Hace mucho tiempo, en la región de Jvaloh, muchos entrenadores usaban el Pokemon 'Cloyster' en sus Desafíos de Gimnasio...</speech>
        <speech>Tenía la ventaja única de usar la Habilidad Enlace, que combinada con una buena naturaleza, le permitía ser un golpeador rápido y contundente...</speech>
        <speech>Si lo sabes, entonces sabes...</speech>
		<speech>¡Oh! Te gusta mi Cloyster ¿eh? ¡Consíguete la tuya!</speech>
		<speech>*refunfuña audiblemente sobre niños y cloysters*</speech>
    </npc>
    <movingNpc direction="DOWN" id="10" name="Cloyster" shouldSleep="" speed="1" sprite="91" type="pokemon" x="12" y="3">
        <path>DOWNx1, UPx1</path>
        <onCollisionSpeech gap="4">*Cloyster winks at you*</onCollisionSpeech>
        <speech>¡Clooooyster!</speech>
    </movingNpc>

    <conversation id="8">
        <speeches id="1">
            <speech>¿Quiere canjear sus Fichas de Fondo de Comercio por artículos?</speech>
        </speeches>
        <speeches id="2">
            <speech>Sin problemas. Vuelve otra vez si cambias de opinión.</speech>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="9">
        <speeches id="1">
            <speech>{COLOR=YELLOW}¡Saludos, $PLAYER_NAME! ¡Ha llegado el momento de probar tus mejores dragones!{ENDCOLOR}</speech>
            <speech>Preséntame {COLOR=CYAN}hasta 5 Bagon, Cyclizar o Dratini capturados por ti mismo{ENDCOLOR}, y juzgaré su potencial.</speech>
            <speech>¡El {COLOR=GOLD}más fuerte, más impecable{ENDCOLOR} entre ellos ganará!</speech>
            <speech>¿Tienes lo necesario para reclamar el premio?</speech>
        </speeches>

        <speeches id="2">
            <speech>{COLOR=RED}¡La competencia ha concluido!{ENDCOLOR}</speech>
            <speech>Todas las puntuaciones han sido registradas, y el dragón más poderoso ha sido coronado.</speech>
            <speech>¡Vuelve la próxima vez para poner a prueba tu destreza una vez más!</speech>
        </speeches>

        <speeches id="3">
            <speech>{COLOR=YELLOW}¡Un contratiempo, $PLAYER_NAME!{ENDCOLOR}</speech>
            <speech>No tienes {COLOR=CYAN}suficientes Bagon, Cyclizar o Dratini capturados por ti mismo{ENDCOLOR} para que pueda juzgarlos.</speech>
            <speech>Busca más y regresa cuando estés listo.</speech>
        </speeches>

        <speeches id="4">
            <speech>{COLOR=GREEN}¡Has alcanzado el máximo de 5 inscripciones!{ENDCOLOR}</speech>
            <speech>Si deseas cambiar tus entradas, puedes restablecer tus selecciones.</speech>
        </speeches>

        <speeches id="5">
            <speech>{COLOR=RED}¡Este no califica!{ENDCOLOR}</speech>
            <speech>Tu inscripción carece de la {COLOR=GOLD}fuerza y potencial impecables{ENDCOLOR} que buscamos.</speech>
            <speech>¡Solo los mejores serán considerados: tráeme ejemplares más fuertes!</speech>
        </speeches>

        <speeches id="6">
            <speech>{COLOR=CYAN}¡Una inscripción digna!{ENDCOLOR}</speech>
            <speech>Los jueces han reconocido tu Pokémon.</speech>
            <speech>¡Ahora tienes la oportunidad de reclamar el {COLOR=RED}primer lugar!{ENDCOLOR}</speech>
        </speeches>

        <speeches id="7">
            <speech>{COLOR=PURPLE}Tus inscripciones anteriores han sido restablecidas.{ENDCOLOR}</speech>
            <speech>El camino está abierto para nuevos contendientes. ¡Elige con sabiduría esta vez!</speech>
        </speeches>

        <speeches id="8">
            <speech>{COLOR=YELLOW}¿Realmente deseas restablecer tus inscripciones, $PLAYER_NAME?{ENDCOLOR}</speech>
            <speech>Esto borrará todas las entradas anteriores, permitiendo que nuevos contendientes sean juzgados.</speech>
            <speech>Pero una vez hecho, no podrá deshacerse. ¿Estás seguro?</speech>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="10">
        <speeches id="1">
            <speech>{COLOR=YELLOW}¡Ah, $PLAYER_NAME! Busco los dragones más... desafortunados.{ENDCOLOR}</speech>
            <speech>Preséntame {COLOR=CYAN}hasta 5 Bagon, Cyclizar o Dratini capturados por ti mismo{ENDCOLOR}, y los juzgaré de la manera más poco convencional.</speech>
            <speech>¡El {COLOR=RED}menos dotado, más mediocre{ENDCOLOR} entre ellos recibirá un premio especial para su entrenador!</speech>
            <speech>¿Te atreves a participar en este inusual concurso?</speech>
        </speeches>

        <speeches id="2">
            <speech>{COLOR=RED}¡La competencia ha terminado!{ENDCOLOR}</speech>
            <speech>El dragón más... mediocre ha sido elegido, y los resultados son definitivos.</speech>
            <speech>Regresa la próxima vez para otra oportunidad de victoria.</speech>
        </speeches>

        <speeches id="3">
            <speech>{COLOR=YELLOW}Hmm, algo falta, $PLAYER_NAME.{ENDCOLOR}</speech>
            <speech>Aún no tienes {COLOR=CYAN}suficientes Bagon, Cyclizar o Dratini capturados por ti mismo{ENDCOLOR} para que pueda juzgarlos.</speech>
            <speech>Aventúrate y trae más candidatos.</speech>
        </speeches>

        <speeches id="4">
            <speech>{COLOR=GREEN}¡Has alcanzado el máximo de 5 inscripciones!{ENDCOLOR}</speech>
            <speech>Si deseas reconsiderar tus elecciones, puedes restablecer tus inscripciones.</speech>
            <speech>¡Pero recuerda, solo el más débil obtendrá el premio!</speech>
        </speeches>

        <speeches id="5">
            <speech>{COLOR=RED}¡Este es demasiado impresionante!{ENDCOLOR}</speech>
            <speech>¡Tu Pokémon tiene {COLOR=GOLD}demasiado potencial y habilidad!{ENDCOLOR}</speech>
            <speech>Solo los {COLOR=YELLOW}más desafortunados{ENDCOLOR} especímenes serán aceptados aquí.</speech>
        </speeches>

        <speeches id="6">
            <speech>{COLOR=CYAN}Sí, sí... ¡esto servirá!{ENDCOLOR}</speech>
            <speech>Tu Pokémon ha sido considerado suficientemente sin talento.</speech>
            <speech>Estás un paso más cerca de convertirte en el maestro.</speech>
        </speeches>

        <speeches id="7">
            <speech>{COLOR=PURPLE}Tus inscripciones anteriores han sido borradas.{ENDCOLOR}</speech>
            <speech>El escenario está listo para nuevos candidatos, o mejor dicho, los sin esperanza. Elige tus inscripciones con sabiduría.</speech>
        </speeches>

        <speeches id="8">
            <speech>{COLOR=YELLOW}¿Estás seguro de que deseas restablecer tus inscripciones, $PLAYER_NAME?{ENDCOLOR}</speech>
            <speech>Esto borrará todas las entradas anteriores, permitiendo que nuevos contendientes sean juzgados.</speech>
            <speech>Una vez hecho, no podrá revertirse. Procede con precaución.</speech>
        </speeches>
    </conversation>
</npcs>