<npc>

    <conversation id="1">
        <speeches id="1">
            <speech>Tus Pokémon parecen cansados. ¿Quieres que los cure?</speech>
        </speeches>
        <speeches id="2">
            <speech>Ya está, todos sanos y felices.</speech>
        </speeches>
        <speeches id="3">
            <speech>Seguro que les hubiera gustado descansar.</speech>
        </speeches>
        <speeches id="4">
            <speech>Oh, sólo puedo curar a tu Pokémon si tienes la membresía PBO. Puedes comprar una en la tienda de donantes.</speech>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>¡¡Dragonite......!!</speech>
        </speeches>
        <speeches id="2">
            <speech>Dragon.. ¡¡¡Drag Drag ..!!!</speech>
        </speeches>
        <speeches id="3">
            <speech>*Dragoniteeeee*.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Dragón! ¡¡Drago Nite!!</speech>
        </speeches>
        <speeches id="5">
            <speech>*Dragonite no parece reconocerte todavía*.</speech>
        </speeches>
    </conversation>

    <conversation id="7">
        <speeches id="1">
            <speech>¿Tú otra vez? Llegas un poco tarde.</speech>
            <speech>¿No ves que mi Isis está conmigo otra vez?</speech>
            <speech>No dejaré que arruines mi momento.</speech>
            <speech>Horus, acaba con este mocoso de una vez por todas.</speech>
            <speech>Necesito alejar a mi querida Isis de su mascota Rayquaza porque está fuera de control.</speech>
        </speeches>
        <speeches id="2">
            <speech>¿Así es como me pagas?</speech>
            <speech>Sois mi peor error, y ahora sufriréis juntos como una familia.</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Ja, ja, ja! Te recogí de la basura y te hice lo que eres.</speech>
            <speech>No hay nada especial en ti o en tu familia. Déjame mostrarte quién soy.</speech>
            <speech>¡Muy bien chico, vamos!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Has ganado contra mí! Pero no me importa porque ahora tengo a mi mujer conmigo.</speech>
            <speech>Isis mi amor, vamos.</speech>
        </speeches>
        <speeches id="5">
            <speech>Ella no parece estar en su sentido ahora.</speech>
            <speech>Supongo que Ho-Oh es mejor resucitando Pokémon que humanos, pero querré a mi mujer de todos modos.</speech>
            <speech>Ahora salgamos de aquí Isis... iremos a un lugar donde nunca nos encontrarán y esto está a punto de explotar.</speech>
        </speeches>
    </conversation>

    <conversation id="14">
        <speeches id="1">
            <speech>No, estoy agradecido por todo lo que has hecho por mí.</speech>
            <speech>Pero esto está yendo demasiado lejos, y van a destrozar este lugar si no hacemos algo.</speech>
            <speech>$PLAYER_NAME, por favor lucha contra Osiris mientras yo libero a Suicune, Raikou y Entei.</speech>
        </speeches>
        <speeches id="2">
            <speech>Buena suerte con eso Osiris.</speech>
            <speech>Soy el hermano de $PLAYER_NAME, y sé que $GENDER_HE_SHE podrá cuidar de ti sola.</speech>
        </speeches>
    </conversation>

    <conversation id="15">
        <speeches id="1">
            <speech>Grrr... Grrr...</speech>
        </speeches>
        <speeches id="2">
            <speech>Grrr... Grrr...</speech>
        </speeches>
    </conversation>

    <conversation id="16">
        <speeches id="1">
            <speech>$PLAYER_NAME. Sé que no pudimos detener del todo a Osiris, pero esa batalla fue intensa.</speech>
            <speech>Nunca hubiera aceptado que mi verdadero $BROTHER_SISTER fuera tan fuerte.</speech>
            <speech>Aparte de eso, la torre está a punto de derrumbarse.</speech>
            <speech>Ho-Oh no es capaz de sostenerse contra ese Rayquaza.</speech>
            <speech>Tenemos que derrotar a ese Rayquaza antes de que destruya todo, incluido Ho-Oh.</speech>
            <speech>Sí, iré a ayudar a despejar la Torre del Dragón, mientras tanto cuento contigo para derrotar a ese Rayquaza.</speech>
            <speech>Te veré fuera.</speech>
        </speeches>
    </conversation>

    <conversation id="17">
        <speeches id="1">
            <speech>QUAAAAAAA..........</speech>
        </speeches>
        <speeches id="2">
            <speech>QUAAAAAAA..........</speech>
        </speeches>
        <speeches id="3">
            <speech>QUAAAAAAA..........</speech>
        </speeches>
    </conversation>

    <conversation id="18">
        <speeches id="1">
            <speech>En la cima de la Torre del Dragón, donde solo los valientes se atreven a escalar. Ciertamente has ganado mi respeto.</speech>
            <speech>Mi Altaria se eleva, dominando los cielos. Veamos si tu equipo puede igualar las alturas que hemos alcanzado.</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Derrotado de nuevo! Tu maestría de los dragones, incluyendo Kingdra y Altaria, es verdaderamente notable.</speech>
            <speech>Pero el viaje de un Maestro Dragón nunca termina. Hay un desafío más que tengo para ti.</speech>
            <speech>Tu victoria alcanza tan alto como las nubes. Esta batalla será un viento guía para tus futuros desafíos.</speech>
            <speech>Encuéntrame donde los meteoritos tocan la tierra, y el rugido de los dragones resuena a través de las cascadas. Nuestra prueba final te espera.</speech>
        </speeches>
        <speeches id="3">
            <speech>¿Retrocediendo? Las lecciones del viento son duras, pero necesarias. Regresa cuando estés listo para volar.</speech>
            <speech>Tu Kingdra y Altaria deben ser uno con el viento. Eso es cuando realmente comprenderás.</speech>
        </speeches>
        <speeches id="4">
            <speech>Los vientos susurran cuentos de fuerza sin probar. Tu viaje con nosotros aún no ha terminado.</speech>
            <speech>Cuando estés listo, regresa a estas alturas, donde los espíritus de los dragones se elevan, y desafíanos de nuevo.</speech>
        </speeches>

        <speeches id="5">
            <speech>Para conquistar los cielos, un vínculo con tu Altaria y Kingdra es esencial. Aún un aliado más espera para completar nuestro cuento.</speech>
            <speech>Busca el lugar donde la tierra se encuentra con los cielos, y el grito de los dragones resuena. Solo entonces tu prueba estará completa.</speech>
        </speeches>
    </conversation>

</npc>