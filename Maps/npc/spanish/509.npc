<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Soy una principiante, ¡pero lo haré lo mejor que pueda! Daré todo lo que pueda. ¡Mírame!</speech>
        </speeches>
        <speeches id="2">
            <speech>Perdona si te he aburrido. Me esforzaré más la próxima vez.</speech>
        </speeches>
        <speeches id="3">
            <speech>Perdona si te he aburrido. Me esforzaré más la próxima vez.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Oh! ¡Olvidé terminar nuestra batalla! Todavía tengo que estudiar más...</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>No bajes la guardia, o puede que te pongas a llorar cuando un niño te pegue.</speech>
        </speeches>
        <speeches id="2">
            <speech>Puede que sea joven, pero eso no significa que vaya a perder, ni siquiera ante un adulto.</speech>
        </speeches>
        <speeches id="3">
            <speech>Puede que sea joven, pero eso no significa que vaya a perder, ni siquiera ante un adulto.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Caramba! ¡No puedes ver que sólo soy un niño! ¡No fue justo que te pusieras así!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Las minifaldas son increíbles, ¿verdad?</speech>
        </speeches>
        <speeches id="2">
            <speech>Hay que disfrutar de una moda mientras se pueda, ¿no?</speech>
        </speeches>
        <speeches id="3">
            <speech>Hay que disfrutar de una moda mientras se pueda, ¿no?</speech>
        </speeches>
        <speeches id="4">
            <speech>Son fáciles de llevar y monos. Cualquier cosa menos una minifalda sería increíble, ¿verdad?</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>¡Me alegro de que lo consiguieras! No será un trabajo fácil a partir de ahora.</speech>
        </speeches>
        <speeches id="2">
            <speech>Antes me he dejado llevar un poco, pero ¿de qué trabajo estaba hablando?</speech>
        </speeches>
        <speeches id="3">
            <speech>Antes me he dejado llevar un poco, pero ¿de qué trabajo estaba hablando?</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Jajaja! ¿Qué te dije? Todavía no estás listo.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Uhnn... ¿Qué es este lugar? ¡No tiene el aroma de un cuento de hadas en absoluto!</speech>
        </speeches>
        <speeches id="2">
            <speech>Necesito salir de este lugar. ¡Mi cuento de hadas va a desaparecer!</speech>
        </speeches>
        <speeches id="3">
            <speech>Necesito salir de este lugar. ¡Mi cuento de hadas va a desaparecer!</speech>
        </speeches>
        <speeches id="4">
            <speech>No, no, eso no servirá, no servirá en absoluto. Cuando estoy en problemas, me siento más lejos de hadas
                de hadas.
            </speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Mi última batalla... Así es como me gustaría que viéramos este combate...</speech>
        </speeches>
        <speeches id="2">
            <speech>Ha sido divertido... Tengamos otra última batalla algún día...</speech>
        </speeches>
        <speeches id="3">
            <speech>Ha sido divertido... Tengamos otra última batalla algún día...</speech>
        </speeches>
        <speeches id="4">
            <speech>Nos volveremos a ver algún día... Je. Si eso fuera verdad...</speech>
        </speeches>
    </conversation>
    <movingNpc direction="LEFT" id="1" name="Ralts" shouldSleep="" speed="1" sprite="280" type="pokemon" x="13" y="45">
        <path>LEFTx1, RIGHTx1</path>
        <onCollisionSpeech gap="4">Ra Ra</onCollisionSpeech>
        <speech>¡¡¡Ralts te está rastreando!!!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Budew" shouldSleep="" speed="1" sprite="406" type="pokemon" x="12" y="49">
        <path>LEFTx1, RIGHTx1</path>
        <onCollisionSpeech gap="4">Bu! Bude! Bu!</onCollisionSpeech>
        <speech>¡¡¡¡Buuuuuuudew!!!!</speech>
    </movingNpc>
<!--
    <movingNpc direction="DOWN" id="3" name="Lotad" shouldSleep="" speed="1" sprite="270" type="pokemon" x="19" y="47">
        <path>DOWNx1, UPx1</path>
        <onCollisionSpeech gap="4">Looootad!</onCollisionSpeech>
        <speech>*Lotad uses Water Gun*</speech>
        <speech>$PLAYER_NAME you better change your T-Shirt!!!!</speech>
    </movingNpc>
-->
    <movingNpc direction="RIGHT" id="5" name="Roselia" shouldSleep="" speed="1" sprite="315" type="pokemon" x="6" y="35">
        <path>RIGHTx2, LEFTx2</path>
        <onCollisionSpeech gap="4">Roselia...Roselia...!</onCollisionSpeech>
        <speech>¡Roseeelia!</speech>
    </movingNpc>
    <movingNpc direction="LEFT" id="6" name="Minun" shouldSleep="" speed="1" sprite="312" type="pokemon" x="21" y="9">
        <path>LEFTx1, RIGHTx1</path>
        <onCollisionSpeech gap="4">Minun!</onCollisionSpeech>
        <speech>¡Mi-Mi-Mi!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="7" name="Plusle" shouldSleep="" speed="1" sprite="311" type="pokemon" x="24" y="7">
        <path>DOWNx1, UPx1</path>
        <onCollisionSpeech gap="4">Plusle!</onCollisionSpeech>
        <speech>¡Plusle....Plusle!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="8" name="Robby" shouldSleep="" speed="1" sprite="4" type="npc" x="12" y="17">
        <path>DOWNx1, UPx1</path>
        <onCollisionSpeech gap="4">Yaaaay!!!</onCollisionSpeech>
        <speech>¡Conseguí vencer a Roark con mi Psyduck!</speech>
        <speech>Sin embargo, si no me hubiera dejado aconsejar por ese tipo llamado Tom, ¡no habría podido hacerlo!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="9" name="Psyduck" shouldSleep="" speed="1" sprite="54" type="pokemon" x="26" y="70">
        <path>UPx3, DOWNx3</path>
        <onCollisionSpeech gap="4">Psyduck</onCollisionSpeech>
        <speech>¡Psyduck te da dolor de cabeza!</speech>
    </movingNpc>
    <conversation id="9">
        <speeches id="2">
            <speech>Hola! Soy un payaso de la campaña Tutorial PBO. ¡Vamos a lanzar mi pregunta!</speech>
            <speech>¿Se pueden asignar VE manualmente en PBO?</speech>
        </speeches>
        <speeches id="3">
            <speech>Esa no es la respuesta correcta. Intentémoslo de nuevo.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Ding-ding!</speech>
            <speech>Tienes toda la razón.</speech>
            <speech>¡Abre tu Menú Pokemon, haz clic en EV y lo encontrarás allí!</speech>
        </speeches>
        <speeches id="5">
            <speech>¡Aquí tiene! ¡Por favor, acepta esta Baya de Pomelo!</speech>
            <speech>Reduce los PV de un Pokémon en 10 EV.</speech>
        </speeches>
    </conversation>
</npcs>