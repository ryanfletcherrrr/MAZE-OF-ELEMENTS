<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>¿Quién eres y qué hace aquí un chico como tú?</speech>
        </speeches>
        <speeches id="2">
            <speech>Urgh ...</speech>
        </speeches>
        <speeches id="3">
            <speech>Vete antes de que salgas gravemente herido.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ohh, así que has venido aquí para que te pateen el culo.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>¿Qué estamos haciendo aquí? ¡No es asunto tuyo!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Hmph!</speech>
        </speeches>
        <speeches id="3">
            <speech>Aquí no te quieren.</speech>
        </speeches>
        <speeches id="4">
            <speech>Te dije que no es asunto tuyo.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Estamos ocupados aquí, así que vete.</speech>
            <speech>¿No quieres? ¡Entonces supongo que te obligaré!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Maldita sea!</speech>
        </speeches>
        <speeches id="3">
            <speech>¿Por qué tienes que ser tan pesado?</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Ahora huye!</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
   <!-- <conversation id="5">
        <speeches id="1">
            <speech>This may seem like rubble and ruins to you, but to me it doesn't.</speech>
            <speech>It is quitessential to study what's happened in the past, to prevent failures in the future.</speech>
            <speech>We must cherish the past, while looking to the future.</speech>
            <speech>Is there something else I can help you with, young trainer?</speech>
            <speech>*$PLAYER_NAME explains what happened*</speech>
            <speech>Oh, is that so?</speech>
            <speech>Nothing would make me more happy than giving my special prayer bead to you, $PLAYER_NAME...</speech>
            <speech>But I cannot do so. An ill-meaning stranger stole the bead from me and ran off.</speech>
            <speech>I believe if you thoroughly search the vicinity, you'll find him deeper in the cave. </speech>
            <speech>Would you be so kind as to retreive the special prayer bead, $PLAYER_NAME?</speech>
        </speeches>
        <speeches id="2">
            <speech>By Ho-Oh, you found it! Marvelous, young trainer!</speech>
            <speech>Can you please bring this bead to Head Monk Xha Le?</speech>
        </speeches>
    </conversation>-->
    <conversation id="5">
        <speeches id="1">
            <speech>Así que tú eres el chico que devolvió el equilibrio a Jvaloh...</speech>
            <speech>Bastante joven debo decir...</speech>
            <speech>De todos modos, he meditado durante 50 años de mi vida para poder hablar telepáticamente con Raikou.</speech>
            <speech>Lo hice para poder proteger a Jvaloh de cualquier peligro invisible. Y mira cómo fue</speech>
            <speech>¿Quieres cuidar del Raikou? Hmm, después de lo que pasó en Jvaloh creo que a Raikou no le importará un maestro.</speech>
            <speech>Pero para invocarlo para ti, necesito probar tu fuerza.</speech>
            <speech>¡Vénceme y convocaré a Raikou para ti!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Hazte a un lado!</speech>
            <speech>...</speech>
            <speech>Raikou ha aparecido en Jvaloh.</speech>
            <speech>¡Buena suerte, entrenador!</speech>
        </speeches>
        <speeches id="3">
            <speech>No demasiado pronto, chico. Me lleva tiempo reunir energía para comunicarme telepáticamente.</speech>
            <speech>Vuelve después de $DAYS.</speech>
        </speeches>
        <speeches id="4">
            <speech>Necesitas entrenar más. Vuelve cuando estés preparado.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
</npcs>