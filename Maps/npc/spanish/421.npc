<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>¡Levamos anclas cuando quieras! Dime, amigo mío, ¿a dónde nos dirigimos?</speech>
        </speeches>
        <speeches id="2">
            <speech>¿Estás seguro? Bueno, Peeko te debe la vida.</speech>
            <speech>Dímelo cuando quieras zarpar. Me enfrentaré a cualquier marea por ti.</speech>
        </speeches>
    </conversation>
    <npc direction="DOWN" hidden="false" id="2" name="Nina" randomRotation="true" sprite="53" x="45" y="10">
        <speech>Los niños pequeños pueden correr muy rápido.</speech>
        <speech>No te atreves a quitarles los ojos de encima ni un instante. Es muy agotador.</speech>
        <speech>Supongo que no debería preocuparme ya que el mío está con su pokemon guardián , pero nunca se sabe....</speech>
    </npc>
    <movingNpc direction="DOWN" id="3" name="Trapinch" speed="1" sprite="328" type="pokemon" x="59" y="11">
        <path>DOWNx2,RIGHTx2,LEFTx2,UPx2</path>
        <onCollisionSpeech gap="4">Trapin,pinch!</onCollisionSpeech>
        <speech>Trapinch parece concentrado en su tarea de crear un enorme castillo de arena.</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="5" name="Aaricia" randomRotation="true" sprite="6" x="66" y="42">
        <speech>¿De qué se trata?</speech>
        <speech>¿No puede una chica tomar el sol en paz?</speech>
        <speech>¡Consigue tu propia isla!</speech>
    </npc>
    <movingNpc direction="DOWN" id="6" name="Corphish" shouldSleep="" speed="1" sprite="341" type="pokemon" x="50" y="34">
        <path>RIGHTx7,UPx5,RIGHTx5,LEFTx5,DOWNx5,LEFTx7</path>
        <onCollisionSpeech gap="4">Cor, Phish?</onCollisionSpeech>
        <speech>¡Phish PHISH!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="7" name="Corphish" shouldSleep="" speed="1" sprite="341" type="pokemon" x="31" y="21">
        <path>DOWNx6,RIGHTx5,DOWNx5,UPx5,LEFTx5,UPx6</path>
        <onCollisionSpeech gap="4">Cor. Phish! Cor. Phish!</onCollisionSpeech>
        <speech>¡Cor! ¡Phish!</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="8" name="Richard" randomRotation="true" sprite="48" x="29" y="5">
        <speech>Estoy empezando a pensar que no fue mi idea más brillante para llevar el almuerzo a la playa cuando está lleno de Wingull....</speech>
    </npc>
    <movingNpc direction="DOWN" id="9" name="Wingull" speed="1" sprite="278" type="pokemon" x="26" y="7">
        <path>RIGHTx5,UPx4,LEFTx5,DOWNx4</path>
        <onCollisionSpeech gap="4">Wingull!</onCollisionSpeech>
        <speech>Wingull parece muy interesado en la comida que Richard intenta esconder...</speech>
        <speech>también lo son sus amigos.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="10" name="Wingull" speed="1" sprite="278" type="pokemon" x="31" y="7">
        <path>UPx4,LEFTx5,DOWNx4,RIGHTx5</path>
        <onCollisionSpeech gap="4">Wingull!</onCollisionSpeech>
        <speech>Wingull parece muy interesado en la comida que Richard intenta esconder...</speech>
        <speech>también lo son sus amigos.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="11" name="Wingull" speed="1" sprite="278" type="pokemon" x="31" y="3">
        <path>LEFTx5,DOWNx4,RIGHTx5,UPx4</path>
        <onCollisionSpeech gap="4"/>
        <speech>Wingull parece muy interesado en la comida que Richard intenta esconder...</speech>
        <speech>también lo son sus amigos.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="12" name="Wingull" speed="1" sprite="278" type="pokemon" x="26" y="3">
        <path>DOWNx4,RIGHTx5,UPx4,LEFTx5</path>
        <onCollisionSpeech gap="4">Wingull!!</onCollisionSpeech>
        <speech>Wingull parece muy interesado en la comida que Richard intenta esconder...</speech>
        <speech>también lo son sus amigos.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="13" name="Tentacool" shouldSleep="" speed="1" sprite="72" type="pokemon" x="19" y="30">
        <path>DOWNx8,UPx8</path>
        <onCollisionSpeech gap="4">tacool, tentatenta ^^</onCollisionSpeech>
        <speech>Tentacool está flotando en las olas.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="14" name="Staryu" speed="1" sprite="120" type="pokemon" x="35" y="55">
        <path>RIGHTx15,LEFTx15</path>
        <onCollisionSpeech gap="4">Sta!</onCollisionSpeech>
        <speech>¡Staryu!</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="15" name="Robinson" randomRotation="true" sprite="48" x="19" y="56">
        <speech>¿Cómo he llegado hasta aquí?</speech>
        <speech>¿Dónde está mi amigo?</speech>
        <speech>¡¡¡¡¡WILSON!!!!! ¡WIIIIIIILSSOOOOON!</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="16" name="Collector Aaron" randomRotation="true" sprite="37" x="27" y="76">
        <speech>Estas conchas son mías.</speech>
        <speech>¡Largo!</speech>
    </npc>
    <movingNpc direction="DOWN" id="17" name="Wailmer" speed="1" sprite="320" type="pokemon" x="36" y="76">
        <path>RIGHTx15,DOWNx4,LEFTx15,UPx4</path>
        <onCollisionSpeech gap="4">Wailmer!</onCollisionSpeech>
        <speech>Wailmer parece sorprendido de que hayas podido alcanzarlo</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="18" name="Hugo" randomRotation="true" sprite="16" x="58" y="69">
        <speech>Parece que terminé en la isla Corphish.</speech>
        <speech>Son muchos.</speech>
    </npc>
    <movingNpc direction="DOWN" id="19" name="Corphish" speed="1" sprite="341" type="pokemon" x="55" y="66">
        <path>RIGHTx4,UPx4,RIGHTx2,UPx2,RIGHTx7,DOWNx2,RIGHTx2,DOWNx6,LEFTx2,DOWNx6,LEFTx13,UPx8</path>
        <onCollisionSpeech gap="4">Corphish!</onCollisionSpeech>
        <speech>Corphish disfruta paseando por la arena</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="20" name="Artist Monica" randomRotation="true" sprite="28" x="66" y="64">
        <speech>Tantos Corphish todos haciendo cosas diferentes...</speech>
        <speech>No sé cuál debería ser el tema de mi cuadro.</speech>
    </npc>
    <movingNpc direction="DOWN" id="21" name="Corphish" shouldSleep="" speed="1" sprite="341" type="pokemon" x="70" y="70">
        <path>LEFTx1,DOWNx1,RIGHTx1,UPx1</path>
        <onCollisionSpeech gap="4">Cor-corphish</onCollisionSpeech>
        <speech>Corphish está jugando en un charquito.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="22" name="Corphish" shouldSleep="" speed="1" sprite="341" type="pokemon" x="62" y="67">
        <path>RIGHTx2,DOWNx2,LEFTx2,UPx2</path>
        <onCollisionSpeech gap="4">Cooooorrrr! Phish!</onCollisionSpeech>
        <speech>Corphish está tratando de desenterrar esta cáscara.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="23" name="Corphish" speed="1" sprite="341" type="pokemon" x="70" y="68">
        <path>LEFTx2,DOWNx6,LEFTx13,UPx8,RIGHTx4,UPx4,RIGHTx2,UPx2,RIGHTx7,DOWNx2,RIGHTx2,DOWNx6</path>
        <onCollisionSpeech gap="4">Phish!</onCollisionSpeech>
        <speech>A Corphish le gusta caminar por la arena.</speech>
    </movingNpc>
    <conversation id="2">
        <speeches id="1">
            <speech>¡La experiencia engendra poder! ¡¿No es eso lo que dicen?! De todos modos, ¿no vas a luchar conmigo?</speech>
        </speeches>
        <speeches id="2">
            <speech>Esta batalla fue una experiencia valiosa. ¡Todavía tengo que ganar más experiencia!</speech>
        </speeches>
        <speeches id="3">
            <speech>Esta batalla fue una experiencia valiosa. ¡Todavía tengo que ganar más experiencia!</speech>
        </speeches>
        <speeches id="4">
            <speech>Incluso un aficionado como yo puede ganar. Dicen que la experiencia es la mejor maestra.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>¡Soy la heroína de la justicia! ¡Misteriosa y malvada persona! ¡Te ahuyentaré!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Vaya! ¡El mundo está cayendo en manos del mal! ¿Nos dirigimos hacia un final infeliz?</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Vaya! ¡El mundo está cayendo en manos del mal! ¿Nos dirigimos hacia un final infeliz?</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Eh? Me tomé la molestia de derribarte, ¡pero no explotaste como en la tele!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Estoy harta de que me llamen Bella.</speech>
        </speeches>
        <speeches id="2">
            <speech>Hay que hacer muchos sacrificios para ser una Belleza. He terminado con ese esfuerzo. ¡Adelante!</speech>
        </speeches>
        <speeches id="3">
            <speech>Hay que hacer muchos sacrificios para ser una Belleza. He terminado con ese esfuerzo. ¡Adelante!</speech>
        </speeches>
        <speeches id="4">
            <speech>Cuando la gente me llama Belleza, no se dan cuenta de la presión que eso supone para mí.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>¡Este viaje no tiene límites! ¡¿Dónde está mi aventura?!</speech>
        </speeches>
        <speeches id="2">
            <speech>Sniff, sniff... Esto no es bueno... No puedo oler el perfume del amor. ¡Adiós!</speech>
        </speeches>
        <speeches id="3">
            <speech>Sniff, sniff... Esto no es bueno... No puedo oler el perfume del amor. ¡Adiós!</speech>
        </speeches>
        <speeches id="4">
            <speech>El viaje no ha terminado. ¡Sólo tienes que esperar! Te mostraré la mayor aventura de la historia.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>He entrenado y entrenado sin parar, ¡así que ahora soy rápido como el viento!</speech>
        </speeches>
        <speeches id="2">
            <speech>Apuesto a que los chicos que saben surfear consiguen más chicas que los chicos en patines. Ojalá pudiera surfear...</speech>
        </speeches>
        <speeches id="3">
            <speech>Apuesto a que los chicos que saben surfear consiguen más chicas que los chicos en patines. Ojalá pudiera surfear...</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Ay! ¡Ay! ¡Ay! ¡Mi cara! ¡Soy el niño del poster de las quemaduras por el viento!</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>No es un uniforme, es lo que me gusta llevar. Lo hice yo mismo.</speech>
        </speeches>
        <speeches id="2">
            <speech>Whoa, eso estuvo cerca. Casi me ensucio la ropa.</speech>
        </speeches>
        <speeches id="3">
            <speech>Whoa, eso estuvo cerca. Casi me ensucio la ropa.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ojalá pudiera vivir en los mundos que veo en los juegos, el anime y los cómics.</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>Aunque la gente te llame As de la formación, no es que te den nada especial por ello.</speech>
        </speeches>
        <speeches id="2">
            <speech>Al final, ser bueno luchando solo no es suficiente, por muy fuerte que seas.</speech>
        </speeches>
        <speeches id="3">
            <speech>Al final, ser bueno luchando solo no es suficiente, por muy fuerte que seas.</speech>
        </speeches>
        <speeches id="4">
            <speech>Sólo soy bueno batallando. Ni siquiera tengo trabajo. Sólo soy otro desempleado.</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>La verdad es que no se me dan muy bien las batallas Pokémon... Sin embargo, cuando pienso en mi futuro, ¡parece que no tengo más remedio que luchar!</speech>
        </speeches>
        <speeches id="2">
            <speech>Verás... Sabía que no podía ganar. No estoy hecho para la competición.</speech>
        </speeches>
        <speeches id="3">
            <speech>Verás... Sabía que no podía ganar. No estoy hecho para la competición.</speech>
        </speeches>
        <speeches id="4">
            <speech>Odio decir esto, pero si ni siquiera puedes vencerme, el resto del camino va a ser muy duro.</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>¡Tengo cuatro años! Lo haré lo mejor que pueda. Entrenador, ¡tú también deberías hacerlo lo mejor que puedas!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Vaya! ¡Es lo que esperaba de un entrenador experimentado! ¡Fuerte!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Vaya! ¡Es lo que esperaba de un entrenador experimentado! ¡Fuerte!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Tengo cuatro años! Lo he hecho lo mejor que he podido. Entrenador, ¡tú también lo hiciste lo mejor que pudiste!</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>Los precios en esta región son realmente increíbles, ¿verdad?</speech>
        </speeches>
        <speeches id="2">
            <speech>Podría vivir la gran vida en un país donde todo cuesta tan poco.</speech>
        </speeches>
        <speeches id="3">
            <speech>Podría vivir la gran vida en un país donde todo cuesta tan poco.</speech>
        </speeches>
        <speeches id="4">
            <speech>No podría vivir en un país donde todo cuesta tanto.</speech>
        </speeches>
    </conversation>
    <conversation id="12">
        <speeches id="1">
            <speech>Estoy cansado de servir a mi jefe. ¡Tú! ¡Sírveme ahora!</speech>
        </speeches>
        <speeches id="2">
            <speech>Servir a la gente es duro. No puedes elegir a tu jefe, así que es estresante.</speech>
        </speeches>
        <speeches id="3">
            <speech>Servir a la gente es duro. No puedes elegir a tu jefe, así que es estresante.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Muy bien! A partir de ahora soy tu jefe.</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Samuel" shouldSleep="" speed="1" sprite="71" type="npc" x="48" y="23">
        <path>RIGHTx8,DOWNx3,LEFTx8,UPx3</path>
        <onCollisionSpeech gap="4">ouch that hurts!</onCollisionSpeech>
        <speech>¡Hola! ¿Quieres ver a mis amigos Pokémon?</speech>
        <speech>Tengo un Zigzagoon superveloz y un Wingull volador. Son mis mejores amigos.</speech>
        <speech>Quiero atrapar un Pokémon súper raro, como un Corphish o un Wailmer grande.</speech>
        <speech>Me encanta jugar junto a las olas y buscar tesoros escondidos en la arena.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="24" name="Wingull" speed="1" sprite="278" type="pokemon" x="48" y="56">
        <path>UPx10,RIGHTx13,DOWNx10,LEFTx13</path>
        <onCollisionSpeech gap="4">Wingull!</onCollisionSpeech>
        <speech>¡Wingull!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="25" name="Wingull" speed="1" sprite="278" type="pokemon" x="4" y="72">
        <path>RIGHTx20,UPx20,LEFTx20,DOWNx20</path>
        <onCollisionSpeech gap="4">Wingull!</onCollisionSpeech>
        <speech>¡Wingull!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="26" name="Relicanth" speed="1" sprite="369" type="pokemon" x="43" y="95">
        <path>LEFTx17,RIGHTx17</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="27" name="Relicanth" speed="1" sprite="369" type="pokemon" x="70" y="88">
        <path>LEFTx20,RIGHTx20</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="28" name="Wingull" speed="1" sprite="278" type="pokemon" x="84" y="67">
        <path>DOWNx11,LEFTx11,UPx11,RIGHTx11</path>
        <onCollisionSpeech gap="4">Wingull!</onCollisionSpeech>
        <speech>¡Wingull!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="29" name="Pelipper" speed="1" sprite="279" type="pokemon" x="68" y="35">
        <path>RIGHTx10,DOWNx4,LEFTx10,UPx4</path>
        <onCollisionSpeech gap="4">Pelipper!</onCollisionSpeech>
        <speech>¡Pelipper!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="30" name="Pelipper" speed="1" sprite="279" type="pokemon" x="82" y="51">
        <path>UPx15,LEFTx20,DOWNx15,RIGHTx20</path>
        <onCollisionSpeech gap="4">Pelipper!</onCollisionSpeech>
        <speech>¡Pelipper!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="31" name="Tentacruel" shouldSleep="" speed="1" sprite="73" type="pokemon" x="35" y="72">
        <path>UPx11,DOWNx11,LEFTx6,RIGHTx6</path>
        <onCollisionSpeech gap="4">Tentacruel!</onCollisionSpeech>
        <speech>¡Tentacruel!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="4" name="Kira" speed="1" sprite="94" type="npc" x="62" y="12">
        <path>UPx2,LEFTx2,RIGHTx2,DOWNx2</path>
        <onCollisionSpeech gap="4">nooo!! leave our castle alone!</onCollisionSpeech>
        <speech>Construir un castillo en la arena es mucho más fácil y divertido con un pokémon de tipo tierra.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="32" name="Tentacruel" speed="1" sprite="73" type="pokemon" x="5" y="4">
        <path>DOWNx20,UPx20</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="33" name="Wingull" speed="1" sprite="278" type="pokemon" x="2" y="28">
        <path>RIGHTx20,UPx5,LEFTx20,DOWNx5</path>
        <onCollisionSpeech gap="4">Wingull!</onCollisionSpeech>
        <speech>¡Wingull!</speech>
    </movingNpc>
</npcs>