<npcs>
    <movingNpc direction="DOWN" id="1" name="Zubat" speed="1" sprite="41" type="pokemon" x="13" y="6">
        <path>RIGHTx2,LEFTx2</path>
        <onCollisionSpeech gap="4">Zubat!</onCollisionSpeech>
        <speech>¡ZUUUUUUU!</speech>
    </movingNpc>
    <npc direction="UP" hidden="false" id="2" name="Cooper" randomRotation="true" sprite="25" x="18" y="16">
        <speech>Un Zubat salvaje consiguió entrar en el Centro Pokémon...</speech>
        <speech>Es hora de atraparlo usando... mi poderosa red atrapa-insectos.</speech>
    </npc>

    <conversation id="7">
        <speeches id="1">
            <speech>Hola, me encanta coleccionar Pokémon, es mi mayor afición. Pero elegir el próximo es un poco difícil...</speech>
            <speech>Necesito un poco de tiempo para pensar qué Pokémon quiero ver a continuación en mi colección.</speech>
            <speech>¿Podrías volver más tarde? Te prometo que tendré un Pokémon increíble para que lo encontremos juntos.</speech>
            <speech>Vuelve en $DURACIÓN, y seguro que habré decidido un reto súper chulo para los dos.</speech>
        </speeches>
    </conversation>

    <conversation id="8">
        <speeches id="2">
            <speech>Hola, no te había visto antes por aquí. Tengo la misión de convertirme en maestro Pokémon y necesito tu ayuda.</speech>
            <speech>En primer lugar, tengo mucha curiosidad por Marill. Es tan mono y redondo, ¿no crees?</speech>
            <speech>¿Puedes mostrarme un Marill a nivel 12?</speech>
            <speech>¡Tengo algo especial para ti si lo haces! Va a ser increíble, ¡lo prometo!</speech>
        </speeches>
        <speeches id="3">
            <speech>¿No quieres? Está bien, supongo. Quizá en otra ocasión.</speech>
            <speech>Si alguna vez encuentras un Marill de nivel 12 y quieres enseñármelo, ¡te estaré esperando!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Sí! ¡Sabía que te apuntarías! Ver a un Marill de nivel 12 va a ser genial.</speech>
            <speech>Y no te preocupes, tengo una recompensa genial para ti. Estoy deseando verla.</speech>
        </speeches>
    </conversation>

    <conversation id="9">
        <speeches id="1">
            <speech>¿Has encontrado ya un Marill de nivel 12? ¡He estado pensando en ello sin parar!</speech>
        </speeches>
        <speeches id="2">
            <speech>¿Has encontrado un Marill de nivel 12? ¡Qué guay! ¿Puedo verlo, por favor?</speech>
            <speech>¡No puedo creer que vaya a ver un Marill de verdad de cerca! ¡Va a ser el mejor día de mi vida!</speech>
        </speeches>
        <speeches id="3">
            <speech>No ha habido suerte, ¿eh? Está todo bien. Marill puede ser bastante difícil de encontrar, supongo.</speech>
            <speech>Pero oye, si alguna vez encuentras uno y quieres enseñármelo, ¡seré súper feliz!</speech>
        </speeches>
        <speeches id="4">
            <speech>Lo has conseguido. ¡Estoy tan emocionada por ver el Marill! ¡Este es el mejor día de mi vida!</speech>
            <speech>Tengo que pensar qué Pokémon quiero ver a continuación... Pero por ahora, ¡aquí tienes tu increíble recompensa!</speech>
            <speech>¡Sois los mejores! ¡Muchas gracias por ayudarme con mi sueño de coleccionar Pokémon!</speech>
        </speeches>
    </conversation>

    <conversation id="10">
        <speeches id="2">
            <speech>¡Hola! ¿Te acuerdas de mí? Sigo en mi búsqueda para convertirme en maestro Pokémon, ¿y adivina qué? ¡Necesito tu ayuda otra vez!</speech>
            <speech>Esta vez, tengo mucha curiosidad por Slakoth. Es tan tranquilo y se mueve tan despacio... Es genial, ¿verdad?</speech>
            <speech>¿Podrías enseñarme un Slakoth a nivel 12? ¡Seguro que es tan relajado como dicen!</speech>
            <speech>Si puedes encontrar uno para mí, tengo algo muy chulo para ti. ¡Es una promesa!</speech>
        </speeches>
        <speeches id="3">
            <speech>¿No te interesa? Qué pena. ¡Pero sin presiones, de verdad!</speech>
            <speech>Si alguna vez te encuentras con un Slakoth de nivel 12 y te apetece compartirlo, ¡ya sabes dónde encontrarme!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Impresionante! Sabía que estarías a bordo. Un Slakoth de nivel 12 es algo que tengo que ver.</speech>
            <speech>Y no te preocupes, he preparado una recompensa muy especial por tus esfuerzos. Estoy deseando dártela.</speech>
        </speeches>
    </conversation>

    <conversation id="11">
        <speeches id="1">
            <speech>¿Has conocido ya a un Slakoth de nivel 12? Apuesto a que es muy agradable estar con él.</speech>
        </speeches>
        <speeches id="2">
            <speech>Vaya, ¿tienes un Slakoth de nivel 12? ¡Es increíble! ¿Puedes enseñármelo, por favor?</speech>
            <speech>Estoy deseando ver lo relajado que es Slakoth. Esto va a ser genial.</speech>
        </speeches>
        <speeches id="3">
            <speech>¿Aún no hay Slakoth? Ah, todo está bien. Les encantan sus siestas, después de todo.</speech>
            <speech>Pero oye, si encuentras un Slakoth de nivel 12 y quieres compartirlo, ¡estaré aquí esperando ansioso!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Eres el mejor! Ver un Slakoth de cerca va a ser impresionante. ¡Gracias por hacer esto!</speech>
            <speech>Tengo que empezar a pensar en el próximo Pokémon que quiero ver... Pero antes, ¡aquí tienes tu recompensa!</speech>
            <speech>¡Muchísimas gracias! ¡Vuestra ayuda significa mucho para mí y mis sueños de maestro Pokémon!</speech>
        </speeches>
    </conversation>
    <conversation id="12">
        <speeches id="2">
            <speech>¡Soy yo otra vez! Gracias a ti, mi viaje Pokémon se está volviendo súper emocionante. ¡Pero aún hay más por explorar!</speech>
            <speech>Esta vez, estoy totalmente intrigado por Shroomish. Son tan misteriosos y musgosos, ¿verdad?</speech>
            <speech>¿Podrías encontrar y mostrarme un Shroomish en el nivel 12? Apuesto a que es tan fascinante como suena.</speech>
            <speech>Como antes, tengo una recompensa muy chula esperándote. Te va a encantar.</speech>
        </speeches>
        <speeches id="3">
            <speech>Hmm, ¿no lo sientes? Está bien, no hay prisa. Estoy aquí cuando estés listo para compartir.</speech>
            <speech>Recuerda, si te encuentras con un Shroomish de nivel 12 y quieres enseñarlo, ¡seré todo oídos!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Sí! Sabía que no me defraudarías. ¡Un Shroomish de nivel 12 será algo digno de ver!</speech>
            <speech>Y sobre la recompensa, créeme, merece la pena el esfuerzo. Estoy deseando ver lo que nos traes.</speech>
        </speeches>
    </conversation>

    <conversation id="13">
        <speeches id="1">
            <speech>¿Has tenido suerte encontrando ese Shroomish de nivel 12? Tengo mucha curiosidad por ver uno.</speech>
        </speeches>
        <speeches id="2">
            <speech>¿Encontraste un Shroomish de nivel 12? ¡Es increíble! ¿Puedo echarle un vistazo, por favor?</speech>
            <speech>Estoy tan emocionada de ver un Shroomish en la vida real. Esto va a ser increíble.</speech>
        </speeches>
        <speeches id="3">
            <speech>Todavía buscando Shroomish, ¿eh? No te preocupes, pueden ser un poco escurridizos.</speech>
            <speech>Pero si consigues un Shroomish de nivel 12, me encantaría verlo. Mantenedme informado.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Vaya, lo has conseguido! ¡Ver un Shroomish me va a alegrar el día!</speech>
            <speech>Ahora, déjame pensar qué Pokémon deberíamos descubrir a continuación... Mientras tanto, ¡aquí tienes tu merecida recompensa!</speech>
            <speech>Muchas gracias por vuestra ayuda. Estáis haciendo realidad mis sueños de maestro Pokémon.</speech>
        </speeches>
        <speeches id="5">
            <speech>¡Muchas gracias por enseñarme todos estos increíbles Pokémon! Me has inspirado de verdad.</speech>
            <speech>Sé que algún día me convertiré en maestro Pokémon, y todo gracias a vosotros. Hasta entonces, ¡seguiré soñando a lo grande!</speech>
        </speeches>
    </conversation>

</npcs>