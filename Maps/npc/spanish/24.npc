<npcs>
    <npc direction="UP" id="1000" name="Sailor Orin" sprite="11" x="47" y="34">
        <speech>Ballena ballena ballena ... ¿qué tenemos aquí</speech>
        <speech>¿Qué sabes de la Línea Marina, chico?</speech>
        <speech>Entonces... ¿nada? En ese caso, déjame que te ilumine.</speech>
        <speech>La línea marítima conecta la ciudad de Lehar con el archipiélago del norte, inaccesible de otro modo.
        </speech>
        <speech>¿Cómo? La respuesta es sencilla: el camino a las islas está lleno de remolinos.</speech>
        <speech>Y por eso, los marineros como yo no pueden ir allí por mar, ¿ves?</speech>
    </npc>
    <npc direction="LEFT" id="1001" name="Fisherman Min" sprite="16" x="28" y="50">
        <speech>Este de aquí es un gran lugar de pesca.</speech>
        <speech>¡Oh, espera! ¡Hay algo en juego! ...</speech>
        <speech>aaannnd ... es otro Magikarp. ¡Pfff, mi suerte es patética!</speech>
    </npc>
    <conversation id="1">
        <speeches id="1">
            <speech>Hey $PLAYER_NAME. Estoy bloqueando la entrada del gimnasio de estos malvados gruñones.</speech>
            <speech>¡Ayudemos a Izumi y eliminemos a todos esos malvados gruñones de esta ciudad!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>¡Saludos! Bienvenido a Skynet Travel Technologies.</speech>
            <speech>¿Le gustaría viajar a algún sitio?</speech>
        </speeches>
        <speeches id="2">
            <speech>Es una pena. Por favor, vuelva cuando desee viajar a otro lugar.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Hmm ... vamos a tratar de conseguir esa tercera insignia, en primer lugar.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Me siento algo generoso en este momento, así que déjame hacerte una pregunta, chico:</speech>
            <speech>¿Quieres un regalo? Creo que así es como se llama, hoy en día</speech>
        </speeches>
        <speeches id="2">
            <speech>Interesante, pareces ser diferente a los demás.</speech>
        </speeches>
        <speeches id="3">
            <speech>Aquí tienes. Eres igual que los demás ...</speech>
        </speeches>
        <speeches id="4">
            <speech>Regreso en 3 horas. Puede que me sienta generoso de nuevo, quién sabe</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Has vencido a mis dos hermanos pequeños, ¿eh?</speech>
            <speech>Me imagino que ahora mismo te sientes muy seguro de ti mismo, y no te culpo. Pero, yo soy mucho más fuerte que cualquiera de ellos, ¡así que veamos lo que tienes!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Woah, eres bueno, eh! ¿O tal vez no soy tan bueno?</speech>
            <speech>¡Tonterías! Eres bueno, de acuerdo.</speech>
        </speeches>
        <speeches id="3">
            <speech>Podemos luchar mañana también, si te apetece.</speech>
        </speeches>
        <speeches id="4">
            <speech>Te dije que soy fuerte ...</speech>
        </speeches>
        <speeches id="5">
            <speech>Aún no eres lo suficientemente bueno para luchar contra mí.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>¡Bienvenido! Bienvenido al sistema de cajeros automáticos del Banco de Jvaloh.</speech>
            <speech>¿Desea retirar o ingresar dinero?</speech>
        </speeches>
        <speeches id="2">
            <speech>Vuelva siempre que desee realizar una transacción.</speech>
        </speeches>
        <speeches id="3">
            <speech>Esta función sólo está disponible para las personas con una "afiliación bancaria".</speech>
            <speech>Los no socios pueden utilizar la sucursal principal de nuestro banco en la ciudad de Bijli.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>¿Qué haces aquí?</speech>
        </speeches>
        <speeches id="2">
            <speech>Chico, tienes que dejar esta región.</speech>
        </speeches>
        <speeches id="3">
            <speech>Chico, tienes que dejar esta región.</speech>
        </speeches>
        <speeches id="4">
            <speech>Espero que no vuelvas a dar la cara.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>¿Qué haces aquí?</speech>
        </speeches>
        <speeches id="2">
            <speech>Chico, tienes que dejar esta región.</speech>
        </speeches>
        <speeches id="3">
            <speech>Chico, tienes que dejar esta región.</speech>
        </speeches>
        <speeches id="4">
            <speech>Espero que no vuelvas a dar la cara.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>¿Qué haces aquí?</speech>
        </speeches>
        <speeches id="2">
            <speech>Chico, tienes que dejar esta región.</speech>
        </speeches>
        <speeches id="3">
            <speech>Chico, tienes que dejar esta región.</speech>
        </speeches>
        <speeches id="4">
            <speech>Espero que no vuelvas a dar la cara.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>¿Qué haces aquí?</speech>
        </speeches>
        <speeches id="2">
            <speech>Chico, tienes que dejar esta región.</speech>
        </speeches>
        <speeches id="3">
            <speech>Chico, tienes que dejar esta región.</speech>
        </speeches>
        <speeches id="4">
            <speech>Espero que no vuelvas a dar la cara.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>¿Qué haces aquí?</speech>
        </speeches>
        <speeches id="2">
            <speech>Chico, tienes que dejar esta región.</speech>
        </speeches>
        <speeches id="3">
            <speech>Chico, tienes que dejar esta región.</speech>
        </speeches>
        <speeches id="4">
            <speech>Espero que no vuelvas a dar la cara.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <conversation id="12">
        <speeches id="1">
            <speech>Debería derrotar a todos los gruñones antes de intentar hablar con este tipo.</speech>
        </speeches>
    </conversation>
    <conversation id="13">
        <speeches id="1">
            <speech>¿Tú otra vez?</speech>
            <speech>¿A qué has venido? ¿Dulces?</speech>
            <speech>Pequeño, está todo hecho. Ya hemos capturado a Suicune.</speech>
            <speech>Ahora pasaremos a la siguiente fase de nuestro plan.</speech>
            <speech>Sin embargo, buen trabajo derrotando a esos debiluchos.</speech>
        </speeches>
    </conversation>
    <conversation id="14">
        <speeches id="1">
            <speech>Hola $PLAYER_NAME.</speech>
            <speech>Acabo de ganar mi tercera insignia y he hablado con Izumi sobre el motivo de la captura de Suicune.</speech>
            <speech>Ella misma no está segura, pero está preocupada.</speech>
            <speech>Continuemos nuestro viaje e intentemos averiguar quién está detrás de toda esta destrucción y detenerlo.</speech>
            <speech>Izumi te está esperando, buena suerte con tu batalla en el gimnasio.</speech>
        </speeches>
    </conversation>

    <conversation id="15">
        <speeches id="1">
            <speech>¡Oh hey $PLAYER_NAME!</speech>
            <speech>Enhorabuena por la 3ª Insignia de Gimnasio.</speech>
            <speech>Me iba de la ciudad, pero quería batallar contigo antes de irme.</speech>
            <speech>Quiero ver lo lejos que hemos llegado los dos desde la última vez que luchamos.</speech>
        </speeches>
        <speeches id="2">
            <speech>Vaya, eres muy fuerte.</speech>
            <speech>No estoy muy lejos, teniendo en cuenta que es mi primera vez como entrenador Pokémon.</speech>
            <speech>Por cierto, el Entrenador As cercano me dijo que hay gente malvada más adelante.</speech>
            <speech>Tengamos cuidado. Nos vemos.</speech>
        </speeches>
        <speeches id="3">
            <speech>Vaya, eres muy fuerte.</speech>
            <speech>No estoy muy lejos, teniendo en cuenta que es mi primera vez como entrenador Pokémon.</speech>
            <speech>Por cierto, el Entrenador As cercano me dijo que hay gente malvada más adelante.</speech>
            <speech>Tengamos cuidado. Nos vemos.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Ay! ¿Acabo de derrotarte? Lo siento...</speech>
            <speech>Estabas destinado a ser fuerte...</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>

    <conversation id="16">
        <speeches id="1">
            <speech>Así que tú eres el chico que devolvió el equilibrio a Jvaloh...</speech>
            <speech>Bastante joven debo decir...</speech>
            <speech>De todos modos, he meditado durante 50 años enteros de mi vida para poder hablar telepáticamente con Suicune.</speech>
            <speech>Lo hice para poder proteger a Jvaloh de cualquier peligro invisible. Y mira cómo fue</speech>
            <speech>¿Quieres cuidar del Suicune? Hmm, después de lo que pasó en Jvaloh creo que a Suicune no le importará un maestro.</speech>
            <speech>Pero para invocarlo para ti, necesito probar tu fuerza.</speech>
            <speech>¡Vénceme e invocaré a Suicune para ti!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Hazte a un lado!</speech>
            <speech>...</speech>
            <speech>Suicune ha aparecido en Jvaloh.</speech>
            <speech>¡Buena suerte, entrenador!</speech>
        </speeches>
        <speeches id="3">
            <speech>No demasiado pronto, chico. Me lleva tiempo reunir energía para comunicarme telepáticamente.</speech>
            <speech>Vuelve después de $DAYS.</speech>
        </speeches>
        <speeches id="4">
            <speech>Necesitas entrenar más. Vuelve cuando estés preparado.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
</npcs>