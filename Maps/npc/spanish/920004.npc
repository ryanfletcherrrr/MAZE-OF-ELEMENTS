<npcs>
    <npc direction="DOWN" id="1000" name="Guide Hari" sprite="23" x="25" y="52">
        <speech>¡Saludos, retador! $GYM8_LEADER usa Pokémon de tipo Dragón.</speech>
        <speech>Los dragones se encuentran entre los Pokémon más escurridizos y poderosos.</speech>
        <speech>Nueve Pokémon legendarios son de tipo Dragón y cuatro tienen características legendarias.</speech>
        <speech>Son notoriamente difíciles de entrenar debido a que requieren más puntos de EXP por nivel que la mayoría de los Pokémon no legendarios,</speech>
        <speech>y el hecho de que evolucionan mucho más tarde y, por tanto, están en sus formas más débiles durante más tiempo.</speech>
        <speech>Tiene a todos los Pokémon por encima del nivel 70, lo que dice mucho de ella.</speech>
        <speech>Curiosamente, muchos tipos Dragón de evolución final tienen una debilidad 4x contra el tipo Hielo. Sus ataques tampoco funcionan con los tipos Hada.</speech>
        <speech>También son débiles contra los tipos Dragón.</speech>
        <speech>Te aconsejo que lleves tipos Hada, Hielo y Dragón para desafiarla.</speech>
        <speech>¡Buena suerte, $PLAYER_NAME! ¡Rawrrr!</speech>
    </npc>

    <conversation canSkip="false" id="1">
        <speeches id="1">
            <speech>¿Estás aquí para desafiar a $GYM8_LEADER? Pruébame primero.</speech>
        </speeches>
        <speeches id="2">
            <speech>Lo has hecho bien, te dejaré pasar.</speech>
        </speeches>
        <speeches id="3">
            <speech>Ahora vete, ¿a qué esperas?</speech>
        </speeches>
        <speeches id="4">
            <speech>Entrena más o te daremos una paliza.</speech>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="2">
        <speeches id="1">
            <speech>$GYM8_LEADER no está siempre en el gimnasio. No podemos dejar que gaste su tiempo en alguien que no merece la pena.</speech>
            <speech>Déjame ponerte a prueba.</speech>
        </speeches>
        <speeches id="2">
            <speech>No está mal. Qué has desayunado hoy porque seguro que te ha puesto fuerte.</speech>
        </speeches>
        <speeches id="3">
            <speech>Vete antes de que se vaya.</speech>
        </speeches>
        <speeches id="4">
            <speech>Entrena más duro chico, ¿por qué haces perder el tiempo a todo el mundo?</speech>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="3">
        <speeches id="1">
            <speech>Soy experto en usar Pokémon dragón. Muéstrame en qué eres bueno.</speech>
        </speeches>
        <speeches id="2">
            <speech>Parece que no eres unidimensional.</speech>
        </speeches>
        <speeches id="3">
            <speech>Creo que debería empezar a entrenar también otros tipos.</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Ni siquiera eres un niño Pokémon?</speech>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="4">
        <speeches id="1">
            <speech>Es mi deber proteger a $GYM8_LEADER de entrenadores que no valen la pena.</speech>
        </speeches>
        <speeches id="2">
            <speech>Eres digno de seguir adelante. Buena suerte.</speech>
        </speeches>
        <speeches id="3">
            <speech>Buena suerte.</speech>
        </speeches>
        <speeches id="4">
            <speech>No, no entres en este gimnasio antes de ser lo suficientemente fuerte para derrotarme.</speech>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="5">
        <speeches id="1">
            <speech>Battle me, quiero impresionar a $GYM8_LEADER. Quiero llegar a ser como ella algún día.</speech>
        </speeches>
        <speeches id="2">
            <speech>Como.. ¿Cómo perdí contra ti?</speech>
        </speeches>
        <speeches id="3">
            <speech>Como.. ¿Cómo perdí contra ti?</speech>
        </speeches>
        <speeches id="4">
            <speech>Derrotar a alguien como tú no me llevará muy lejos. Necesito a alguien más fuerte para luchar.</speech>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="6">
        <speeches id="1">
            <speech>Tengamos una batalla rápida para averiguar tu nivel de poder.</speech>
        </speeches>
        <speeches id="2">
            <speech>¡¡¡¡¡Está por encima de nueve mil!!!!!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡¡¡¡¡Está por encima de nueve mil!!!!!</speech>
        </speeches>
        <speeches id="4">
            <speech>No eres lo suficientemente digno para ser entrenador. ¿Dónde está el orgullo de tu entrenador?</speech>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="7">
        <speeches id="1">
            <speech>Tardo en acostumbrarme al camino del gimnasio y tardo más en derrotarme y pasar.</speech>
        </speeches>
        <speeches id="2">
            <speech>No ha tardado mucho. Estoy impresionado.</speech>
        </speeches>
        <speeches id="3">
            <speech>Estoy impresionado. Buena suerte.</speech>
        </speeches>
        <speeches id="4">
            <speech>Derrotarte fue pan comido. ¿Cómo te las arreglaste para derrotar al General Thanda?</speech>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="8">
        <speeches id="1">
            <speech>Has hecho bien en llegar hasta aquí, pero no hay más remedio.</speech>
        </speeches>
        <speeches id="2">
            <speech>jaja Sólo estaba bromeando. Adelante.</speech>
        </speeches>
        <speeches id="3">
            <speech>jaja Sólo estaba bromeando. Adelante.</speech>
        </speeches>
        <speeches id="4">
            <speech>Te lo dije chico, no se puede ir más lejos. $GYM8_LEADER no lucha con débiles.</speech>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="9">
        <speeches id="1">
            <speech>¿Así que tú eres el que logró derrotar a todos mis amigos en el Gimnasio 7? No voy a ir fácil en usted.</speech>
        </speeches>
        <speeches id="2">
            <speech>Veo claramente tu potencial. No me sorprende que todos hayan sido derrotados por ti.</speech>
        </speeches>
        <speeches id="3">
            <speech>Veo claramente tu potencial. No me sorprende que todos hayan sido derrotados por ti.</speech>
        </speeches>
        <speeches id="4">
            <speech>Todos se sentirán felices cuando les diga que te derroté...</speech>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="10">
        <speeches id="1">
            <speech>Me sorprende ver que alguien de tu edad ha derrotado a domadores experimentados.</speech>
            <speech>Es hora de que luches contra el más experimentado.</speech>
        </speeches>
        <speeches id="2">
            <speech>¿En qué escuela aprendiste todo esto? Necesito volver a la escuela.</speech>
        </speeches>
        <speeches id="3">
            <speech>¿En qué escuela aprendiste todo esto? Necesito volver a la escuela.</speech>
        </speeches>
        <speeches id="4">
            <speech>Te dije que soy el más experimentado aquí. No te preocupes, podrás derrotarme cuando tengas más de 50 años.</speech>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="11">
        <speeches id="1">
            <speech>Sólo otro día de trabajo y probablemente otro debilucho contra el que luchar.</speech>
        </speeches>
        <speeches id="2">
            <speech>Wow, es difícil conseguir una batalla tan intensa como esta. Bien jugado chico.</speech>
        </speeches>
        <speeches id="3">
            <speech>Wow, es difícil conseguir una batalla tan intensa como esta. Bien jugado chico. Buena suerte.</speech>
        </speeches>
        <speeches id="4">
            <speech>Meh...</speech>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="12">
        <speeches id="1">
            <speech>Por fin un entrenador con el que luchar. Me estaba quedando dormido.</speech>
        </speeches>
        <speeches id="2">
            <speech>Es hora de ir a entrenar, me da vergüenza estar aquí.</speech>
        </speeches>
        <speeches id="3">
            <speech>Un día me convertiré en el mejor entrenador de este gimnasio y ese día te derrotaré.</speech>
        </speeches>
        <speeches id="4">
            <speech>Acabo de perder 1 minuto de mi preciosa vida. ¡¡Que te jodan!!</speech>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="13">
        <speeches id="1">
            <speech>Eres un ser humano increíble. Gracias por conseguirme el elixir sagrado.</speech>
            <speech>La gente de hoy en día es egoísta, impulsada por la agenda. Tú, ¡eres una joya!</speech>
            <speech>Creo que esa misma cualidad te hace fuerte. Tus Pokémon absorben eso de ti y se hacen más fuertes.</speech>
            <speech>Dicho esto, para derrotarme necesitarás mucho más que eso. Necesitarás suerte, porque no voy a caer fácilmente.</speech>
            <speech>Averigüémoslo ahora.</speech>
        </speeches>
        <speeches id="2">
            <speech>*Un fuerte aplauso alrededor*</speech>
            <speech>Espléndido $PLAYER_NAME. Espléndido. Nunca había luchado contra alguien como tú.</speech>
            <speech>Realmente te subestimé. Creo que estás muy por encima de mi nivel. Cada movimiento que hacías decía algo de ti.</speech>
            <speech>El general Thanda me ha dicho que eres especial, y creo que he tenido suerte de luchar contra alguien como tú.</speech>
            <speech>Quédate con la Insignia de Draco y la Garra de Dragón TM.</speech>
            <speech>Esta insignia es la prueba de tu esfuerzo y tu compromiso.</speech>
            <speech>Ha llegado lejos, pero aún le queda mucho por hacer.</speech>
            <speech>Te deseo suerte en tu batalla contra Elite 4. No me sorprenderá que los derrotes.</speech>
        </speeches>
        <speeches id="3">
            <speech>Ha llegado lejos, pero aún le queda mucho por hacer.</speech>
            <speech>Te deseo suerte en tu batalla contra Elite 4. No me sorprenderá que los derrotes.</speech>
        </speeches>
        <speeches id="4">
            <speech>Lo has hecho bien. Realmente lo hiciste bien.</speech>
            <speech>Pude ver el vínculo entre tú y tus Pokémon. Parecía que llevabas haciendo esto desde que naciste.</speech>
            <speech>Aunque necesitas más experiencia para derrotarme. Entrena y vuelve más tarde.</speech>
        </speeches>
    </conversation>
</npcs>