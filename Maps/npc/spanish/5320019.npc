<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Alabo tu valentía al desafiarme. ¡Porque yo soy el que tiene la patada más fuerte!</speech>
        </speeches>
        <speeches id="2">
            <speech>Hmmm... Si iba a perder de todos modos, esperaba quedar totalmente mal en el proceso.
            </speech>
        </speeches>
        <speeches id="3">
            <speech>Hmmm... Si iba a perder de todos modos, esperaba quedar totalmente mal en el proceso.
            </speech>
        </speeches>
        <speeches id="4">
            <speech>Oh. Los Pokémon lucharon. Mi fuerte patada no ayudó ni un poco.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>¡Sup! ¡Daré todo lo que tengo! ¡¡Hagámoslo lo mejor posible!!</speech>
        </speeches>
        <speeches id="2">
            <speech>Al final de una batalla, sin aliento... ¿No es genial? ¡Completamente!</speech>
        </speeches>
        <speeches id="3">
            <speech>Al final de una batalla, sin aliento... ¿No es genial? ¡Completamente!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Sup! Buen trabajo. Intenté todo lo que pude, ¡pero sigo bastante decepcionado!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>¡Yo!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Yo!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Yo!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Yo!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>El sudor que gotea antes de una batalla... ¿No te encanta lo fresco que es?</speech>
        </speeches>
        <speeches id="2">
            <speech>Al final de una batalla, sin aliento... ¿No es genial? ¡Completamente!</speech>
        </speeches>
        <speeches id="3">
            <speech>Al final de una batalla, sin aliento... ¿No es genial? ¡Completamente!</speech>
        </speeches>
        <speeches id="4">
            <speech>Estar cansado de la batalla con la ropa desaliñada... ¡Es genial! ¿No es realmente lo más guay?
            </speech>
        </speeches>
    </conversation>

    <conversation id="5">
        <speeches id="1">
            <speech>Hola. Encantado de conocerle.</speech>
            <speech>Soy Maylene, y soy la líder del gimnasio.</speech>
            <speech>Realmente no sé lo que significa ser fuerte, o cómo llegué a ser el Líder del Gimnasio.</speech>
            <speech>Pero haré lo mejor que pueda como líder del gimnasio.</speech>
            <speech>Me tomo las batallas muy en serio. ¡Cuando estés listo!</speech>
        </speeches>
        <speeches id="2">
            <speech>...OK. Tú ganas. Fue una dura derrota.</speech>
            <speech>Aprendí mucho de ella. Por favor, acepta esta Insignia de Gimnasio.</speech>
            <speech>Por favor, toma esto también.</speech>
            <speech>Ese TM60 contiene el movimiento Puñetazo de Drenaje.</speech>
            <speech>Um... Ese movimiento inflige daño, y roba los HP del objetivo.</speech>
        </speeches>
        <speeches id="3">
            <speech>Vaya, tengo hambre... Oh, lo siento, no es nada. No he dicho nada.</speech>
            <speech>$PLAYER_NAME, no puedo explicar lo que significa ser fuerte.</speech>
            <speech>No sé cuánto esfuerzo hay que hacer para ser fuerte...</speech>
            <speech>Pero estar con Pokémon nos permite seguir esforzándonos, ¿no?</speech>
        </speeches>
        <speeches id="4">
            <speech>Esta batalla fue demasiado fácil para mí. No obstante, me alegra darte otra oportunidad.</speech>
        </speeches>
    </conversation>
</npcs>