<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>¡Yo, el gran Dariole, no temo a nada bajo el cielo!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Me he inspirado en nuestra batalla! ¡De repente se me ha ocurrido un nuevo plato!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Me he inspirado en nuestra batalla! ¡De repente se me ha ocurrido un nuevo plato!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Feh! Al menos admitiré que tienes habilidad para fingir fuerza.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>¡Muy bien! ¡Allá voy! ¡Te mostraré mi poder!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Guau! ¡Eres increíble! ¡Estoy asombrado y sorprendido!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Guau! ¡Eres increíble! ¡Estoy asombrado y sorprendido!</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Estás asombrado? ¿Sorprendido? ¡¿Por el poder de mis Pokémon?!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>No hace falta perder el tiempo saludando. Hazlo cuando quieras.</speech>
        </speeches>
        <speeches id="2">
            <speech>¡No perderé la próxima vez! ¡Volvamos a luchar alguna vez!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡No perderé la próxima vez! ¡Volvamos a luchar alguna vez!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Vaya partido! Estoy bastante satisfecho con el resultado.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>No me importa quién seas ni de dónde vengas.</speech>
        </speeches>
        <speeches id="2">
            <speech>Necesito replantearme mi relación con mis Pokemon.</speech>
        </speeches>
        <speeches id="3">
            <speech>Necesito replantearme mi relación con mis Pokemon.</speech>
        </speeches>
        <speeches id="4">
            <speech>Una etiqueta no es importante, ¿verdad? Al fin y al cabo, tú eres tú mismo, ¿no?</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Estoy tan obsesionado con Pokémon que mi mujer está a punto de estallar de rabia.</speech>
        </speeches>
        <speeches id="2">
            <speech>Me enganché demasiado a las batallas Pokémon, así que nunca hacía nada en casa.</speech>
        </speeches>
        <speeches id="3">
            <speech>Me enganché demasiado a las batallas Pokémon, así que nunca hacía nada en casa.</speech>
        </speeches>
        <speeches id="4">
            <speech>No quiero volver a casa, porque mi mujer da tanto miedo como un Pokémon legendario.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Bueno, voy a hacer las cosas a mi manera, así que siéntete libre de luchar como quieras.</speech>
        </speeches>
        <speeches id="2">
            <speech>Hay algo agradable y cómodo en el ritmo que lleváis tú y tus Pokémon.</speech>
        </speeches>
        <speeches id="3">
            <speech>Hay algo agradable y cómodo en el ritmo que lleváis tú y tus Pokémon.</speech>
        </speeches>
        <speeches id="4">
            <speech>Al final, tienes que ir a tu propio ritmo. No puedes evitar dejarte influir por los demás.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>¡Oooh! ¡He visto una presa a mano! La caza está a punto de comenzar... ¡A jugar!</speech>
        </speeches>
        <speeches id="2">
            <speech>Una vez que se ha llegado tan lejos, la victoria y la derrota carecen de sentido.</speech>
        </speeches>
        <speeches id="3">
            <speech>Una vez que se ha llegado tan lejos, la victoria y la derrota carecen de sentido.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ohhh, ¡un enemigo fuerte! ¿Hay una opción de continuar en alguna parte?</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>He llegado de una isla lejana. ¿Puedo molestarle para una batalla?</speech>
        </speeches>
        <speeches id="2">
            <speech>Hacer demasiado de cualquier cosa destrozará tu cuerpo. Todo con moderación, ¿vale?</speech>
        </speeches>
        <speeches id="3">
            <speech>Hacer demasiado de cualquier cosa destrozará tu cuerpo. Todo con moderación, ¿vale?</speech>
        </speeches>
        <speeches id="4">
            <speech>No tenía ninguna experiencia. Estaría muy agradecido si pudiera ser su alumno.</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>¡Así que has venido a desafiarme! ¡Acércate demasiado y te saltearé!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Alto! ¡Espera un momento! ¡No quiero ser flambeado!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Alto! ¡Espera un momento! ¡No quiero ser flambeado!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Es... es... es todo culpa tuya por desafiarme! ¡La próxima vez te convertiré en una sabrosa concasse!
            </speech>
        </speeches>
    </conversation>

    <conversation id="10">
        <speeches id="1">
            <speech>Bienvenido.</speech>
            <speech>No me desafían muy a menudo.</speech>
            <speech>La gloria que estás contemplando es el Líder del Gimnasio Pastoria.</speech>
            <speech>Así es, ¡soy Crasher Estela! ¡Mis Pokémon se endurecieron con las aguas blancas de la tormenta!</speech>
            <speech>Aguantarán todo lo que les eches y luego te hundirán.</speech>
            <speech>¡La victoria será nuestra! Vamos, ¡hagámoslo!</speech>
        </speeches>
        <speeches id="2">
            <speech>Parece que la resaca me hundió...</speech>
            <speech>¡Pero me lo pasé muy bien luchando contigo! ¡Te lo has ganado!</speech>
            <speech>Necesitas esa Insignia Fen para usar el movimiento oculto DefogDP/SurfPt fuera de batalla.</speech>
            <speech>Esta es una recompensa especial de mi parte en reconocimiento al poder de tu equipo.</speech>
            <speech>Que TM188 contiene el movimiento Scald.</speech>
            <speech>Inflige el doble de daño a los objetivos a los que les queda menos de la mitad de PS.</speech>
            <speech>¡Úsalo para terminar las batallas con decisión!</speech>
        </speeches>
        <speeches id="3">
            <speech>Los estilos de lucha y de victoria son tan variados como lo son los entrenadores.</speech>
            <speech>¿Quieres saber cómo lucho?</speech>
            <speech>Lucho para poder decir que me he divertido al final, ¡gane o pierda!</speech>
        </speeches>
        <speeches id="4">
            <speech>Esta batalla fue demasiado fácil para mí. No obstante, me alegra darte otra oportunidad.</speech>
        </speeches>
    </conversation>
</npcs>