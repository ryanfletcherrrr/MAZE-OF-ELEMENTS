<npcs>
    <conversation id="TELEPORT_QUESTION">
        <speech>Abra... Kadabra..... Alakazam.......</speech>
        <speech>¿Quiere ver magia y viajar a otra tierra?</speech>
    </conversation>

    <conversation id="TELEPORTER_NO_REPLY">
        <speech>Es una pena. Por favor, vuelva cuando desee viajar a otro lugar.</speech>
    </conversation>

    <conversation id="BANK_QUESTION">
        <speech>¡Bienvenido! Bienvenido al sistema de cajeros automáticos del Banco de la PBO.</speech>
        <speech>¿Desea retirar o ingresar dinero?</speech>
    </conversation>

    <conversation id="BANK_NO_REPLY">
        <speech>Vuelva siempre que desee realizar una transacción.</speech>
    </conversation>

    <conversation id="BANK_NO_MEMBERSHIP">
        <speech>Esta función sólo está disponible para las personas con una "membresía PBO".</speech>
        <speech>Los no socios pueden utilizar nuestros otros terminales de uso gratuito.</speech>
    </conversation>

    <conversation id="SEEKER_NOT_READY">
        <speech>Me parece muy valiente por tu parte desafiar a alguien mucho más fuerte que tú.</speech>
        <speech>Por desgracia, no me gusta perder el tiempo con los débiles.</speech>
    </conversation>

    <conversation id="SEEKER_BEFORE_BATTLE">
        <speech>¿Así que te atreves a desafiar al clan de los más fuertes de los más fuertes en PBO?</speech>
        <speech>Veamos lo que tienes, chico.</speech>
    </conversation>

    <conversation id="SEEKER_LOSS">
        <speech>Estoy impresionado $PLAYER_NAME.</speech>
        <speech>Vamos a tener una revancha más tarde. Necesito más práctica.</speech>
    </conversation>

    <conversation id="SEEKER_VICTORY">
        <speech>Te lo advertí. Ahora págame una buena suma de dinero por usar mi tiempo.</speech>
    </conversation>

    <conversation id="SEEKER_NEED_CHARGE">
        <speech>Necesito tiempo para prepararme para otra batalla. ¿Por qué estás tan impaciente?</speech>
    </conversation>

    <conversation id="NO_FISHING_ROD_IN_BAG">
        <speech>Hola, chico. Soy el experto local en cañas de pescar. He oído que se regalan cañas de pescar en Jubilife
            Ciudad.
        </speech>
    </conversation>
    <conversation id="FISHING_INTRO_QUES">
        <speech>Hola. Soy el experto local en cañas de pescar. ¿Puedo arreglar tu caña de pescar si quieres? Por una
            cuota, por supuesto.
        </speech>
        <speech>¿Quiere reparar su caña por 500 F?</speech>
    </conversation>
    <conversation id="FISHING_PLAYER_SAYS_YES">
        <speech>Enhorabuena, su caña de pescar ha sido reparada con éxito.</speech>
    </conversation>
    <conversation id="FISHING_PLAYER_SAYS_NO">
        <speech>Vuelve si necesitas reparar tu caña.</speech>
    </conversation>
    <conversation id="ROD_NEEDS_MAINTENANCE">
        <speech>¡Tu caña ya está en perfecto estado! Vuelve cuando necesites arreglarla.</speech>
    </conversation>
    <conversation id="MAINTENANCE_CRITERIA_FAILURE">
        <speech>Uy, no tienes suficiente F para reparar tu caña.</speech>
    </conversation>

    <conversation id="HEALER_NO_MEMBERSHIP">
        <speech>Oh, sólo puedo curar a tu pokemon si tienes membresía PBO. Usted puede comprar uno de Donator Shop.</speech>
    </conversation>

    <conversation id="SEEKER_MISSING">
        <speech>Actualmente no tienes un Buscador Vs. en tu bolsa.</speech>
    </conversation>

    <conversation id="CW_NOT_RUNNING">
        <speech>Crew Wars no funciona.</speech>
    </conversation>

    <conversation id="COME_TOMORROW_MAZE">
        <speech>Ya no es seguro ir a las Cavernas Legendarias. Por favor, vuelve mañana.</speech>
    </conversation>

    <conversation id="MAZE_LEGENDARY_ALREADY_BATTLED">
        <speech>**El Pokémon parece que ya no te reconoce.**</speech>
    </conversation>

    <conversation id="LEGENDARY_HEAL_QUESTION">
        <speech>¿Quieres curar a tus Pokémon? Recuerda que cada curación que utilices reducirá tus posibilidades de conseguir un legendario.</speech>
    </conversation>

    <conversation id="LEGENDARY_HEAL_QUESTION">
        <speech>¿Quieres curar a tus Pokémon? Recuerda que cada curación que utilices reducirá tus posibilidades de conseguir un legendario.</speech>
    </conversation>

    <conversation id="LEGENDARY_HEAL_QUESTION">
        <speech>¿Quieres curar a tus Pokémon? Recuerda que cada curación que utilices reducirá tus posibilidades de conseguir un legendario.</speech>
    </conversation>

    <conversation id="LEGENDARY_HEAL_QUESTION">
        <speech>¿Quieres curar a tus Pokémon? Recuerda que cada curación que utilices reducirá tus posibilidades de conseguir un legendario.</speech>
    </conversation>

    <conversation id="LEGENDARY_HEAL_YES">
        <speech>Ya está. Todos tus Pokémon están curados.</speech>
    </conversation>

    <conversation id="LEGENDARY_HEAL_NO">
        <speech>Buena elección.</speech>
    </conversation>

    <conversation id="LEGENDARY_PVP_BEFORE_BATTLE">
        <speech>¿Así que quieres luchar conmigo? Muy bien, ¡hagámoslo!</speech>
    </conversation>

    <conversation id="LEGENDARY_PVP_VICTORY">
        <speech>¡Muy fuerte!</speech>
    </conversation>

    <conversation id="LEGENDARY_PVP_LOSS">
        <speech>¡Muy débil!</speech>
    </conversation>

    <conversation id="LEGENDARY_PVP_NOT_BATTLING">
        <speech>En este momento no estoy de humor para batallar contigo.</speech>
    </conversation>

    <conversation id="LEGENDARY_BOSS_WARP_PVP_NPC_PENDING">
        <speech>No puedo llevarte a la caverna legendaria hasta que derrotes a todos mis hermanos y me demuestres que eres lo bastante poderoso.</speech>
    </conversation>

    <conversation id="FRONTIER_COME_BACK_MONDAY">
        <speech>Campeón, los entrenadores están cansados de perder contra ti y no están dispuestos a seguir luchando.</speech>
        <speech>Por favor, vuelve el lunes, cuando estarán dispuestos a batallar contigo de nuevo.</speech>
    </conversation>

    <conversation id="FRONTIER_LEVEL_NOT_CLEARED">
        <speech>Lo siento joven entrenador pero no puedo dejarte pasar hasta que derrotes al campeón del nivel actual.</speech>
    </conversation>

    <conversation id="FRONTIER_LEVEL_CLEARED">
        <speech>Joven entrenador, ya me has derrotado. Ve e intenta desafiar a jefes de mayor nivel.</speech>
    </conversation>

    <conversation id="FRONTIER_PARTY_INFO">
        <speech>Tienes más de 3 Pokémon en el grupo.</speech>
    </conversation>

    <conversation id="FRONTIER_CHALLENGE_BOSS_LEVEL_BATTLES_OVER">
        <speech>Entrenador, ya me has derrotado más que suficientes veces. Por favor, ve y desafía al jefe.</speech>
    </conversation>

    <conversation id="FRONTIER_PREVIOUS_LEVELS_NOT_CLEARED">
        <speech>Tienes que derrotar a los jefes de los niveles anteriores antes de poder desafiarme.</speech>
    </conversation>

    <conversation id="FRONTIER_BEFORE_BATTLE">
        <speech>Hola jovencito, ¡a luchar!</speech>
    </conversation>

    <conversation id="FRONTIER_LOSS">
        <speech>Debe haber sido una casualidad.</speech>
    </conversation>

    <conversation id="FRONTIER_VICTORY">
        <speech>Entrena más duro o vete a casa.</speech>
    </conversation>

    <conversation id="FRONTIER_CANNOT_CHALLENGE_BOSS">
        <speech>Necesitas derrotar a mi aprendiz 20 veces para poder desafiarme.</speech>
    </conversation>

    <conversation id="FRONTIER_USED_SPECIES_OR_TRADED_POKEMON">
        <speech>O bien tienes un Pokémon que se utilizó en la frontera anterior, o bien lo conseguiste a través de un intercambio y se utilizó recientemente en la frontera.</speech>
        <speech>Puedes usar estos Pokémon después del próximo reinicio de la frontera, que tiene lugar todos los lunes.</speech>
        <speech>Cambia de partido para luchar contra mí.</speech>
    </conversation>

    <conversation id="BT_BEFORE_BATTLE">
        <speech>¿Así que quieres vencerme y hacer una racha? Muy bien, ¡pruébame!</speech>
    </conversation>

    <conversation id="BT_NPC_LOSS">
        <speech>Has ganado $WIN_STREAK batalla(s) consecutivamente. ¡Maldición!</speech>
    </conversation>

    <conversation id="BT_NPC_VICTORY">
        <speech>¡Muy débil! Ahora empieza desde 0 ¡HAHAHA!</speech>
    </conversation>

    <conversation id="WITH_GOODWILL_TOKEN_SPEECH">
        <speech>Hola $PLAYER_NAME. Gracias por hacer de PBO una mejor experiencia para otros jugadores.</speech>
        <speech>Por su contribución nos gustaría ofrecerle algunas Fichas de Buena Voluntad.</speech>
        <speech>Estas fichas pueden canjearse por objetos exclusivos.</speech>
        <speech>Tienes un total de $GOODWILL_TOKENS para reclamar.</speech>
        <speech>¿Quieres reclamar tus $GOODWILL_TOKENS tokens de fondo de comercio?</speech>
    </conversation>

    <conversation id="NO_GOODWILL_TOKEN_SPEECH">
        <speech>Hola $PLAYER_NAME. Gracias por jugar a PBO.</speech>
        <speech>Actualmente no tienes fichas de buena voluntad que reclamar.</speech>
        <speech>Puedes conseguirlos donando a sacerdotes, usando potenciadores de experiencia, señuelos, flautas de enjambre, bombas de mapa y bombas de objetos.</speech>
    </conversation>

    <conversation id="GOODWILL_TOKENS_CLAIM_YES">
        <speech>Una vez más, gracias. Nos vemos de nuevo.</speech>
    </conversation>

    <conversation id="GOODWILL_TOKENS_CLAIM_NO">
        <speech>No te preocupes. Puedes volver en cualquier momento si quieres reclamar tus fichas.</speech>
    </conversation>

    <conversation id="DIVE_QUESTION">
        <speech>Los océanos parecen muy profundos aquí. ¿Te gustaría usar Dive?</speech>
    </conversation>

    <conversation id="REGION_BANNED_POKEMON_IN_PARTY">
        <speech>Actualmente tienes Pokémon en tu grupo que infringen las leyes actuales de la región.</speech>
        <speech>Las leyes establecen que no puedes llevar a esta región Pokémon de regiones anteriores que superen los criterios de nivel.</speech>
        <speech>El criterio de nivel se calcula por la cantidad de insignias que tienes en la siguiente región + 5.</speech>
        <speech>Así que si tienes 0 insignias en la siguiente región, puedes llevar nivel 5 como máximo.</speech>
        <speech>Una vez que derrotes a Elite 4 en la siguiente región, podrás llevar cualquier Pokémon de la región anterior sin ninguna restricción.</speech>
    </conversation>

    <conversation id="DIVE_QUESTION">
        <speech>Los océanos parecen muy profundos aquí. ¿Te gustaría usar Dive?</speech>
    </conversation>

    <conversation id="WITH_SPIRIT_TOKEN_SPEECH">
        <speech>Hola $PLAYER_NAME. Gracias por mejorar la oscura atmósfera de nuestro mundo espiritual paralelo durante el evento de Halloween.</speech>
        <speech>Como muestra de nuestra gratitud, nos gustaría ofrecerte algunas Fichas Espirituales.</speech>
        <speech>Estas fichas místicas pueden canjearse por objetos exclusivos de otro mundo.</speech>
        <speech>Tienes un total de $SPIRIT_TOKENS para reclamar.</speech>
        <speech>¿Le gustaría reclamar sus $SPIRIT_TOKENS ahora?</speech>
    </conversation>

    <conversation id="NO_SPIRIT_TOKEN_SPEECH">
        <speech>Hola $PLAYER_NAME. Gracias por aventurarte en el mundo paralelo de PBO durante el evento de Halloween.</speech>
        <speech>Actualmente, no tienes Fichas Espirituales que reclamar.</speech>
        <speech>Puedes ganarlos donando a los Sacerdotes Oscuros, usando Aumentos de Experiencia, Señuelos y Flautas de Enjambre dentro de este reino durante el evento de Halloween....</speech>
    </conversation>

    <conversation id="SPIRIT_TOKENS_CLAIM_YES">
        <speech>Gracias una vez más por vuestras contribuciones durante el evento de Halloween. Que vuestro viaje por el mundo paralelo sea siempre inquietante.</speech>
    </conversation>

    <conversation id="SPIRIT_TOKENS_CLAIM_NO">
        <speech>No te preocupes. Las Fichas Espirituales permanecerán contigo. Reclámalas cuando quieras.</speech>
    </conversation>

    <conversation id="GOODWILL_TOKENS_NON_FUNCTIONAL">
        <speech>Hola $PLAYER_NAME. Me temo que no puedo ofrecerte fichas de buena voluntad por el momento.</speech>
        <speech>Mis poderes están debilitados, y sospecho que es obra de Chamunda.</speech>
        <speech>Me pregunto si algo siniestro está ocurriendo de nuevo en el Mundo de los Espíritus.</speech>
    </conversation>

    <conversation id="MINING_REGION_NOT_REGISTERED">
        <speech>Ah, pareces cualificado. Nuestro jefe ha estado buscando a alguien resistente, alguien que pueda enfrentarse a lo desconocido.</speech>
        <speech>Nuestras filas han menguado bajo las duras condiciones y los misteriosos peligros que acechan bajo tierra.</speech>
        <speech>Actualmente investiga un extraño fenómeno relacionado con los meteoritos que rodean los volcanes.</speech>
        <speech>Es un asunto de gran curiosidad y una oportunidad potencial.</speech>
        <speech>Habla con él y recupera el equipo; estará en la zona donde los secretos del cielo tocan la tierra.</speech>
    </conversation>

    <conversation id="START_FIRST_MINING_SESSION">
        <speech>La tierra susurra secretos de riquezas incalculables bajo nuestros pies en esta región.</speech>
        <speech>¿Tomarás el pico y descubrirás lo que se esconde en tu primera búsqueda del tesoro?</speech>
    </conversation>

    <conversation id="CONTINUE_MINING_SESSIONS">
        <speech>¿Vuelves tan pronto, buscador de tesoros? Las vetas de riqueza de esta región son profundas y esperan tus ansiosas manos.</speech>
        <speech>¿Listo para adentrarte en las profundidades una vez más y reclamar tu fortuna?</speech>
    </conversation>

    <conversation id="WARP_NO_MINING_SESSION_REMAINING">
        <speech>El eco de tu pico se ha desvanecido y el suelo descansa de tu trabajo.</speech>
        <speech>Ay, la tierra ha dado todo lo que puede por ahora. Regresa en $NEXT_MINING_SESSION_DURATION minutos cuando la tierra esté madura y lista para tu reclamo.</speech>
    </conversation>

    <conversation id="START_NEW_MINING_SESSION">
        <speech>La tierra ha repuesto su generosidad, y sus susurros te llaman una vez más, listo para el intento #$MINING_SESSION_ATTEMPT.</speech>
        <speech>¿Siente la atracción de la aventura, dispuesto a desenterrar tesoros de nuevo?</speech>
    </conversation>

    <conversation id="CANNOT_ACCESS_SITE">
        <speech>Por desgracia, valiente minero, a pesar de tu nivel $NIVEL_URRENTE, este sitio exige un minero de nivel $NIVEL_REQUERIDO o superior.</speech>
        <speech>Busca un mayor dominio de los secretos de la tierra antes de volver a desafiar sus profundidades.</speech>
    </conversation>

    <conversation id="MINING_SITE_NO_CRITERIA">
        <speech>¡Aguanta, alma valiente! El terreno que deseas conquistar no es apto para pusilánimes o inexpertos.</speech>
        <speech>Estas profundidades están envueltas en peligros que han repelido a muchos que se atrevieron con sus sombras sin el manto de la experiencia.</speech>
        <speech>Sólo aquellos reconocidos como mineros, portadores de la confianza de los expertos mineros, pueden navegar con seguridad por sus secretos.</speech>
        <speech>Reúne fuerzas y demuestra tu valía en el mundo de arriba. Los tesoros de abajo esperarán tu regreso triunfal.</speech>
    </conversation>

    <conversation id="GOODWILL_CURRENCY_TRADER_QUESTION">
        <speech>¿Quiere canjear sus Fichas de Fondo de Comercio por artículos?</speech>
    </conversation>

    <conversation id="GOODWILL_CURRENCY_TRADER_NO">
        <speech>Sin problemas. Vuelve otra vez si cambias de opinión.</speech>
    </conversation>

    <conversation id="COME_TOMORROW_SHIP">
        <speech>Las mareas y el destino no están hoy a su favor.</speech>
        <speech>Regresa en $DURACIÓN, cuando los mares te concedan el paso.</speech>
    </conversation>

    <conversation id="ABANDONED_SHIP_TELEPORTER_QUESTION">
        <speech>Las sombras del barco abandonado te llaman. ¿Te aventurarás en sus profundidades?</speech>
    </conversation>

    <conversation id="ABANDONED_SHIP_COME_DURING_NIGHT">
        <speech>La luz del día oculta los secretos del barco.</speech>
        <speech>Sólo bajo el manto de la noche podrás pasar.</speech>
    </conversation>

    <conversation id="MOVE_RELEARNER_NOT_FOUND">
        <speech>Saludos, viajero. Poseo una habilidad única para ayudar a los Pokémon a recordar movimientos que han olvidado.</speech>
        <speech>Yo también estoy aquí para ofrecer mis servicios a tus Pokémon. Sin embargo, hay una pequeña tarifa de por medio.</speech>
        <speech>A cambio de mi ayuda, pido una Escama Corazón cada vez que un Pokémon desee reaprender un movimiento.</speech>
        <speech>Al fin y al cabo, hay que ganarse la vida.</speech>
        <speech>Si te encuentras en posesión de una Báscula de Corazón, no dudes en buscarme.</speech>
        <speech>Estaré listo para ayudar a tus Pokémon a aprovechar sus fuerzas olvidadas.</speech>
    </conversation>

    <conversation id="MOVE_RELEARNER_QUESTION">
        <speech>Así que tienes una Balanza Corazón. ¿Quieres que uno de tus Pokémon vuelva a aprender un movimiento que ha olvidado?</speech>
    </conversation>

    <conversation id="MOVE_RELEARNER_NO">
        <speech>Muy bien, no te preocupes. Vuelve cuando necesites mi ayuda.</speech>
    </conversation>

    <conversation id="EGG_MOVE_NOT_FOUND">
        <speech>Saludos. Poseo una habilidad única que permite a los Pokémon dominar movimientos que normalmente sólo adquirirían mediante la cría.</speech>
        <speech>Estoy aquí para extender este servicio especial a tus Pokémon, permitiéndoles aprender también sus movimientos "huevo".</speech>
        <speech>Sin embargo, mi ayuda tiene un requisito. Pido un vale de movimiento huevo cada vez que un Pokémon deba aprender un movimiento huevo.</speech>
        <speech>Al fin y al cabo, hay que llegar a fin de mes.</speech>
        <speech>Si consigues dos vales de movimientos huevo, vuelve a mí y ayudaré a tus Pokémon a aprender los movimientos huevo.</speech>
    </conversation>

    <conversation id="EGG_MOVE_QUESTION">
        <speech>Ooh, así que tienes un Vale de Movimiento Huevo. ¿Quieres que uno de tus Pokémon aprenda un movimiento huevo?</speech>
    </conversation>

    <conversation id="EGG_MOVE_NO">
        <speech>Muy bien, no te preocupes. Vuelve cuando necesites mi ayuda.</speech>
    </conversation>

    <conversation id="TUTOR_MOVE_NOT_FOUND">
        <speech>¡Hola!</speech>
        <speech>He sido bendecido con un don poco común: la capacidad de enseñar a los Pokémon movimientos que no son accesibles mediante la subida de nivel normal.</speech>
        <speech>Soy partidario de compartir este don, así que estoy aquí para ofrecer a tus Pokémon la oportunidad de aprender también algunos movimientos únicos.</speech>
        <speech>Por supuesto, hay un poco de toma y daca en todo.</speech>
        <speech>Un poco de intercambio justo, por así decirlo.</speech>
        <speech>Esta es mi propuesta: un vale de Tutor Move a cambio de enseñar un movimiento.</speech>
        <speech>Cuando estés listo para hacer el intercambio, ven a buscarme.</speech>
    </conversation>

    <conversation id="TUTOR_MOVE_QUESTION">
        <speech>Así que tienes un Bono de Movimiento Tutor. ¿Quieres que uno de tus Pokémon aprenda un "movimiento tutor"?</speech>
    </conversation>

    <conversation id="TUTOR_MOVE_NO">
        <speech>Muy bien, no te preocupes. Vuelve cuando necesites mi ayuda.</speech>
    </conversation>

    <conversation id="LOSS_IN_HARD_MODE">
        <speech>Debes esperar $DURACIÓN antes de retarme de nuevo en modo difícil, $NOMBRE_JUGADOR.</speech>
        <speech>Recuerde, no sea excesivamente crítico con su equipo por su derrota. Déles tiempo para recuperarse.</speech>
    </conversation>

    <conversation id="WITH_RADIANCE_TOKEN_SPEECH">
        <speech>Hola $PLAYER_NAME. Gracias por traer la vibrante energía del verano a nuestro soleado paraíso.</speech>
        <speech>Como muestra de nuestra gratitud, nos gustaría ofrecerte algunos Radiance Tokens.</speech>
        <speech>Estas radiantes fichas pueden canjearse por artículos exclusivos de temática veraniega.</speech>
        <speech>Tienes un total de $RADIANCE_TOKENS para reclamar.</speech>
        <speech>¿Le gustaría reclamar sus $RADIANCE_TOKENS ahora?</speech>
    </conversation>

    <conversation id="NO_RADIANCE_TOKEN_SPEECH">
        <speech>Hola $PLAYER_NAME. Gracias por unirte a nosotros en el soleado mundo de PBO durante el evento de Verano.</speech>
        <speech>Actualmente, no tienes fichas de resplandor que reclamar.</speech>
        <speech>Puedes conseguirlos donando a los sacerdotes del Sol, usando potenciadores de experiencia, señuelos y flautas de enjambre en este reino durante el evento de verano.</speech>
    </conversation>

    <conversation id="RADIANCE_TOKENS_CLAIM_YES">
        <speech>Gracias una vez más por sus contribuciones durante el evento de verano. Que su viaje en este mundo vibrante sea siempre brillante.</speech>
    </conversation>

    <conversation id="RADIANCE_TOKENS_CLAIM_NO">
        <speech>No te preocupes. Los Radiance Tokens permanecerán contigo. Puedes reclamarlas cuando quieras.</speech>
    </conversation>

    <conversation id="ANOTHER_CREW_OWNS_CW_ISLAND">
        <speech>Invictus Shores está actualmente bajo el control de la tripulación [GOLD]$CREW_NAME[].</speech>
        <speech>Sólo pueden entrar los miembros de [ORO]$NOMBRE_CREW[].</speech>
    </conversation>

    <conversation id="NOBODY_OWNS_CW_ISLAND">
        <speech>Invictus Shores está actualmente sin reclamar.</speech>
        <speech>La entrada está restringida hasta que una tripulación reclame la isla.</speech>
    </conversation>

    <conversation id="AROMA_LADY_QUESTION">
        <speech>Tus Pokémon parecen un poco cansados. Quieres que te los cure?</speech>
    </conversation>

    <conversation id="AROMA_LADY_YES">
        <speech>Ya está, ¡todos se han refrescado y se sienten mucho mejor!</speech>
    </conversation>

    <conversation id="AROMA_LADY_NO">
        <speech>Estoy seguro de que habrían agradecido un poco de descanso. Quizás la próxima vez.</speech>
    </conversation>

    <conversation id="CW_ISLAND_TELEPORT_QUESTION">
        <speech>¡Ah, viajero! El mar llama, y los vientos están a nuestro favor.</speech>
        <speech>¿Qué te parece zarpar hacia otra tierra? La isla Invictus te espera.</speech>
    </conversation>

    <conversation id="CW_ISLAND_TELEPORT_NO_REPLY">
        <speech>Es una pena, amigo. Pero el océano siempre está aquí. Vuelve cuando estés listo para navegar.</speech>
    </conversation>

    <conversation id="NO_SPACE_IN_PARTY_FOR_STARTER">
        <speech>No tienes espacio suficiente en tu grupo para seleccionar un nuevo Pokémon inicial. Haz sitio e inténtalo de nuevo.</speech>
    </conversation>

    <conversation id="ELITE_4_REQUIRED_FOR_REPEATABLE_GYM">
        <speech>¡Primero debes derrotar al Campeón de la región de Kanto antes de que acepte la revancha!</speech>
    </conversation>

    <conversation id="MEWTWO_STATUE_IN_ORDER">
        <speech>Los ojos de la estatua de {COLOR=PURPLE}Mewtwo{ENDCOLOR} parpadean débilmente...</speech>
        <speech>Sientes que algo cambia en lo más profundo de la mansión.</speech>
    </conversation>

    <conversation id="MEWTWO_STATUE_OUT_OF_ORDER">
        <speech>El aire se enfría...</speech>
        <speech>La estatua de {COLOR=PURPLE}Mewtwo{ENDCOLOR} se queda quieta, no pasa nada.</speech>
        <speech>Parece que has alterado el orden. Sientes que el rompecabezas se ha restablecido.</speech>
    </conversation>

    <conversation id="DOOR_UNLOCKED">
        <speech>Un profundo estruendo resuena en la mansión...</speech>
        <speech>En algún lugar, un pesado mecanismo hace clic-{COLOR=CYAN}¡Una puerta ha sido desbloqueada!{ENDCOLOR}</speech>
    </conversation>

    <conversation id="HIDDEN_POWER_SELECT_SHARD">
        <speech>Veo que tienes algunos fragmentos. ¿Qué tipo de Poder Oculto te gustaría que aprendieran tus Pokémon?</speech>
    </conversation>

    <conversation id="HIDDEN_POWER_NO_SHARD">
        <speech>Necesitarás fragmentos de Poder Oculto para desbloquear el verdadero potencial de Poder Oculto. Vuelve cuando hayas reunido
            algunas.
        </speech>
    </conversation>

    <conversation id="HIDDEN_POWER_NO_POKEMON">
        <speech>No veo ningún Pokémon en tu grupo que pueda aprender Poder Oculto.</speech>
        <speech>Para aprender cualquier Poder Oculto Elemental, tu Pokémon necesita conocer el Poder Oculto sin ningún tipo de tipado.</speech>
    </conversation>

    <conversation id="HIDDEN_POWER_TUTOR_SUCCESS">
        <speech>¡Éxito! Tu Pokémon ha aprendido el Poder Oculto del tipo elegido.</speech>
    </conversation>

    <conversation id="HIDDEN_POWER_TUTOR_FAILURE">
        <speech>Algo ha ido mal. Tu Pokémon no ha podido aprender el Poder Oculto. Por favor, inténtalo de nuevo.</speech>
    </conversation>

    <conversation id="ILLEGAL_MOVE_NOT_FOUND">
        <speech>¡Ah, eres tú otra vez! El entrenador que ayudó a restaurar el {COLOR=CYAN}Ritual de la Luz de Luna{ENDCOLOR}.</speech>
        <speech>Esa ceremonia mística ha despertado algo notable en mi investigación.</speech>
        <speech>Conocimiento de movimientos que una vez fueron {COLOR=RED}prohibidos en batallas competitivas{ENDCOLOR}.</speech>
        <speech>En generaciones pasadas, estas técnicas se consideraban demasiado poderosas para los torneos.</speech>
        <speech>Pero el antiguo ritual de los Clefairy me ha revelado sus secretos.</speech>
        <speech>Puedo enseñar estos {COLOR=YELLOW}movimientos prohibidos{ENDCOLOR} a tus Pokémon, pero mi investigación requiere materiales.</speech>
        <speech>Para cada técnica prohibida, necesitaré {COLOR=VERDE}50.000 Pokédólares{ENDCOLOR} y {COLOR=NARANJA}8 Champiñones Diminutos{ENDCOLOR}.</speech>
        <speech>Contienen esporas únicas esenciales para desbloquear estos poderosos recuerdos.</speech>
        <speech>Las Paras de por aquí sueltan muchas de esas setas, así que recogerlas no debería ser difícil.</speech>
        <speech>Si desea adentrarse en estas artes prohibidas, vuelva con el pago.</speech>
    </conversation>

    <conversation id="ILLEGAL_MOVE_QUESTION">
        <speech>Ah, ¡veo que tienes los {COLOR=VERDE}fondos{ENDCOLOR} y las {COLOR=ANARANJA}Setas Pequeñas{ENDCOLOR}!</speech>
        <speech>¿Quieres que uno de tus Pokémon aprenda un movimiento prohibido?</speech>
        <speech>Estas técnicas prohibidas conllevan un poder inmenso, demasiado peligroso para las batallas competitivas.</speech>
        <speech>Cada lección requiere {COLOR=VERDE}50.000 Pokédólares{ENDCOLOR} y {COLOR=ORANJA}8 Champiñones Minúsculos{ENDCOLOR} para desbloquear el conocimiento.</speech>
        <speech>¿Estás preparado para adentrarte en estas {COLOR=YELLOW}antiguas artes prohibidas{ENDCOLOR}?</speech>
    </conversation>

    <conversation id="ILLEGAL_MOVE_NO">
        <speech>No hay ningún problema. Mi investigación continuará.</speech>
        <speech>Vuelve cuando estés listo para explorar estas técnicas {COLOR=RED}prohibidas{ENDCOLOR}.</speech>
    </conversation>
</npcs>