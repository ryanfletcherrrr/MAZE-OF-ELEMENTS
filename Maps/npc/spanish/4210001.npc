<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Mis amigos y yo participamos en un evento en el que intentamos escapar de aquí.</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Muy bien! ¡Ahora puedo escapar!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Impresionante! ¡Vuelve en $DURATION, y tendremos otra épica batalla de escape!</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Gané? ¿Gané? ¡Entonces no podemos escapar!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Tengo una política estricta sobre mi peinado. Es toda mi vida, así que me apasiona.</speech>
        </speeches>
        <speeches id="2">
            <speech>Estoy teniendo un mal día con el pelo, así que no hay nada que pudiera haber hecho.</speech>
        </speeches>
        <speeches id="3">
            <speech>No ha sido mi mejor día, ¿eh? ¡Vuelve en $DURATION y verás el verdadero poder de mi peinado!</speech>
        </speeches>
        <speeches id="4">
            <speech>Cuando mi peinado está a la última, ¡me pongo las pilas!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>No es bonito... Todavía eres un niño... Ojalá pudiera volver atrás...</speech>
        </speeches>
        <speeches id="2">
            <speech>Era tan inocente entonces... ¿Dónde ha ido esa chica?</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh, aquellos días de juventud... ¡Quizá en $DURATION vuelva a rememorarlos en nuestra próxima batalla!</speech>
        </speeches>
        <speeches id="4">
            <speech>Me he convertido en un adulto cínico, así que incluso hago trampas durante las batallas.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Jejeje... Lo veo todo claro... Eres un médico de un planeta malvado, ¿no?</speech>
        </speeches>
        <speeches id="2">
            <speech>Eh...ondas de radio... Hay ondas de radio que salen de tu nariz...</speech>
        </speeches>
        <speeches id="3">
            <speech>¿Ondas de radio, dices? Bueno, en $DURATION, mis poderes podrían descifrarlas. ¡Regresa entonces!</speech>
        </speeches>
        <speeches id="4">
            <speech>Ugh... Mis poderes... Mis poderes son... Creo que necesito una enfermera...</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Lo siento, amigo. No es nada personal, pero estoy a punto de volverme loco con tus Pokémon.</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Arghhh! ¡Pequeño! Eso duele. Pero, bueno, así es como va, ¿no?</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Whoa, una difícil! ¡Dame $DURACIÓN, y estaré listo para otra ronda salvaje!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Mi culpa, mi culpa! Demasiado para ti, ¿eh? Pero no hay golpes en una pelea, ¿verdad?</speech>
        </speeches>
    </conversation>

    <conversation id="6">
        <speeches id="1">
            <speech>Me llamo Mike y soy el propietario de esta casa.</speech>
            <speech>Me encanta ver batallas Pokémon.</speech>
            <speech>¡Enséñame cerillas calientes! ¡Yo dirijo la Casa Seashore sólo por eso!</speech>
        </speeches>
        <speeches id="2">
            <speech>Fueron unas batallas intensas.</speech>
            <speech>Por favor, acepta esto como recompensa por mostrarme esos fósforos calientes.</speech>
        </speeches>
        <speeches id="3">
            <speech>¿Eh? ¿No sientes el calor?</speech>
        </speeches>
        <speeches id="4">
            <speech>Ya está. ¡Que aproveche!</speech>
        </speeches>
        <speeches id="5">
            <speech>Vuelve mañana y te recompensaré de nuevo por esas batallas fulgurantes.</speech>
        </speeches>
    </conversation>
</npcs>