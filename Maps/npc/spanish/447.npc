<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>¿Hm?</speech>
            <speech>¿$PLAYER_NAME? Así que, nos encontramos de nuevo. ¿Cómo ha ido?</speech>
            <speech>¿Has utilizado bien la Mega Pulsera?</speech>
            <speech>Supongo que ni siquiera necesito preguntar. No cuando se trata de ti y de tu equipo.</speech>
            <speech>Me pregunto... ¿Te has dado cuenta? ¿Hm? Hay algo aquí que no puedes ver.</speech>
            <speech>Ahora, si utilizara este dispositivo en el obstáculo invisible, desbloquearía el camino.</speech>
            <speech>Sí, es un Pokémon que estaba bloqueando el camino.</speech>
            <speech>Permíteme mejorar tu Devon Scope y ya no tendrás problemas con los obstáculos ocultos.
            </speech>
            <speech>Volvamos a vernos algún día.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>No es seguro viajar más lejos niño.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>¿Adónde crees que vas? ¿Adónde crees que vas volando?</speech>
            <speech>¡Todavía no tienes las alas para ir más lejos! ¡Vuelve atrás!</speech>
            <speech>¡Ahora!</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Wingull" shouldSleep="" speed="1" sprite="278" type="pokemon" x="43" y="70">
        <path>DOWNx4, UPx4, LEFTx4, RIGHTx4</path>
        <onCollisionSpeech gap="4"/>
        <speech>¡Peeko!</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="3" name="Richard" randomRotation="true" sprite="5" x="46" y="8">
        <speech>¿Sabías que la región de Hoenn fue la primera en utilizar las bayas tal y como se usan hoy en día?</speech>
        <speech>La región de Johto está ampliamente considerada como la primera en utilizar activamente las bayas en combate activo, pero Hoenn fue la primera en perfeccionar realmente la técnica.</speech>
        <speech>Es una de las cosas que hacen que nuestra casa sea única.</speech>
    </npc>
    <movingNpc direction="LEFT" id="4" name="Loralina" shouldSleep="" speed="1" sprite="22" type="npc" x="24" y="21">
        <path>LEFTx2, RIGHTx2, UPx1, DOWNx1</path>
        <onCollisionSpeech gap="4"/>
        <speech>Quizá sí... ¿quizá no?</speech>
        <speech>¿Qué es esto? ¿De qué estoy hablando?</speech>
        <speech>¡Simple tontería! ¡Estoy hablando de tus Pokémon!</speech>
        <speech>¿Aún no me entiendes? Es fácil...</speech>
        <speech>Tú nadas sobre tus Pokémon, yo nado con mis manos, si los papeles se invirtieran...</speech>
        <speech>¿No me estarías cuestionando a mí también?</speech>
        <speech>No mucha gente tiene la confianza y la habilidad necesarias para poder nadar con sus Pokémon.</speech>
        <speech>De ahí que entrenemos tan duro.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="6" name="Wailmer" shouldSleep="" speed="1" sprite="320" type="pokemon" x="3" y="81">
        <path>LEFTx2, RIGHTx2</path>
        <onCollisionSpeech gap="4"/>
        <speech>RAWR</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="9" name="Parasol Lady Katrina" randomRotation="false" sprite="27" x="11" y="7">
        <speech>Me encanta el tiempo que hace aquí, a veces hace sol, a veces no. Pero siempre es un buen día para llevar una sombrilla.</speech>
    </npc>
    <movingNpc direction="RIGHT" id="10" name="Feebas" speed="1" sprite="349" type="pokemon" x="45" y="75">
        <path>RIGHTx2, LEFTx6, RIGHTx4</path>
        <onCollisionSpeech gap="4">Feebas!</onCollisionSpeech>
        <speech>¡Feeb-as!</speech>
    </movingNpc>
    <npc direction="LEFT" hidden="false" id="11" name="Fire Starter Brand" randomRotation="false" sprite="52" x="41" y="93">
        <speech>¡Voy a crear un bonito infierno con mi Combusken!</speech>
        <speech>Espera, ¿qué?</speech>
        <speech>¿Quieres decir que no debería con tantos árboles cerca?</speech>
        <speech>Confía en mí, soy un profesional.</speech>
        <speech>Además... Como que ya tengo los registros preparados. ¡Sería una pena desperdiciarlos! ¡Jajaja!</speech>
    </npc>
    <conversation id="5">
        <speeches id="1">
            <speech>¿Quieres ver el Pokémon del que estoy más orgulloso?</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Dios mío! Mis pobres Pokémon...</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Dios mío! Mis pobres Pokémon...</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Qué te parece mi querido Pokémon? Genial, ¿verdad?</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Mi última batalla... Así es como me gustaría que viéramos este combate...</speech>
        </speeches>
        <speeches id="2">
            <speech>Ha sido divertido... Tengamos otra última batalla algún día...</speech>
        </speeches>
        <speeches id="3">
            <speech>Ha sido divertido... Vamos a tener otra última batalla de nuevo algún día ...</speech>
        </speeches>
        <speeches id="4">
            <speech>Nos volveremos a ver algún día... Je. Si eso fuera verdad...</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Soy una celebridad nueva rica, así que soy tacaña con mi dinero.</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Perdí, pero no te daré el dinero de mi almuerzo!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Perdí, pero no te daré el dinero de mi almuerzo!</speech>
        </speeches>
        <speeches id="4">
            <speech>Por desgracia, has perdido contra mí. Ahora, ¡dame el dinero de tu almuerzo!</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>¿Qué tipo de Pokémon te gustan? Venga, enséñamelo.</speech>
        </speeches>
        <speeches id="2">
            <speech>Tu gusto por los Pokémon es realmente horrible, ¡pero eres un Entrenador de primera clase!</speech>
        </speeches>
        <speeches id="3">
            <speech>Tu gusto por los Pokémon es realmente horrible, ¡pero eres un Entrenador de primera clase!</speech>
        </speeches>
        <speeches id="4">
            <speech>Tu gusto por los Pokémon es maravilloso, pero como entrenador eres una decepción.</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>Para convertirme en un Entrenador de primera clase, me vi obligado a venir a estudiar aquí.</speech>
        </speeches>
        <speeches id="2">
            <speech>Tengo demasiada nostalgia como para querer estudiar...</speech>
        </speeches>
        <speeches id="3">
            <speech>Tengo demasiada nostalgia como para querer estudiar...</speech>
        </speeches>
        <speeches id="4">
            <speech>Puedo aprender mucho de las batallas Pokémon en este país.</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>¡Ooh la la! ¡Pequeño entrenador! ¡Graciosa flor! ¡Voy a cortarte justo en el tallo!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Hmm ahora déjame decirte un secreto! Se me cayó un caramelo Rare aquí, mientras que la agricultura.</speech>
            <speech>¿Puedes encontrarlo?</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Hmm ahora déjame decirte un secreto! Se me cayó un caramelo Rare aquí, mientras que la agricultura.</speech>
            <speech>¿Puedes encontrarlo?</speech>
        </speeches>
        <speeches id="4">
            <speech>¡No! ¡No tan rápido! ¡Quiero que seas la flor más preciada de mi jardín!</speech>
        </speeches>
    </conversation>
    <conversation id="12">
        <speeches id="1">
            <speech>Pareces muy confiado. Te hundiré enseguida.</speech>
        </speeches>
        <speeches id="2">
            <speech>Sí... Tienes buenos Pokémon... Los Pokémon deben estar felices de ser criados por ti...</speech>
        </speeches>
        <speeches id="3">
            <speech>Sí... Tienes buenos Pokémon... Los Pokémon deben estar felices de ser criados por ti...</speech>
        </speeches>
        <speeches id="4">
            <speech>¡AAAH! Estoy muy asustada. Nunca lo volveré a hacer... Lo siento.</speech>
        </speeches>
    </conversation>
    <conversation id="14">
        <speeches id="1">
            <speech>¿No crees que es demasiado? ¿Este kimono? Pero, bueno, sólo puedo llevarlo mientras sea joven.</speech>
        </speeches>
        <speeches id="2">
            <speech>¿No crees que las ancianas están monísimas con furisode?</speech>
        </speeches>
        <speeches id="3">
            <speech>¿No crees que las ancianas están monísimas con furisode?</speech>
        </speeches>
        <speeches id="4">
            <speech>Y, bueno, supongo que cuando sea mayor... ¡Este tipo de atuendo será demasiada molestia!</speech>
        </speeches>
    </conversation>
    <conversation id="16">
        <speeches id="1">
            <speech>¡Oh, pareces animado! ¿Qué te parece si luchamos?</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Dios mío, eres tan joven! ¡Mis compañeros estaban destrozados!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Dios mío, eres tan joven! ¡Mis compañeros estaban destrozados!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡VALE! ¡Ya hemos terminado! ¿Cómo estuvieron mis compañeros?</speech>
        </speeches>
    </conversation>
    <conversation id="18">
        <speeches id="1">
            <speech>¡Eh, tú! ¡No te metas conmigo o destruiré a tus Pokémon!</speech>
        </speeches>
        <speeches id="2">
            <speech>¿Cómo pude perder con un movimiento tan débil? Gaaahhh, ¡eso me saca de quicio!</speech>
        </speeches>
        <speeches id="3">
            <speech>¿Cómo pude perder con un movimiento tan débil? Gaaahhh, ¡eso me saca de quicio!</speech>
        </speeches>
        <speeches id="4">
            <speech>Pensé que me causarías problemas, ¡pero qué ataque tan débil!</speech>
        </speeches>
    </conversation>
    <conversation id="19">
        <speeches id="1">
            <speech>Me hago más fuerte con cada lágrima que lloro.</speech>
        </speeches>
        <speeches id="2">
            <speech>Ahora puedo ser aún más fuerte. Crezco con cada rencor.</speech>
        </speeches>
        <speeches id="3">
            <speech>Ahora puedo ser aún más fuerte. Crezco con cada rencor.</speech>
        </speeches>
        <speeches id="4">
            <speech>No te dejes llevar por la tristeza o la frustración. Puedes utilizar tus rencores para motivarte.</speech>
        </speeches>
    </conversation>
    <conversation id="20">
        <speeches id="1">
            <speech>No hay nada que hacer más que luchar... Para nosotros...</speech>
        </speeches>
        <speeches id="2">
            <speech>Me pregunto si podríamos haber sido amigos si nos hubiéramos conocido en un mundo sin batallas...</speech>
        </speeches>
        <speeches id="3">
            <speech>Me pregunto si podríamos haber sido amigos si nos hubiéramos conocido en un mundo sin batallas...</speech>
        </speeches>
        <speeches id="4">
            <speech>Este resultado... no es lo que esperaba...</speech>
        </speeches>
    </conversation>
    <conversation id="21">
        <speeches id="1">
            <speech>¿Eh? ¿Eh? ¿Una batalla? ¡Es hora de ir a por todas!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Oh! Lo hiciste bastante bien, ¿no? Eres mejor de lo que pensaba.</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Oh! Lo hiciste bastante bien, ¿no? Eres mejor de lo que pensaba.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Terrible! ¡No estás preparado! ¡Vuelve cuando hayas aprendido a lanzar una Poké Ball!</speech>
        </speeches>
    </conversation>
    <conversation id="22">
        <speeches id="1">
            <speech>¡Eh, no seas tan engreído! ¡Las batallas pueden dejarse en manos del destino!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Qué suerte tienes! Espero que también te hayas divertido.</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Qué suerte tienes! Espero que también te hayas divertido.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ganar, perder al final, todo es suerte. Pero si es divertido, ¿no es suficiente?</speech>
        </speeches>
    </conversation>
    <conversation id="28">
        <speeches id="1">
            <speech>Bienvenido, buscador de verdades. Soy [RED]Sage Eron[], el guardián de los secretos enterrados bajo Hoenn.</speech>
            <speech>En voz baja, los antiguos hablaron de [SKY]Regice[], [GRAY]Registeel[] y [ORANGE]Regirock[], entrelazados con el destino de nuestro mundo.</speech>
            <speech>Los susurros hablan de cavernas donde los ecos del pasado perduran, envueltos en enigmas, atrayendo a los dignos.</speech>
            <speech>Aventúrate en [VERDE]Ironheart Cavern[], donde las batallas de fuerza se ven eclipsadas por las batallas de ingenio.</speech>
            <speech>Reúne reliquias perdidas en el tiempo, pues en ellas reside la clave para despertar verdades veladas en la sombra.</speech>
        </speeches>
        <speeches id="2">
            <speech>El velo del misterio cubre tu camino, cada paso una súplica silenciosa a los ecos de la antigüedad.</speech>
            <speech>En el corazón de [VERDE]Ironheart Cavern[], aguardan antiguos susurros, sus secretos encerrados en un juicio silencioso.</speech>
            <speech>Dejad que la luz de vuestro valor revele lo que yace oculto, pues la esencia de Hoenn está ligada a estos guardianes.</speech>
            <speech>No son meros titanes del elemento; son los pilares sobre los que descansan las historias de nuestra tierra.</speech>
            <speech>Camina con humildad. Tus descubrimientos pueden reescribir los anales de nuestra historia.</speech>
        </speeches>
    </conversation>
    <conversation id="29">
        <speeches id="1">
            <speech>Ah, has vuelto de [VERDE]Ironheart Cavern[]. ¿Qué historias susurran esas antiguas paredes?</speech>
            <speech>¿Un [GOLD]Metal Coat[] lanzado por Aggron, dices? Fascinante, lleva la esencia de [GRIS]Registeel[].</speech>
            <speech>Este descubrimiento, aunque intrigante, no es más que una pieza de un rompecabezas mayor.</speech>
            <speech>Tu viaje está lejos de terminar. La escarcha de la [BLUE]Caverna de la Bóveda Helada[] te llama a continuación.</speech>
            <speech>Explora sus profundidades y regresa con los secretos que puedas desvelar.</speech>
        </speeches>
        <speeches id="2">
            <speech>Antes de partir, recuerda que cada guardián representa una prueba, un reto que hay que comprender.</speech>
            <speech>En la [BLUE]Caverna de la Bóveda de Escarcha[], no solo busca la victoria, sino también comprender el escalofrío perdurable de [SKY]Regice[].</speech>
            <speech>Vuelve a mí una vez que hayas desafiado sus heladas garras, pues tu camino se adentra aún más en el misterio.</speech>
        </speeches>
    </conversation>
    <conversation id="30">
        <speeches id="1">
            <speech>El frío de la [BLUE]Caverna de la Bóveda Helada[] se aferra a ti. Qué has descubierto en su abrazo helado?</speech>
            <speech>¿Una [CYAN]Never-Melt-Ice[], de Cryogonal? El gélido silencio de [SKY]Regice[] habla a través de él.</speech>
            <speech>Sin embargo, nuestra búsqueda no termina con estos susurros de hielo y acero.</speech>
            <speech>La [NARANJA]Caverna de Stonegrip[] en el Desierto de la Ruta 111 te espera. Qué secretos esconde?</speech>
            <speech>Afrontar sus pruebas y regresar. Juntos, podremos reconstruir este antiguo rompecabezas.</speech>
        </speeches>
        <speeches id="2">
            <speech>Tu viaje teje a través del corazón de los mitos de Hoenn, desenterrando secretos largamente congelados en el tiempo.</speech>
            <speech>[ORANGE]La Caverna de la Grieta de Piedra[] te atrae con la calidez de la tierra antigua, desafiándote a escuchar sus silenciosas historias.</speech>
            <speech>En sus profundidades, busca no sólo la conquista, sino los susurros de [ORANGE]Regirock[], guardián de la piedra.</speech>
            <speech>¿Qué verdades yacen enterradas bajo las arenas? Vuelve con tus descubrimientos, porque son las claves de nuestro legado.</speech>
            <speech>Cada paso que das es una zancada a través de la historia. Deja que las historias de los guardianes te guíen hacia la iluminación.</speech>
        </speeches>
    </conversation>
    <conversation id="31">
        <speeches id="1">
            <speech>Las arenas del tiempo se mueven bajo tus pies. ¿Qué secretos esconde la [ORANGE]Caverna de la Uña de Piedra[]?</speech>
            <speech>Una [MARRON]Piedra Dura[], un vestigio de Garganacl. Zumba con la esencia de [NARANJA]Regirock[].</speech>
            <speech>Cada objeto que descubres enhebra más profundamente el tejido de las leyendas de Hoenn.</speech>
            <speech>Sin embargo, el rompecabezas sigue incompleto. Una verdad más profunda susurra, esperando a ser descubierta.</speech>
            <speech>Mi hermano, envuelto en el misterio, visita de vez en cuando el [CYAN]Pacifidlog Town[].</speech>
            <speech>Búscalo, puede que haya descubierto algo.</speech>
        </speeches>
        <speeches id="2">
            <speech>Antes de partir, reflexiona sobre las pruebas de los guardianes. Su esencia es un faro que guía tu camino.</speech>
            <speech>[CYAN]Pacifidlog Town[] puede albergar a mi escurridizo hermano, un vagabundo entre mundos, una vez que te hayas enfrentado a la Elite Four.</speech>
            <speech>Él también se siente atraído por la sabiduría de los guardianes y puede iluminar el camino que se abre ante ti.</speech>
            <speech>Lleva la sabiduría de los guardianes como una antorcha a las sombras. Es ahí, en la oscuridad, donde aguarda la verdad.</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="12" name="Oddish" shouldSleep="" speed="1" sprite="43" type="pokemon" x="11" y="22">
        <path>LEFTx2,DOWNx2,UPx2,RIGHTx2</path>
        <onCollisionSpeech gap="4">Oddish!</onCollisionSpeech>
        <speech>¡Extraño!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="13" name="Maril" shouldSleep="" speed="1" sprite="183" type="pokemon" x="23" y="33">
        <path>LEFTx4,UPx5,DOWNx5,RIGHTx4</path>
        <onCollisionSpeech gap="4">Maril!</onCollisionSpeech>
        <speech>¡Maril!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="14" name="Azumaril" shouldSleep="" speed="1" sprite="184" type="pokemon" x="34" y="21">
        <path>RIGHTx6,LEFTx6</path>
        <onCollisionSpeech gap="4">Azumaril!</onCollisionSpeech>
        <speech>¡Azuzu!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="15" name="Tropius" shouldSleep="" speed="1" sprite="357" type="pokemon" x="20" y="42">
        <path>UPx4,DOWNx4</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="16" name="Altaria" speed="1" sprite="334" type="pokemon" x="45" y="31">
        <path>UPx7,DOWNx7</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="17" name="Cacnea" shouldSleep="" speed="1" sprite="331" type="pokemon" x="52" y="20">
        <path>RIGHTx1,DOWNx2,UPx2,LEFTx1</path>
        <onCollisionSpeech gap="4">Cacnea!</onCollisionSpeech>
        <speech>¡Cacnea!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="18" name="Combusken" shouldSleep="" speed="1" sprite="256" type="pokemon" x="38" y="92">
        <path>DOWNx3,UPx3</path>
        <onCollisionSpeech gap="4">Combusken!</onCollisionSpeech>
        <speech>¡Combusken!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="19" name="Skarmory" speed="1" sprite="227" type="pokemon" x="58" y="90">
        <path>LEFTx4,UPx4,RIGHTx4,DOWNx4</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="LEFT" id="2" name="Biker Baxton" speed="1" sprite="74" type="npc" x="46" y="84">
        <path>LEFTx10, RIGHTx10</path>
        <onCollisionSpeech gap="4"/>
        <speech>¡Weeeee! ¡Mírame! ¡Nada supera la velocidad de conducir tu moto a mach speed!</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="20" name="Hiker Hank" randomRotation="true" sprite="10" x="11" y="60">
        <speech>¡Amigo! ¿Ves esa montaña de ahí? Ahí es donde me dirijo ahora, ¡el Monte Pyre!</speech>
        <speech>Pero antes de enfrentarme a esa bestia, tengo que conquistar esto. No es mucho, pero tiene su encanto, ¿sabes?</speech>
        <speech>La subida es dura, seguro, pero ¿la vista desde la cima? Espectacular. Me da una idea de lo que está por venir.</speech>
        <speech>Así que, deséame suerte, ¡y quizá nos volvamos a ver en la cima del Monte Pyre!</speech>
    </npc>
</npcs>