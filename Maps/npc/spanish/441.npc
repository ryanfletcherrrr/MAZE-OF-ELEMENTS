<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Si amplían el mar, habrá menos hábitats para Pokémon y personas.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Si amplían el terreno, ¡no habrá suficiente agua para los Pokémon y las personas!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>No necesitamos agua tanto como espacio para que vivan los Pokémon y las personas.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>El agua fue depositada en la Tierra por antiguos Comentes y Meteoros.</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>¡Aléjate!</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>¡Apartaos de mi maldito camino, bribones del Equipo Magma! ¡O se enfrentarán a una quilla!</speech>
            <speech>¡Malditos seáis! ¡Dejadme pasar, ratas de sentina!</speech>
        </speeches>
    </conversation>
    <npc direction="DOWN" hidden="false" id="1" name="" randomRotation="true" sprite="187" x="36" y="47">
        <speech>Monte Chimenea (Arriba)</speech>
        <speech>Jagged Pass (Abajo)</speech>
    </npc>
    <!---->
    <conversation id="15">
        <speeches id="1">
            <speech>Los del Equipo Magma estamos trabajando duro por el bien de todos.</speech>
            <speech>Si hay más tierra, habrá más lugares para vivir.</speech>
            <speech>Todo el mundo estaría contento.
            </speech>
        </speeches>
        <speeches id="2">
            <speech>¿Huh? ¿Cómo que he perdido?
            </speech>
        </speeches>
        <speeches id="3">
            <speech>¿Huh? ¿Cómo que he perdido?
            </speech>
        </speeches>
        <speeches id="4">
            <speech>Ahora no vuelvas.</speech>
        </speeches>
        <speeches id="5">
            <speech>Los del Equipo Magma estamos trabajando duro por el bien de todos.</speech>
            <speech>Si hay más tierra, habrá más lugares para vivir.</speech>
            <speech>Todo el mundo estaría contento.</speech>
        </speeches>
    </conversation>
    <conversation id="16">
        <speeches id="1">
            <speech>¡¿Hyahyahya?! ¡Eres tú! ¡Tú eres la que trató de interrumpirme, Tabitha, en Meteor Falls!</speech>
            <speech>¿Piensa interponerse en mi camino una vez más?</speech>
            <speech>¡Unngh!</speech>
            <speech>Eres realmente... realmente, realmente, realmente, realmente, realmente...</speech>
            <speech>realmente, realmente, realmente, realmente, realmente, realmente, realmente, realmente, realmente... reeeallllyyyy...
                un niño odioso, ¡¿no?!
            </speech>
            <speech>Ahh... Ah... Te... aplastaré. Para que ... nunca te pongas en mi camino ... otra vez.</speech>
        </speeches>
        <speeches id="2">
            <speech>¿Otra vez? ¡Hyuhn!</speech>
            <speech>Sabía que serías fuerte.</speech>
            <speech>¡Qué lástima! ¡El Meteorito que conseguimos del Profesor Quien Sea ya está en manos de nuestro Jefe!
            </speech>
            <speech>¿Dónde está el Jefe, te preguntarás? ¡Ah, sí, sí, por aquí!</speech>
            <speech>¡Oh, espero que se te muestre el verdadero poder del Equipo Magma! ¡Ahya! ¡Ahyahyahyahya!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Qué lástima! ¡El Meteorito que conseguimos del Profesor Quien Sea ya está en manos de nuestro Jefe!</speech>
            <speech>¿Dónde está el Jefe, te preguntarás? ¡Ah, sí, sí, por aquí!</speech>
            <speech>¡Oh, espero que se te pueda mostrar el verdadero poder del Equipo Magma! ¡Ahya! ¡Ahyahyahyahya!</speech>
        </speeches>
        <speeches id="4">
            <speech>No vuelvas a intentarlo.</speech>
        </speeches>
    </conversation>
    <conversation id="17">
        <speeches id="1">
            <speech>El poder contenido en el Meteorito...</speech>
            <speech>Si fusionamos la energía explosiva contenida en el núcleo del planeta con el poder del Meteorito...
            </speech>
            <speech>Recuerdo esos ojos. Y la indomable voluntad que parece arder tras ellos. Ahhh. Ahora
                recuerdo.
            </speech>
            <speech>Tú eres el que nos desafió en el Museo Oceánico de Slateport.</speech>
            <speech>Y, tu presencia aquí me dice que has derrotado a Tabitha.</speech>
            <speech>Sí, ahora veo que la agitación de interés que sentí no estaba fuera de lugar.</speech>
            <speech>Hmph. Eres una verdadera promesa. De acuerdo. Intentaré educarte.</speech>
            <speech>Hace miles de años, vivía un ser poderosísimo del que se decía que era capaz de crear
                nuevas tierras en el planeta.
            </speech>
            <speech>El poder que buscamos en el Equipo Magma- Este poder, que puede expandir la masa terrestre disponible, pertenece a
                a un Pokémon legendario y superantiguo.
            </speech>
            <speech>Aunque ahora dormita, tras haber perdido la fuente de su poder y haber quedado atrapada en un profundo sueño.</speech>
            <speech>¿Qué debemos hacer para despertar a este gigante dormido?</speech>
            <speech>Nuestra investigación nos ha llevado aquí, al Monte Chimney. Sí, aquí... a este mismo Meteorito.</speech>
            <speech>Si creamos las condiciones adecuadas, podremos alterar las cualidades de este meteorito.
                de este meteorito.
            </speech>
            <speech>Sí, incluso en una Mega Piedra. Incluso en una Llave de Piedra.</speech>
            <speech>Y aquí, en el Monte Chimney- Hmph... No debería decir demasiado. Este es el final de la lección de hoy.
            </speech>
            <speech>Ahora bien. Creo que es hora de empezar. Ha llegado el momento de la purga.</speech>
            <speech>Creo que fui bastante claro la última vez que estuvimos en Slateport.</speech>
            <speech>¡Te advertí que cualquier tonto que se interpusiera en nuestro camino sería recibido sin piedad!</speech>
            <speech>Te enterraré por mi propia mano. ¡Espero que aprecies este honor!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Uf! Eres... muy capaz... Me quedé atrás, pero sólo por una pulgada...</speech>
            <speech>¿Oh? Así que repeliste al gran Maxie en batalla. Haha... ¡Nunca dejas de entretenerme!</speech>
            <speech>¡Un comienzo excelente! ¡Esta vez, permítanme desatar toda mi fuerza!</speech>
            <speech>Una vez que hayas probado el poder Mega Evolucionado de mi Pokémon, ¡te despedirás de tu última pizca de esperanza!</speech>
            <speech>¿Hm? Sí, soy yo. ...¿Oh? Entonces es el Monte Pyre. Comprendo. Iré de inmediato.</speech>
            <speech>Siento interrumpir nuestra batalla, pero me temo que debo excusarme.</speech>
            <speech>Semejante grosería exige reparación. Tome este Meteorito como mis disculpas.</speech>
            <speech>Puedes hacer con él lo que quieras.</speech>
            <speech>¡Y no volveré a olvidar el rostro del Entrenador que logró frustrarme en la batalla!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Uf! Eres... muy capaz... Me quedé atrás, pero sólo por una pulgada...</speech>
            <speech>¿Oh? Así que repeliste al gran Maxie en batalla. Haha... ¡Nunca dejas de entretenerme!</speech>
            <speech>¡Un comienzo excelente! ¡Esta vez, permítanme desatar toda mi fuerza!</speech>
            <speech>Una vez que hayas probado el poder Mega Evolucionado de mi Pokémon, ¡te despedirás de tu última pizca de esperanza!</speech>
            <speech>¿Hm? Sí, soy yo. ...¿Oh? Entonces es el Monte Pyre. Comprendo. Iré de inmediato.</speech>
            <speech>Siento interrumpir nuestra batalla, pero me temo que debo excusarme.</speech>
            <speech>Semejante grosería exige reparación. Tome este Meteorito como mis disculpas.</speech>
            <speech>Puedes hacer con él lo que quieras.</speech>
            <speech>¡Y no volveré a olvidar el rostro del Entrenador que consiguió frustrarme en la batalla!</speech>
        </speeches>
        <speeches id="4">
            <speech>No vuelvas a intentarlo.</speech>
        </speeches>
    </conversation>
    <conversation id="18">
        <speeches id="1">
            <speech>¿Eh? ¡Si es ese pequeño bribón!</speech>
            <speech>¡Pero que le den a Maxie! ¡Se nos acaba de escapar!</speech>
            <speech>¿Y acaba de dejar atrás el Meteorito que ha estado loco por encontrar?</speech>
            <speech>¡No puede ser! ¡¿Podría haber descubierto dónde están escondidos los orbes reales?!</speech>
            <speech>¡Ese astuto científico!</speech>
            <speech>¡Siempre me quedo mirando su huesudo trasero correr dos pasos delante de mí!</speech>
        </speeches>
    </conversation>
    <conversation id="22">
        <speeches id="1">
            <speech>¡Hola, $PLAYER_NAME! Ha pasado mucho tiempo, ¿no? He estado entrenando sin parar aquí en el Monte Chimney Peak.</speech>
            <speech>La vista es increíble, pero no estoy aquí por eso.</speech>
            <speech>Me he propuesto llegar a ser campeón de la Elite Four, como tú.</speech>
            <speech>Pero para conseguirlo, necesito empujar más a mi equipo, especialmente a Blaziken.</speech>
            <speech>Mientras entrenaba, me topé con este increíble artículo.</speech>
            <speech>No se parece a nada que haya visto, y Blaziken reaccionó inmediatamente. Es una especie de... mega piedra, creo.</speech>
            <speech>Pero hay un problema. Desde que lo encontró, Blaziken ha estado... diferente, más intenso y difícil de calmar.</speech>
            <speech>Ahí es donde entras tú. Necesito tu ayuda.</speech>
            <speech>Recuerdo a este viejo amigo cerca de la ruta 113, un maestro de las melodías tranquilizadoras y las flautas.</speech>
            <speech>Espero que una flauta especial pueda ayudar a Blaziken a volver a la normalidad.</speech>
            <speech>¿Podrías visitarlo por mí? Es conocido por fabricar flautas con fragmentos rojos, verdes y azules.</speech>
            <speech>Para esta tarea, necesitaremos una Flauta Roja, hecha específicamente con garras de Torchic.</speech>
            <speech>Coger Torchics de IV alto del Safari y comerciar con ellos en su tienda debería ser suficiente.</speech>
            <speech>Una vez que tengas la flauta, vuelve aquí. La usaremos para llegar a Blaziken y, con suerte, ayudarle a controlar este nuevo poder.</speech>
            <speech>¿Te apuntas?</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Hola, $Nombre_del_jugador! ¿Cómo va la búsqueda de la Flauta Roja? ¿Has conseguido atrapar suficientes Antorchas de IV alto en el Safari?</speech>
            <speech>Mi amigo cerca de la ruta 113 es el mejor cuando se trata de hacer esas flautas especiales.</speech>
            <speech>Seguro que puede forjar la Flauta Roja perfecta a partir de las garras de Torchic.</speech>
            <speech>Blaziken y yo contamos contigo. Esta flauta es la clave para calmar a Blaziken y ayudarle a dominar el poder de la megapiedra.</speech>
            <speech>No te preocupes, sé que es mucho pedir. Pero creo en ti, $PLAYER_NAME.</speech>
            <speech>Estamos juntos en esto, ¿verdad? Avísame en cuanto tengas la flauta. ¡El tiempo es oro!</speech>
        </speeches>
    </conversation>
    <conversation id="23">
        <speeches id="1">
            <speech>**La melodía de la Flauta Roja lucha por atravesar el caos mientras el fuego indomable de Mega Blaziken ruge contra la calmante melodía.**</speech>
            <speech>**Las llamas salvajes danzan alrededor, reflejando una criatura perdida en su propio poder. ¿Podrá la melodía alcanzar el corazón de la tempestad?**.</speech>
            <speech>**Los gritos de Mega Blaziken, agudos e implacables, cortan el aire, desafiando la esencia misma de tu determinación.**</speech>
        </speeches>
        <speeches id="2">
            <speech>**Gradualmente, las llamas caóticas se calman, como testimonio de tu espíritu inquebrantable y de la antigua melodía de la Flauta Roja.</speech>
            <speech>**'Has calmado la tormenta dentro de mí, Entrenador. Tu fuerza... resuena incluso a través de mi frenesí', parece susurrar el silencio.**</speech>
            <speech>**Reconociendo tu poder, Mega Blaziken retrocede, su energía salvaje ahora es una llamarada controlada, retirándose con dignidad al abrazo del volcán.</speech>
        </speeches>
        <speeches id="3">
            <speech>**Tu vacilación aviva aún más la furia de Mega Blaziken. La batalla está perdida para los que vacilan", brama el infierno que te rodea.</speech>
            <speech>**'Vuelve sólo cuando tu espíritu arda tan ferozmente como el mío. Hasta entonces, no somos más que sombras el uno para el otro,' el calor crepita.**</speech>
        </speeches>
        <speeches id="4">
            <speech>**La risa ardiente de Mega Blaziken se burla de tu partida. El fuego te asusta, entrenador", parece burlarse entre las llamas.</speech>
            <speech>**Busca la fuerza en el corazón del fuego. Sólo entonces, atrévete a desafiarme de nuevo", sisean las brasas mientras te alejas.</speech>
        </speeches>
        <speeches id="5">
            <speech>**La presencia de Mega Blaziken domina la zona, perdido su control por las salvajes llamas que lo envuelven.**</speech>
            <speech>**Los gritos que emite son una mezcla de poder y desesperación, una llamada a un oponente digno o a un salvador.</speech>
            <speech>**Sin la Flauta Roja, cualquier intento de comunicarla o calmarla parece inútil.**</speech>
        </speeches>
    </conversation>
    <conversation id="24">
        <speeches id="1">
            <speech>Parece que Blaziken sigue inquieto. Aún no hemos logrado calmarlo. Pero no he perdido la esperanza, $PLAYER_NAME.</speech>
            <speech>Tal vez tengamos que intentarlo de nuevo, o tal vez haya otra manera de llegar a Blaziken. No nos rindamos todavía.</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Lo has conseguido! La Flauta Roja... ¡realmente funcionó! Blaziken se está calmando. ¡No puedo creerlo, $Nombre_del_jugador!</speech>
            <speech>Esto significa mucho para mí. Gracias. Con Blaziken calmado, siento que podemos superar cualquier cosa juntos.</speech>
            <speech>¿Vendrías a visitarme al Supermercado Lilycove para una batalla? Significaría mucho tenerte allí.</speech>
        </speeches>
        <speeches id="3">
            <speech>¿No lo harás? Ya veo... Tal vez no estoy listo todavía. Seguiré entrenando hasta que sea lo suficientemente fuerte para ganarme tu visita.</speech>
            <speech>Gracias, $PLAYER_NAME. Por todo. Me has ayudado más de lo que crees. Seré más fuerte la próxima vez que nos veamos.</speech>
            <speech>Hasta entonces, ¡seguiré entrenando aquí!</speech>
        </speeches>
        <speeches id="4">
            <speech>¿De verdad? ¡Es asombroso! Te estaré esperando en el Supermercado Lilycove, entonces. ¡Es una cita!</speech>
            <speech>Gracias, $PLAYER_NAME, no solo por ayudar a Blaziken, sino por darme algo que me hace ilusión. Nos vemos allí.</speech>
        </speeches>
        <speeches id="5"/>
    </conversation>
    <movingNpc direction="DOWN" id="2" name="Slugma" shouldSleep="" speed="1" sprite="218" type="pokemon" x="36" y="58">
        <path>RIGHTx4,LEFTx4</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="3" name="Slugma" shouldSleep="" speed="1" sprite="218" type="pokemon" x="36" y="2">
        <path>DOWNx7,UPx7</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="4" name="Slugma" shouldSleep="" speed="1" sprite="218" type="pokemon" x="34" y="12">
        <path>DOWNx5,UPx5</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="5" name="Magcargo" shouldSleep="" speed="1" sprite="219" type="pokemon" x="22" y="12">
        <path>UPx7,DOWNx7</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="6" name="Magcargo" shouldSleep="" speed="1" sprite="219" type="pokemon" x="28" y="12">
        <path>LEFTx4,RIGHTx4</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="7" name="Numel" shouldSleep="" speed="1" sprite="322" type="pokemon" x="49" y="31">
        <path>UPx6,DOWNx6</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="9" name="Torkoal" shouldSleep="" speed="1" sprite="324" type="pokemon" x="4" y="23">
        <path>UPx7,DOWNx7</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="10" name="Torkoal" shouldSleep="" speed="1" sprite="324" type="pokemon" x="11" y="37">
        <path>LEFTx4,RIGHTx4</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="11" name="Torkoal" shouldSleep="" speed="1" sprite="324" type="pokemon" x="22" y="43">
        <path>RIGHTx3,LEFTx3</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="12" name="Koffing" shouldSleep="" speed="1" sprite="109" type="pokemon" x="45" y="42">
        <path>LEFTx2,RIGHTx2</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="13" name="Koffing" shouldSleep="" speed="1" sprite="109" type="pokemon" x="48" y="55">
        <path>UPx6,DOWNx6</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="8" name="Numel" shouldSleep="" speed="1" sprite="322" type="pokemon" x="19" y="25">
        <path>RIGHTx4,LEFTx4</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="14" name="Skarmory" speed="1" sprite="227" type="pokemon" x="13" y="0">
        <path>DOWNx4,LEFTx10,UPx4,RIGHTx10</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="15" name="Machoke" shouldSleep="" speed="1" sprite="67" type="pokemon" x="44" y="16">
        <path>UPx7,DOWNx7</path>
        <onCollisionSpeech gap="4">Machoke!</onCollisionSpeech>
        <speech>¡Machoke!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="16" name="Machamp" shouldSleep="" speed="1" sprite="68" type="pokemon" x="52" y="13">
        <path>UPx6,RIGHTx4,LEFTx4,DOWNx6</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="17" name="Koffing" speed="1" sprite="109" type="pokemon" x="32" y="43">
        <path>LEFTx3,RIGHTx3</path>
        <onCollisionSpeech gap="4">Koffing!</onCollisionSpeech>
        <speech>¡Koffing!</speech>
    </movingNpc>
</npcs>