<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>{COLOR=AMARILLO}Por favor, seleccione una planta.{ENDCOLOR}</speech>
            <speech>Los botones esperan a que los introduzcas, listos para llevarte donde necesites.</speech>
        </speeches>
        <speeches id="2">
            <speech>{COLOR=VERDE}La consola del ascensor se cierra sola con un suave clic.{ENDCOLOR}</speech>
            <speech>Tendrás que activarlo de nuevo si deseas utilizarlo.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>{COLOR=RED}La puerta está cerrada. Puede que necesite una tarjeta especial.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>{COLOR=RED}La puerta está cerrada. Puede que necesite una tarjeta especial.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>{COLOR=RED}La puerta está cerrada. Puede que necesite una tarjeta especial.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>{COLOR=RED}La puerta está cerrada. Puede que necesite una tarjeta especial.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>{COLOR=RED}La puerta está cerrada. Puede que necesite una tarjeta especial.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>{COLOR=RED}La puerta está cerrada. Puede que necesite una tarjeta especial.</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>{COLOR=RED}La puerta está cerrada. Puede que necesite una tarjeta especial.</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>{COLOR=RED}La puerta está cerrada. Puede que necesite una tarjeta especial.</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>La ciencia es cuestión de resultados. Si batallar ayuda a mi investigación, ¡que así sea!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Imposible! ¡Los datos no predijeron este resultado!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Imposible! ¡Los datos no predijeron este resultado!</speech>
        </speeches>
        <speeches id="4">
            <speech>Otra victoria que añadir a mis cálculos. Nunca tuviste oportunidad.</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>¡Te estás metiendo en problemas, chico!</speech>
        </speeches>
        <speeches id="2">
            <speech>Ugh... Tuviste suerte esta vez.</speech>
        </speeches>
        <speeches id="3">
            <speech>Ugh... Tuviste suerte esta vez.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Ja! El Equipo Rocket siempre gana al final.</speech>
        </speeches>
    </conversation>
    <conversation id="12">
        <speeches id="1">
            <speech>¿Quieres pelear conmigo? Jeje... ¡Podrías arrepentirte!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Agh! Ugh... Lo que sea. Realmente no lo estaba intentando.</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Agh! Ugh... Lo que sea. Realmente no lo estaba intentando.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Ja! ¡Demasiado fácil! Quizás me quede con tu cartera como premio... ¡Es broma!</speech>
        </speeches>
    </conversation>
    <conversation id="13">
        <speeches id="1">
            <speech>¡Ah, qué {COLOR=CYAN}diosa sorpresa{ENDCOLOR}! Un entrenador tan audaz como para desafiar las operaciones del equipo Rocket.</speech>
            <speech>Soy {COLOR=PURPLE}James{ENDCOLOR}, y debo decir que este {COLOR=GOLD}Project T.E.R.A.{ENDCOLOR} ¡ha sido un esfuerzo {COLOR=CYAN}fascinante{ENDCOLOR}!</speech>
            <speech>La {COLOR=PURPLE}Energía Tera{ENDCOLOR} le ha dado a mi Pokémon una elegancia{COLOR=ORO} tan refinada{ENDCOLOR} en la batalla, ¡es realmente {COLOR=CIAN}maravillosa{ENDCOLOR}!</speech>
            <speech>¡Te derrotaré con la {COLOR=PURPUL}mayor sofisticación{ENDCOLOR} y {COLOR=ROJO}villano encanto{ENDCOLOR}!</speech>
        </speeches>
        <speeches id="2">
            <speech>Vaya, vaya... ¡qué actuación tan inesperadamente hábil por tu parte!</speech>
            <speech>Debo admitir que tu estrategia fue bastante {COLOR=PURPLE}impresionante{ENDCOLOR} - ¡casi tan refinada como la mía!</speech>
            <speech>Esta derrota escuece, pero me retiraré con la dignidad intacta.</speech>
            <speech>{COLOR=RED}El Equipo Rocket{ENDCOLOR} recordará este encuentro... ¡y estaremos {COLOR=PURPLE}mejor preparados{ENDCOLOR} la próxima vez!</speech>
        </speeches>
        <speeches id="3">
            <speech>Una experiencia de lo más humillante, debo decir... Luchaste con {COLOR=PURPLE}considerable habilidad{ENDCOLOR}.</speech>
            <speech>Quizá el {COLOR=ORO}Proyecto T.E.R.A.{ENDCOLOR} necesitaba más {COLOR=ROJO}refinamiento{ENDCOLOR} antes de implementarse...</speech>
            <speech>Hasta que nos volvamos a ver, entrenador... Estaré {COLOR=PURPLE}estudiando{ENDCOLOR} tus técnicas con gran interés.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Excelente! Una victoria perfectamente ejecutada, si me permiten decirlo.</speech>
            <speech>¡Mi equipo {COLOR=ORO}mejorado con Tera{ENDCOLOR} actuó con una precisión {COLOR=CIAN}elegante{ENDCOLOR}!</speech>
            <speech>Ahora bien, creo que es hora de que hagas una salida airosa.</speech>
        </speeches>
        <speeches id="5">
            <speech>¡Vaya, qué impaciencia! Eso es bastante {COLOR=PURPLE}improcedente{ENDCOLOR}, ¿no crees?</speech>
            <speech>Un verdadero caballero maneja los asuntos en el orden correcto - ¡despeja el edificio primero!</speech>
            <speech>Estaré esperando aquí, quizás disfrutando de un poco de {COLOR=ORO}Earl Grey{ENDCOLOR} mientras tú terminas tu {COLOR=ROJO}trabajo preliminar{ENDCOLOR}.</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Dr. Terrance" shouldSleep="" speed="1" sprite="5" type="npc" x="22" y="6">
        <path>RIGHTx4,LEFTx4</path>
        <onCollisionSpeech gap="4"/>
        <speech>Teletransportadores, paredes invisibles, Slowkings parlantes...</speech>
        <speech>Sinceramente, Kanto alcanzó su punto álgido de rareza hace décadas y siguió avanzando.</speech>
    </movingNpc>
</npcs>