<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Las batallas son como los picnics: ¡hay que disfrutar del momento y saborear la diversión!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Oh no! ¡Ahora mis sandwiches están realmente tostados!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Oh no! ¡Ahora mis sandwiches están realmente tostados!</speech>
        </speeches>
        <speeches id="4">
            <speech>No hay nada mejor que una buena comida y una victoria: ¡el mejor día de todos!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Tch. Te ves demasiado limpio. ¡Arruinemos un poco las cosas!</speech>
        </speeches>
        <speeches id="2">
            <speech>Ugh... Supongo que tengo que respetar tu fuerza. ¡Pero que no se te suba a la cabeza!</speech>
        </speeches>
        <speeches id="3">
            <speech>Ugh... Supongo que tengo que respetar tu fuerza. ¡Pero que no se te suba a la cabeza!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Demasiado lento! ¡Tienes que luchar con actitud si quieres ganar!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>¡La carretera es mía, y esta batalla también! ¿Crees que puedes mantener el ritmo?</speech>
        </speeches>
        <speeches id="2">
            <speech>Grr... Quizá debería haber tuneado mi Pokémon en lugar de mi moto.</speech>
        </speeches>
        <speeches id="3">
            <speech>Grr... Quizá debería haber tuneado mi Pokémon en lugar de mi moto.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Ja! ¡Demasiado lento! ¡Tienes que montar duro y luchar más duro!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Batallar es como elegir un atuendo, ¡tienes que saber qué es lo que mejor te sienta!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Hmph! Tal vez mi estrategia no era tan bonita como pensaba...</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Hmph! Tal vez mi estrategia no era tan bonita como pensaba...</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Lo veis? Estilo y habilidad van de la mano.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>¡Mis Pokémon y yo somos los mejores amigos! Siempre luchamos juntos y sonrientes.</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh no... ¡Necesitamos entrenar más duro! Pero seremos positivos.</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh no... ¡Necesitamos entrenar más duro! Pero seremos positivos.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Bien! Ganar sienta aún mejor cuando te diviertes.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>¡Hora de un haiku de batalla! Este es realmente bueno. Mi oponente es un niño. Ganaré seguro.</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Hora de un haiku de batalla! No puedo creerlo. Todavía puedo continuar. Todavía puedo luchar.</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Hora de un haiku de batalla! No puedo creerlo. Todavía puedo continuar. Todavía puedo luchar.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Hora de un haiku de batalla! Sabía que ganaría. Sí, mis Pokémon y yo somos así de fuertes.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>¡Mis Pokémon vuelan más alto que el resto! Veamos si puedes seguirme el ritmo.</speech>
        </speeches>
        <speeches id="2">
            <speech>Parece que me han cortado las alas. Es hora de entrenar más duro.</speech>
        </speeches>
        <speeches id="3">
            <speech>Parece que me han cortado las alas. Es hora de entrenar más duro.</speech>
        </speeches>
        <speeches id="4">
            <speech>Otra victoria, ¡como el viento que lleva a mis Pokémon a nuevas alturas!</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>El viento susurra secretos y me dice que te espera una dura batalla.</speech>
        </speeches>
        <speeches id="2">
            <speech>El viento cambia Parece que no estaba destinado a ganar esta vez.</speech>
        </speeches>
        <speeches id="3">
            <speech>El viento cambia Parece que no estaba destinado a ganar esta vez.</speech>
        </speeches>
        <speeches id="4">
            <speech>Como las aves migratorias, avanzo siempre en busca del siguiente reto.</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>Un buen entrenador entiende el flujo de la batalla igual que los pájaros entienden el viento.</speech>
        </speeches>
        <speeches id="2">
            <speech>Incluso los mejores pilotos se ven atrapados en una tormenta a veces...</speech>
        </speeches>
        <speeches id="3">
            <speech>Incluso los mejores pilotos se ven atrapados en una tormenta a veces...</speech>
        </speeches>
        <speeches id="4">
            <speech>Paciencia y precisión, ¡así es como gana un verdadero cuidador de aves!</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>¡La lucha me pone las pilas! Hagamos de esto un viaje salvaje</speech>
        </speeches>
        <speeches id="2">
            <speech>Uf, mi ímpetu acaba de estrellarse ¡Mejor acelerar para la próxima vez!</speech>
        </speeches>
        <speeches id="3">
            <speech>Uf, mi ímpetu acaba de estrellarse ¡Mejor acelerar para la próxima vez!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Ja! ¡Te dejé en el polvo! ¡Tienes que acelerar el paso!</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>Una buena batalla es como una buena pesca: ¡sólo hay que esperar el momento adecuado para golpear!</speech>
        </speeches>
        <speeches id="2">
            <speech>Supongo que dejé que este se escapara. ¡Debería haber usado una línea más fuerte!</speech>
        </speeches>
        <speeches id="3">
            <speech>Supongo que dejé que este se escapara. ¡Debería haber usado una línea más fuerte!</speech>
        </speeches>
        <speeches id="4">
            <speech>La paciencia vale la pena, chico. Igual que en la pesca, ¡igual que en las batallas!</speech>
        </speeches>
    </conversation>
    <conversation id="12">
        <speeches id="1">
            <speech>¡Contemplad! Los mejores artistas del cielo entran en escena. Mira cómo mis pájaros bailan en la batalla.</speech>
        </speeches>
        <speeches id="2">
            <speech>Una trágica caída del cielo, pero toda gran actuación tiene un bis.</speech>
        </speeches>
        <speeches id="3">
            <speech>Una trágica caída del cielo, pero toda gran actuación tiene un bis.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Maravilloso! ¡Mis Pokémon han vuelto a pintar el cielo de victoria!</speech>
        </speeches>
    </conversation>
    <movingNpc direction="RIGHT" id="1" name="Luvdisc" speed="1" sprite="370" type="pokemon" x="73" y="35">
        <path>RIGHTx3,DOWNx1,RIGHTx3,LEFTx3,UPx1,LEFTx3</path>
        <onCollisionSpeech gap="4">Luuuuv!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="2" name="Kevin" speed="1" sprite="24" type="npc" x="65" y="37">
        <path>RIGHTx4,LEFTx4</path>
        <onCollisionSpeech gap="4"/>
        <speech>Yo no te lo he dicho, pero ¿sabes qué?</speech>
        <speech>¡A veces se puede encontrar una Heracronita de Heracross!</speech>
        <speech>¿No es increíble?</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="3" name="Tatsugiri" speed="1" sprite="1458" type="pokemon" x="110" y="3">
        <path>DOWNx9,LEFTx1,UPx9,RIGHTx1</path>
        <onCollisionSpeech gap="4">Tatsuuuuuuu!</onCollisionSpeech>
    </movingNpc>
    <npc direction="LEFT" hidden="false" id="4" name="Phil" randomRotation="true" sprite="39" x="89" y="24">
        <speech>Ten un poco de paciencia con estas rutas, chico.</speech>
        <speech>Si no mantienes sanos a tus Pokémon, estarán más irritables que yo antes del café de la mañana.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="5" name="Zack" randomRotation="false" sprite="49" x="86" y="37">
        <speech>¿¡Qué pasa!?</speech>
        <speech>Creo que a los Pokémon de tipo agua de por aquí no les gusta que Raichu y yo ensayemos con la banda.</speech>
        <speech>¡Quizá estén celosos de nuestros movimientos!</speech>
    </npc>
    <movingNpc direction="LEFT" id="6" name="Raichu" speed="1" sprite="26" type="pokemon" x="88" y="37">
        <path>LEFTx1,RIGHTx1</path>
        <onCollisionSpeech gap="4">Raii!? Raichu!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="7" name="Pelipper" speed="1" sprite="279" type="pokemon" x="80" y="46">
        <path>RIGHTx8,UPx3,RIGHTx5,LEFTx5,DOWNx3,LEFTx8</path>
        <onCollisionSpeech gap="4">WRAAAAWK!!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="8" name="Heracross" speed="1" sprite="214" type="pokemon" x="97" y="50">
        <path>RIGHTx10,LEFTx10</path>
        <onCollisionSpeech gap="4">Herrrraaaaa!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="10" name="Bounsweet" speed="1" sprite="761" type="pokemon" x="73" y="23">
        <path>RIGHTx5,LEFTx5</path>
        <onCollisionSpeech gap="4">Sweeeeet!</onCollisionSpeech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="11" name="Steve" randomRotation="false" sprite="35" x="67" y="28">
        <speech>Estoy usando mi Rastreador Brillante para encontrar eventualmente un Pelipper y estoy casi al 70%, ¡así que sal de aquí!</speech>
        <speech>¿Qué es eso? Oh sí, puedes encontrar uno en cualquier Poké Mart por 30.000.</speech>
        <speech>Obtendrás un aumento progresivo hasta el 100% de tu tasa de encuentros brillantes con ese Pokémon.</speech>
    </npc>
    <movingNpc direction="LEFT" id="12" name="Andrew" speed="1" sprite="39" type="npc" x="65" y="22">
        <path>LEFTx8,UPx1,RIGHTx8,DOWNx1</path>
        <onCollisionSpeech gap="4"/>
        <speech>¿Has obtenido ya el Poder Oculto para tus Pokémon?</speech>
        <speech>Mi Magneton conoce el Poder Oculto del Fuego, ¡y derrite otros tipos de acero como si fueran mantequilla!</speech>
    </movingNpc>
    <npc direction="LEFT" hidden="false" id="14" name="Amanda" randomRotation="true" sprite="60" x="36" y="11">
        <speech>¡Vaya! Estaba alimentando a todos los Skwovet de por aquí, ¡y apareció uno con un aspecto realmente enfermizo y brillante!</speech>
        <speech>Salió corriendo en cuanto me acerqué... ¡Realmente espero que esté bien!</speech>
    </npc>
    <movingNpc direction="DOWN" id="15" name="Skwovet" speed="1" sprite="1097" type="pokemon" x="26" y="3">
        <path>DOWNx4,RIGHTx3,DOWNx2,UPx2,LEFTx3,UPx4</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="UP" id="16" name="Fearow" speed="1" sprite="22" type="pokemon" x="0" y="20">
        <path>UPx2,RIGHTx1,UPx2,RIGHTx1,LEFTx1,DOWNx2,LEFTx1,DOWNx2</path>
        <onCollisionSpeech gap="4">Fearooww!</onCollisionSpeech>
    </movingNpc>
    <npc direction="UP" hidden="false" id="17" name="Noah" randomRotation="true" sprite="8" x="10" y="34">
        <speech>¿Has oído hablar alguna vez de un Pokémon llamado Toucannon?</speech>
        <speech>Literalmente, ¡podrías cocinar comida en su pico mientras usa el Pico Explosivo!</speech>
        <speech>Sólo... ¡ten cuidado que puede quemarte a ti también!</speech>
    </npc>
    <movingNpc direction="RIGHT" id="13" name="Rhys" speed="1" sprite="80" type="npc" x="44" y="25">
        <path>RIGHTx3,DOWNx4,LEFTx3,UPx4</path>
        <onCollisionSpeech gap="4"/>
        <speech>¡Deberían celebrar concursos de carreras aquí!</speech>
    </movingNpc>
</npcs>