<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Permítanme presentarme formalmente. Soy Wallace. El líder del gimnasio de la ciudad de Sootopolis.</speech>
            <speech>Hay algo en ti... Una diferencia en tu comportamiento... Creo que lo percibo en ti.</speech>
            <speech>Lo que pasó dentro de la Cueva del Origen, y lo que hiciste allí...</speech>
            <speech>Nuestra próxima batalla lo dejará claro.</speech>
            <speech>Ahora, muéstrame. Muéstrame el poder que ejerces con tus Pokémon.</speech>
            <speech>Y yo, por mi parte, te presentaré... una representación de ilusiones en el agua... ¡realizada por mí y mis Pokémon!</speech>
        </speeches>
        <speeches id="2">
            <speech>Ahora me doy cuenta de tu autenticidad y magnificencia como Entrenador Pokémon.</speech>
            <speech>Me alegro mucho de haberte conocido a ti y a tus Pokémon. Has demostrado ser digno de la Insignia de la Lluvia. Acéptala.</speech>
            <speech>Y para que nunca olvides la batalla que compartimos...</speech>
            <speech>Ahora, con el poder de la Insignia Lluvia, podrás usar este movimiento de HM, Cascada en Hoenn, para escalar muros de agua en cascada.</speech>
            <speech>Ahora tienes muchos caminos abiertos. Uno de ellos te llevará a la Liga Pokémon.</speech>
            <speech>Es el objetivo al que aspiran todos los Entrenadores de Hoenn tras obtener las ocho Insignias de Gimnasio.</speech>
            <speech>Si ese es el camino que elegiste, entonces deberás encontrar el camino a la isla de la que se dice que es la más remota de Hoenn: Ever Grande.</speech>
        </speeches>
        <speeches id="3">
            <speech>Tus habilidades en la batalla son realmente notables.</speech>
            <speech>Está claro que tú y tus Pokémon compartís un vínculo de confianza y respeto, que es la esencia de ser un gran Entrenador.</speech>
            <speech>Aunque fui derrotado, no estoy desanimado. Al contrario, nuestra batalla me inspira para seguir mejorando.</speech>
            <speech>Que tu viaje sea tan vasto y profundo como el océano, lleno de aventuras, descubrimientos y lazos de amistad entre tú y tus Pokémon.</speech>
        </speeches>
        <speeches id="4">
            <speech>Esta batalla fue demasiado fácil para nosotros. No obstante, nos complace darte otra oportunidad.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>¡Alto de inmediato! ¡Tú! ¡Crucemos lanzas!</speech>
        </speeches>
        <speeches id="2">
            <speech>No me lo pusiste fácil en absoluto... Eso estuvo bien. Usted es un tomador de riesgos.</speech>
        </speeches>
        <speeches id="3">
            <speech>No me lo pusiste fácil en absoluto... Eso estuvo bien. Usted es un tomador de riesgos.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Entrenador, me rindo! ¡Por favor, perdóname!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>A pesar de mi edad, no puedo renunciar a las batallas Pokémon.</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Hay que tener cuidado! Las batallas Pokémon pueden robarte mucho tiempo...</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Hay que tener cuidado! Las batallas Pokémon pueden robarte mucho tiempo...</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Cómo habría sido mi vida sin Pokémon?</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Ir fácil en mí no está en mi vocabulario.</speech>
        </speeches>
        <speeches id="2">
            <speech>Aunque lo dé todo, no tiene sentido si pierdo.</speech>
        </speeches>
        <speeches id="3">
            <speech>Aunque lo dé todo, no tiene sentido si pierdo.</speech>
        </speeches>
        <speeches id="4">
            <speech>Para mí, la etiqueta es derrotar sin piedad a mis oponentes en la batalla, incluso a los débiles.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>A veces necesito un poco de tiempo para descansar. Voy a tomármelo con calma esta batalla, ¿vale?</speech>
        </speeches>
        <speeches id="2">
            <speech>Se suponía que iba a ser refrescante, pero ahora me siento más estresado.</speech>
        </speeches>
        <speeches id="3">
            <speech>Se suponía que iba a ser refrescante, pero ahora me siento más estresado.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ha sido una victoria fácil y bonita. Mañana volveré a trabajar duro.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Estoy tan absorto en las batallas Pokémon que he empezado a preocuparme por mí mismo.</speech>
        </speeches>
        <speeches id="2">
            <speech>Fue divertido aunque perdí, pero me preocupa que no me decepcione en absoluto.</speech>
        </speeches>
        <speeches id="3">
            <speech>Fue divertido aunque perdí, pero me preocupa que no me decepcione en absoluto.</speech>
        </speeches>
        <speeches id="4">
            <speech>Cuando gano una batalla, mi mente se queda en blanco. Es realmente preocupante.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Mi preciado Pokémon y yo llevamos juntos mucho tiempo. No hace falta que nos lo pongas fácil.</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Qué acto tan desconsiderado! ¡Atacar a un anciano y a su Pokémon!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Qué acto tan desconsiderado! ¡Atacar a un anciano y a su Pokémon!</speech>
        </speeches>
        <speeches id="4">
            <speech>Hohoho... ¿Es esto lo que llaman la sabiduría de la edad?</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>¡Recientemente he rehecho mi vida por completo! Por fin he renacido como Belleza Dragón.</speech>
        </speeches>
        <speeches id="2">
            <speech>Sí, hace apenas medio año era cinturón negro. Toda una transformación, ¿no crees?</speech>
        </speeches>
        <speeches id="3">
            <speech>Sí, hace apenas medio año era cinturón negro. Toda una transformación, ¿no crees?</speech>
        </speeches>
        <speeches id="4">
            <speech>Si quieres hacer realidad tus sueños, ¡tienes que dedicarte por completo!</speech>
        </speeches>
    </conversation>
    <npc direction="DOWN" hidden="false" id="1" name="Gym Guide" randomRotation="false" sprite="5" x="10" y="49">
        <speech>¡Ah, campeón en ciernes!</speech>
        <speech>Bienvenido al Gimnasio Sootopolis, donde los tipos de agua de Wallace están haciendo olas.</speech>
        <speech>Pero no te preocupes. Los Pokémon eléctricos, de hierba o dragón son tus fieles compañeros en esta aventura acuática.</speech>
        <speech>Mantén las velas desplegadas, sube la marea y surfearás hacia el éxito junto al elegante Wallace.</speech>
    </npc>
</npcs>