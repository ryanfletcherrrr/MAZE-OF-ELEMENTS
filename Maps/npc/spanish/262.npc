<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Deléitese con los artistas aéreos más elegantes del mundo.</speech>
        </speeches>
        <speeches id="2">
            <speech>El espectáculo debe continuar incluso después de un tropiezo.</speech>
        </speeches>
        <speeches id="3">
            <speech>El espectáculo debe continuar incluso después de un tropiezo.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Impecable! Un despliegue perfecto de habilidad y elegancia.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Dejo que el viento guíe mis batallas... ¡igual que mis Pokémon!</speech>
        </speeches>
        <speeches id="2">
            <speech>Parece que me pilló un mal borrador.</speech>
        </speeches>
        <speeches id="3">
            <speech>Parece que me pilló un mal borrador.</speech>
        </speeches>
        <speeches id="4">
            <speech>El viento estaba a mi favor. ¡Qué bien sienta llevar la brisa a la victoria!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Las batallas de tipo volador son cuestión de posicionamiento. ¿Puedes mantener el ritmo?</speech>
        </speeches>
        <speeches id="2">
            <speech>Hmph... Calculé mal. La próxima vez, no seré tan descuidado.</speech>
        </speeches>
        <speeches id="3">
            <speech>Hmph... Calculé mal. La próxima vez, no seré tan descuidado.</speech>
        </speeches>
        <speeches id="4">
            <speech>Tal como estaba previsto. ¡La victoria consiste en saber cuándo atacar!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Un día, volaré junto a mis Pokémon. Hasta entonces, ¡yo lucho con ellos!</speech>
        </speeches>
        <speeches id="2">
            <speech>En tierra, pero volveré a encontrar mis alas.</speech>
        </speeches>
        <speeches id="3">
            <speech>En tierra, pero volveré a encontrar mis alas.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Cada victoria es un paso más cerca de tocar el cielo!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Me enfrento a Pokémon duros todos los días. ¿Crees que tienes lo que hace falta para superarme?</speech>
        </speeches>
        <speeches id="2">
            <speech>Vaya, parece que me han echado de esta batalla.</speech>
        </speeches>
        <speeches id="3">
            <speech>Vaya, parece que me han echado de esta batalla.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Así es como se maneja una pelea! Ahora, no vayas llorando en tu sombrero, ¿me oyes?</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Aquí fuera, es la supervivencia del más fuerte. ¡Veamos si puedes soportar el calor, compañero!</speech>
        </speeches>
        <speeches id="2">
            <speech>Bueno, parece que me han superado. Supongo que me quitaré el sombrero.</speech>
        </speeches>
        <speeches id="3">
            <speech>Bueno, parece que me han superado. Supongo que me quitaré el sombrero.</speech>
        </speeches>
        <speeches id="4">
            <speech>Por aquí, la experiencia se impone. Mejor suerte la próxima vez.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>¿Crees que puedes seguirme el ritmo? ¡Mi equipo y mi moto están hechos para la velocidad!</speech>
        </speeches>
        <speeches id="2">
            <speech>Supongo que me he topado con un bache de velocidad. ¡Volveré más rápido que nunca!</speech>
        </speeches>
        <speeches id="3">
            <speech>Supongo que me he topado con un bache de velocidad. ¡Volveré más rápido que nunca!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Haha! ¡Me estás comiendo el polvo, novato!</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>La lucha y el ciclismo consisten en saber cuándo hay que pisar el acelerador y cuándo hay que tomárselo con calma.</speech>
        </speeches>
        <speeches id="2">
            <speech>Quizá me lo tomé con demasiada calma esa vez.</speech>
        </speeches>
        <speeches id="3">
            <speech>Quizá me lo tomé con demasiada calma esa vez.</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Lo veis? ¡Un viaje tranquilo conduce a la victoria!</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>¡Sin frenos, sin miedo! ¡Sólo yo, mi coche y una batalla a toda velocidad!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Urgh! Supongo que debería haber ido un poco más despacio...</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Urgh! Supongo que debería haber ido un poco más despacio...</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Así es como se quema la goma! ¡No puedes detenerme!</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>El camino es interminable, pero para ti, esta batalla será un callejón sin salida.</speech>
        </speeches>
        <speeches id="2">
            <speech>Cada derrota es sólo otro camino que recorrer.</speech>
        </speeches>
        <speeches id="3">
            <speech>Cada derrota es sólo otro camino que recorrer.</speech>
        </speeches>
        <speeches id="4">
            <speech>Otra batalla, otra victoria. El camino me llama hacia adelante.</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Chansey" speed="1" sprite="113" type="pokemon" x="8" y="4">
        <path>DOWNx4,LEFTx4,DOWNx1,UPx1,RIGHTx4,UPx4</path>
        <onCollisionSpeech gap="4">Chaaanseeey!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Pidgeotto" speed="1" sprite="17" type="pokemon" x="24" y="18">
        <path>DOWNx18,UPx18</path>
        <onCollisionSpeech gap="4">KREEEEH!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="UP" id="3" name="Tropius" speed="1" sprite="357" type="pokemon" x="22" y="53">
        <path>UPx10,DOWNx10</path>
        <onCollisionSpeech gap="4">THROOOH-HAAAW!</onCollisionSpeech>
    </movingNpc>
    <npc direction="RIGHT" hidden="false" id="5" name="Liam" randomRotation="false" sprite="34" x="14" y="16">
        <speech>Mi Primeape evolucionó a Annihilape tras usar Puño de furia tres veces en una batalla.</speech>
        <speech>¡Ahora es mucho más malote!</speech>
    </npc>
    <movingNpc direction="UP" id="4" name="Mason" speed="1" sprite="86" type="npc" x="8" y="52">
        <path>UPx5,DOWNx5</path>
        <onCollisionSpeech gap="4"/>
        <speech>Según mi amigo, hay más de un tipo de EXP Share.</speech>
    </movingNpc>
</npcs>