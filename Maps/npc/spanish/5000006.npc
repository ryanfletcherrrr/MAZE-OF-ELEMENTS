<npcs>
    <npc direction="LEFT" id="1" name="Neighbour Merrisa" sprite="14" x="7" y="7">
        <speech>Hey $PLAYER_NAME, ¿Sabías que los Pokemon pueden ganar Amistad?</speech>
        <speech>La amistad también se llama Felicidad, y se puede ganar ganando batallas Pokemon, usando ciertos objetos y curando a los Pokemon.</speech>
        <speech>Es increíble pensar que si tratas a tus Pokémon con amor y respeto, ellos te lo devolverán de diversas maneras.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="2" name="Timmy" sprite="2" x="2" y="8">
        <speech>A mi madre le encanta investigar cómo la amistad con un Pokémon puede afectar a su temperamento.</speech> 
		<speech>A veces se adelanta a los acontecimientos y le encanta hablar de ello con todo el mundo... Es un poco raro.</speech>
    </npc>

    <conversation id="1" canSkip="false">
        <speeches id="1">
            <speech>Ah, $PLAYER_NAME! Me sorprende verte aquí. Melissa y yo estábamos en medio de una discusión crítica sobre ecología Pokémon.</speech>
            <speech>Ve que has sido bastante meticuloso en tu investigación Pokémon. ¡Haber visto más de 300 Pokémon no es poca cosa!</speech>
            <speech>Quizás este encuentro inesperado puede ser una oportunidad. ¿Qué te parece una batalla para probar tu conocimiento? ¿Qué nivel de desafío prefieres?</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Impresionante! Esa batalla fue una demostración notable de tus habilidades y conocimiento.</speech>
            <speech>Está claro que has aprendido mucho en tu viaje. ¡Sigue con el buen trabajo, $PLAYER_NAME!</speech>
        </speeches>
        <speeches id="3">
            <speech>Parece que el momento llama a una reflexión y estudio adicionales. Después de todo, el viaje de un Entrenador nunca termina.</speech>
            <speech>Preparémonos y reunámonos nuevamente para otro desafío después de $DURATION.</speech>
            <speech>Aprovecha esta oportunidad para ampliar tus encuentros Pokémon y regresa cuando estés listo.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ah, parece que esta batalla no salió como esperabas. Pero no te preocupes, cada revés es una oportunidad para aprender.</speech>
            <speech>Toma esta experiencia, $PLAYER_NAME, y deja que te guíe en tus futuros encuentros. El camino de un Entrenador Pokémon está lleno de aprendizaje y crecimiento continuo.</speech>
        </speeches>
        <speeches id="5">
            <speech>Oh, parece que aún no has encontrado 300 Pokémon. La observación y la experiencia son cruciales para entender a los Pokémon.</speech>
            <speech>Cuando hayas expandido tus encuentros, regresa. Estoy deseando ver tu progreso y desafiarte entonces.</speech>
        </speeches>
    </conversation>
</npcs>