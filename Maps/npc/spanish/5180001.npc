<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>¡¿Qué?! ¡No puede ser! ¿Tienes la llave?</speech>
            <speech>Cerrar la puerta no tenía sentido. ¡Yo soy el perdedor en esto después de todo!</speech>
            <speech>¡No es momento para la autocompasión! ¡Tengo que alertar al Comandante!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>¡Eh! ¡Esto no es diversión ni juegos! ¡Te digo que esto es trabajo de verdad!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡¿Qué....?! Algún mocoso arruinó mi trabajo...</speech>
        </speeches>
        <speeches id="3">
            <speech>¡¿Qué....?! Algún mocoso arruinó mi trabajo...</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Vete mocoso!</speech>
        </speeches>
        <speeches id="5"/>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Recoger electricidad de los parques eólicos del Valle... Ésa es nuestra misión.</speech>
        </speeches>
        <speeches id="2">
            <speech>Realmente no me gustan los niños que también resultan ser entrenadores duros...</speech>
        </speeches>
        <speeches id="3">
            <speech>Realmente no me gustan los niños que también resultan ser entrenadores duros...</speech>
        </speeches>
        <speeches id="4">
            <speech>¡No tienes ni idea de lo que el Equipo Galáctico está intentando conseguir!</speech>
        </speeches>
        <speeches id="5"/>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Soy uno de los tres Comandantes del Equipo Galáctico.</speech>
            <speech>...No, espera. Ese es uno de los cuatro Comandantes. ¡Mi nombre es Marte!</speech>
            <speech>Hemos estado intentando crear un mundo nuevo que sea mejor que éste...</speech>
            <speech>Pero la gente ha demostrado poca comprensión sobre lo que hacemos.</speech>
            <speech>Tú tampoco lo entiendes, ¿verdad? Es un poco triste...</speech>
            <speech>Así que vamos a celebrar una batalla para decidir qué debemos hacer a continuación.</speech>
            <speech>Si gano, te vas.</speech>
            <speech>¡Si ganáis, nosotros, el Equipo Galáctico, nos iremos!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Uy! Lo he estropeado todo. Pero no pasa nada. Disfruté bastante de nuestra batalla.</speech>
        </speeches>
        <speeches id="3"/>
        <speeches id="4">
            <speech>¡No tienes ni idea de lo que el Equipo Galáctico está intentando conseguir!</speech>
        </speeches>
        <speeches id="5"/>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Mis Pokémon ya no pueden combatir.</speech>
            <speech>Me van a quitar mis Pokémon por meter la pata...</speech>
            <speech>¡Humph! ¡Espera! ¡Nuestro Comandante te golpeará!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Vaya, vaya. Perder a un niño, ¿verdad? Pero, no importa. Hemos recogido mucha electricidad.</speech>
            <speech>Con el poder que obtuvimos, podemos hacer algo bastante espectacular.</speech>
            <speech>Me parece bastante obvio, Caronte, el genio que hasta el jefe reconoce. Ahora, Marte, deberíamos
                yendo.
            </speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Equipo Galáctico...</speech>
            <speech>Decían que tenían que reunir Pokémon y energía como fuera.</speech>
            <speech>Era para crear un nuevo universo, o eso decían.</speech>
            <speech>Nada de lo que dijeron tenía sentido para mí.</speech>
            <speech>No sabes cuánto te agradezco que me salvaras.</speech>
            <speech>¡Por fin podré volver a ver a mi hija pequeña!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Oh, perdón! ¡Ahaha! ¡Me tenían trabajando sin parar!</speech>
        </speeches>
        <speeches id="3">
            <speech>Ah, sí, un Pokémon globo aparece delante de la fábrica de viento.</speech>
            <speech>Siempre es un día determinado de la semana, pero no estoy seguro de qué día.</speech>
            <speech>¿Su aspecto podría tener algo que ver con la fusión de la energía generada por el viento?</speech>
            <speech>El Valley Windworks utiliza turbinas para captar energía de los vientos impulsados desde las montañas de este cañón.</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>¡Papá!</speech>
            <speech>¡Qué asco! ¡Papá, apestas! ¡Ve a ducharte ahora, apestoso!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Gracias, Entrenador! ¡Hiciste que esa mala gente se fuera!</speech>
            <speech>¡Creo que los Pokémon del globo vendrán de visita otra vez!</speech>
        </speeches>
    </conversation>
    <!--<npc direction="DOWN" hidden="false" id="1" name="Kaio" sprite="37" x="22" y="5">
        <speech>The Valley Windworks uses turbines to capture energy from winds driven from the mountains in this canyon.</speech>
        <speech>We produce energy from the power of nature itself. It's quite wonderful.</speech>
    </npc>
    <npc direction="LEFT" hidden="false" id="2" name="Marie" sprite="82" x="25" y="6">
        <speech>If the balloon Pokémon came, the wind would blow it away!</speech>
    </npc>-->
</npcs>