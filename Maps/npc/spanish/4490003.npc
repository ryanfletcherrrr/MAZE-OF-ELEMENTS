<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Nací en un cementerio y crecí en un cementerio. Dejadme a mí todas vuestras maldiciones y rencores.</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Derrotarme es increíble! ¡Tú también debes estar un poco maldito!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Derrotarme es increíble! ¡Tú también debes estar un poco maldito!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Terrible! ¡No estás guardando suficiente rencor! ¡Si quieres ganar, pon más en tus maldiciones!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Jejeje... Lo veo todo claro... Eres un médico de un planeta malvado, ¿no?</speech>
        </speeches>
        <speeches id="2">
            <speech>Eh...ondas de radio... Hay ondas de radio que salen de tu nariz...</speech>
        </speeches>
        <speeches id="3">
            <speech>Eh...ondas de radio... Hay ondas de radio que salen de tu nariz...</speech>
        </speeches>
        <speeches id="4">
            <speech>Ugh... Mis poderes... Mis poderes son... Creo que necesito una enfermera...</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Un joven aventurero trotamundos. ¡Ese soy yo!</speech>
        </speeches>
        <speeches id="2">
            <speech>La aventura me llama. ¡Adiós! ¡Hasta la vista!</speech>
        </speeches>
        <speeches id="3">
            <speech>La aventura me llama. ¡Adiós! ¡Hasta la vista!</speech>
        </speeches>
        <speeches id="4">
            <speech>Ver Pokémon de todo el mundo es el objetivo de mi viaje.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Susurros de poder ancestral resuenan en la noche. Te atreves a escuchar su llamada?</speech>
            <speech>Bajo la atenta mirada de la luna, nuestro pacto se reúne. El desafío de los siglos espera vuestro valor.</speech>
        </speeches>

        <speeches id="2">
            <speech>Aunque triunféis, la oscuridad eterna teje su paciencia. Nuestra determinación permanece inquebrantable, imperturbable.</speech>
            <speech>Las sombras se separan, revelando un camino hacia nuestro enigmático líder. Una recompensa para los valientes, los fuertes, los victoriosos.</speech>
        </speeches>

        <speeches id="3">
            <speech>¡Increíble! Tu fuerza atraviesa el velo de la noche, rivalizando con los antiguos poderes que dominamos.</speech>
            <speech>Velado en secreto, nuestro líder espera. Tu victoria te ha valido una audiencia en el corazón de las sombras.</speech>
            <speech>Nuestros rituales, ligados a la danza celestial, no encuentran favor a esta hora. El momento adecuado aún se nos escapa.</speech>
            <speech>Regresa cuando la luna reine suprema sobre la noche, en $DURACIÓN. Sólo entonces se levantará el velo.</speech>
        </speeches>

        <speeches id="4">
            <speech>¡Increíble! Tu fuerza atraviesa el velo de la noche, rivalizando con los antiguos poderes que dominamos.</speech>
            <speech>Velado en secreto, nuestro líder espera. Tu victoria te ha valido una audiencia en el corazón de las sombras.</speech>
        </speeches>

        <speeches id="5">
            <speech>Los cuerpos celestes aún no se han alineado; nuestro poder permanece latente, a la espera del momento ordenado.</speech>
            <speech>Vuelve el viernes, cuando el resplandor de la luna atraviese el velo de la realidad y nuestro poder esté en su cenit.</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Dusclops" speed="1" sprite="356" type="pokemon" x="1" y="6">
        <path>DOWNx5,RIGHTx3,LEFTx3,UPx5</path>
        <onCollisionSpeech gap="4">Dusclops!</onCollisionSpeech>
        <speech>¡Dusclops!</speech>
    </movingNpc>
</npcs>