<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>¡Para! Voy a tener que pedirte que no te muevas. ¡Sólo siéntate y mira lo que hago con mis tijeras!</speech>
        </speeches>
        <speeches id="2">
            <speech>Qué pena. Parece que he desafilado mis preciosas tijeras de podar en una hierba ordinaria.</speech>
        </speeches>
        <speeches id="3">
            <speech>Qué pena. Parece que he desafilado mis preciosas tijeras de podar en una hierba ordinaria.</speech>
        </speeches>
        <speeches id="4">
            <speech>Hola, soy Soy jardinero. Mis tijeras son mis únicas amigas de verdad.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Hay gente joven y guapa, pero la juventud es diferente de la belleza.</speech>
        </speeches>
        <speeches id="2">
            <speech>La juventud es sólo juventud. Ojalá me hubiera dado cuenta entonces.</speech>
        </speeches>
        <speeches id="3">
            <speech>La juventud es sólo juventud. Ojalá me hubiera dado cuenta entonces.</speech>
        </speeches>
        <speeches id="4">
            <speech>Si lo hubiera sabido cuando era joven, ahora no lo estaría pasando tan mal...</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Hola! Siento haberte hecho esperar! ¡Soy un excursionista con seguidores de culto!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Oh no! ¿Ya se acabó? ¡¡El Hiker está aburrido!!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Oh no! ¿Ya se acabó? ¡¡El Hiker está aburrido!!</speech>
        </speeches>
        <speeches id="4">
            <speech>Hola a todos ¡Soy un excursionista!  ¡Cuidado donde pisas!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>La verdad es que soy un viajero en el tiempo. Acabo de aparecer desde el futuro.</speech>
        </speeches>
        <speeches id="2">
            <speech>Incluso si pierdo, puedo subirme a mi máquina del tiempo y volver al pasado para intentar otra batalla.</speech>
        </speeches>
        <speeches id="3">
            <speech>Sabía que este paquete turístico barato no sería nada bueno.</speech>
        </speeches>
        <speeches id="4">
            <speech>Sabía que este paquete turístico barato no sería nada bueno.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Hablar puede ser una tontería. Las palabras bonitas sólo manchan las batallas...</speech>
        </speeches>
        <speeches id="2">
            <speech>Se me escapó que soy un novato justo antes de la batalla.</speech>
        </speeches>
        <speeches id="3">
            <speech>Se me escapó que soy un novato justo antes de la batalla.</speech>
        </speeches>
        <speeches id="4">
            <speech>Los entrenadores que tratan las batallas como un deporte son el colmo de la vileza.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Venga, ¡manos a la obra de una vez! ¡No hay que preocuparse por los detalles!</speech>
        </speeches>
        <speeches id="2">
            <speech>Los remordimientos del pasado, las preocupaciones por el futuro, ¡olvídate de todo eso! Lo único que importa es el aquí y el ahora.</speech>
        </speeches>
        <speeches id="3">
            <speech>Los remordimientos del pasado, las preocupaciones por el futuro, ¡olvídate de todo eso! Lo único que importa es el aquí y el ahora.</speech>
        </speeches>
        <speeches id="4">
            <speech>Aunque intente olvidar, no puedo recordar... Eso es probablemente todo lo que necesito saber, ¿no?</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>¡Eh! ¡Tú! ¡Sí, tú! Vamos a sudar un poco juntos, ¿vale?</speech>
        </speeches>
        <speeches id="2">
            <speech>Puede que aún no tenga experiencia, pero quiero ser veterano algún día.</speech>
        </speeches>
        <speeches id="3">
            <speech>Puede que aún no tenga experiencia, pero quiero ser veterano algún día.</speech>
        </speeches>
        <speeches id="4">
            <speech>Oye, no te preocupes... A veces sólo tienes que aprender a dejarlo ir.</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>¿Estás perdido aquí? ¿Estás perdido aquí? Hermano John, Hermano John.</speech>
        </speeches>
        <speeches id="2">
            <speech>¿Qué es eso? ¿Parezco aburrido? Eso es porque es un viaje de empresa.</speech>
        </speeches>
        <speeches id="3">
            <speech>¿Qué es eso? ¿Parezco aburrido? Eso es porque es un viaje de empresa.</speech>
        </speeches>
        <speeches id="4">
            <speech>Suenan campanas ganadoras, suenan campanas ganadoras. ¡Ding ding dong! ¡Ding ding dong!</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>¡Hola! ¡Concéntrate!</speech>
        </speeches>
        <speeches id="2">
            <speech>Mírame a los ojos. Eso es. Respira profundamente mientras cuento uno, dos, tres...</speech>
        </speeches>
        <speeches id="3">
            <speech>Mírame a los ojos. Eso es. Respira profundamente mientras cuento uno, dos, tres...</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Fooooo!</speech>
        </speeches>
    </conversation>
</npcs>