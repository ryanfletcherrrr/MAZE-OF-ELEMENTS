<npcs>
    <movingNpc direction="DOWN" id="1" name="Duskull" speed="1" sprite="355" type="pokemon" x="8" y="23">
        <path>LEFTx1,DOWNx2,UPx2,RIGHTx1</path>
        <onCollisionSpeech gap="4">Duskull</onCollisionSpeech>
        <speech>Duskull</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Shuppet" speed="1" sprite="353" type="pokemon" x="13" y="7">
        <path>DOWNx5,RIGHTx1,LEFTx1,UPx5</path>
        <onCollisionSpeech gap="4">Shuppet!</onCollisionSpeech>
        <speech>¡Shuppet!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="3" name="Duskull" speed="1" sprite="355" type="pokemon" x="24" y="8">
        <path>DOWNx2,LEFTx2,RIGHTx2,UPx2</path>
        <onCollisionSpeech gap="4">Duskull!</onCollisionSpeech>
        <speech>¡Duskull!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="4" name="Shuppet" speed="1" sprite="353" type="pokemon" x="38" y="11">
        <path>LEFTx11,RIGHTx11</path>
        <onCollisionSpeech gap="4">Shuppet!</onCollisionSpeech>
        <speech>¡Shuppet!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="6" name="Chimecho" speed="1" sprite="358" type="pokemon" x="71" y="31">
        <path>UPx4,DOWNx4</path>
        <onCollisionSpeech gap="4">Chimecho!</onCollisionSpeech>
        <speech>¡Chimecho!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="7" name="Dusknoir" speed="1" sprite="477" type="pokemon" x="36" y="34">
        <path>LEFTx16,UPx1,DOWNx1,RIGHTx16</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="8" name="Duskull" speed="1" sprite="355" type="pokemon" x="23" y="58">
        <path>DOWNx3,UPx3</path>
        <onCollisionSpeech gap="4">Duskull!</onCollisionSpeech>
        <speech>¡Duskull!</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="11" name="Hex Maniac Esmeralda" randomRotation="true" sprite="169" x="41" y="88">
        <speech>Los Sableye llevan una vida tranquila en las profundidades de las cavernas.</speech>
        <speech>Sin embargo, son temidos porque se cree que estos Pokémon roban los espíritus de las personas...</speech>
        <speech>Cuando sus ojos arden con un brillo siniestro en la oscuridad.</speech>
    </npc>
    <npc direction="UP" hidden="false" id="12" name="Hex Maniac Lilith" randomRotation="true" sprite="170" x="35" y="60">
        <speech>Duskull puede atravesar cualquier pared por gruesa que sea.</speech>
        <speech>Una vez que este Pokémon elige un objetivo, lo perseguirá tenazmente hasta el amanecer.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="13" name="Hex Maniac Morrigan" randomRotation="true" sprite="171" x="41" y="30">
        <speech>El cuerpo de Dusknoir es completamente hueco. No hay nada en su interior. Se dice que su cuerpo es como un agujero negro.</speech>
        <speech>Este Pokémon absorberá cualquier cosa en su cuerpo, ¡pero nada volverá a salir!</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="14" name="Hex Maniac Nyx" randomRotation="true" sprite="170" x="45" y="13">
        <speech>A Shuppet le atraen los sentimientos de celos y venganza.</speech>
        <speech>Si alguien desarrolla fuertes sentimientos de venganza, este Pokémon aparecerá en un enjambre y se alineará bajo el alero de la casa de esa persona.</speech>
    </npc>
    <movingNpc direction="DOWN" id="15" name="Banette" speed="1" sprite="354" type="pokemon" x="49" y="68">
        <path>RIGHTx2,DOWNx2,LEFTx2,UPx2</path>
        <onCollisionSpeech gap="4">Banette!</onCollisionSpeech>
        <speech>¡Banette!</speech>
    </movingNpc>
    <npc direction="LEFT" hidden="false" id="16" name="Hex maniac Thalia" randomRotation="true" sprite="171" x="63" y="65">
        <speech>Banette genera energía para lanzar fuertes maldiciones clavándose alfileres en su propio cuerpo.</speech>
        <speech>Este Pokémon era originalmente un lamentable muñeco de peluche que se tiró a la basura.</speech>
    </npc>
    <movingNpc direction="DOWN" id="5" name="Sableye!" speed="1" sprite="302" type="pokemon" x="65" y="11">
        <path>LEFTx6,RIGHTx6</path>
        <onCollisionSpeech gap="4">Sableye!</onCollisionSpeech>
        <speech>¡Sableye!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="17" name="Sableye" shouldSleep="" speed="1" sprite="302" type="pokemon" x="29" y="84">
        <path>LEFTx2,UPx2,DOWNx2,RIGHTx2</path>
        <onCollisionSpeech gap="4">Sableye!</onCollisionSpeech>
        <speech>¡Sableye!</speech>
    </movingNpc>
    <conversation id="1">
        <speeches id="1">
            <speech>Susurros de poder ancestral resuenan en la noche. Te atreves a escuchar su llamada?</speech>
            <speech>Bajo la atenta mirada de la luna, nuestro pacto se reúne. El desafío de los siglos espera vuestro valor.</speech>
        </speeches>
        <speeches id="2">
            <speech>Aunque triunféis, la oscuridad eterna teje su paciencia. Nuestra determinación permanece inquebrantable, imperturbable.</speech>
            <speech>Las sombras se separan, revelando un camino hacia nuestro enigmático líder. Una recompensa para los valientes, los fuertes, los victoriosos.</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Increíble! Tu fuerza atraviesa el velo de la noche, rivalizando con los antiguos poderes que dominamos.</speech>
            <speech>Velado en secreto, nuestro líder espera. Tu victoria te ha valido una audiencia en el corazón de las sombras.</speech>
            <speech>Nuestros rituales, ligados a la danza celestial, no encuentran favor a esta hora. El momento adecuado aún se nos escapa.</speech>
            <speech>Regresa cuando la luna reine suprema sobre la noche, en $DURACIÓN. Sólo entonces se levantará el velo.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Increíble! Tu fuerza atraviesa el velo de la noche, rivalizando con los antiguos poderes que dominamos.</speech>
            <speech>Velado en secreto, nuestro líder espera. Tu victoria te ha valido una audiencia en el corazón de las sombras.</speech>
        </speeches>
        <speeches id="5">
            <speech>Los cuerpos celestes aún no se han alineado; nuestro poder permanece latente, a la espera del momento ordenado.</speech>
            <speech>Vuelve el viernes, cuando el resplandor de la luna atraviese el velo de la realidad y nuestro poder esté en su cenit.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Susurros de poder ancestral resuenan en la noche. Te atreves a escuchar su llamada?</speech>
            <speech>Bajo la atenta mirada de la luna, nuestro pacto se reúne. El desafío de los siglos espera vuestro valor.</speech>
        </speeches>
        <speeches id="2">
            <speech>Aunque triunféis, la oscuridad eterna teje su paciencia. Nuestra determinación permanece inquebrantable, imperturbable.</speech>
            <speech>Las sombras se separan, revelando un camino hacia nuestro enigmático líder. Una recompensa para los valientes, los fuertes, los victoriosos.</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Increíble! Tu fuerza atraviesa el velo de la noche, rivalizando con los antiguos poderes que dominamos.</speech>
            <speech>Velado en secreto, nuestro líder espera. Tu victoria te ha valido una audiencia en el corazón de las sombras.</speech>
            <speech>Nuestros rituales, ligados a la danza celestial, no encuentran favor a esta hora. El momento adecuado aún se nos escapa.</speech>
            <speech>Regresa cuando la luna reine suprema sobre la noche, en $DURACIÓN. Sólo entonces se levantará el velo.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Increíble! Tu fuerza atraviesa el velo de la noche, rivalizando con los antiguos poderes que dominamos.</speech>
            <speech>Velado en secreto, nuestro líder espera. Tu victoria te ha valido una audiencia en el corazón de las sombras.</speech>
        </speeches>
        <speeches id="5">
            <speech>Los cuerpos celestes aún no se han alineado; nuestro poder permanece latente, a la espera del momento ordenado.</speech>
            <speech>Vuelve el viernes, cuando el resplandor de la luna atraviese el velo de la realidad y nuestro poder esté en su cenit.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Susurros de poder ancestral resuenan en la noche. Te atreves a escuchar su llamada?</speech>
            <speech>Bajo la atenta mirada de la luna, nuestro pacto se reúne. El desafío de los siglos espera vuestro valor.</speech>
        </speeches>
        <speeches id="2">
            <speech>Aunque triunféis, la oscuridad eterna teje su paciencia. Nuestra determinación permanece inquebrantable, imperturbable.</speech>
            <speech>Las sombras se separan, revelando un camino hacia nuestro enigmático líder. Una recompensa para los valientes, los fuertes, los victoriosos.</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Increíble! Tu fuerza atraviesa el velo de la noche, rivalizando con los antiguos poderes que dominamos.</speech>
            <speech>Velado en secreto, nuestro líder espera. Tu victoria te ha valido una audiencia en el corazón de las sombras.</speech>
            <speech>Nuestros rituales, ligados a la danza celestial, no encuentran favor a esta hora. El momento adecuado aún se nos escapa.</speech>
            <speech>Regresa cuando la luna reine suprema sobre la noche, en $DURACIÓN. Sólo entonces se levantará el velo.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Increíble! Tu fuerza atraviesa el velo de la noche, rivalizando con los antiguos poderes que dominamos.</speech>
            <speech>Velado en secreto, nuestro líder espera. Tu victoria te ha valido una audiencia en el corazón de las sombras.</speech>
        </speeches>
        <speeches id="5">
            <speech>Los cuerpos celestes aún no se han alineado; nuestro poder permanece latente, a la espera del momento ordenado.</speech>
            <speech>Vuelve el viernes, cuando el resplandor de la luna atraviese el velo de la realidad y nuestro poder esté en su cenit.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Susurros de poder ancestral resuenan en la noche. Te atreves a escuchar su llamada?</speech>
            <speech>Bajo la atenta mirada de la luna, nuestro pacto se reúne. El desafío de los siglos espera vuestro valor.</speech>
        </speeches>
        <speeches id="2">
            <speech>Aunque triunféis, la oscuridad eterna teje su paciencia. Nuestra determinación permanece inquebrantable, imperturbable.</speech>
            <speech>Las sombras se separan, revelando un camino hacia nuestro enigmático líder. Una recompensa para los valientes, los fuertes, los victoriosos.</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Increíble! Tu fuerza atraviesa el velo de la noche, rivalizando con los antiguos poderes que dominamos.</speech>
            <speech>Velado en secreto, nuestro líder espera. Tu victoria te ha valido una audiencia en el corazón de las sombras.</speech>
            <speech>Nuestros rituales, ligados a la danza celestial, no encuentran favor a esta hora. El momento adecuado aún se nos escapa.</speech>
            <speech>Regresa cuando la luna reine suprema sobre la noche, en $DURACIÓN. Sólo entonces se levantará el velo.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Increíble! Tu fuerza atraviesa el velo de la noche, rivalizando con los antiguos poderes que dominamos.</speech>
            <speech>Velado en secreto, nuestro líder espera. Tu victoria te ha valido una audiencia en el corazón de las sombras.</speech>
        </speeches>
        <speeches id="5">
            <speech>Los cuerpos celestes aún no se han alineado; nuestro poder permanece latente, a la espera del momento ordenado.</speech>
            <speech>Vuelve el viernes, cuando el resplandor de la luna atraviese el velo de la realidad y nuestro poder esté en su cenit.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Susurros de poder ancestral resuenan en la noche. Te atreves a escuchar su llamada?</speech>
            <speech>Bajo la atenta mirada de la luna, nuestro pacto se reúne. El desafío de los siglos espera vuestro valor.</speech>
        </speeches>
        <speeches id="2">
            <speech>Aunque triunféis, la oscuridad eterna teje su paciencia. Nuestra determinación permanece inquebrantable, imperturbable.</speech>
            <speech>Las sombras se separan, revelando un camino hacia nuestro enigmático líder. Una recompensa para los valientes, los fuertes, los victoriosos.</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Increíble! Tu fuerza atraviesa el velo de la noche, rivalizando con los antiguos poderes que dominamos.</speech>
            <speech>Velado en secreto, nuestro líder espera. Tu victoria te ha valido una audiencia en el corazón de las sombras.</speech>
            <speech>Nuestros rituales, ligados a la danza celestial, no encuentran favor a esta hora. El momento adecuado aún se nos escapa.</speech>
            <speech>Regresa cuando la luna reine suprema sobre la noche, en $DURACIÓN. Sólo entonces se levantará el velo.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Increíble! Tu fuerza atraviesa el velo de la noche, rivalizando con los antiguos poderes que dominamos.</speech>
            <speech>Velado en secreto, nuestro líder espera. Tu victoria te ha valido una audiencia en el corazón de las sombras.</speech>
        </speeches>
        <speeches id="5">
            <speech>Los cuerpos celestes aún no se han alineado; nuestro poder permanece latente, a la espera del momento ordenado.</speech>
            <speech>Vuelve el viernes, cuando el resplandor de la luna atraviese el velo de la realidad y nuestro poder esté en su cenit.</speech>
        </speeches>
    </conversation>
</npcs>