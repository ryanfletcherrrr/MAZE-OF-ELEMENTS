<npcs>
    <conversation id="1">
        <!-- First Battle (Uses Original Game Dialogues) -->
        <speeches id="1">
            <speech>¡Hola! ¡Eres una cara nueva!</speech>
            <speech>Sólo los entrenadores con {COLOR=BLUE}una mentalidad fuerte{ENDCOLOR} pueden dominar los combates Pokémon.</speech>
            <speech>¿Cuál es tu método para capturar y entrenar Pokémon?</speech>
            <speech>Mi política es una ofensiva total con {COLOR=CYAN}Pokémon de tipo agua{ENDCOLOR}.</speech>
            <speech>Veamos si puedes con las olas.</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Vaya! ¡Eres realmente increíble!</speech>
            <speech>Toma esto como prueba de tu victoria: ¡te lo has ganado!</speech>
            <speech>Oh, y aquí está {COLOR=BLUE}TM03{ENDCOLOR}-¡Contiene {COLOR=CYAN}Pulso de Agua{ENDCOLOR}! ¡Su poder puede abrumar a los oponentes como una marea implacable!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Ja! ¡Todavía no estabas listo para montar esta corriente!</speech>
            <speech>Ve a entrenar, y cuando dejes de hundirte, ¡inténtalo de nuevo!</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Aún no estás listo? No pasa nada.</speech>
            <speech>Las mareas siempre vuelven, y también los desafíos. Estaré esperando.</speech>
        </speeches>
        <!-- Repeated Battle (Tougher, More Competitive) -->
        <speeches id="5">
            <speech>Oh, ¿vuelves a por más? ¿Crees que puedes domar la tormenta?</speech>
            <speech>{COLOR=CYAN}El agua es implacable{ENDCOLOR}. Choca, erosiona y nunca deja de moverse.</speech>
            <speech>Si no puedes seguir el ritmo, te verás arrastrado. ¡Veamos si puedes soportar la presión!</speech>
        </speeches>
        <speeches id="6">
            <speech>Vaya... ¡Realmente has afilado tus habilidades!</speech>
            <speech>{COLOR=GOLD}$TOTAL_VICTORY{ENDCOLOR} me gana... ¡¿y {COLOR=CYAN}$CONSECUTIVE{ENDCOLOR} consecutivamente?!</speech>
            <speech>Parece que ya no te limitas a flotar: ¡tú mismo mandas en las mareas!</speech>
        </speeches>
        <speeches id="7">
            <speech>¡Ja! ¿Creías que me tenías calado?</speech>
            <speech>Al océano no le importa cuántas veces hayas luchado: ¡sólo recompensa a quienes son capaces de sobrevivir!</speech>
            <speech>Vuelve cuando hayas entrenado más... ¡o aprende a nadar!</speech>
        </speeches>
        <speeches id="8">
            <speech>¿No hay batalla? ¿No hay batalla? ¿Miedo a las profundidades?</speech>
            <speech>Está bien, pero no me hagas esperar eternamente: ¡me encanta ver cómo los entrenadores luchan por mantenerse a flote!</speech>
        </speeches>
        <speeches id="9">
            <speech>¿Otra revancha ya? Eh, ¡más despacio!</speech>
            <speech>El océano no apura sus olas, y yo tampoco. Vuelve en {COLOR=BLUE}$DURATION{ENDCOLOR}.</speech>
            <speech>Luego veremos si sigues dispuesto a dar la campanada.</speech>
        </speeches>
        <!-- Special Condition: Battle Requirement Not Met -->
        <speeches id="10">
            <speech>¡Espera! Ni siquiera estás bien preparado.</speech>
            <speech>Sólo lucho contra Entrenadores que tengan {COLOR=CYAN}al menos 3 Pokémon de tipo Agua{ENDCOLOR} en su equipo.</speech>
            <speech>¡Vuelve cuando tu equipo fluya como el mismo océano!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>El agua fluye por donde quiere... y ahora mismo, ¡está fluyendo justo sobre ti!</speech>
        </speeches>
        <speeches id="2">
            <speech>Supongo que me atrapó la resaca...</speech>
        </speeches>
        <speeches id="3">
            <speech>Supongo que me atrapó la resaca...</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Lo veis? Seguir la corriente siempre funciona.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>¿Sabías que Misty lleva nadando desde que era niña? Es toda una inspiración.</speech>
        </speeches>
        <speeches id="2">
            <speech>Parece que nadé demasiado fuerte...</speech>
        </speeches>
        <speeches id="3">
            <speech>Parece que nadé demasiado fuerte...</speech>
        </speeches>
        <speeches id="4">
            <speech>¡La resistencia gana la carrera! ¡Eso es lo que Misty me enseñó!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Los tipos de agua son fuertes porque se adaptan a cualquier reto. ¿Y tú?</speech>
        </speeches>
        <speeches id="2">
            <speech>Parece que tengo que afinar mi estrategia...</speech>
        </speeches>
        <speeches id="3">
            <speech>Parece que tengo que afinar mi estrategia...</speech>
        </speeches>
        <speeches id="4">
            <speech>No estás mal, pero aún te queda mucho por aprender.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Me estoy entrenando para un triatlón, ¡y la natación es mi prueba más fuerte! ¿Crees que podrás seguirme el ritmo?</speech>
        </speeches>
        <speeches id="2">
            <speech>Supongo que debería haber ido a un ritmo mejor...</speech>
        </speeches>
        <speeches id="3">
            <speech>Supongo que debería haber ido a un ritmo mejor...</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Velocidad y resistencia! Así es como se ganan las carreras... ¡y las batallas!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Misty dice que luchar es cuestión de resistencia. Yo me entreno igual.</speech>
        </speeches>
        <speeches id="2">
            <speech>Aww... Me hundí como una roca...</speech>
        </speeches>
        <speeches id="3">
            <speech>Aww... Me hundí como una roca...</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Lo veis? Soy como una ola... ¡imparable!</speech>
        </speeches>
    </conversation>
    <movingNpc direction="RIGHT" id="1" name="Golduck" speed="1" sprite="55" type="pokemon" x="10" y="24">
        <path>RIGHTx2,LEFTx2</path>
        <onCollisionSpeech gap="4">Golduuuck!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="LEFT" id="2" name="Tatsugiri" speed="1" sprite="1458" type="pokemon" x="9" y="13">
        <path>LEFTx3,RIGHTx3</path>
        <onCollisionSpeech gap="4">Tatsuuu!</onCollisionSpeech>
    </movingNpc>
</npcs>