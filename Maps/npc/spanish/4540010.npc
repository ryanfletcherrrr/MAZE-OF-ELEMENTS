<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Je, je, je... ¿Le sorprendió?</speech>
            <speech>¿Que hay dos Gym Leaders?</speech>
            <speech>¡Somos gemelos!</speech>
            <speech>No necesitamos hablar porque...</speech>
            <speech>...cada uno puede decir...</speech>
            <speech>...lo que el otro está pensando...</speech>
            <speech>...¡todo en nuestras mentes!</speech>
            <speech>Esta combinación nuestra...</speech>
            <speech>¿Puedes vencerlo?</speech>
        </speeches>
        <speeches id="2">
            <speech>No se puede evitar. Has ganado...</speech>
            <speech>...¡así que toma esto en reconocimiento!</speech>
            <speech>La Insignia de la Mente es un símbolo de la unión de la mente y el cuerpo.</speech>
            <speech>También permite a los Pokémon usar el movimiento HM llamado ¡Zambullida!</speech>
            <speech>¡Y toma esto también!</speech>
            <speech>¡Psyshock!</speech>
            <speech>Ataca a tu oponente en su Def. en vez de en su Sp. Def.</speech>
            <speech>Es un movimiento perfecto para que los Pokémon de tipo Psíquico acaben con los "Pink Blobs".</speech>
            <speech>Parece que el vínculo entre tú y tu Pokémon es mucho más fuerte que el que compartimos como gemelos...</speech>
            <speech>¡Pero a partir de aquí formarás aún más lazos! ¡Ese es el futuro que veo para ti!</speech>
            <speech>Puede que os aguarde una dura prueba a ti y a tu Pokémon...</speech>
            <speech>Pero no pasa nada. Tú y tus Pokémon no estáis solos. ¡Os tenéis el uno al otro!</speech>
            <speech>Por eso queremos que afrontes los problemas que se te presenten con la cabeza bien alta y mucho coraje.</speech>
        </speeches>
        <speeches id="3">
            <speech>Parece que el vínculo entre tú y tu Pokémon es mucho más fuerte que el que compartimos como gemelos...</speech>
            <speech>¡Pero a partir de aquí formarás aún más lazos! ¡Ese es el futuro que veo para ti!</speech>
            <speech>Puede que os aguarde una dura prueba a ti y a tu Pokémon...</speech>
            <speech>Pero no pasa nada. Tú y tus Pokémon no estáis solos. ¡Os tenéis el uno al otro!</speech>
            <speech>Por eso queremos que afrontes los problemas que se te presenten con la cabeza bien alta y mucho coraje.</speech>
        </speeches>
        <speeches id="4">
            <speech>Esta batalla fue demasiado fácil para nosotros. No obstante, nos complace darte otra oportunidad.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Se me escapó que soy un novato justo antes de la batalla.</speech>
        </speeches>
        <speeches id="2">
            <speech>Como soy un novato, no vale la pena mencionarme.</speech>
        </speeches>
        <speeches id="3">
            <speech>Como soy un novato, no vale la pena mencionarme.</speech>
        </speeches>
        <speeches id="4">
            <speech>Aún no estás suficientemente preparado.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Je je je. Si pierdes, te convertiré en un Pokémon.</speech>
        </speeches>
        <speeches id="2">
            <speech>Estoy decepcionado, pero no se puede evitar... Mis profecías son absolutas...</speech>
        </speeches>
        <speeches id="3">
            <speech>Estoy decepcionado, pero no se puede evitar... Mis profecías son absolutas...</speech>
        </speeches>
        <speeches id="4">
            <speech>La próxima vez que te vea, te convertiré en Pokémon con mi poder.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Puede que ahora tenga este aspecto, pero una vez también fui una Belleza, ¿sabes?</speech>
        </speeches>
        <speeches id="2">
            <speech>Llámame negativo o lo que quieras. Así es como soy.</speech>
        </speeches>
        <speeches id="3">
            <speech>Llámame negativo o lo que quieras. Así es como soy.</speech>
        </speeches>
        <speeches id="4">
            <speech>Después de que me dejara mi novio, caí en la depresión. Sin darme cuenta, ¡tenía este aspecto!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Me hago más fuerte con cada lágrima que lloro.</speech>
        </speeches>
        <speeches id="2">
            <speech>Ahora puedo ser aún más fuerte. Crezco con cada rencor.</speech>
        </speeches>
        <speeches id="3">
            <speech>Ahora puedo ser aún más fuerte. Crezco con cada rencor.</speech>
        </speeches>
        <speeches id="4">
            <speech>No te dejes llevar por la tristeza o la frustración. Puedes utilizar tus rencores para motivarte.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Hablar puede ser una tontería. Las palabras bonitas sólo manchan las batallas...</speech>
        </speeches>
        <speeches id="2">
            <speech>Como soy un novato, no vale la pena mencionarme.</speech>
        </speeches>
        <speeches id="3">
            <speech>Como soy un novato, no vale la pena mencionarme.</speech>
        </speeches>
        <speeches id="4">
            <speech>La derrota no vale nada. Los perdedores no necesitan palabras...</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>Haré una profecía... Esta batalla... Saldrás victorioso...</speech>
        </speeches>
        <speeches id="2">
            <speech>Estoy decepcionado, pero no se puede evitar... Mis profecías son absolutas...</speech>
        </speeches>
        <speeches id="3">
            <speech>Estoy decepcionado, pero no se puede evitar... Mis profecías son absolutas...</speech>
        </speeches>
        <speeches id="4">
            <speech>Tú... ¿Eres tan débil como para revertir mi profecía?</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>Jejeje... Lo veo todo claro... Eres un médico de un planeta malvado, ¿no?</speech>
        </speeches>
        <speeches id="2">
            <speech>Eh...ondas de radio... Hay ondas de radio que salen de tu nariz...</speech>
        </speeches>
        <speeches id="3">
            <speech>Eh...ondas de radio... Hay ondas de radio que salen de tu nariz...</speech>
        </speeches>
        <speeches id="4">
            <speech>Ugh... Mis poderes... Mis poderes son... Creo que necesito una enfermera...</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>Los lugares que dan miedo son los mejores para mí. Me encantaría vivir en un cementerio...</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Derrotarme es increíble! ¡Tú también debes estar un poco maldito!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Derrotarme es increíble! ¡Tú también debes estar un poco maldito!</speech>
        </speeches>
        <speeches id="4">
            <speech>En un cementerio donde la fiesta empieza cuando acaba el día. Sí, esa es mi vida...</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>¡Hola! ¡Concéntrate!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡¿Mis poderes hipnóticos no funcionan contigo?! ¡Qué fortaleza mental debes poseer!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡¿Mis poderes hipnóticos no funcionan contigo?! ¡Qué fortaleza mental debes poseer!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Eeeeek!</speech>
        </speeches>
    </conversation>
    <conversation id="12">
        <speeches id="1">
            <speech>Normalmente sólo escucho música clásica, pero si pierdo, creo que probaré un poco de new age.</speech>
        </speeches>
        <speeches id="2">
            <speech>Ahora puedo ser aún más fuerte. Crezco con cada rencor.</speech>
        </speeches>
        <speeches id="3">
            <speech>Ahora puedo ser aún más fuerte. Crezco con cada rencor.</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Es éste el amanecer de la era de Acuario?</speech>
        </speeches>
    </conversation>
    <conversation id="13">
        <speeches id="1">
            <speech>Empecé a luchar sólo por ser guay, pero me convertí en un As antes de darme cuenta.</speech>
        </speeches>
        <speeches id="2">
            <speech>Al final, ser bueno luchando solo no es suficiente, por muy fuerte que seas.</speech>
        </speeches>
        <speeches id="3">
            <speech>Al final, ser bueno luchando solo no es suficiente, por muy fuerte que seas.</speech>
        </speeches>
        <speeches id="4">
            <speech>Pero sigo sin ser guay aunque me hayan reconocido como un As...</speech>
        </speeches>
    </conversation>
    <npc direction="DOWN" hidden="false" id="1" name="Gym Guide" randomRotation="false" sprite="5" x="36" y="49">
        <speech>¡Saludos, Campeón en ciernes!</speech>
        <speech>El Gimnasio Mossdeep es un verdadero rompe cabezas con los Psíquicos-tipos de Tate y Liza,</speech>
        <speech>pero tienes el cerebro para descifrar este rompecabezas.</speech>
        <speech>Pokémon Oscuros, Fantasmas o Bichos serán tus aliados en este maratón mental.</speech>
        <speech>Mantén el ingenio y la agudeza, ¡y serás el amo de las mentes!</speech>
    </npc>
</npcs>