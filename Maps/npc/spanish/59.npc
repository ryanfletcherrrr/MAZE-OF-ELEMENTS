<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Los niños no deberían jugar con fuego. Es peligroso.</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Ay! ¡Me has quemado!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Eso estuvo caliente!</speech>
        </speeches>
        <speeches id="4">
            <speech>Ves, eso es de lo que estaba hablando.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>¿Le sorprende ver a un excursionista en un volcán?</speech>
        </speeches>
        <speeches id="2">
            <speech>No lo parece, jeje.</speech>
        </speeches>
        <speeches id="3">
            <speech>Los excursionistas no discriminan entre montañas, así que es natural que esté aquí.</speech>
        </speeches>
        <speeches id="4">
            <speech>Parece que estabas ... ¡BAMBOOZLED!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>He entrenado bajo un calor extremo, y es hora de mostraros los frutos de mi trabajo. ¡HYAA!
            </speech>
        </speeches>
        <speeches id="2">
            <speech>¡GYAH! He fallado ...</speech>
        </speeches>
        <speeches id="3">
            <speech>¡¡Debe mejorar la resistencia!!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Hoo-hah!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Voy de camino a desafiar a Blitz. Pero no me importa una batalla preparatoria, ¡así que vamos!</speech>
        </speeches>
        <speeches id="2">
            <speech>Eso era ... onixpected.</speech>
        </speeches>
        <speeches id="3">
            <speech>Tal vez debería abstenerme de desafiar a Blitz por ahora.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Eso significa VICTORIA!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>La vida de un mochilero no es fácil.</speech>
            <speech>¿A qué me refiero? Uhm, bueno, verás...</speech>
            <speech>No importa. ¡Hora de luchar!</speech>
        </speeches>
        <speeches id="2">
            <speech>Soportar las pérdidas es duro.</speech>
        </speeches>
        <speeches id="3">
            <speech>¡¿Qué quieres decir con "eres un mal perdedor"?!</speech>
        </speeches>
        <speeches id="4">
            <speech>Esta es la prueba de mis penurias.</speech>
        </speeches>
    </conversation>
</npcs>