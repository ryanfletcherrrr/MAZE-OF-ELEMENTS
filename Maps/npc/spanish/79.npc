<npcs>
    <conversation canSkip="false" id="1">
        <speeches id="1">
            <speech>Será mejor si usted no interfiere con nuestro negocio ...</speech>
        </speeches>
        <speeches id="2">
            <speech>Interesante. Te subestimé. No te sientas feliz sin embargo, nuestro jefe es mucho más fuerte que yo
                que yo.
            </speech>
        </speeches>
        <speeches id="3">
            <speech/>
        </speeches>
        <speeches id="4">
            <speech>Hmph ... eres tan lastimosamente débil.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="2">
        <speeches id="1">
            <speech>Ocúpate de tus asuntos. Vete antes de que encuentres problemas difíciles.</speech>
        </speeches>
        <speeches id="2">
            <speech>No tienes ni idea de lo que está pasando. Admito que eres fuerte, pero te recomiendo encarecidamente que te apartes.
            </speech>
        </speeches>
        <speeches id="3">
        </speeches>
        <speeches id="4">
            <speech>Te lo advertí.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="3">
        <speeches id="1">
            <speech>Mi corazón es más frío que esta cueva. ¡No tendré piedad!</speech>
        </speeches>
        <speeches id="2">
            <speech>Puedes avanzar. Aunque, los otros son más fuertes que yo.</speech>
        </speeches>
        <speeches id="3">
        </speeches>
        <speeches id="4">
            <speech>¡No vuelvas nunca!</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="4">
        <speeches id="1">
            <speech>Estamos descubriendo los secretos de esta cueva. Secretos que van más allá de tu imaginación.</speech>
        </speeches>
        <speeches id="2">
            <speech>De ninguna manera...</speech>
        </speeches>
        <speeches id="3">
        </speeches>
        <speeches id="4">
            <speech>¡Madura, chico!</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="5">
        <speeches id="1">
            <speech>Somos demasiado fuertes para niños como tú. Dime, ¿por qué lo intentas?</speech>
        </speeches>
        <speeches id="2">
            <speech>Eres un bicho raro muy molesto.</speech>
        </speeches>
        <speeches id="3">
        </speeches>
        <speeches id="4">
            <speech>Tendrás que esforzarte más, ¡ja!</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="6">
        <speeches id="1">
            <speech>¿Estás disfrutando del tiempo? ¡Ahora te quemaré!</speech>
        </speeches>
        <speeches id="2">
            <speech>Je, tal vez la próxima vez ...</speech>
        </speeches>
        <speeches id="3">
        </speeches>
        <speeches id="4">
            <speech>¡Arde!</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="7">
        <speeches id="1">
            <speech>No estaremos aquí mucho tiempo, nuestro negocio está casi terminado. Creo que necesitas aprender una lección.
                ¡Luchemos!
            </speech>
        </speeches>
        <speeches id="2">
            <speech>¡DE NINGUNA MANERA! ¡NO VENCERÁS A NUESTRO LÍDER!</speech>
        </speeches>
        <speeches id="3">
        </speeches>
        <speeches id="4">
            <speech>¡Vete a casa, chico!</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="8">
        <speeches id="1">
            <speech>...</speech>
            <speech>Este Ninetales es especial. Es como esa gallina con huevo de oro.</speech>
            <speech>Voy a capturarlo después de destrozarte pequeño noob.</speech>
        </speeches>
        <speeches id="2">
            <speech>...</speech>
            <speech>¡Me he quedado sin gasolina!</speech>
        </speeches>
        <speeches id="3">
        </speeches>
        <speeches id="4">
            <speech>Qué pérdida de tiempo. ¡Shooo!</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>

    <conversation id="9">
        <speeches id="1">
            <speech>Nueve.. Taless......</speech>
        </speeches>
        <speeches id="2">
            <speech>Nueve.. ¡¡¡Nueve Nueve..!!!</speech>
        </speeches>
        <speeches id="3">
            <speech>*Ninetalesssss*.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡¡Tales!! ¡¡Nueve cuentos!!</speech>
        </speeches>
        <speeches id="5">
            <speech>*Ninetales no parece reconocerte todavía*.</speech>
        </speeches>
    </conversation>

    <conversation id="11">
        <speeches id="1">
            <speech>Tus Pokémon parecen cansados. ¿Quieres que los cure?</speech>
        </speeches>
        <speeches id="2">
            <speech>Ya está, todos sanos y felices.</speech>
        </speeches>
        <speeches id="3">
            <speech>Seguro que les hubiera gustado descansar.</speech>
        </speeches>
    </conversation>
</npcs>