<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Entrenar Pokémon no es sólo cuestión de fuerza, sino de cultivar su potencial.</speech>
        </speeches>
        <speeches id="2">
            <speech>Ha sido duro, ¡pero seguiremos trabajando juntos para hacernos aún más fuertes!</speech>
        </speeches>
        <speeches id="3">
            <speech>Ha sido duro, ¡pero seguiremos trabajando juntos para hacernos aún más fuertes!</speech>
        </speeches>
        <speeches id="4">
            <speech>Ah, ya veo el vínculo que compartes con tus Pokémon. Con un poco de amor y cariño se llega muy lejos.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>He caminado muchos kilómetros por esta tierra, ¡pero siempre estoy listo para una buena batalla que interrumpa el viaje!</speech>
        </speeches>
        <speeches id="2">
            <speech>Supongo que tendré que tomarme un descanso más largo... pero todo camino tiene sus baches.</speech>
        </speeches>
        <speeches id="3">
            <speech>Supongo que tendré que tomarme un descanso más largo... pero todo camino tiene sus baches.</speech>
        </speeches>
        <speeches id="4">
            <speech>A veces el camino se hace duro, pero sigo firme. ¡Adelante hacia la próxima aventura!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Aquí fuera, en la naturaleza, solo estamos yo, mis Pokémon y el campo abierto.</speech>
        </speeches>
        <speeches id="2">
            <speech>Bueno, compañero, creo que tendré que preparar una estrategia mejor la próxima vez.</speech>
        </speeches>
        <speeches id="3">
            <speech>Bueno, compañero, creo que tendré que preparar una estrategia mejor la próxima vez.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Ja! Al igual que domar a un semental salvaje, una vez que tienes el control, todo va sobre ruedas.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Puede que el camino sea empinado, pero no es nada comparado con las batallas que he tenido que afrontar. ¿Listo para escalar conmigo?</speech>
        </speeches>
        <speeches id="2">
            <speech>Ha sido duro. Pero todo excursionista sabe que hay que levantarse y volver a intentarlo.</speech>
        </speeches>
        <speeches id="3">
            <speech>Ha sido duro. Pero todo excursionista sabe que hay que levantarse y volver a intentarlo.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Ja! ¡Esta montaña no me derrotará! Seguiré adelante, pase lo que pase.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Los pájaros tienen una forma única de surcar los cielos, igual que yo pretendo hacerlo en la batalla. Veamos si puedes seguirles el ritmo.</speech>
        </speeches>
        <speeches id="2">
            <speech>Ah, no pasa nada. Incluso los mejores pilotos tienen que enfrentarse a fuertes vientos de vez en cuando.</speech>
        </speeches>
        <speeches id="3">
            <speech>Ah, no pasa nada. Incluso los mejores aviadores tienen que enfrentarse a vientos fuertes de vez en cuando.</speech>
        </speeches>
        <speeches id="4">
            <speech>Tal y como esperaba. ¡Una auténtica batalla de vuelo y estrategia!</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Gengar" speed="1" sprite="94" type="pokemon" x="33" y="36">
        <path>DOWNx4,LEFTx1,RIGHTx1,UPx4</path>
        <onCollisionSpeech gap="4">Gengggaaar!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Sandslash" speed="1" sprite="28" type="pokemon" x="0" y="2">
        <path>DOWNx8,UPx8</path>
        <onCollisionSpeech gap="4">Slaaaaaash!</onCollisionSpeech>
    </movingNpc>
    <npc direction="LEFT" hidden="false" id="3" name="Blake" randomRotation="false" sprite="20" x="33" y="10">
        <speech>¿Qué es esto? ¿Un viajero atravesó el Túnel de la Roca?</speech>
        <speech>Debo haber tomado un camino equivocado en algún lugar y terminé cerca de Pueblo Lavanda...</speech>
        <speech>¡Hora de volver y coger un Nacli!</speech>
    </npc>
    <movingNpc direction="RIGHT" id="5" name="Golem" speed="1" sprite="75" type="pokemon" x="19" y="22">
        <path>RIGHTx2,LEFTx2</path>
        <onCollisionSpeech gap="4">Gollleeeem!</onCollisionSpeech>
    </movingNpc>
    <npc direction="RIGHT" hidden="false" id="6" name="Eric" randomRotation="true" sprite="49" x="6" y="26">
        <speech>¿¡Qué pasa!?</speech>
        <speech>Mi Electabuzz y yo destrozamos juntos, ¡mira este riff!</speech>
        <speech>Sostienen un Electirizador, ¡y déjame decirte que esas chispas gritan pura potencia!</speech>
    </npc>
    <movingNpc direction="DOWN" id="7" name="Electabuzz" speed="1" sprite="125" type="pokemon" x="10" y="25">
        <path>DOWNx3,UPx3</path>
        <onCollisionSpeech gap="4">taaaaa-buzzz!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="LEFT" id="8" name="Haunter" speed="1" sprite="93" type="pokemon" x="7" y="45">
        <path>LEFTx4,RIGHTx4</path>
        <onCollisionSpeech gap="4">Haaaaunt!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="9" name="Magnus" speed="1" sprite="10" type="npc" x="18" y="25">
        <path>RIGHTx4,LEFTx4</path>
        <onCollisionSpeech gap="4"/>
        <speech>¡Golem, usa Ráfaga de Rocas! ¡Una vez más!</speech>
    </movingNpc>
</npcs>