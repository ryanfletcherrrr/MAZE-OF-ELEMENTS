<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>¡Eh! ¡Tú! Dinos a dónde fue el Maestro Cyrus.</speech>
            <speech>¿Dónde estabas después de desaparecer en el Pilar de la Lanza?</speech>
            <speech>¿Eh? ¿¡El Mundo de Distorsión!? ¿Donde estaba Giratina?</speech>
            <speech>¡No tiene sentido! ¡No juegues esa carta conmigo!</speech>
            <speech>¡Bien! ¿No quieres hablar? ¡Te golpearé y te haré hablar!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡¿Qué te pasa?! ¡¿Tienes una venganza contra mí?!</speech>
            <speech>¡Mis Pokémon me han vuelto a decepcionar! ¿Cómo voy a conseguir información sobre nuestro desaparecido Maestro Cyrus?
            </speech>
            <speech>¡VALE! ¡Eso es para mí! Voy a buscar al Maestro Cyrus.</speech>
            <speech>¿El Mundo de la Distorsión, se llamaba? Debería ir allí, ¿no? Estoy harto del Equipo Galáctico.
            </speech>
            <speech>Júpiter, ¡puedes lidiar con ello!</speech>
            <speech>Ahí lo tienen. Volvemos a ser chicas normales. Usted puede fregar cualquier forma que
                quieras.
            </speech>
        </speeches>
        <speeches id="3">
            <speech>¡¿Qué te pasa?! ¡¿Tienes una venganza contra mí?!</speech>
            <speech>¡Mis Pokémon me han vuelto a decepcionar! ¿Cómo voy a conseguir información sobre nuestro desaparecido Maestro Cyrus?
            </speech>
            <speech>¡VALE! ¡Eso es para mí! Voy a buscar al Maestro Cyrus.</speech>
            <speech>¿El Mundo de la Distorsión, se llamaba? Debería ir allí, ¿no? Estoy harto del Equipo Galáctico.
            </speech>
            <speech>Júpiter, ¡puedes lidiar con ello!</speech>
            <speech>Ahí lo tienen. Volvemos a ser chicas normales. Usted puede fregar cualquier forma que
                quieras.
            </speech>
        </speeches>
        <speeches id="4">
            <speech>... Qué pérdida de tiempo ...</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>


    <conversation id="2">
        <speeches id="1">
            <speech>...Marte. Realmente eres débil. Lamentablemente. Haces que me avergüence de ser un Comandante como tú.
            </speech>
            <speech>Muy bien. Subiré después. Yo también quiero saber qué fue del Maestro Cyrus.</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Humph! ¡Deja de alardear de tu dureza! ¡No es lindo en lo más mínimo!</speech>
            <speech>...¡Cómo te atreves!</speech>
            <speech>Seguir el ejemplo de Marte en cualquier cosa me irrita, pero... Yo también renuncio para hacer lo mío.</speech>
            <speech>El Equipo Galáctico no es divertido sin el Maestro Cyrus. Así que, veterano, adelante.</speech>
            <speech>Haz lo que quieras con Team Galactic.</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Humph! ¡Deja de alardear de tu dureza! ¡No es lindo en lo más mínimo!</speech>
            <speech>...¡Cómo te atreves!</speech>
            <speech>Seguir el ejemplo de Marte en cualquier cosa me irrita, pero... Yo también renuncio para hacer lo mío.</speech>
            <speech>El Equipo Galáctico no es divertido sin el Maestro Cyrus. Así que, veterano, adelante.</speech>
            <speech>Haz lo que quieras con Team Galactic.</speech>
        </speeches>
        <speeches id="4">
            <speech>... Qué pérdida de tiempo ...</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>Suspiro... Tan impresionable e impetuoso. ¿Qué ven en Cyrus? Inmaduro, exagerado
                bufón.
            </speech>
            <speech>¿Se toma la molestia de reunir al Equipo Galáctico para qué? En última instancia, destruye su propia
                creación por su ridícula visión.
            </speech>
            <speech>No es gracias a él que tengo que luchar con las piezas.</speech>
            <speech>...Pero eso está bien. Los jóvenes pueden vivir con sus sueños. Yo prefiero permanecer firmemente en la realidad.
            </speech>
            <speech>Y para eso, el dinero es primordial. Tú, niña. No estoy tratando contigo.</speech>
            <speech>Después de todo, los demás miembros de la Galaxia que lo hicieron sufrieron las consecuencias.</speech>
            <speech>Nos vamos a recoger la Piedra de Magma. ¡Todo sea por el dinero!"</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Gravler" shouldSleep="" speed="1" sprite="75" type="pokemon" x="8" y="19">
        <path>UPx3, DOWNx3</path>
        <onCollisionSpeech gap="4"/>
        <speech>...</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Onix" speed="1" sprite="95" type="pokemon" x="29" y="7">
        <path>DOWNx4, UPx4</path>
        <onCollisionSpeech gap="4"/>
        <speech>*Onix te ignora*</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="3" name="Bill" randomRotation="false" sprite="20" x="22" y="5">
        <speech>Me pregunto qué podré encontrar si sigo adentrándome en las cuevas.</speech>
    </npc>
</npcs>