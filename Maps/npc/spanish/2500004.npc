<npcs>
    <conversation canSkip="false" id="1">
        <speeches id="1">
            <!-- Before Battle Speech -->
            <speech>Saludos, buscador de poder. Soy un aprendiz del Poder Oculto que domina las antiguas artes de la manipulación de tipos.
            </speech>
            <speech>Mi entrenamiento en las cámaras sagradas me ha enseñado a aprovechar la esencia siempre cambiante. Enfréntate a mí, si te atreves a probar tu
                temple.
            </speech>
            <speech>Si tu espíritu es lo suficientemente fuerte, te concederé un fragmento del poder del Poder Oculto.</speech>
        </speeches>
        <speeches id="2">
            <!-- Victory Speech -->
            <speech>Tu fuerza interior brilla con luz propia. Has demostrado ser merecedor de este conocimiento.</speech>
            <speech>Acepta este fragmento de Poder Oculto. Que despierte un nuevo potencial en tu Pokémon.</speech>
        </speeches>
        <speeches id="3">
            <!-- Not Battling Speech -->
            <speech>Un poder que surge demasiado rápido se agotará. Tómate tu tiempo para reunir fuerzas.</speech>
            <speech>Regresa en [GOLD]$DURATION[] cuando tu espíritu esté listo para ser probado.</speech>
        </speeches>
        <speeches id="4">
            <!-- Loss Speech -->
            <speech>Tu poder vacila, pero aún no se ha fortalecido lo suficiente.</speech>
            <speech>Fortalece tu determinación y regresa cuando te hayas hecho más fuerte. El poder te espera.</speech>
        </speeches>
        <speeches id="5">
            <!-- Before Criteria Speech -->
            <speech>Tu fuerza interior es demasiado débil. Entrénate hasta que se fortalezca.</speech>
            <speech>Sólo aquellos cuya determinación arda con fuerza podrán aprovechar los fragmentos que protejo.</speech>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="2">
        <speeches id="1">
            <!-- Before Battle Speech -->
            <speech>Bienvenido a mi santuario. Soy un aprendiz del Poder Oculto, guardián de la sabiduría ancestral.
            </speech>
            <speech>Meditando en soledad, he aprendido a canalizar las energías siempre cambiantes. Veamos si puedes igualar
                esta maestría.
            </speech>
            <speech>Demuestra tu dedicación y compartiré un fragmento de la esencia del Poder Oculto.</speech>
        </speeches>
        <speeches id="2">
            <!-- Victory Speech -->
            <speech>Como un maestro de la táctica, tu potencial no tiene límites. Te has ganado este don.</speech>
            <speech>Coge este fragmento de Poder Oculto. Que ayude a tus Pokémon a superar cualquier desafío.</speech>
        </speeches>
        <speeches id="3">
            <!-- Not Battling Speech -->
            <speech>La paciencia, como la sabiduría ancestral, refleja la verdadera fortaleza. Tómate tiempo para encontrar tu centro.</speech>
            <speech>Devuelve en [GOLD]$DURATION[] cuando estés listo para probar tu resolución.</speech>
        </speeches>
        <speeches id="4">
            <!-- Loss Speech -->
            <speech>Tu técnica aún está sin refinar, incapaz de canalizar el verdadero poder.</speech>
            <speech>Aprende a concentrarte y regresa cuando hayas encontrado tu camino. Los secretos te esperan.</speech>
        </speeches>
        <speeches id="5">
            <!-- Before Criteria Speech -->
            <speech>Tu espíritu es como energía dispersa, desenfocada e indisciplinada.</speech>
            <speech>Sólo aquellos que han encontrado su enfoque pueden aprovechar los fragmentos que protejo.</speech>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="3">
        <speeches id="1">
            <!-- Before Battle Speech -->
            <speech>Bienvenido a mi campo de entrenamiento. Soy un aprendiz del Poder Oculto, guardián de las artes místicas.
            </speech>
            <speech>A través de una práctica interminable, he aprendido los secretos de la transformación. Muéstrame si tu dedicación es lo bastante profunda.
            </speech>
            <speech>Demuestra tu compromiso con el crecimiento y te concederé conocimientos ancestrales.</speech>
        </speeches>
        <speeches id="2">
            <!-- Victory Speech -->
            <speech>Como un verdadero erudito, tu comprensión es cada vez más profunda. Has demostrado ser digno de este don.</speech>
            <speech>Acepta este fragmento de Poder Oculto. Que ayude a tus Pokémon a alcanzar su verdadero potencial.
            </speech>
        </speeches>
        <speeches id="3">
            <!-- Not Battling Speech -->
            <speech>Incluso los grandes maestros empezaron como estudiantes. Dedica tiempo a cultivar tus habilidades.</speech>
            <speech>Vuelve en [GOLD]$DURATION[] cuando estés listo para probar tu progreso.</speech>
        </speeches>
        <speeches id="4">
            <!-- Loss Speech -->
            <speech>Tu conexión con el antiguo poder sigue siendo débil.</speech>
            <speech>Profundiza en tu formación y regresa cuando te hayas hecho más fuerte. La verdadera sabiduría te espera.</speech>
        </speeches>
        <speeches id="5">
            <!-- Before Criteria Speech -->
            <speech>Tu potencial es como la energía bruta. Se necesita tiempo y entrenamiento.</speech>
            <speech>Sólo aquellos que entienden la verdadera dedicación pueden empuñar los fragmentos que protejo.</speech>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="4">
        <speeches id="1">
            <!-- Before Battle Speech -->
            <speech>Saludos, buscador. Soy un aprendiz del Poder Oculto, maestro de las artes siempre cambiantes.</speech>
            <speech>En medio de rigurosas pruebas, he capturado la esencia de la transformación. ¿Te atreves a enfrentarte a mi poder entrenado?</speech>
            <speech>Iguala mi espíritu disciplinado y compartiré un fragmento del misterio del Poder Oculto.</speech>
        </speeches>
        <speeches id="2">
            <!-- Victory Speech -->
            <speech>Tu poder rebosa verdadero potencial. Te has ganado el derecho a manejar este conocimiento.</speech>
            <speech>Coge este fragmento de Poder Oculto. ¡Que desbloquee nuevas fuerzas dentro de tu Pokémon!</speech>
        </speeches>
        <speeches id="3">
            <!-- Not Battling Speech -->
            <speech>Incluso un gran poder debe cultivarse con cuidado. Tómate tu tiempo para desarrollar tu energía.</speech>
            <speech>Vuelve en [GOLD]$DURATION[] cuando estés listo para aprovechar tu potencial.</speech>
        </speeches>
        <speeches id="4">
            <!-- Loss Speech -->
            <speech>Tus habilidades son prometedoras, pero carecen del enfoque de la verdadera maestría.</speech>
            <speech>Refuerza tus habilidades y regresa cuando estés preparado. Te espera un poder mayor.</speech>
        </speeches>
        <speeches id="5">
            <!-- Before Criteria Speech -->
            <speech>Tu energía no es más que un potencial desenfocado. Necesitas más entrenamiento para manejar este poder.</speech>
            <speech>Sólo aquellos que puedan dominarse a sí mismos podrán reclamar los fragmentos que protejo.</speech>
        </speeches>
    </conversation>
</npcs>