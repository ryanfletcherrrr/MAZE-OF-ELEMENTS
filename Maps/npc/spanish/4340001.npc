<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Hola, $PLAYER_NAME. Soy el artesano que forja Fragmentos Rojos de las garras de los Antorchicos.</speech>
            <speech>Para la forja, necesitamos un tipo específico de Torchic:</speech>
            <speech>Auto capturado en el Safari de Hoenn, sin objetos retenidos.</speech>
            <speech>Debe tener un total de IVs de 100 o más, y ser Ultra Raro.</speech>
            <speech>Además, debe ser al menos de nivel 1 y haber sido capturado originalmente por ti.</speech>
            <speech>Cuando encuentres una Torchic que cumpla estos criterios, tráemela.</speech>
        </speeches>
        <speeches id="2">
            <speech>Hola, $PLAYER_NAME. Soy el artesano que forja Fragmentos Rojos de las garras de los Antorchicos.</speech>
            <speech>Para la forja, necesitamos un tipo específico de Torchic:</speech>
            <speech>Auto capturado en el Safari de Hoenn, sin objetos retenidos.</speech>
            <speech>Debe tener un total de IVs de 100 o más, y ser Ultra Raro.</speech>
            <speech>Además, debe ser al menos de nivel 1 y haber sido capturado originalmente por ti.</speech>
            <speech>¡Oh! Tienes Torchic(s) que satisface nuestras necesidades. Como artesano, forjaré un Fragmento Rojo de sus garras.</speech>
            <speech>Este proceso es permanente, lo que significa que se llevará la Torchic para siempre. Está seguro de su elección?</speech>
            <speech>Seleccione la Torchic que desea utilizar para la Red Shard. Elija con cuidado, ya que esto no se puede deshacer y Torchic se toma bajo nuestro cuidado para siempre.</speech>
        </speeches>
        <speeches id="3">
            <speech>No hay problema, $PLAYER_NAME. Tales decisiones no deben ser apresuradas. Regresa cuando estés listo.</speech>
        </speeches>
        <speeches id="4">
            <speech>Entiendo su decisión. Procedamos con la forja.</speech>
            <speech>...y está hecho. Aquí está tu Fragmento Rojo, hecho con las garras de tu Torchic.</speech>
            <speech>Este fragmento tiene propiedades poderosas. Úsala sabiamente. Gracias por confiarme tu Torchic.</speech>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>Bienvenido, $PLAYER_NAME. Para fabricar la flauta roja se necesitan 10 esquirlas rojas, que se obtienen de las antorchas más raras.</speech>
            <speech>Estos fragmentos encarnan la esencia de las tierras salvajes de Hoenn. Si te faltan, la aventura continúa.</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Maravilloso, has conseguido 10 Fragmentos Rojos! Con ellas, puedo forjar la flauta que calma los espíritus.</speech>
            <speech>La creación de la Flauta Roja no es poca cosa. ¿Listo para continuar? Una vez que empiezo, no hay vuelta atrás.</speech>
        </speeches>
        <speeches id="3">
            <speech>Comprendo sus dudas. Es una decisión que no debe tomarse a la ligera.</speech>
            <speech>Reflexiona sobre tu elección. Cuando la certeza te encuentre, aquí estaré.</speech>
        </speeches>
        <speeches id="4">
            <speech>Comencemos. Tu confianza en mí no quedará sin recompensa.</speech>
            <speech>...Y está completa. Aquí, la Flauta Roja, imbuida de la armonía salvaje.</speech>
            <speech>Trátala con cuidado. Sus melodías son potentes, capaces de calmar la tempestad interior.</speech>
            <speech>Debo partir ahora para reunir más recursos. Las tierras salvajes de Hoenn son vastas y sus secretos, muchos.</speech>
            <speech>La próxima vez que nos veamos, espero oír historias de cómo la Flauta Roja te ayudó. Adiós, por ahora.</speech>
        </speeches>
        <speeches id="5">
            <speech>Esta flauta marca un vínculo entre nosotros, $PLAYER_NAME. Sin embargo, mi viaje por los materiales me llama lejos.</speech>
            <speech>Ahora debo partir para reunir más recursos. Las tierras salvajes de Hoenn son vastas y sus secretos, muchos.</speech>
            <speech>La próxima vez que nos veamos, espero oír historias de cómo la Flauta Roja te ayudó. Adiós, por ahora.</speech>
        </speeches>
    </conversation>

</npcs>