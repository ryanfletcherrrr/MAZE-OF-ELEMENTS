<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>¡Oye! ¡No puedes adentrarte más en estas cuevas!</speech>
            <speech>Estamos... eh... ¡aún llevando a cabo importantes asuntos del Team Rocket ahí abajo!</speech>
            <speech>No hay nada que puedas ver, ¡especialmente ningún pequeño Pokémon asustado escondido por ahí!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Argh! Mi Zubat no pudo detenerte...</speech>
            <speech>Mira, de todas formas ya conseguimos lo que buscábamos durante la redada.</speech>
            <speech>Si hay algún Cleffa perdido ahí abajo, ¡ya no es nuestro problema!</speech>
        </speeches>
        <speeches id="3">
            <speech>Bien, bien... ve a rescatar a tu preciosa Cleffa.</speech>
            <speech>Nunca debimos quedarnos en el Monte Moon después de que el jefe cancelara la operación.</speech>
            <speech>Pero no espere que le ayudemos a encontrarlo.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Ja! ¡Te dije que mi Zubat conoce estas cuevas mejor que nadie!</speech>
            <speech>Ahora date la vuelta y deja en paz a esa Cleffa, ¡ya ha sufrido bastante!</speech>
            <speech>¡El Equipo Rocket no necesita más problemas de bienhechores como tú!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Ugh... No puedo creer que me tocó el deber del Monte Luna... Supongo que te daré una paliza y volveré a dormir la siesta.</speech>
        </speeches>
        <speeches id="2">
            <speech>Genial... ahora tengo que decirle al jefe que perdí y no terminé la siesta...</speech>
        </speeches>
        <speeches id="3">
            <speech>Genial... ahora tengo que decirle al jefe que perdí y no terminé la siesta...</speech>
        </speeches>
        <speeches id="4">
            <speech>Por fin. Ahora puedo volver a... actividades importantes relacionadas con el descanso.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>¿Estos fósiles? Sólo una pequeña pieza del rompecabezas. Cuando el plan de Giovanni se haga realidad... ¡oh tío, desearás no haberte metido en nuestro camino!</speech>
        </speeches>
        <speeches id="2">
            <speech>Ugh... Nunca subiré de rango así... Tal vez debería robar dos fósiles la próxima vez...</speech>
        </speeches>
        <speeches id="3">
            <speech>Ugh... Nunca subiré de rango así... Tal vez debería robar dos fósiles la próxima vez...</speech>
        </speeches>
        <speeches id="4">
            <speech>Un paso más cerca de un ascenso... Giovanni va a ver que no soy un gruñón... ¡Soy un futuro ejecutivo!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Fósiles hoy... Energía mañana. Giovanni está construyendo algo grande, ¡y esta montaña es sólo el principio!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡No! ¡Si Giovanni se entera de que perdí, me quedaré fregando suelos!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡No! ¡Si Giovanni se entera de que perdí, me quedaré fregando suelos!</speech>
        </speeches>
        <speeches id="4">
            <speech>Una plaga menos en nuestro camino... La visión de Giovanni cambiará el mundo.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Los fósiles no son solo huesos viejos... son poder. Y cuando Giovanni desvele sus secretos, ¡el Equipo Rocket será imparable!</speech>
        </speeches>
        <speeches id="2">
            <speech>No... Le he fallado... ¡La ira de Giovanni es peor que perder!</speech>
        </speeches>
        <speeches id="3">
            <speech>No... Le he fallado... ¡La ira de Giovanni es peor que perder!</speech>
        </speeches>
        <speeches id="4">
            <speech>No se puede detener el futuro. La visión de Giovanni aplastará todo a su paso.</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>¡Eh! ¡Estos fósiles son míos! ¡Los encontré en las profundidades de estas ruinas!</speech>
        </speeches>
        <speeches id="2">
            <speech>Hmmph... De ninguna manera te voy a decir cuál es mejor. Eso lo decidirá un verdadero entrenador.</speech>
        </speeches>
        <speeches id="3">
            <speech>Muy bien, muy bien... Has luchado bien. Supongo que puedo separarme de uno. ¡Pero sólo uno!</speech>
            <speech>Vamos, elige un fósil, pero elige bien. Poderes ancestrales descansan en estas piedras...</speech>
        </speeches>
        <speeches id="4">
            <speech>Vamos, elige un fósil, pero elige bien. Poderes ancestrales descansan en estas piedras...</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>¿Clef? ¿Cleffa? *se acerca cautelosamente, percibiendo sus amables intenciones*</speech>
            <speech>*La Cleffa emerge por fin, mirándote con ojos esperanzados y llorosos*.</speech>
            <speech>¡Cleffa! *asiente con entusiasmo y comienza a dirigirse hacia la salida de la cueva*</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Clefa! ¡Clef! *felizmente salta hacia adelante, ya sin miedo*</speech>
            <speech>*El Cleffa hace una pausa de vez en cuando para asegurarse de que le sigues*.</speech>
            <speech>¡Clef! *chirría excitada, ansiosa por reunirse con su familia*</speech>
        </speeches>
        <speeches id="3">
            <speech>Clef... cleffa... *whimpers softly*</speech>
            <speech>*La pequeña Cleffa se acobarda detrás de la roca caída, temblando de miedo*</speech>
            <speech>¡Clefa! ¡Clef! *mira frenéticamente alrededor buscando a su familia*</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Geodude" speed="1" sprite="74" type="pokemon" x="32" y="11">
        <path>DOWNx2,UPx2</path>
        <onCollisionSpeech gap="4">Geoodudeee</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="LEFT" id="2" name="Geodude" speed="1" sprite="74" type="pokemon" x="31" y="26">
        <path>LEFTx2,RIGHTx2</path>
        <onCollisionSpeech gap="4">Geoooo!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="3" name="Paras" speed="1" sprite="46" type="pokemon" x="54" y="10">
        <path>RIGHTx3,LEFTx3</path>
        <onCollisionSpeech gap="4">paar paar</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="LEFT" id="4" name="Roggenrola" speed="1" sprite="524" type="pokemon" x="46" y="36">
        <path>LEFTx2,RIGHTx2</path>
        <onCollisionSpeech gap="4">Rollaaaaa!</onCollisionSpeech>
    </movingNpc>
    <npc direction="RIGHT" hidden="false" id="5" name="Travis" randomRotation="true" sprite="39" x="53" y="47">
        <speech>Uf... Pensé que lo había visto todo.</speech>
        <speech>Ese Pokémon de tipo Roca y Veneno casi acaba con todo mi equipo.</speech>
    </npc>
    <movingNpc direction="LEFT" id="6" name="Geodude" speed="1" sprite="74" type="pokemon" x="28" y="56">
        <path>LEFTx3,RIGHTx3</path>
        <onCollisionSpeech gap="4">Geoooo</onCollisionSpeech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="7" name="Seth" randomRotation="false" sprite="101" x="22" y="30">
        <speech>Asegúrate de que tus Pokémon están sanos, ¿vale?</speech>
        <speech>No se puede ser demasiado cuidadoso aquí con esos tipos sospechosos.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="8" name="Samantha" randomRotation="false" sprite="82" x="17" y="5">
        <speech>¡¡¡Waaah!!!</speech>
        <speech>Oh, pareces amigable... Quería encontrar una Piedra Lunar para mi Clefairy, pero el Monte Luna se puso muy oscuro de repente...</speech>
        <speech>¡Ahora estoy demasiado asustada para moverme!</speech>
    </npc>
    <movingNpc direction="LEFT" id="9" name="Roggenrola" speed="1" sprite="524" type="pokemon" x="9" y="22">
        <path>LEFTx4,RIGHTx4</path>
        <onCollisionSpeech gap="4">rolaaaaaa</onCollisionSpeech>
    </movingNpc>
</npcs>