<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>¡Bienvenido a Zorg Cafe! ¿Quieres que prepare algo que rejuvenezca a tu Pokemon?</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Allá vamos! ¡C'est la vie!</speech>
        </speeches>
        <speeches id="3">
            <speech>Vuelven cada vez que tienen la necesidad de rejuvenecer</speech>
        </speeches>
    </conversation>
    <npc direction="UP" id="1000" name="Gentleman Harkley" randomRotation="true" sprite="5" triggerX="3" triggerY="5" x="2" y="5">
        <speech>Vengo aquí desde que se abrió este café hace una década.</speech>
        <speech>Dios, eso me hace sentir viejo ahora.</speech>
        <speech>Recuerdo cuando Glassmoor era una ciudad más pequeña y acogedora, llena de comerciantes y lugareños felices.</speech>
        <speech>Cómo han cambiado los tiempos ...</speech>
    </npc>
    <npc direction="DOWN" id="1001" name="Lady Myra" sprite="55" triggerX="3" triggerY="3" x="2" y="3">
        <speech>Esta ciudad ha cambiado considerablemente, eso está claro.</speech>
        <speech>Todas esas grandes empresas y rascacielos de lujo dominando el horizonte, es tan diferente.</speech>
        <speech>Ahora no me importa el cambio o el progreso per se, pero no puedo aprobar el horrible cambio en las actitudes sociales.
            sociales.
        </speech>
        <speech>Quiero decir... parece que la ciudad se ha convertido en una fría jungla de cemento sin emociones.</speech>
        <speech>Aunque ha empeorado mucho desde que "esa" gente llegó aquí...</speech>
    </npc>
    <npc direction="LEFT" id="1002" name="Waitress Jenna" randomRotation="true" sprite="56" triggerX="12" triggerY="8" x="12" y="6">
        <speech>¡Hola!</speech>
        <speech>Pareces un viajero. Si es así, deberías descansar aquí un rato.</speech>
        <speech>La ciudad de Glassmoor está justo al otro lado del puente, así que podrá relajarse sin preocupaciones.</speech>
        <speech>Nuestro chef prepara comida deliciosa, por si te interesa.</speech>
        <speech>Servir a los viajeros es nuestra especialidad.</speech>
    </npc>
    <npc direction="LEFT" id="1003" name="Waiter Jim" randomRotation="true" sprite="133" x="1" y="9">
        <speech>Una pizza Pepperoni para la mesa 1 y un batido Moo Moo para la mesa 3 ...</speech>
        <speech>¡Hola! Bienvenido al café.</speech>
        <speech>Como a menudo recibimos viajeros de toda la región, seguro que suele encontrar a alguien</speech>
        <speech>interesante para hablar.</speech>
        <speech>El mundo está lleno de misterios, y cada uno de ellos tiene su propia historia.</speech>
        <speech>¿Eso era droga o qué?</speech>
    </npc>
    <npc direction="DOWN" id="1004" name="Gentleman Marley" sprite="5" triggerX="3" triggerY="11" x="2" y="11">
        <speech>Dime, jovencito, ¿eres nuevo aquí?</speech>
        <speech>Oh, eres de Ciudad Nuevo Amanecer. Eso está bastante lejos, así que supongo que estás de viaje.</speech>
        <speech>Bien. Entonces dime, ¿qué sabes de la "Corporación Dank"?</speech>
        <speech>Parece que no mucho. Bueno, no te preocupes y escucha. Créeme, podría ser información útil.
        </speech>
        <speech>Verás, Dank Corp. es una gran empresa que fabrica accesorios Pokemon, desde Pokeballs a Poffins, etc.
        </speech>
        <speech>Están presentes en toda la región $REGION_NAME, e incluso en otros países.</speech>
        <speech>Pero, creo que esto es sólo una fachada para sus actividades reales, que son mucho menos legales.</speech>
        <speech>¿Cómo lo sé? Soy detective, por supuesto. Soy de la Policía Internacional.</speech>
        <speech>Si has oído hablar del Agente Looker, entonces sabrás quiénes somos. Mi compañero Bob y yo estamos
            investigando a Dank Corp.
        </speech>
        <speech>Tenemos razones suficientes para creer que ocultan algo grande, y tenemos que averiguar qué.
        </speech>
        <speech>Sólo te dije esto porque parecías digno de confianza, chico. Soy un buen juez de carácter, así que espero no estar
            no me equivoque.
        </speech>
    </npc>
    <npc direction="UP" id="1005" name="Gentleman Bob" sprite="5" triggerX="3" triggerY="13" x="2" y="13">
        <speech>Aunque parece extraño que la Policía Internacional esté investigando a Dank Corp, simplemente no hay
            otra opción.
        </speech>
        <speech>Algunos agentes de los departamentos de Policía local parecen ajenos a sus manejos, y estoy seguro de que el dinero
            está involucrado en gran medida.
        </speech>
        <speech>Aunque confiamos en la mayoría de la Policía, estos pocos elegidos están, desgraciadamente, en lo alto de la
            jerarquía.
        </speech>
        <speech>Esto significa que la Policía local es efectivamente incapaz de investigar a Dank Corp, con todos esos
            intereses creados.
        </speech>
        <speech>Por eso, como miembros de la Policía Internacional, nos asignaron este caso.</speech>
        <speech>Vigila a Dank Corp, chico. Pero, sobre todo, no intentes nada solo: es peligroso.</speech>
    </npc>

    <conversation id="2">
        <speeches id="1">
            <speech>Vi a algunos sacerdotes entrando en Nova Condominios con trajes de color naranja.</speech>
            <speech>Nunca he visto un montón de curas en Glassmoor, quiero decir que la ciudad es demasiado moderna para curas, me parece.</speech>
            <speech>Me pregunto qué pasa ahí.</speech>
        </speeches>

        <speeches id="2">
            <speech>Vi a algunos sacerdotes entrando en Nova Condominios con trajes de color naranja.</speech>
            <speech>Nunca he visto un montón de curas en Glassmoor, quiero decir que la ciudad es demasiado moderna para curas, me parece.</speech>
            <speech>Me pregunto qué pasa ahí.</speech>
        </speeches>
    </conversation>
</npcs>