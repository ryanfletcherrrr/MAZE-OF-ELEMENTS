<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Un verdadero caballero valora tanto la etiqueta como la fuerza. Permitidme que os demuestre ambas cosas en esta batalla.</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Espléndido! Una batalla bien librada. Admiro a un digno oponente.</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Espléndido! Una batalla bien librada. Admiro a un digno oponente.</speech>
        </speeches>
        <speeches id="4">
            <speech>Gracia y compostura, mi querido entrenador. Un caballero nunca vacila bajo presión.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>¡Mis Pokémon y yo hemos estado entrenando todo el día! Prepárate, ¡porque soy imparable!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡¿Qué?! ¡Pero estaba tan seguro de que ganaría! ¡¡Quizás necesite entrenar dos días enteros!!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡¿Qué?! ¡Pero estaba tan seguro de que ganaría! ¡¡Quizás necesite entrenar dos días enteros!!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Ja! ¡Te lo dije! ¡Quizás deberías entrenar todo el día como yo!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>¡Mis Pokémon son superfuertes! Los entrené corriendo en círculos. Eso funciona, ¿verdad?</speech>
        </speeches>
        <speeches id="2">
            <speech>Espera, ¿correr en círculos no hace más fuertes a los Pokémon? Me han mentido.</speech>
        </speeches>
        <speeches id="3">
            <speech>Espera, ¿correr en círculos no hace más fuertes a los Pokémon? Me han mentido.</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Lo veis? Mi entrenamiento en círculo funciona. Debería escribir un libro sobre esto.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Mis Pokémon son como el viento, rápidos y libres. Veamos si puedes seguirles el ritmo.</speech>
        </speeches>
        <speeches id="2">
            <speech>Parece que hoy me han cortado las alas a los Pokémons, ¡pero la próxima vez volarán más alto!</speech>
        </speeches>
        <speeches id="3">
            <speech>Parece que hoy me han cortado las alas a los Pokémons, ¡pero la próxima vez volarán más alto!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Ja! ¡No puedes atrapar a mis pájaros cuando vuelan alto! La victoria parece una brisa.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Mi entrenamiento está cronometrado al minuto. Mis Pokémon luchan con una precisión perfecta. ¿Puedes romper nuestro ritmo?</speech>
        </speeches>
        <speeches id="2">
            <speech>Interesante... tu imprevisibilidad desbarató mis cálculos. Hora de recalibrar.</speech>
        </speeches>
        <speeches id="3">
            <speech>Interesante... tu imprevisibilidad desbarató mis cálculos. Hora de recalibrar.</speech>
        </speeches>
        <speeches id="4">
            <speech>Como era de esperar. La estrategia y el entrenamiento aseguran la victoria. Debes refinar tu enfoque.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>El tiempo es una ilusión, y las batallas son la danza del destino. Veamos si puedes seguir el ritmo.</speech>
        </speeches>
        <speeches id="2">
            <speech>Es interesante que el futuro sea siempre cambiante, pero preveo una victoria la próxima vez.</speech>
        </speeches>
        <speeches id="3">
            <speech>Es interesante que el futuro sea siempre cambiante, pero preveo una victoria la próxima vez.</speech>
        </speeches>
        <speeches id="4">
            <speech>Todo sucede como debe. Tu derrota fue simplemente parte del camino hacia tu crecimiento.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>No hay nada mejor que una buena excursión y una batalla Pokémon. Veamos si puedes con la naturaleza.</speech>
        </speeches>
        <speeches id="2">
            <speech>Supongo que me equivoqué de camino, pero todo camino lleva a una lección.</speech>
        </speeches>
        <speeches id="3">
            <speech>Supongo que me equivoqué de camino, pero todo camino lleva a una lección.</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Lo veis? Un poco de entrenamiento al aire libre hace maravillas. Deberías ir de acampada alguna vez.</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>¡Ruta 11 forja campeones! He estudiado todas las técnicas, ¿estás listo para la cima de mi entrenamiento?</speech>
        </speeches>
        <speeches id="2">
            <speech>No cometeré los mismos errores la próxima vez. Disfruta de esta victoria mientras dure.</speech>
        </speeches>
        <speeches id="3">
            <speech>No cometeré los mismos errores la próxima vez. Disfruta de esta victoria mientras dure.</speech>
        </speeches>
        <speeches id="4">
            <speech>Tal y como predije en la Ruta 11, ¡la preparación decide la victoria!</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>La ingeniería es sinónimo de eficiencia. ¡Veamos si tu estrategia de batalla está tan bien construida como mis artilugios!</speech>
        </speeches>
        <speeches id="2">
            <speech>Hmm, ¡vuelvo a la mesa de dibujo! Tengo que afinar mi estrategia para la próxima vez.</speech>
        </speeches>
        <speeches id="3">
            <speech>Hmm, ¡vuelvo a la mesa de dibujo! Tengo que afinar mi estrategia para la próxima vez.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Éxito! Un plan bien diseñado siempre funciona al final, ¡como mis máquinas!</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>Mis Pokémon van vestidos con los mejores accesorios que el dinero puede comprar. Su entrenamiento es igual de caro. ¿Quieres ver cómo son las batallas más caras?</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Es absurdo! ¿Sabes cuánto gasté en profesores particulares? Padre se enterará de esta vergüenza...</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Es absurdo! ¿Sabes cuánto gasté en profesores particulares? Padre se enterará de esta vergüenza...</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Por supuesto que gané! Cuando puedes permitirte lo mejor de todo, la victoria es simplemente otro lujo que coleccionar. ¡Mejor suerte ahorrando para tu próximo intento!</speech>
        </speeches>
    </conversation>
    <npc direction="DOWN" hidden="false" id="1" name="Beast Gohan" randomRotation="true" sprite="35" x="44" y="23">
        <speech>Bien, entonces...</speech>
        <speech>¡Supongo que es mi turno!</speech>
    </npc>
    <npc direction="UP" hidden="false" id="2" name="Cell Max" randomRotation="false" sprite="69" x="44" y="27">
        <speech>.......</speech>
        <speech>.............</speech>
        <speech>¡Gruughhhhhhh!</speech>
    </npc>
    <movingNpc direction="RIGHT" id="3" name="Alomomola" speed="1" sprite="594" type="pokemon" x="1" y="29">
        <path>RIGHTx4,DOWNx1,UPx1,LEFTx4</path>
        <onCollisionSpeech gap="4">Lo-lo-mooo...</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="LEFT" id="4" name="Gastrodon" speed="1" sprite="423" type="pokemon" x="17" y="29">
        <path>LEFTx4,UPx1,LEFTx4,RIGHTx4,DOWNx1,RIGHTx4</path>
        <onCollisionSpeech gap="4">Gasssss!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="5" name="Pawmi" speed="1" sprite="1396" type="pokemon" x="54" y="37">
        <path>RIGHTx4,DOWNx4,LEFTx4,UPx4</path>
        <onCollisionSpeech gap="4">Pii-ziiip!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="LEFT" id="6" name="Diglett" speed="1" sprite="50" type="pokemon" x="16" y="8">
        <path>LEFTx3,RIGHTx3</path>
        <onCollisionSpeech gap="4">diiiiiig!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="DOWN" id="7" name="Paige" speed="1" sprite="94" type="npc" x="24" y="15">
        <path>DOWNx5,UPx5</path>
        <onCollisionSpeech gap="4"/>
        <speech>¡Mi papá dice que puedo volver a luchar contra los Líderes de Gimnasio después de vencerlos!</speech>
        <speech>¿No es increíble?</speech>
        <speech>¡Voy a ganar mucho dinero!</speech>
    </movingNpc>
    <npc direction="LEFT" hidden="false" id="8" name="Peter Pan" randomRotation="false" sprite="24" x="66" y="16">
        <speech>Todo lo que hace falta es fe, confianza y un poco de polvo de hadas.</speech>
    </npc>
    <movingNpc direction="LEFT" id="9" name="Mime. Jr" speed="1" sprite="439" type="pokemon" x="55" y="18">
        <path>LEFTx8,DOWNx3,LEFTx2,RIGHTx2,DOWNx0,UPx3,RIGHTx8</path>
        <onCollisionSpeech gap="4">Mee-mee!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="DOWN" id="10" name="Jacob" speed="1" sprite="34" type="npc" x="75" y="27">
        <path>DOWNx2,RIGHTx2,UPx2,LEFTx2</path>
        <onCollisionSpeech gap="4"/>
        <speech>Hay un Snorlax bloqueando el camino más adelante. Si quieres llegar a Ciudad Celadon, tendrás que tomar el camino más largo.</speech>
        <speech>a través del Túnel de la Roca, al este de Cerulean.</speech>
    </movingNpc>
</npcs>