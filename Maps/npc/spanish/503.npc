<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>¿Qué está pasando...?</speech>
        </speeches>
        <speeches id="2">
            <speech>¿De qué iba eso?</speech>
            <speech>Tipo raro ..</speech>
            <speech>¡OK $NOMBRE_JUGADOR! ¡Vamos a atrapar a ese Pokémon legendario!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡¿Escuchaste eso, $Nombre_del_jugador?!</speech>
            <speech>¡Era el Pokémon legendario llorando!</speech>
            <speech>¡Tenía que ser eso! ¡VALE! ¡Esta es nuestra oportunidad!</speech>
            <speech>¡Vamos a cogerlo!</speech>
            <speech>...¡Espera! ¿Qué...?</speech>
            <speech>¡No llevamos nada encima!</speech>
            <speech>¡Ya sabes, Poké Balls! ¡P-O-K-accent-E Balls!</speech>
            <speech>Si no los tenemos, no podremos capturar Pokémon ni llevarlos con nosotros.</speech>
            <speech>...¿Crees que el Prof. Rowan nos daría un poco si se lo pidiéramos?</speech>
            <speech>Recuerdas lo que dijo, ¿no?</speech>
            <speech>Dijo que lo visitáramos en su laboratorio si necesitábamos algo. ¡VALE, $NOMBRE_DEL_JUGADOR! ¡Te echo una carrera!</speech>
            <speech>¡El primero en llegar al laboratorio del profesor en Sandgem Town gana!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>...El tiempo que fluye...</speech>
            <speech>El espacio en expansión...</speech>
            <speech>Algún día lo haré todo mío...</speech>
            <speech>Cyrus es mi nombre. Recuérdalo...</speech>
            <speech>Hasta entonces, duerme mientras puedas, Pokémon legendario del lago bed....</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>¡Esa cara...! ¡Me trae malos recuerdos! ¡Estoy hablando de la fábrica de viento!</speech>
            <speech>Me metí en un montón de problemas por ese pequeño incidente. ¿Por qué pones esa cara?
            </speech>
            <speech>Te acuerdas de mí, ¿verdad? Bien, como quieras. ¡Te diré quién soy otra vez!</speech>
            <speech>Soy Marte, uno de los Comandantes del Equipo Galáctico. Entonces, ¿qué pasa?</speech>
            <speech>¿Sois una pareja de enamorados al rescate?</speech>
            <speech>¡Ni una oportunidad! ¡Ni siquiera una pequeñita! ¡Vais a caer todos!</speech>
        </speeches>
        <speeches id="2">
            <speech>Perdí otra vez...</speech>
            <speech>Así que, ¡primero las obras eólicas, y ahora el lago Verity que te debo!</speech>
            <speech>Esto no debería pasarle al Comandante del Equipo Galáctico...</speech>
            <speech>...Cálmate, Marte... He hecho mi parte en todo esto... Mi misión era transportar los
                Pokémon del lago a nuestro cuartel general...
            </speech>
            <speech>...¡Así es! ¡Cumplí mi misión sin problemas! ¡Equipo! ¡Nos retiramos! ¡El jefe está
                ¡esperando en el Cuartel General!
            </speech>
            <speech>Los Pokémon de los tres lagos están conectados de algún modo. Gracias a la grandilocuencia de Saturno en el Lago
                Valor, aquí apareció una caverna.
            </speech>
            <speech>Era la caverna donde dormía el Pokémon Mesprit. Mesprit también apareció, probablemente
                para ir a ayudar a sus amigos.
            </speech>
            <speech>Eso nos funcionó bien. Fue muy fácil de atrapar.</speech>
            <speech>Así que, ahora los tenemos todos</speech>
            <speech>Mesprit, el Ser de la Emoción.</speech>
            <speech>Azelf, el Ser de la Voluntad.</speech>
            <speech>Uxie, el Ser de la Inteligencia.</speech>
            <speech>Ahora que los tenemos todos... ¡Ya puedes esperar a ver qué planes tiene el Equipo Galáctico para ellos!</speech>
        </speeches>
        <speeches id="3">
            <speech>¿Cómo ha llegado hasta aquí?</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>¡Ah, $PLAYER_NAME! ¡Qué oportuno!</speech>
            <speech>¡Esos canallas del Equipo Galáctico van tras el Pokémon legendario!</speech>
            <speech>¡Tienes que ayudar a Dawn!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Cómo os atrevéis! ¡Gamberros descarriados! ¡$PLAYER_NAME! ¡Dawn necesita tu ayuda!</speech>
        </speeches>
        <speeches id="3">
            <speech>Ya veo... Esto también ocurrió en el Lago Valor...</speech>
            <speech>El Equipo Galáctico se llevó a otro Pokémon legendario...</speech>
            <speech>Ambos se enfrentaron a criminales en toda regla...</speech>
            <speech>El hecho de que estés ileso es razón suficiente para celebrarlo. ... Pero ¿qué pasa con Barry?</speech>
            <speech>¿Qué está pasando en Lake Acuity? ¿Está Barry a salvo?</speech>
            <speech>Necesito que vayas al Lago Acuity de inmediato. Estoy preocupado por Barry.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>¡Ay! ¡Ay! ¿Qué le pasa al viejo?</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="6">
        <speeches id="1">
            <speech>Nuestra misión es entretenerle. Lo siento, pero tenemos que hacer nuestro trabajo.</speech>
        </speeches>
        <speeches id="2">
            <speech>Perder también formaba parte de mi trabajo. ...me siento mejor diciendo eso.</speech>
        </speeches>
        <speeches id="3">
            <speech>Perder también formaba parte de mi trabajo. ...me siento mejor diciendo eso.</speech>
        </speeches>
        <speeches id="4">
            <speech>No vuelvas por aquí.</speech>
        </speeches>
        <speeches id="5"/>
    </conversation>
    <conversation canSkip="false" id="7">
        <speeches id="1">
            <speech>¡Pondré a todos tus Pokemon en órbita!</speech>
        </speeches>
        <speeches id="2">
            <speech>Mi mente se está volviendo orbital.</speech>
        </speeches>
        <speeches id="3">
            <speech>Mi mente se está volviendo orbital.</speech>
        </speeches>
        <speeches id="4">
            <speech>No vuelvas por aquí.</speech>
        </speeches>
        <speeches id="5"/>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>¡$PLAYER_NAME! ¡Es T-Team Galactic! ¡Oh, no! ¿El Pokémon del lago...?</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>*Lapras quiere llevarte a alguna parte*</speech>
            <speech>¿Quieres viajar con los Lapras?</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>El pequeño pingüino intenta llevarte a algún lugar</speech>
            <speech>¿Quieres viajar con el pequeño pingüino?</speech>
        </speeches>
    </conversation>


    <conversation id="12" canSkip="false">
        <speeches id="1">
            <!-- Antes de la Batalla -->
            <speech>¿Tú otra vez? He oído de tu pequeña hazaña. ¿Un millón en daño Dynamax, verdad?</speech>
            <speech>No está mal, pero veamos si eres bueno en una batalla real. ¡No te haré la vida fácil!</speech>
            <speech>Elige tu nivel de dificultad. Espero que estés listo para lo que viene.</speech>
        </speeches>
        <speeches id="2">
            <!-- Discurso de Victoria -->
            <speech>¿Qué? ¿Me has vencido? Esto no le pasa... a un Comandante del Team Galactic!</speech>
            <speech>Disfruta tu victoria, no durará. ¡Volveré más fuerte que nunca!</speech>
        </speeches>
        <speeches id="3">
            <!-- Discurso de No Batalla -->
            <speech>¿Huyendo? Esperaba más de ti. Muy bien, nos encontraremos de nuevo.</speech>
            <speech>Digamos, después de $DURATION? Usa el tiempo sabiamente. La próxima vez, sin huir.</speech>
        </speeches>
        <speeches id="4">
            <!-- Discurso de Derrota -->
            <speech>¡Ja! Justo lo que pensé. No estás listo para enfrentar a alguien como yo.</speech>
            <speech>Vuelve cuando te hayas endurecido. Te estaré esperando para un verdadero desafío.</speech>
        </speeches>
        <speeches id="5">
            <!-- Antes del Discurso de Criterio -->
            <speech>Espera, ¿aún no has hecho [GOLD]un millón de daño Dynamax[]? Eso es decepcionante.</speech>
            <speech>Vuelve cuando no seas solo palabras. Te estaré esperando para probar tu verdadera fuerza.</speech>
        </speeches>
    </conversation>

    <movingNpc direction="DOWN" id="1" name="Tentacool" shouldSleep="" speed="1" sprite="72" type="pokemon" x="17" y="30">
        <path>LEFTx3, RIGHTx3, DOWNx2, UPx2</path>
        <onCollisionSpeech gap="4">*The Tentacool slaps you with a tentacle as you pass by*</onCollisionSpeech>
        <speech>¡Tenta!</speech>
    </movingNpc>
    <movingNpc direction="LEFT" id="2" name="Lapras" shouldSleep="" speed="1" sprite="131" type="pokemon" x="40" y="20">
        <path>LEFTx2, RIGHTx2, UPx2, DOWNx2</path>
        <onCollisionSpeech gap="4">*The Lapras stares at you with a serene gaze*</onCollisionSpeech>
        <speech>¡¡¡Laaaaaaaapras!!!</speech>
    </movingNpc>
    <movingNpc direction="LEFT" id="3" name="Gyarados" shouldSleep="" speed="1" sprite="130" type="pokemon" x="22" y="10">
        <path>LEFTx3, RIGHTx3</path>
        <onCollisionSpeech gap="4">*The Gyarados roars at you and glares!*</onCollisionSpeech>
        <speech>¡¡¡¡GYARA!!!!</speech>
    </movingNpc>
</npcs>