<npcs>
    <conversation id="3">
        <speeches id="1">
            <speech>Hola, chico. Soy el experto local en cañas de pescar. He oído que se regalan cañas de pescar en Ciudad Jubilife.</speech>
        </speeches>
        <speeches id="2">
            <speech>Hola. Soy el experto local en cañas de pescar. ¿Puedo arreglar tu caña de pescar si quieres? Por una tarifa, por supuesto.</speech>
            <speech>¿Quiere reparar su caña por 500 F?</speech>
        </speeches>
        <speeches id="3">
            <speech>Enhorabuena, su caña de pescar ha sido reparada con éxito.</speech>
        </speeches>
        <speeches id="4">
            <speech>Vuelve si necesitas reparar tu caña.</speech>
        </speeches>
        <speeches id="5">
            <speech>¡Tu caña ya está en perfecto estado! Vuelve cuando necesites arreglarla.</speech>
        </speeches>
        <speeches id="6">
            <speech>Uy, no tienes suficiente F para reparar tu caña.</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="5">
        <speeches id="1">
            <speech>¡Quieto! ¡No te vayas sin mí!</speech>
            <speech>Estás desafiando a la Liga Pokémon, ¿verdad?</speech>
            <speech>Por eso yo también estoy aquí. ¡Veamos quién es más digno de hacer el desafío con una batalla!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡¿Qué acaba de pasar?! ¡¿Mi equipo todavía necesita subir?!</speech>
            <speech>¡Supongo que no estoy preparado para la Liga Pokémon si pierdo contra ti!</speech>
            <speech>¡Maldita sea! ¡Pero ten cuidado! Me haré más fuerte y me abriré camino en la Liga Pokémon.</speech>
            <speech>¡Porque voy a convertirme en el Campeón, en el Entrenador más duro! ¡$PLAYER_NAME!</speech>
            <speech>¡Será mejor que no pierdas ante nadie antes que yo!</speech>
        </speeches>
        <speeches id="3"/>
        <speeches id="4">
            <speech>No pierdas las esperanzas. No eras tan malo. Soy demasiado bueno.</speech>
        </speeches>
        <speeches id="5"/>
    </conversation>
    <npc direction="DOWN" hidden="false" id="1" name="Trainer Yuuki" randomRotation="false" sprite="34" x="11" y="17">
        <speech>He pasado muchas horas entrenando a mis Pokémon para esto. Pero no puedo vencerlos...</speech>
        <speech>Si tan sólo los hubiera entrenado EV.</speech>
    </npc>
    <npc direction="LEFT" hidden="false" id="2" name="Trainer Amy" randomRotation="false" sprite="33" x="38" y="5">
        <speech>Les gané muy fácilmente. ¿Y tú?</speech>
    </npc>
    <npc direction="RIGHT" hidden="false" id="3" name="Trainer Dan" randomRotation="false" sprite="32" x="34" y="5">
        <speech>He intentado 3 veces vencerlos chicos, no puedo hacerlo. ¡¡¡Amy me puedes prestar tus Pokémon POR FAVOR!!!</speech>
    </npc>
    <movingNpc direction="DOWN" id="4" name="Trainer Liam" speed="1" sprite="37" type="npc" x="29" y="22">
        <path>LEFTx4, RIGHTx4</path>
        <onCollisionSpeech gap="4">Oh Yeah!</onCollisionSpeech>
        <speech>He oído que este no es el final de nuestro viaje. Jvaloh es una región aún más grande que Sinnoh. ¡Estoy deseando ir a entrenar allí!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="5" name="Eevee" shouldSleep="" speed="1" sprite="133" type="pokemon" x="38" y="7">
        <path>RIGHTx2, LEFTx2</path>
        <onCollisionSpeech gap="4">EEEEVEEE!</onCollisionSpeech>
        <speech>*Eevee es lvl 100*</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="6" name="Riolu" shouldSleep="" speed="1" sprite="447" type="pokemon" x="32" y="6">
        <path>UPx1,DOWNx1</path>
        <onCollisionSpeech gap="4">Riolu!!</onCollisionSpeech>
        <speech>*Riolu es lvl 37*</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="7" name="Grunt" randomRotation="true" sprite="209" x="10" y="3">
        <speech>Puede que nuestros planes hayan fracasado, pero estoy seguro de que podremos robarles algunos Pokémon a estos entrenadores.</speech>
    </npc>
    <npc direction="RIGHT" hidden="false" id="8" name="James" randomRotation="false" sprite="2" x="35" y="21">
        <speech>Esperemos a que $PLAYER_NAME gane para pedirle un autógrafo.</speech>
    </npc>
    <npc direction="LEFT" hidden="false" id="9" name="Jesse" randomRotation="false" sprite="82" x="39" y="21">
        <speech>No seas tonto James, ¡esperaremos a que $NOMBRE_PLAYER pierda y le robaremos sus Pokémon mientras se siente mal!</speech>
    </npc>
    <movingNpc direction="DOWN" id="10" name="Doduo" shouldSleep="false" speed="1" sprite="84" type="pokemon" x="12" y="19">
        <path>LEFTx2, RIGHTx2</path>
        <onCollisionSpeech gap="4">Doduo</onCollisionSpeech>
        <speech>*Doduo parece entusiasmado*</speech>
    </movingNpc>

    <conversation id="8">
        <speeches id="1">
            <speech>¡$NOMBRE_JUGADOR !</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Felicidades! Has llegado tan lejos...</speech>
            <speech>Pero no me sorprende. Desde el primer día supe que eras especial.</speech>
            <speech>Sólo quería felicitarles y darles las gracias por todo lo que han hecho hasta ahora.</speech>
            <speech>Si me necesitas para algo, recuerda que siempre estoy en Sandgem.</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh y Barry te ha estado esperando afuera.</speech>
            <speech>Parece estar emocionado por algo. Reúnete con él antes de dejar este lugar.</speech>
        </speeches>
    </conversation>

    <conversation id="4" canSkip="false">
        <speeches id="1">
            <speech>¡Hola, $PLAYER_NAME! ¿Tienes el valor para desafiar a Barry, el Entrenador más rápido que hay?</speech>
            <speech>¿Crees que puedes seguir mi ritmo? ¡Veamos lo que tienes!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Vaya, realmente estás en racha! Hasta yo estoy impresionado con tus habilidades.</speech>
            <speech>Pero recuerda, soy Barry y siempre estoy listo para la revancha. ¡Más rápido y fuerte cada vez!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Espera! Necesito tomar un respiro y planear mi próxima estrategia súper rápida.</speech>
            <speech>Incluso los más rápidos necesitamos un descanso. Vamos a competir de nuevo después de $DURATION, ¿vale?</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Vaya, parece que no pudiste seguir mi velocidad esta vez, eh?</speech>
            <speech>No te preocupes, todo campeón comenzó como un desafiante. ¡Entrena duro y vuelve para otra batalla a toda velocidad!</speech>
        </speeches>
        <speeches id="5">
            <speech>¡Espera! Te falta algo. Necesitas a Empoleon, Torterra o Infernape en tu equipo para este desafío.</speech>
            <speech>Consigue uno de ellos y entonces tendremos una verdadera carrera entre manos.</speech>
        </speeches>
    </conversation>
</npcs>