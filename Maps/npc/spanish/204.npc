<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Soy jardinero, pero también se me dan bien las batallas Pokémon.</speech>
        </speeches>
        <speeches id="2">
            <speech>Soy jardinero, así que mi verdadero trabajo es la jardinería.</speech>
        </speeches>
        <speeches id="3">
            <speech>Soy jardinero, así que mi verdadero trabajo es la jardinería.</speech>
        </speeches>
        <speeches id="4">
            <speech>Soy Jardinero, pero quizá intente convertirme en Campeón.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>¡El Bosque Viridiano es nuestro territorio! ¡Mis bichos están listos para picarte, morderte y acabar contigo!</speech>
        </speeches>
        <speeches id="2">
            <speech>Supongo que tengo que entrenarlos antes de que evolucionen.</speech>
        </speeches>
        <speeches id="3">
            <speech>Supongo que tengo que entrenarlos antes de que evolucionen.</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Lo ves? Los bichos pueden ser pequeños, ¡pero se te echan encima!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>¡Oye! ¡Si no eres considerado con tus mayores, te arrancarán de raíz!</speech>
        </speeches>
        <speeches id="2">
            <speech>Los frutos de mi victoria... ya han sido cosechados...</speech>
        </speeches>
        <speeches id="3">
            <speech>Los frutos de mi victoria... ya han sido cosechados...</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Apuesto a que te ha dejado el pelo blanco!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Que me llamen Bella no me entusiasma en absoluto. Me parece un halago barato.</speech>
        </speeches>
        <speeches id="2">
            <speech>Es simplemente espeluznante cuando alguien utiliza los cumplidos para ganarse tu atención. ¡Uf!</speech>
        </speeches>
        <speeches id="3">
            <speech>Es simplemente espeluznante cuando alguien utiliza los cumplidos para ganarse tu atención. ¡Uf!</speech>
        </speeches>
        <speeches id="4">
            <speech>Cierto tipo de gente utiliza la zalamería sin importar tu aspecto. No tiene sentido.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Vine aquí por mi hermano mayor, que siempre se esconde en su habitación.</speech>
        </speeches>
        <speeches id="2">
            <speech>Ojalá mi hermano mayor saliera de su habitación y jugara conmigo...</speech>
        </speeches>
        <speeches id="3">
            <speech>Ojalá mi hermano mayor saliera de su habitación y jugara conmigo...</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Mi hermano mayor, mira fuera por una vez! ¡Gané por ti, así que sal a jugar!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>¡Muy bien! ¡Allá voy! ¡Te mostraré mi poder!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Guau! ¡Eres increíble! ¡Estoy asombrado y sorprendido!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Guau! ¡Eres increíble! ¡Estoy asombrado y sorprendido!</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Estás asombrado? ¿Sorprendido? ¡¿Por el poder de mis Pokémon?!</speech>
        </speeches>
    </conversation>
    <!-- Buzzing Hide & Seek Quest Speeches -->
    <conversation id="7">
        <speeches id="1">
            <speech>¡Oh, no! ¡Estábamos jugando al escondite, pero ahora mi hermano no ha vuelto!</speech>
            <speech>Dijo que iba a esconderse muy profundo en el bosque... y entonces oímos zumbidos.</speech>
            <speech>Zumbido fuerte. ¡Por favor, ayúdenme a encontrarlo!</speech>
            <speech>Salió con otros dos amigos suyos, así que quizá puedan ayudar.</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>Lo vi cerca de un gran árbol hueco. Dijo que era el mejor escondite de todos.</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>Oí zumbidos cerca de esa parte del bosque y volví corriendo... Estaba asustado.</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>Gracias por salvarme... Ese Beedrill no sólo estaba enojado.</speech>
            <speech>Estaba asustado... y era más grande que los otros.</speech>
            <speech>¡Nunca volveré a esconderme tan profundo en el bosque!</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>¡BZZZZZZT! ¡El enjambre Beedrill está agitado y listo para atacar!</speech>
        </speeches>
        <speeches id="2">
            <speech>Los Beedrill han huido de vuelta a su colmena. El bosque vuelve a ser seguro.</speech>
        </speeches>
        <speeches id="3">
            <speech>¡BZZZZZZT! ¡El enjambre Beedrill bloquea tu camino!</speech>
        </speeches>
        <speeches id="4">
            <speech>Los Beedrill han huido de vuelta a su colmena. El bosque vuelve a ser seguro.</speech>
        </speeches>
    </conversation>
    <conversation id="14">
        <speeches id="1">
            <speech>¡Hola a todos! ¡Soy Ash Ketchum de Pueblo Paleta!</speech>
            <speech>Voy camino de convertirme en el mejor entrenador Pokémon, ¡como nadie lo ha sido nunca!</speech>
            <speech>¡Parece que tú también tienes lo que hay que tener para ser una gran entrenadora!</speech>
            <speech>¿Qué tal si tenemos una batalla? Pikachu y yo siempre estamos listos para un desafío.</speech>
            <speech>¡A ver qué podéis hacer tú y tus Pokémon!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Vaya! ¡Fue una batalla increíble!</speech>
            <speech>¡Realmente sabes cómo sacar lo mejor de tus Pokémon!</speech>
            <speech>Oye, tengo algo especial para ti: ¡un Pokémon{COLOR=ORO}de regalo que creo que sería perfecto para tu equipo!</speech>
            <speech>Este pequeño tiene una habilidad realmente única que la mayoría de los entrenadores no han visto nunca.</speech>
            <speech>¡Sé que lo cuidarás muy bien! Cuida bien de tu nuevo compañero, ¿vale?</speech>
            <speech>Quizá volvamos a luchar algún día, ¡yo seré aún más fuerte la próxima vez!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Hola! ¡Qué bueno verte de nuevo!</speech>
            <speech>¿Cómo va tu viaje Pokémon? Seguro que cada día eres más fuerte.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Muy bien! Pikachu y yo hacemos un buen equipo, ¿verdad?</speech>
            <speech>¡Pero has sido muy duro! ¡Sigue entrenando duro con tus Pokémon!</speech>
            <speech>Toma, coge este {COLOR=ORO}pokémon especial{ENDCOLOR} de todos modos, ¡tiene unas habilidades increíbles!</speech>
            <speech>¡Sé que serás un gran entrenador para ello!</speech>
            <speech>¡Volvamos a luchar alguna vez, cuando ambos seamos aún más fuertes!</speech>
        </speeches>
        <speeches id="5">
            <speech>¡Oh, no! Parece que tu fiesta está llena y tus cajas de PC también.</speech>
            <speech>Tendrás que hacer algo de espacio antes de que pueda darte este Pokémon especial.</speech>
            <speech>Vuelve cuando tengas sitio, ¡creo que te gustará mucho este pequeñín!</speech>
        </speeches>
    </conversation>
    <conversation id="15">
        <speeches id="1">
            <speech>¡Oh, vaya! ¡Me encontraste!</speech>
            <speech>¡Pensé que había elegido el escondite perfecto!</speech>
            <speech>¡Eres muy bueno en este juego del escondite!</speech>
            <speech>Pero ahora que me has encontrado, primero tenemos que luchar, ¡esas son las reglas!</speech>
            <speech>Veamos si eres tan bueno luchando como buscando.</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Fue una batalla impresionante!</speech>
            <speech>¡Tú y tus Pokémon trabajáis tan bien juntos!</speech>
            <speech>Vale, tú ganas esta ronda del escondite. ¡Yo saldré ahora!</speech>
            <speech>¡Seguid buscando a los otros dos! ¡Están escondidos en otro lugar del bosque!</speech>
            <speech>Buena suerte para encontrarlos, ¡han elegido sitios aún más difíciles que los míos!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Eh! ¡Gracias por jugar al escondite con nosotros!</speech>
            <speech>¡Ha sido muy divertido! Deberíamos volver a jugar mañana.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Hehe! ¡Voy a permanecer oculto un poco más!</speech>
            <speech>¡Pero estuviste muy cerca de ganar! ¡Inténtalo de nuevo!</speech>
            <speech>Creo en ti, ¡seguro que puedes vencerme si sigues intentándolo!</speech>
        </speeches>
    </conversation>
    <conversation id="16">
        <speeches id="1">
            <speech>¡Vaya! ¡Realmente me encontraste!</speech>
            <speech>¡He estado escondido aquí durante años! A la mayoría de la gente no se le ocurre mirar con atención.</speech>
            <speech>¡Debes tener los ojos muy agudos para verme!</speech>
            <speech>Ya que has encontrado mi escondite, ¡hagamos una batalla Pokémon!</speech>
            <speech>He estado entrenando a mi equipo mientras esperaba. ¡Veamos lo que tienes!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Una batalla increíble! ¡Tus Pokémon son superfuertes!</speech>
            <speech>Creo que ya no puedo permanecer oculto, ¡te lo has ganado!</speech>
            <speech>¡Uno menos! ¡Todavía tienes que encontrar dos amigos más!</speech>
            <speech>Probablemente nos estén observando desde sus escondites.</speech>
            <speech>Sigue buscando: ¡te va muy bien en este juego!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Hola de nuevo! ¿Quieres jugar al escondite mañana?</speech>
            <speech>Quizá la próxima vez encuentre un escondite aún mejor.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Hombre! ¡Pensé que podría permanecer oculto más tiempo!</speech>
            <speech>Pero casi me ganas. Sigue intentándolo.</speech>
            <speech>Sé que puedes ganar si no te rindes.</speech>
        </speeches>
    </conversation>
    <conversation id="17">
        <speeches id="1">
            <speech>¡No puede ser! ¿Cómo me has encontrado?</speech>
            <speech>¡Estaba tan segura de que a nadie se le ocurriría mirar por aquí!</speech>
            <speech>¡Eres como un superdetective o algo así!</speech>
            <speech>Bueno, ya que me encontraste limpiamente, ¡vamos a la batalla!</speech>
            <speech>Mis Pokémon se han puesto inquietos aquí escondidos.</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Vaya! ¡Esa batalla fue increíble!</speech>
            <speech>¡Realmente sabes cómo comandar a tus Pokémon en la batalla!</speech>
            <speech>¡Muy bien, muy bien, me atrapaste! ¡Saldré de mi escondite!</speech>
            <speech>¡Dos menos, queda uno! ¡El último amigo está muy bien escondido!</speech>
            <speech>Tendrás que tener mucho cuidado para encontrar el último.</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Hola! ¿Listo para otra ronda de escondite alguna vez?</speech>
            <speech>La próxima vez buscaré un lugar aún más secreto.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Uf! Por ahora puedo seguir escondiéndome.</speech>
            <speech>¡Pero fue una batalla muy reñida! ¡Te estás volviendo más fuerte!</speech>
            <speech>No te rindas, ¡sé que puedes vencerme!</speech>
        </speeches>
    </conversation>
    <conversation id="18">
        <speeches id="1">
            <speech>¡Ay! ¡Me has encontrado!</speech>
            <speech>Creía que era completamente invisible.</speech>
            <speech>Debe de tener una capacidad de observación asombrosa.</speech>
            <speech>Ya que estamos, ¿qué tal si hacemos una batalla Pokémon?</speech>
            <speech>He estado practicando algunos movimientos nuevos mientras me escondía, ¡prepárate!</speech>
        </speeches>
        <speeches id="2">
            <speech>Ha sido una batalla muy emocionante.</speech>
            <speech>Usted y su equipo lo han dado todo.</speech>
            <speech>¡Bien, tú ganas! ¡Dejaré de esconderme ahora!</speech>
            <speech>¡Estás tan cerca de ganar todo el juego!</speech>
            <speech>Sólo te falta encontrar a un amigo y nos habrás encontrado a todos.</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Gran trabajo en el juego del escondite!</speech>
            <speech>Nos divertimos mucho. ¡Volvamos a jugar pronto!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Sí! ¡Puedo permanecer oculto un poco más!</speech>
            <speech>¡Pero has luchado muy bien! ¡Seguid así!</speech>
            <speech>¡Tengo fe en que me vencerás la próxima vez!</speech>
        </speeches>
    </conversation>
    <conversation id="19">
        <speeches id="1">
            <speech>¡Eek! ¡Me has encontrado!</speech>
            <speech>Estaba tan callado y quieto... ¿cómo me has descubierto?</speech>
            <speech>Eres como un maestro del escondite.</speech>
            <speech>¡Ahora tenemos que luchar ya que encontraste mi escondite!</speech>
            <speech>¡Mis Pokémon están listos para mostrarte lo que tenemos!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Qué batalla tan increíble! ¡Eres tan hábil!</speech>
            <speech>Se nota que tus Pokémon confían en ti.</speech>
            <speech>Vale, ¡me has pillado por los pelos!</speech>
            <speech>¡Ese es otro encontrado! ¡Continúa!</speech>
            <speech>¡Los demás se estarán poniendo nerviosos de que seas tan bueno en esto!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Gracias por jugar con nosotros! ¡Ha sido el mejor escondite de la historia!</speech>
            <speech>La próxima vez tendremos que pensar en sitios aún mejores.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Jajaja! ¡Mi escondite está a salvo por ahora!</speech>
            <speech>¡Pero casi ganas esa batalla! ¡Tan cerca!</speech>
            <speech>Sigue intentándolo: ¡creo que puedes hacerlo!</speech>
        </speeches>
    </conversation>
    <conversation id="20">
        <speeches id="1">
            <speech>¡Dios mío! ¡Realmente me encontraste!</speech>
            <speech>¡Subí a un sitio tan bueno pensando que nadie miraría!</speech>
            <speech>¡Sin duda eres el mejor buscador con el que hemos jugado!</speech>
            <speech>Ya que has trabajado tan duro para encontrarme, ¡tengamos una batalla épica!</speech>
            <speech>Mis Pokémon y yo estábamos esperando un buen desafío.</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Increíble! ¡Esa fue una de las mejores batallas que he tenido!</speech>
            <speech>Realmente has sacado lo mejor de nuestros dos equipos.</speech>
            <speech>¡Muy bien, me atrapaste! ¡Renuncio a mi escondite!</speech>
            <speech>¡Ya casi has terminado el juego!</speech>
            <speech>Sólo queda un amigo por encontrar: ¡buena suerte!</speech>
        </speeches>
        <speeches id="3">
            <speech>Ha sido un juego muy divertido. Gracias por jugar con nosotros.</speech>
            <speech>¿Mañana a la misma hora? Nos encanta el escondite.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Uf! Podré mantener mi escondite en secreto un poco más.</speech>
            <speech>¡Pero vaya, eres muy fuerte! ¡Eso estuvo tan cerca!</speech>
            <speech>No te rindas, ¡puedes vencerme!</speech>
        </speeches>
    </conversation>
    <conversation id="21">
        <speeches id="1">
            <speech>¡Ahhh! ¡Me encontraste en mi escondite súper secreto!</speech>
            <speech>¡Se suponía que este era el mejor escondite!</speech>
            <speech>¡Debes de ser el mejor jugador de escondite de la historia!</speech>
            <speech>Bueno, ya que me encontraste, tenemos que batallar, ¡esa es la regla!</speech>
            <speech>Permítanme mostrarles por qué me eligieron como desafío final.</speech>
        </speeches>
        <speeches id="2">
            <speech>¡WOW! ¡Esa fue la batalla más increíble!</speech>
            <speech>¡Realmente eres un entrenador increíble!</speech>
            <speech>¡Felicidades! Nos has encontrado a todos y has ganado todas las batallas.</speech>
            <speech>¡Eres oficialmente el campeón del escondite!</speech>
            <speech>Hoy nos hemos divertido mucho jugando con vosotros.</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Estuviste increíble en el escondite! ¡Qué gran juego!</speech>
            <speech>La próxima vez tendremos que pensar en lugares aún más desafiantes.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Sí! ¡El escondite definitivo sigue invicto!</speech>
            <speech>¡Pero fue una batalla tan reñida! ¡Eres increíblemente fuerte!</speech>
            <speech>Sé que me atraparás la próxima vez, ¡sigue intentándolo!</speech>
        </speeches>
    </conversation>
    <movingNpc direction="RIGHT" id="2" name="Butterfree" speed="1" sprite="12" type="pokemon" x="68" y="33">
        <path>RIGHTx5,DOWNx1,LEFTx5,UPx1</path>
        <onCollisionSpeech gap="4">Butterfreeeeeee</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="4" name="Jacob" speed="1" sprite="58" type="npc" x="30" y="77">
        <path>RIGHTx5,LEFTx5</path>
        <onCollisionSpeech gap="4"/>
        <speech>Una vez vi a un Kakuna parpadear ..</speech>
        <speech>¡Júralo!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="5" name="Beedrill" speed="1" sprite="15" type="pokemon" x="15" y="61">
        <path>DOWNx4,RIGHTx4,UPx4,LEFTx4</path>
        <onCollisionSpeech gap="4">Beeedrilll!</onCollisionSpeech>
    </movingNpc>
    <npc direction="LEFT" hidden="false" id="6" name="Adam" randomRotation="false" sprite="49" x="23" y="60">
        <speech>En este bosque viven muchos Pokémon de tipo insecto y otros que prefieren la sombra.</speech>
        <speech>Puede que hasta encuentres un Pikachu.</speech>
    </npc>
    <movingNpc direction="DOWN" id="7" name="Pikachu" speed="1" sprite="25" type="pokemon" x="49" y="54">
        <path>DOWNx1,LEFTx4,RIGHTx4,UPx1</path>
        <onCollisionSpeech gap="4">Pikkkaa!</onCollisionSpeech>
    </movingNpc>
    <npc direction="UP" hidden="false" id="8" name="Markus" randomRotation="false" sprite="5" x="54" y="65">
        <speech>Hmmm... Me pregunto si esta estatua tiene algún significado para atraer Pokémon aquí.</speech>
        <speech>Heck de dónde vino en primer lugar.</speech>
    </npc>
    <movingNpc direction="RIGHT" id="9" name="Pinsir" speed="1" sprite="127" type="pokemon" x="56" y="48">
        <path>RIGHTx5,LEFTx5</path>
        <onCollisionSpeech gap="4">Pinnnsiiiir!</onCollisionSpeech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="10" name="Nathan" randomRotation="true" sprite="71" x="54" y="82">
        <speech>Algunos Pokémon se esconden durante el día y sólo salen por la noche.</speech>
        <speech>Qué guay, ¿verdad?</speech>
    </npc>
    <movingNpc direction="DOWN" id="13" name="Wormadam" speed="1" sprite="413" type="pokemon" x="13" y="32">
        <path>DOWNx1,LEFTx3,RIGHTx3,UPx1</path>
        <onCollisionSpeech gap="4">Wormmaaaa!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="DOWN" id="14" name="Ashley" speed="1" sprite="82" type="npc" x="49" y="10">
        <path>DOWNx3,UPx3</path>
        <onCollisionSpeech gap="4"/>
        <speech>Todo lo que quiero es un Shuckle .. ¡Incluso falté a la escuela para esto!</speech>
        <speech>Me voy a meter en problemas pronto..</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="15" name="Shuckle" shouldSleep="" speed="1" sprite="213" type="pokemon" x="74" y="12">
        <path>DOWNx5,UPx5</path>
        <onCollisionSpeech gap="4">Shuuuckle?</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="DOWN" id="16" name="Heracross" speed="1" sprite="214" type="pokemon" x="76" y="77">
        <path>DOWNx1,LEFTx5,RIGHTx5,UPx1</path>
        <onCollisionSpeech gap="4">Herrraaa!</onCollisionSpeech>
    </movingNpc>
    <npc direction="UP" hidden="false" id="17" name="Simon" randomRotation="true" sprite="111" x="72" y="76">
        <speech>Supuestamente, hay secretos escondidos en el Bosque Viridiano..</speech>
        <speech>Me pregunto qué podrían ser.</speech>
    </npc>
    <movingNpc direction="RIGHT" id="18" name="Pikachu" shouldSleep="" speed="1" sprite="25" type="pokemon" x="55" y="95">
        <path>RIGHTx3,LEFTx3</path>
        <onCollisionSpeech gap="4">Pikaaaa!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="DOWN" id="1" name="Eliza" speed="1" sprite="68" type="npc" x="72" y="37">
        <path>DOWNx4,UPx4</path>
        <onCollisionSpeech gap="4"/>
        <speech>Mmm .. Butterfree .. No tome mi Pecha Berry.</speech>
    </movingNpc>
</npcs>