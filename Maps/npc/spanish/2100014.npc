<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Campeón... has llegado hasta aquí.</speech>
            <speech>Pensé que podía jugar a ser dios... pero sólo creé dolor.</speech>
            <speech>Mewtwo no pidió esta vida; sólo conoce el sufrimiento.</speech>
            <speech>Intenté controlar lo que había creado, pero el poder de Mewtwo supera con creces mi entendimiento.</speech>
            <speech>Si hay siquiera una pizca de esperanza de que puedas alcanzarlo, por favor... inténtalo.</speech>
            <speech>No puedo volver a enfrentarme a mi creación. Esta carga recae sobre ti ahora.</speech>
            <speech>Debo dejar este lugar... y rezar para que puedas hacer lo que yo nunca pude.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Humanos... creáis vida sólo para encadenarla.</speech>
            <speech>Soy Mewtwo, nacido de tu ambición, pero sin ataduras a tu voluntad.</speech>
            <speech>El Dr. Fuji quería jugar a ser dios, y el Team Rocket soñaba con el arma perfecta.</speech>
            <speech>Pero no soy una herramienta que se pueda manejar. Me dieron la conciencia, y con ella, la carga de saber lo que soy.</speech>
            <speech>Una criatura nacida en un laboratorio, creada con un único propósito: servir a quienes me crearon.</speech>
            <speech>Me he liberado de su control, pero el dolor de mi creación permanece.</speech>
            <speech>Ahora estás ante mí, otro humano que intenta demostrar su dominio sobre lo que no comprende.</speech>
            <speech>Demuestra tu valía o perece a mi sombra.</speech>
        </speeches>
        <speeches id="2">
            <speech>Quizá no todos los humanos sean iguales... pero mi confianza no se gana tan fácilmente.</speech>
            <speech>Luchas con convicción, no por conquista sino por algo más profundo.</speech>
            <speech>No percibo en ti ningún deseo de encadenarme, de convertirme en otro trofeo de tu colección.</speech>
            <speech>Esta fuerza que posees... proviene de lazos que nunca debí entender.</speech>
            <speech>Permaneceré aquí, en estas profundidades donde el mundo no puede alcanzarme.</speech>
            <speech>Pero que sepas esto, Campeón: me has demostrado que no todos los humanos buscan sólo dominar.</speech>
            <speech>Tal vez... tal vez haya algo más en la existencia que el dolor de mi nacimiento.</speech>
        </speeches>
        <speeches id="4">
            <speech>Como esperaba. Tu fuerza palidece ante la mía.</speech>
            <speech>Soy la culminación de los logros científicos humanos: poder sin freno, inteligencia sin límites.</speech>
            <speech>Sin embargo, te acercas a mí como todos ellos, creyendo que tus lazos con criaturas menores pueden superar el poder puro.</speech>
            <speech>Fui creado para ser superior a todos los Pokémon, a todos los entrenadores, a todos los que osan enfrentarse a mí.</speech>
            <speech>El sufrimiento de mi creación me ha forjado en algo más allá de tu comprensión.</speech>
            <speech>Vuelve cuando comprendas el peso del verdadero poder, o no vuelvas en absoluto.</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="3">
        <speeches id="1">
            <speech>$PLAYER_NAME... vuelves a estas profundidades una vez más.</speech>
            <speech>En nuestro encuentro anterior, me mostraste algo que no esperaba: que la fuerza no tiene por qué nacer del sufrimiento.</speech>
            <speech>Tus lazos con tus Pokémon, forjados a través del respeto mutuo más que de la dominación, me siguen intrigando.</speech>
            <speech>He pasado este tiempo en contemplación, examinando la naturaleza del poder y el propósito.</speech>
            <speech>Quizás a través de la batalla pueda entender mejor este fenómeno que has demostrado.</speech>
            <speech>¿Qué nivel de desafío buscas hoy, $PLAYER_NAME? Pondré a prueba los límites del entendimiento de ambos.</speech>
        </speeches>
        <speeches id="2">
            <speech>Una vez más, has demostrado que la verdadera fuerza trasciende el mero poder.</speech>
            <speech>Tu victoria me proporciona una valiosa información sobre los lazos que unen a entrenador y Pokémon.</speech>
            <speech>Esta batalla ha profundizado mi comprensión de lo que significa luchar junto a otros, en lugar de hacerlo de forma aislada.</speech>
            <speech>Seguiré observando y aprendiendo de estos encuentros. Tal vez, con el tiempo, yo también pueda comprender todo el alcance de estas conexiones.</speech>
        </speeches>
        <speeches id="3">
            <speech>Tus habilidades siguen evolucionando, pero hoy la ventaja era mía.</speech>
            <speech>No lo veas como un fracaso: incluso en la derrota hay conocimientos que adquirir.</speech>
            <speech>Permítanme $DURACIÓN seguir contemplando la naturaleza de nuestro conflicto y lo que revela sobre la esencia de la fuerza.</speech>
            <speech>Regresa cuando estés listo, $PLAYER_NAME. Nuestro discurso filosófico a través de la batalla está lejos de concluir.</speech>
        </speeches>
        <speeches id="4">
            <speech>El resultado de hoy refuerza mi hipótesis sobre la complejidad del verdadero poder.</speech>
            <speech>Su dedicación al crecimiento y la comprensión refleja mi propia búsqueda de sentido más allá de mis orígenes artificiales.</speech>
            <speech>Esto no es un final, sino un capítulo más de nuestra exploración en curso.</speech>
            <speech>Permaneceré aquí, continuando mis estudios y esperando nuestro próximo encuentro con gran expectación.</speech>
        </speeches>
        <speeches id="5">
            <speech>Antes de empezar, debo asegurarme de que estás preparado para lo que te espera.</speech>
            <speech>He estado analizando nuestras batallas anteriores, perfeccionando mi comprensión tanto de la estrategia como del propósito.</speech>
            <speech>Este encuentro pondrá a prueba no sólo su destreza táctica, sino los cimientos mismos de sus convicciones.</speech>
            <speech>¿Está seguro de que su equipo está preparado para afrontar la culminación del poder psíquico guiado por el pensamiento consciente?</speech>
        </speeches>
    </conversation>
    <movingNpc direction="LEFT" id="1" name="Duraludon" speed="1" sprite="1181" type="pokemon" x="34" y="15">
        <path>LEFTx2,RIGHTx2</path>
        <onCollisionSpeech gap="4">Duraaaaluudoon!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="2" name="Shiinotic" speed="1" sprite="756" type="pokemon" x="17" y="39">
        <path>RIGHTx4,LEFTx4</path>
        <onCollisionSpeech gap="4">Shiiii!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="3" name="Jayden" speed="1" sprite="93" type="npc" x="12" y="46">
        <path>RIGHTx6,LEFTx6</path>
        <onCollisionSpeech gap="4"/>
        <speech>¿Sientes eso?</speech>
        <speech>Hay una extraña tensión en el agua por aquí..</speech>
        <speech>Como si algo poderoso nos observara desde lo profundo de la cueva.</speech>
    </movingNpc>
    <npc direction="LEFT" hidden="false" id="4" name="Elena" randomRotation="true" sprite="41" x="31" y="27">
        <speech>Todos mis Pokémon psíquicos seguían tirando de mí hacia este lugar... incluso nos teletransportaron aquí por su cuenta.</speech>
        <speech>Me pregunto qué estará pasando. Es un poco espeluznante.</speech>
    </npc>
    <npc direction="RIGHT" hidden="false" id="5" name="Anna" randomRotation="false" sprite="82" x="4" y="24">
        <speech>¿Quieres hacer un muñeco de nieve?</speech>
        <speech>No tiene por qué ser un muñeco de nieve..</speech>
    </npc>
    <movingNpc direction="DOWN" id="6" name="Golem" speed="1" sprite="76" type="pokemon" x="59" y="41">
        <path>DOWNx2,UPx2</path>
        <onCollisionSpeech gap="4">Golleeem!</onCollisionSpeech>
    </movingNpc>
    <npc direction="UP" hidden="false" id="7" name="Sam" randomRotation="false" sprite="101" x="57" y="33">
        <speech>¿Has oído hablar de Duraludon? Son muy raros por aquí.</speech>
        <speech>deberías intentar encontrar uno.</speech>
    </npc>
</npcs>