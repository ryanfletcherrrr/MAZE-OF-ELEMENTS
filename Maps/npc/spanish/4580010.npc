<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>¡Ajajaja! Qué patético pareces ahora. El tonto, Archie.</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Fuhahaha! Tal y como predije.</speech>
        </speeches>
        <speeches id="3">
            <speech>Incluso yo, el gran Maxie, me he encontrado deseando algo que no puedo justificar.</speech>
            <speech>Y el deseo ilógico que albergaba era tenerte aquí presente en este momento.</speech>
            <speech>Jajaja... Y ahora el deseo de ese tonto se ha hecho realidad. ¡Fantástico!</speech>
            <speech>¡Nada podría complacerme más! Supongo que debería hacer las presentaciones...</speech>
            <speech>Les presento a mi incomparable socio, que ayudará al Equipo Magma a llevar a la humanidad hacia
                ¡a su siguiente nivel!
            </speech>
            <speech>El Pokémon superantiguo...</speech>
            <speech>¡Groudon! ¡Contemplad! ¡Esta gran forma dormita desafiando incluso a la lava hirviente que la rodea!
            </speech>
            <speech>Tanto tiempo he esperado este día...</speech>
            <speech>¡Inconmensurablemente largo!</speech>
            <speech>Este mundo insensato ha frenado el progreso de la humanidad por un idealismo equivocado respecto a la
                la coexistencia de humanos y Pokémon.
            </speech>
            <speech>Pero esta antigua criatura puede llevar eso a su justo fin, creando una nueva tierra sobre la que
                la humanidad pueda avanzar libremente.
            </speech>
            <speech>¡Ahora que por fin he conseguido el poder de Groudon Primigenio!</speech>
            <speech>Y ahora, tú eres el último obstáculo que queda entre mis objetivos y yo.</speech>
            <speech>Me corresponde usar todas las herramientas a mi disposición para eliminarte.</speech>
            <speech>¡Ya lo creo! ¡Incluso Mega Evolución! No te engañes pensando que tú y tus Pokémon sois los únicos
                capaces de ello.
            </speech>
            <speech>Debo disculparme por haberte hecho esperar durante nuestros encuentros en el Monte Chimenea y el Monte Pyre sin
                sin ofrecerte este espectáculo.
            </speech>
            <speech>¡Prepárate para mi ataque definitivo! ¡Fuhahaha!</speech>
        </speeches>
        <speeches id="4">
            <speech>Realmente lo has hecho, niña. ¡Has demostrado un poder que supera al del gran Maxie!</speech>
        </speeches>
        <speeches id="5">
            <speech>Hah... Hah... Hahhh...</speech>
            <speech>... Ah. Aha... Fuhahaha... ¡Kahahahaha!</speech>
            <speech>¡GAHAHAHAHAHAHA!</speech>
            <speech>Espléndido. Simplemente espléndido, mi joven Entrenador.</speech>
            <speech>¡No, es más que eso! ¡Debería llamarte mi joven héroe!</speech>
            <speech>Creyendo hasta el final que un mundo en el que coexistan la humanidad y los Pokémon debe ser el mejor...
            </speech>
            <speech>Rechazando mis ideales sin pensarlo dos veces...</speech>
            <speech>Sí, verte luchar desesperadamente por detener el principio del fin del mundo...</speech>
            <speech>¡Sin duda eres un héroe! Tan noble... Y sin embargo.</speech>
            <speech>¡No cederé! No me doblegaré. ¡Mis ideales no se tambalearán!</speech>
            <speech>Mi sueño de que el mundo dé un paso adelante nunca cambiará.</speech>
            <speech>Usaré el Orbe Rojo para despertar a Groudon, devolverlo a su forma original y acabar con todo lo demás.
                todo lo demás.
            </speech>
        </speeches>
        <speeches id="6">
            <speech>¡¿Buh?! ¡¿Tabitha?!</speech>
            <speech>Humph. ¿Creías que no me había dado cuenta?</speech>
            <speech>¿Que de alguna manera no me di cuenta de que querías mi lugar? Qué triste acontecimiento.</speech>
            <speech>Ser traicionado por mi número dos...</speech>
            <speech>Al final, ¡sólo hay un ser del que puedo depender! ¡Ahora, Groudon!</speech>
            <speech>Absorbe todo el poder que reside en este Orbe Rojo y recupérate.</speech>
            <speech>¡Vuelve a tu forma primitiva! Este es el momento de recuperar la gran Evolución que perdiste en el
                ¡antiguo pasado!
            </speech>
            <speech>¡Recupere la posibilidad que una vez tuvo!</speech>
        </speeches>
        <speeches id="7">
            <speech>¡Gahahahaha! Por fin... ¡POR FIN!</speech>
            <speech>¡¡¡Por fin lo he conseguido!!!</speech>
            <speech>¡¡¡Nacerá un nuevo mundo para la evolución humana!!! ¡¡¡Avanzaremos a grandes zancadas!!!</speech>
        </speeches>
        <speeches id="8">
            <speech>... ¿Hm?</speech>
            <speech>¿Un mensaje de nuestros miembros en el exterior?</speech>
            <speech>¿De qué se trata? Así que el sol se ha vuelto despiadadamente feroz en su calor.</speech>
            <speech>Eso espero. Eso es lo que he No, lo que hemos deseado durante mucho tiempo.</speech>
            <speech>¡¿Qué?! ¿El calor es mayor de lo que predijeron las simulaciones?</speech>
            <speech>¡¿Será un riesgo para nuestra propia seguridad si continúa?!</speech>
            <speech>Eso no puede ser... Acaba de despertar... ¿De dónde está sacando tanta energía?</speech>
            <speech>Y cuánto más ganará cuando se someta a la Reversión Primigenia...</speech>
            <speech>¡Continúen sus lecturas! Después, ¡informe!</speech>
        </speeches>
        <speeches id="9">
            <speech>Lo único que importa es... Que he usado el orbe rojo para despertar a Groudon.</speech>
            <speech>Y ahora... transformaré este planeta en una tierra ideal para la humanidad.</speech>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>Ugh...</speech>
            <speech>¡Ugh! ¡Arghhh... M-Maxie... tú...!</speech>
        </speeches>
        <speeches id="2">
            <speech>Pequeño bribón...</speech>
        </speeches>
        <speeches id="3">
            <speech>Hola, Maxie. Parece que subestimamos el poder de los súper antiguos Pokémon...</speech>
            <speech>El poder de la Reversión Primigenia...</speech>
            <speech>Groudon Primal provoca un "final", sin duda.</speech>
            <speech>Pero no puedes elegir el final.</speech>
            <speech>¡Va a llevar a la muerte a todo ser viviente de este planeta!</speech>
            <speech>Lo único que nos espera es la desesperación. Una desesperación de la que ni siquiera podemos huir.</speech>
            <speech>Una desesperación que va a aplastar a la humanidad.</speech>
            <speech>Maldito tonto...</speech>
            <speech>Y todo está ocurriendo porque fuiste tan engreído como para pensar que podías controlar el poder de los Pokémon superantiguos.</speech>
        </speeches>
    </conversation>

    <conversation id="4">
        <speeches id="1">
            <speech>¡Espera! ¡Maxie!</speech>
            <speech>Deja de hacer eso ahora...</speech>
            <speech>¡Por favor! ¡Maxie! ¡No lo entiendes!</speech>
            <speech>Lo que Groudon provocará al despertar es el fin del mundo.</speech>
        </speeches>
        <speeches id="2">
            <speech>Ohh ... ¿Qué has hecho ... Jefe... Que...</speech>
        </speeches>
        <speeches id="3">
            <speech>¡¿Jefe?! ¡¿Maxie?! ¡¿Qué está pasando en la superficie?!</speech>
        </speeches>
        <speeches id="4">
            <speech>Así que la información que recibimos del Instituto Meteorológico era cierta...</speech>
            <speech>¡Jefe Maxie! ¡Nunca llegaremos a nada quedándonos aquí parados!</speech>
            <speech>¡No hay tiempo que perder! ¡Debemos confirmar la situación en el exterior!</speech>
            <speech>¡Niño! ¡Tú también vienes! ¡Date prisa!</speech>
        </speeches>
    </conversation>
</npcs>