<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>¡Eh, tú!</speech>
            <speech>Mantente alejado del Instituto Meteorológico. No es seguro.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>¡$PLAYER_NAME! Dios, ¿dónde te has estado escondiendo? Te he estado buscando por todas partes.</speech>
            <speech>¡Vaya! ¿Así que eso es una Mega Pulsera? Y puedes usarlo para la Mega Evolución...</speech>
            <speech>¿De dónde has sacado eso que llevas en la muñeca? Es una pulsera muy elegante...</speech>
            <speech>...  Supongo que ahora podrás seguir acercándote aún más a tus Pokémon, ¿eh?</speech>
            <speech>Algunos tipos tienen toda la suerte... ¡Pero no voy a perder contra ti y algún accesorio!</speech>
            <speech>¡Veamos quién es el mejor en la batalla! ¿Están listos tus Pokémon? ¡Claro que lo están! ¡Adelante!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Achah! ¡Eres tan fuerte como esperaba!</speech>
            <speech>Bueno, ¡hasta que nos volvamos a ver! ¡Y la próxima vez no perderé!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Achah! ¡Eres tan fuerte como esperaba!</speech>
            <speech>Bueno, ¡hasta que nos volvamos a ver! ¡Y la próxima vez no perderé!</speech>
        </speeches>
        <speeches id="4">
            <speech>Para ser entrenador hace falta algo más que lucir accesorios elegantes.</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>Estoy dispuesto a proteger la naturaleza por todos los medios.</speech>
        </speeches>
        <speeches id="2">
            <speech>¿Estás escuchando? Recuerda esto... Nunca subestimes el poder de la naturaleza...</speech>
        </speeches>
        <speeches id="3">
            <speech>¿Estás escuchando? Recuerda esto... Nunca subestimes el poder de la naturaleza...</speech>
        </speeches>
        <speeches id="4">
            <speech>Todo tiene su origen en la naturaleza. Todo el mundo debería venerarla.</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>Las únicas personas que pueden llevar furisode son las chicas llamativas y las señoras mayores, ¿verdad?</speech>
        </speeches>
        <speeches id="2">
            <speech>¿No crees que las ancianas están monísimas con furisode?</speech>
        </speeches>
        <speeches id="3">
            <speech>¿No crees que las ancianas están monísimas con furisode?</speech>
        </speeches>
        <speeches id="4">
            <speech>Es mejor que pienses en tu edad a la hora de elegir ropa, ¿verdad?</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>Pokémon obedientes, Pokémon egoístas... Los Pokémon tienen características únicas.</speech>
        </speeches>
        <speeches id="2">
            <speech>A diferencia de mi diabólico yo, estos son unos buenos Pokémon.</speech>
        </speeches>
        <speeches id="3">
            <speech>A diferencia de mi diabólico yo, estos son unos buenos Pokémon.</speech>
        </speeches>
        <speeches id="4">
            <speech>Es importante cuidar y entrenar las características de cada Pokémon.</speech>
        </speeches>
    </conversation>
    <conversation id="12">
        <speeches id="1">
            <speech>El secreto de la fuerza de mis Pokémon es su comida especialmente mezclada.</speech>
        </speeches>
        <speeches id="2">
            <speech>Cómo pudo pasarle eso a mi Pokémon... ¿Qué le das de comer a tu Pokémon?</speech>
        </speeches>
        <speeches id="3">
            <speech>Cómo pudo pasarle eso a mi Pokémon... ¿Qué le das de comer a tu Pokémon?</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Qué te parece? Fuerte, ¿eh? ¡Lo que comes es importante!</speech>
        </speeches>
    </conversation>
    <conversation id="13">
        <speeches id="1">
            <speech>En mi búsqueda del éxito, me sentí solo más allá de lo imaginable...</speech>
        </speeches>
        <speeches id="2">
            <speech>Las personas con capacidades sobrecogedoras a veces agradecen la soledad.</speech>
        </speeches>
        <speeches id="3">
            <speech>Las personas con capacidades sobrecogedoras a veces agradecen la soledad.</speech>
        </speeches>
        <speeches id="4">
            <speech>La soledad del genio... No hay forma de que puedas comprenderlo.</speech>
        </speeches>
    </conversation>
    <conversation id="14">
        <speeches id="1">
            <speech>Necesito una bicicleta con neumáticos acro para atravesar este saliente.</speech>
        </speeches>
    </conversation>
    <conversation id="15">
        <speeches id="1">
            <speech>No te pongas nervioso, déjamelo a mí. Si es técnica de lo que hablamos, estoy seguro.</speech>
        </speeches>
        <speeches id="2">
            <speech>Para que mi Pokémon ni siquiera tenga una oportunidad, ¡debes de ser todo un técnico!</speech>
        </speeches>
        <speeches id="3">
            <speech>Para que mi Pokémon ni siquiera tenga una oportunidad, ¡debes de ser todo un técnico!</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Cómo ha ido? Fue divertido, ¿verdad? ¡Sabía que mi técnica ganaría!</speech>
        </speeches>
    </conversation>

    <conversation id="18">
        <speeches id="1">
            <speech>¡Hola, $PLAYER_NAME! Estoy en un poco de una situación aquí.</speech>
            <speech>Estábamos estudiando el fenómeno Feebas cuando un Sceptile, afectado por unos cambios climáticos extremos, empezó a provocar el caos.</speech>
            <speech>Parece que el experimento del Instituto Meteorológico podría haber salido mal, y ahora, no pueden controlar el clima, lo que influye en el comportamiento de Sceptile.</speech>
            <speech>El instituto y yo hemos desarrollado un condensador de rayos que creemos que puede calmar a Sceptile, pero requiere Escamas Treecko para funcionar.</speech>
            <speech>Estas escamas tienen propiedades únicas que las hacen esenciales para el condensador. ¿Podrías ayudarnos a reunirlas?</speech>
            <speech>Encontrará Treeckos en zonas densas de vegetación. Las escamas son cruciales para nuestro aparato y para la investigación en el instituto.</speech>
            <speech>Cuando tengamos suficientes escamas, podremos construir el condensador y, con un poco de suerte, devolver a Sceptile a su estado normal. Cuento con su ayuda.</speech>
            <speech>Por favor, $PLAYER_NAME, necesitamos esas balanzas para evitar más estragos. Nos ayudarás en este asunto urgente?</speech>
        </speeches>
        <speeches id="2">
            <speech>¿Cómo va la caza de las escamas de treecko, $PLAYER_NAME? Esos pequeñajos pueden ser escurridizos, pero sus escamas son la clave de nuestra solución.</speech>
            <speech>Los científicos del Instituto Meteorológico están al límite y, sin el condensador, estamos paralizados. Todos dependemos de su éxito.</speech>
            <speech>Recuerda, las escamas que recojas nos ayudarán a calmar al alborotador Sceptile y a restablecer el equilibrio del sistema meteorológico de la zona.</speech>
            <speech>Gracias por asumir esta tarea. No todos los días nos enfrentamos a un reto así, pero creo en ti. Sigan trabajando así de bien.</speech>
        </speeches>
    </conversation>

    <conversation id="19">
        <speeches id="1">
            <speech>**El aire vibra con tensión mientras la energía desbordante de Mega Sceptile crepita, reaccionando salvajemente al clima alterado de la zona.**</speech>
            <speech>**Las hojas se arremolinan en una danza frenética, cada movimiento de Mega Sceptile agudo e impredecible.</speech>
            <speech>¿Será suficiente la potencia del condensador?**</speech>
            <speech>**Los rugidos de Mega Sceptile atraviesan la confusión, un desafío a la tormenta y a tu coraje.</speech>
        </speeches>
        <speeches id="2">
            <speech>**Lentamente, la tormenta dentro de Mega Sceptile comienza a calmarse, el condensador de rayos armoniza con su energía natural.</speech>
            <speech>**'La tempestad dentro de mí se calma, Entrenador.</speech>
            <speech>Tus acciones... hablan más alto que cualquier grito de guerra".</speech>
            <speech>la nueva calma parece reconocer.**</speech>
            <speech>**Con una inclinación de cabeza de respeto, Mega Sceptile se retira a las profundidades del bosque,</speech>
            <speech>su energía caótica ahora un mero susurro entre los árboles.**</speech>
        </speeches>
        <speeches id="3">
            <speech>**La inquietud sólo alimenta la inquietud de Mega Sceptile. La victoria favorece a los audaces", parece decir la tormenta que te rodea.</speech>
            <speech>**Vuelve cuando estés listo para resistir el vendaval.</speech>
            <speech>Hasta entonces, caminamos por senderos diferentes", parecen decir las hojas susurrantes.**</speech>
        </speeches>
        <speeches id="4">
            <speech>**La risa de Mega Sceptile casi se pierde en el aullido del viento.</speech>
            <speech>"¿Es la tormenta lo que temes, entrenador?", se burla desde el interior de la tempestad.**</speech>
            <speech>**Encuentra tu equilibrio en medio del caos. Solo entonces, considera enfrentarte a mí una vez más", te aconseja el dosel susurrante mientras reconsideras tu aproximación.**</speech>
        </speeches>
        <speeches id="5">
            <speech>**El aura de Mega Sceptile es palpable, una fuerza salvaje indomable por los recientes experimentos que han salido mal.</speech>
            <speech>**Sus llamadas, mezcla de desafío y reto, resuenan para que surja un retador.</speech>
            <speech>**Sin el condensador de rayos, enfrentarse a Mega Sceptile parece una tarea insuperable.**</speech>
        </speeches>
    </conversation>

    <conversation id="20">
        <speeches id="1">
            <speech>A pesar de nuestros esfuerzos, Mega Sceptile sigue agitado. Nuestro enfoque no ha penetrado completamente su frenesí. Sin embargo, sigo teniendo esperanzas, $PLAYER_NAME.</speech>
            <speech>Puede que tengamos que replantearnos nuestra estrategia o explorar métodos alternativos para apaciguarlo. Abandonar la esperanza no es una opción para nosotros.</speech>
        </speeches>
        <speeches id="2">
            <speech>Un éxito. El efecto del Condensador Rayo ha sido más profundo de lo que esperaba. La furia de Mega Sceptile está disminuyendo.</speech>
            <speech>¡Tu determinación lo ha hecho posible, $PLAYER_NAME!</speech>
            <speech>Este hito no sólo aporta paz a Mega Sceptile, sino que también enriquece nuestra comprensión de las respuestas ambientales de los Pokémon.</speech>
            <speech>Su participación ha sido crucial, y le estoy verdaderamente agradecido.</speech>
            <speech>Tus proezas me han inspirado a reconsiderar mi pausa en la lucha.</speech>
            <speech>¿Me honrarías con tu presencia para una batalla en mi residencia en Fallarbor?</speech>
            <speech>Parece que has reavivado una llama que creía apagada.</speech>
        </speeches>
        <speeches id="3">
            <speech>Decayendo, ¿verdad? No pasa nada. El momento debe ser perfecto, al igual que la precisión en nuestra investigación.</speech>
            <speech>Tu éxito de hoy me lleva a reflexionar sobre mi propio viaje.</speech>
            <speech>Tal vez haya llegado el momento de salir de mi retiro académico y volver a aceptar el reto de la batalla.</speech>
            <speech>Tu ayuda de hoy ha sido transformadora, $PLAYER_NAME.</speech>
            <speech>Ha vuelto a despertar una parte de mí que había dejado de lado. Cuando estés listo, espero poner a prueba mi temple contra el tuyo.</speech>
            <speech>Hasta entonces, me sumergiré en mis estudios, animado por la idea de nuestro futuro encuentro.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Es maravilloso oír eso! Esperaré con impaciencia tu llegada a mi casa de Fallarbor.</speech>
            <speech>Es una oportunidad no sólo de luchar, sino de aprender unos de otros.</speech>
            <speech>Tu ayuda con Mega Sceptile ha sido un faro de esperanza. Espero con impaciencia nuestra batalla y futuras colaboraciones.</speech>
            <speech>¡Nos vemos en Fallarbor, $PLAYER_NAME!</speech>
        </speeches>
        <speeches id="5"/>
    </conversation>

    <movingNpc direction="DOWN" id="1" name="Sharpedo" speed="1" sprite="319" type="pokemon" x="29" y="66">
        <path>LEFTx10,UPx8,RIGHTx10,DOWNx8</path>
        <onCollisionSpeech gap="4"/>
        <speech>¡Sharpedo!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Sharpedo" speed="1" sprite="319" type="pokemon" x="19" y="58">
        <path>RIGHTx10,DOWNx8,LEFTx10,UPx8</path>
        <onCollisionSpeech gap="4"/>
        <speech>¡Sharpedo!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="3" name="Pelipper" speed="1" sprite="279" type="pokemon" x="28" y="110">
        <path>UPx2,RIGHTx6,DOWNx2,LEFTx6</path>
        <onCollisionSpeech gap="4">Pelipper!</onCollisionSpeech>
        <speech>¡Pelipper!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="4" name="Pelipper" speed="1" sprite="279" type="pokemon" x="37" y="98">
        <path>UPx12,RIGHTx4,DOWNx12,LEFTx4</path>
        <onCollisionSpeech gap="4">Pelipper!</onCollisionSpeech>
        <speech>¡Pelipper!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="5" name="Sharpedo" speed="1" sprite="319" type="pokemon" x="39" y="102">
        <path>UPx20,DOWNx20</path>
        <onCollisionSpeech gap="4">Sharpedo!</onCollisionSpeech>
        <speech>¡Sharpedo!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="6" name="Nuzleaf" shouldSleep="" speed="1" sprite="274" type="pokemon" x="41" y="109">
        <path>DOWNx4,UPx4</path>
        <onCollisionSpeech gap="4">Nuzleaf!</onCollisionSpeech>
        <speech>¡Nuzleaf!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="7" name="Seedot" shouldSleep="" speed="1" sprite="273" type="pokemon" x="12" y="100">
        <path>UPx3,DOWNx3</path>
        <onCollisionSpeech gap="4">Seedot!</onCollisionSpeech>
        <speech>¡Seedot!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="8" name="Tentacruel" shouldSleep="" speed="1" sprite="73" type="pokemon" x="27" y="74">
        <path>RIGHTx7,LEFTx7</path>
        <onCollisionSpeech gap="4">Tentacruel!</onCollisionSpeech>
        <speech>¡Tentacruel!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="9" name="Castform" shouldSleep="" speed="1" sprite="351" type="pokemon" x="15" y="49">
        <path>LEFTx3,RIGHTx3</path>
        <onCollisionSpeech gap="4">Castform!</onCollisionSpeech>
        <speech>¡Castform!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="10" name="Lombre" shouldSleep="" speed="1" sprite="271" type="pokemon" x="20" y="72">
        <path>LEFTx3,RIGHTx3</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="11" name="Carvanha" speed="1" sprite="318" type="pokemon" x="21" y="12">
        <path>LEFTx10,UPx4,DOWNx4,RIGHTx10</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="12" name="Carvanha" speed="1" sprite="318" type="pokemon" x="21" y="5">
        <path>LEFTx7,RIGHTx7</path>
        <onCollisionSpeech gap="4">Carvanha!</onCollisionSpeech>
        <speech>¡Carvanha!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="13" name="Lotad" shouldSleep="" speed="1" sprite="270" type="pokemon" x="20" y="30">
        <path>UPx5,DOWNx5</path>
        <onCollisionSpeech gap="4">Lotad!</onCollisionSpeech>
        <speech>¡Lotad!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="14" name="Shiftry" shouldSleep="" speed="1" sprite="275" type="pokemon" x="13" y="33">
        <path>LEFTx6,RIGHTx6</path>
        <onCollisionSpeech gap="4">Shiftry!</onCollisionSpeech>
        <speech>¡Shiftry!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="15" name="Carvanha" speed="1" sprite="318" type="pokemon" x="25" y="35">
        <path>UPx6,DOWNx6</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="16" name="Tropius" shouldSleep="" speed="1" sprite="357" type="pokemon" x="38" y="11">
        <path>DOWNx4,UPx4</path>
        <onCollisionSpeech gap="4">Tropius!</onCollisionSpeech>
        <speech>¡Tropius!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="17" name="Tropius" shouldSleep="" speed="1" sprite="357" type="pokemon" x="38" y="28">
        <path>LEFTx2,DOWNx3,UPx3,RIGHTx2</path>
        <onCollisionSpeech gap="4">Tropius!</onCollisionSpeech>
        <speech>¡Tropius!</speech>
    </movingNpc>
</npcs>