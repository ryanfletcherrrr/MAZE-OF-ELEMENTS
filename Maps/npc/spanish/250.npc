<npcs>
    <conversation id="3">
        <speeches id="1">
            <speech>{¡Hah! No hay entrada, punk. Órdenes del jefe, ¡vuelve cuando estés más fuerte!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>{COLOR=RED}¡Fuera! ¡La ciudad nos pertenece!</speech>
        </speeches>
    </conversation>
    <movingNpc direction="RIGHT" id="1" name="Abra" speed="1" sprite="63" type="pokemon" x="42" y="18">
        <path>RIGHTx1,UPx1,RIGHTx4,DOWNx1,UPx1,LEFTx4,DOWNx1,LEFTx1</path>
        <onCollisionSpeech gap="4">Abraaaa!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Hitmonchan" speed="1" sprite="107" type="pokemon" x="47" y="5">
        <path>DOWNx2,LEFTx3,RIGHTx3,UPx2</path>
        <onCollisionSpeech gap="4">Chhhhaaaan!</onCollisionSpeech>
    </movingNpc>
    <npc direction="RIGHT" hidden="false" id="3" name="Mary" randomRotation="false" sprite="50" x="4" y="21">
        <speech>¿Me encontraste? O tal vez, dejé que me encontraras..</speech>
        <speech>Ya que eres tan listo como para seguirme la pista, te doy un pequeño consejo: intenta usar tipos Oscuros o Fantasma contra Sabrina.</speech>
        <speech>¡Sus Pokémon psíquicos no tendrán ninguna oportunidad!</speech>
    </npc>
    <movingNpc direction="DOWN" id="4" name="Eric" speed="1" sprite="101" type="npc" x="30" y="26">
        <path>DOWNx1,LEFTx4,RIGHTx4,UPx1</path>
        <onCollisionSpeech gap="4"/>
        <speech>La Ciudad del Azafrán suele ser el lugar perfecto para tomarse un descanso y recargar las pilas.</speech>
        <speech>Aquí hay un Club de Fans de Pokémon que tendrás que visitar, ¡es un lugar muy animado!</speech>
        <speech>El gimnasio de Sabrina está a la vuelta de la esquina, y cerca está el Dojo para entrenar.</speech>
        <speech>Por no hablar de Silph Co, de la que la gente está muy orgullosa aquí.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="5" name="Meowth" speed="1" sprite="52" type="pokemon" x="48" y="25">
        <path>DOWNx4,UPx4</path>
        <onCollisionSpeech gap="4">Meooowth!</onCollisionSpeech>
    </movingNpc>
    <npc direction="UP" hidden="false" id="6" name="Madeline" randomRotation="true" sprite="60" x="16" y="11">
        <speech>Dicen que esta estación de tren puede llevarte a otra región.</speech>
        <speech>He estado esperando aquí durante bastante tiempo, con la esperanza de coger ese misterioso tren ..</speech>
    </npc>
    <movingNpc direction="LEFT" id="7" name="Blaire" speed="1" sprite="41" type="npc" x="17" y="48">
        <path>LEFTx5,UPx5,DOWNx5,RIGHTx5</path>
        <onCollisionSpeech gap="4"/>
        <speech>Alakazam es mi Pokémon favorito.</speech>
        <speech>¿Te imaginas si pudiera Mega Evolucionar?</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="8" name="Maya" randomRotation="true" sprite="55" x="21" y="44">
        <speech>¿Conoces el objeto Cinturón de Experto? Hace que tus movimientos superefectivos golpeen más fuerte.</speech>
        <speech>Perfecto para dar a tus Pokémon una ventaja extra en la batalla.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="9" name="Arthur" randomRotation="false" sprite="39" x="40" y="22">
        <speech>Muchos entrenadores pasan por Ciudad Azafrán de camino a otros lugares.</speech>
        <speech>Si estás perdido, recuerda esto...</speech>
        <speech>La puerta norte conduce a Ciudad Cerúlea, la puerta este a Pueblo Lavanda, la puerta sur a Ciudad Bermellón y la puerta oeste a Ciudad Celadón.</speech>
    </npc>
    <movingNpc direction="RIGHT" id="10" name="Meowth" speed="1" sprite="52" type="pokemon" x="10" y="18">
        <path>RIGHTx3,LEFTx3</path>
        <onCollisionSpeech gap="4">Meoowth!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="LEFT" id="11" name="Starmie" speed="1" sprite="121" type="pokemon" x="44" y="48">
        <path>LEFTx3,RIGHTx3</path>
        <onCollisionSpeech gap="4">Staar!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="12" name="Rabbit" speed="1" sprite="5" type="npc" x="12" y="36">
        <path>RIGHTx4,LEFTx4</path>
        <onCollisionSpeech gap="4"/>
        <speech>¡Llego tarde, llego tarde, a una cita muy importante!</speech>
    </movingNpc>
    <conversation id="7">
        <speeches id="1">
            <speech>¡Aloha! Soy Akamu, un investigador psíquico de la región de {COLOR=CYAN}Alola{ENDCOLOR} que estudia la evolución mental.</speech>
            <speech>En Alola, nuestros Raichu son increíbles: ¡son de tipo {COLOR=PURPLE}Eléctrico/Psíquico{ENDCOLOR} que pueden surfear con la cola!</speech>
            <speech>Los campos electromagnéticos únicos de Alola hicieron que Raichu desarrollara poderes psíquicos a lo largo de generaciones.</speech>
            <speech>Sus habilidades psíquicas mejoradas les permiten levitar y surcar los aires con sus colas electrificadas.</speech>
            <speech>Si tienes un {COLOR=VERDE}Kanto Raichu{ENDCOLOR} que hayas capturado tú mismo, ¡me encantaría intercambiarte un {COLOR=CIAN}Alolan Raichu{ENDCOLOR}!</speech>
            <speech>Estoy recogiendo especímenes para estudiar cómo afectan los campos electromagnéticos al desarrollo psíquico de los Pokémon.</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Excelente! Tienes un {COLOR=VERDE}Kanto Raichu{ENDCOLOR} que has atrapado tú mismo.</speech>
            <speech>¿Te gustaría cambiar tu {COLOR=VERDE}Kanto Raichu{ENDCOLOR} por mi {COLOR=CYAN}Alolan Raichu{ENDCOLOR}?</speech>
            <speech>Los Alolan pueden realmente {COLOR=PURPLE}surfear por el aire{ENDCOLOR} ¡usando poderes psíquicos!</speech>
        </speeches>
        <speeches id="3">
            <speech>No hay problema. Los Raichu son unos compañeros muy leales, entiendo la duda.</speech>
            <speech>¡Estaré aquí estudiando los campos electromagnéticos cuando estés listo!</speech>
        </speeches>
        <speeches id="4">
            <speech>{¡Fantástico! ¡Otro espécimen para mi investigación de la evolución psíquica!</speech>
            <speech>Déjame coger tu {COLOR=VERDE}Kanto Raichu{ENDCOLOR} y darte este increíble {COLOR=CIAN}Alolan Raichu{ENDCOLOR}.</speech>
            <speech>Este Raichu de Alola ha desarrollado {COLOR=PURPLE}capacidades psíquicas{ENDCOLOR} gracias al entorno electromagnético único de Alola.</speech>
            <speech>Te sorprenderá verlo surcar los aires con su cola electrificada.</speech>
            <speech>Estoy estudiando cómo los campos electromagnéticos desencadenan la evolución psíquica, así que si encuentras más {COLOR=GREEN}Kanto Raichu{ENDCOLOR}, ¡por favor, tráelos!</speech>
            <speech>¡Cada intercambio ayuda a mi {COLOR=BLUE}investigación psíquica{ENDCOLOR} y te da otro increíble {COLOR=CYAN}Alolan Raichu{ENDCOLOR}!</speech>
        </speeches>
    </conversation>
</npcs>