<npcs>
    <conversation id="3">
        <speeches id="1">
            <speech>¡Te vas a mojar en esta batalla! ¡Mis Pokémon te empaparán!</speech>
        </speeches>
        <speeches id="2">
            <speech>Yo soy el que está seco... Tú me has empapado de derrota.</speech>
        </speeches>
        <speeches id="3">
            <speech>Yo soy el que está seco... Tú me has empapado de derrota.</speech>
        </speeches>
        <speeches id="4">
            <speech>Estás empapado. Es hora de secarse y replantearse la estrategia.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Refunfuñar, refunfuñar...</speech>
        </speeches>
        <speeches id="2">
            <speech>Refunfuñar, refunfuñar... ¿Oh? ¿Era eso?</speech>
        </speeches>
        <speeches id="3">
            <speech>Refunfuñar, refunfuñar... ¿Oh? ¿Era eso?</speech>
        </speeches>
        <speeches id="4">
            <speech>Gruñe, gruñe... ¿Eh? ¿Gané?</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Para desafiarme debes ser una persona temeraria, que no sabe cuál es su lugar.</speech>
        </speeches>
        <speeches id="2">
            <speech>Eres un entrenador inteligente, teniendo en cuenta que no sabes mucho.</speech>
        </speeches>
        <speeches id="3">
            <speech>Eres un entrenador inteligente, teniendo en cuenta que no sabes mucho.</speech>
        </speeches>
        <speeches id="4">
            <speech>Hmmph... ¡Desafiarme debe significar que incluso la ignorancia tiene su límite!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>¡Te vas a quedar hecho polvo cuando acabe esta batalla!</speech>
        </speeches>
        <speeches id="2">
            <speech>Yo soy el que está reseco... Has agotado mis posibilidades de ganar.</speech>
        </speeches>
        <speeches id="3">
            <speech>Yo soy el que está reseco... Has agotado mis posibilidades de ganar.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Estás anegado y te hundes rápido!</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>¡Prepárate! ¡La ira del mar caerá sobre vosotros en esta batalla!</speech>
        </speeches>
        <speeches id="2">
            <speech>No me lo puedo creer.</speech>
        </speeches>
        <speeches id="3">
            <speech>No me lo puedo creer.</speech>
        </speeches>
        <speeches id="4">
            <speech>Jaja, ¡te atrapó mi marea! Será mejor que nades más rápido la próxima vez.</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>Nadarás en la derrota cuando mis Pokémon de agua te arrasen.</speech>
        </speeches>
        <speeches id="2">
            <speech>Yo soy el que está boyante... Has hundido mis esperanzas de ganar.</speech>
        </speeches>
        <speeches id="3">
            <speech>Yo soy el que está boyante... Has hundido mis esperanzas de ganar.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Te estás ahogando en mi ola de victoria!</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>¡Te hundirás como una piedra cuando te enfrentes a mis Pokémon de agua!</speech>
        </speeches>
        <speeches id="2">
            <speech>Yo soy el que ha salido a la superficie... Has flotado hacia la victoria.</speech>
        </speeches>
        <speeches id="3">
            <speech>Yo soy el que ha salido a la superficie... Has flotado hacia la victoria.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Ahora estás en el fondo del océano!</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>¡Lancémonos a la batalla! ¡Mis Pokémon de agua son imbatibles!</speech>
        </speeches>
        <speeches id="2">
            <speech>Necesito un salvavidas</speech>
        </speeches>
        <speeches id="3">
            <speech>Necesito un salvavidas</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Estás sobrepasado! Tal vez deberías quedarte en la piscina para niños.</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>¡Te hundirás como una piedra cuando te enfrentes a mis Pokémon de agua!</speech>
        </speeches>
        <speeches id="2">
            <speech>Yo soy el que ha salido a la superficie... Has flotado hacia la victoria.</speech>
        </speeches>
        <speeches id="3">
            <speech>Yo soy el que ha salido a la superficie... Has flotado hacia la victoria.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Ahora estás en el fondo del océano!</speech>
        </speeches>
    </conversation>
    <conversation id="12">
        <speeches id="1">
            <speech>Siempre he querido ser una Belleza, así que he empezado de cero, centrándome en mi aspecto.</speech>
        </speeches>
        <speeches id="2">
            <speech>Seis meses de inversión en los últimos tratamientos... ¡Mírame ahora! Brillo como nunca.
            </speech>
        </speeches>
        <speeches id="3">
            <speech>Seis meses de inversión en los últimos tratamientos... ¡Mírame ahora! Brillo como nunca.
            </speech>
        </speeches>
        <speeches id="4">
            <speech>Sea cual sea tu sueño, si quieres hacerlo realidad, tienes que hacer lo que haga falta.</speech>
        </speeches>
    </conversation>
    <conversation id="13">
        <speeches id="1">
            <speech>¡Les presentaré movimientos elegantes dignos del título de Niño Rico!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Pensar que alguien podría ser más fuerte que yo! ...¡Tú no eres cualquiera!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Pensar que alguien podría ser más fuerte que yo! ...¡Tú no eres cualquiera!</speech>
        </speeches>
        <speeches id="4">
            <speech>Se dice que la fuerza de un Pokémon depende de su entrenamiento. No es culpa tuya. No se puede
                evitar.
            </speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Seung " speed="1" sprite="93" type="npc" x="27" y="27">
        <path>LEFTx12,DOWNx3,RIGHTx12,UPx3</path>
        <onCollisionSpeech gap="4">Let's goooo!</onCollisionSpeech>
        <speech>¡Hola, entrenador! Nadando en la Ruta 129, ¿verdad? ¡Sigue adelante!</speech>
        <speech>Ever Grande City no está demasiado lejos. Mantén las olas detrás de ti y la determinación en tu corazón, y llegarás a tu destino en poco tiempo. Mucha suerte en tu viaje.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Soo-Jin" speed="1" sprite="22" type="npc" x="42" y="13">
        <path>RIGHTx11,LEFTx11</path>
        <onCollisionSpeech gap="4">Let's gooooo!</onCollisionSpeech>
        <speech>¡Hola Entrenador! ¿No es increíble cómo las aguas por aquí se sienten tan agradables y cálidas?</speech>
        <speech>Es como un acogedor abrazo del propio océano. El escenario perfecto para un refrescante baño o una relajante zambullida.</speech>
        <speech>Disfrute del calor mientras esté aquí, ¡porque es una sensación que no olvidará!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="3" name="Gyarados" speed="1" sprite="130" type="pokemon" x="39" y="37">
        <path>RIGHTx10,UPx3,LEFTx10,DOWNx3</path>
        <onCollisionSpeech gap="4">Gyarados!</onCollisionSpeech>
        <speech>¡Gyarados!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="4" name="Pelipper" speed="1" sprite="279" type="pokemon" x="11" y="48">
        <path>RIGHTx16,LEFTx16</path>
        <onCollisionSpeech gap="4">Pelipper!</onCollisionSpeech>
        <speech>¡Pelipper!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="5" name="Pelipper" speed="1" sprite="279" type="pokemon" x="51" y="51">
        <path>LEFTx14,RIGHTx14</path>
        <onCollisionSpeech gap="4">Pelipper!</onCollisionSpeech>
        <speech>¡Pelipper!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="6" name="Pelipper" speed="1" sprite="279" type="pokemon" x="67" y="34">
        <path>RIGHTx11,UPx1,LEFTx11,DOWNx1</path>
        <onCollisionSpeech gap="4">Pelipper!</onCollisionSpeech>
        <speech>¡Pelipper!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="7" name="Sandslash" shouldSleep="" speed="1" sprite="28" type="pokemon" x="81" y="52">
        <path>LEFTx5,RIGHTx5</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="8" name="Wingull" speed="1" sprite="278" type="pokemon" x="60" y="39">
        <path>DOWNx11,RIGHTx3,UPx11,LEFTx3</path>
        <onCollisionSpeech gap="4">Wingull</onCollisionSpeech>
        <speech>Wingull</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="9" name="krokorok" speed="1" sprite="552" type="pokemon" x="56" y="6">
        <path>UPx2,DOWNx2,LEFTx1,RIGHTx1</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="10" name="Gyarados" speed="1" sprite="130" type="pokemon" x="6" y="10">
        <path>RIGHTx13,LEFTx12</path>
        <onCollisionSpeech gap="4">Gyarados!</onCollisionSpeech>
        <speech>¡Gyarados!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="11" name="Pelipper" speed="1" sprite="279" type="pokemon" x="91" y="23">
        <path>UPx10,DOWNx10</path>
        <onCollisionSpeech gap="4">Pelipper!</onCollisionSpeech>
        <speech>¡Pelipper!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="12" name="Sharpedo" speed="1" sprite="319" type="pokemon" x="100" y="45">
        <path>UPx20,DOWNx20</path>
        <onCollisionSpeech gap="4">Sharpedo!</onCollisionSpeech>
        <speech>¡Sharpedo!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="13" name="Sharpedo" speed="1" sprite="319" type="pokemon" x="97" y="19">
        <path>DOWNx20,UPx20</path>
        <onCollisionSpeech gap="4">Sharpedo!</onCollisionSpeech>
        <speech>¡Sharpedo!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="14" name="Corphish" shouldSleep="" speed="1" sprite="341" type="pokemon" x="78" y="40">
        <path>LEFTx3,RIGHTx3</path>
        <onCollisionSpeech gap="4">Corphish!</onCollisionSpeech>
        <speech>¡Corfish!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="15" name="Crawdaunt" shouldSleep="" speed="1" sprite="342" type="pokemon" x="76" y="15">
        <path>RIGHTx4,LEFTx4</path>
        <onCollisionSpeech gap="4">Crawdaunt!</onCollisionSpeech>
        <speech>¡Crawdaunt!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="16" name="Wailord" speed="1" sprite="321" type="pokemon" x="90" y="3">
        <path>LEFTx8,RIGHTx8</path>
        <onCollisionSpeech gap="4">Wailord!</onCollisionSpeech>
        <speech>¡Wailord!</speech>
    </movingNpc>
</npcs>