<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Por favor, retroceda, esta entrada a la cueva actualmente no es segura y es propensa a desprendimientos.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>¡La adrenalina está bombeando en mi equipo! ¡Yo también! ¡Haré de esta una batalla increíble!</speech>
        </speeches>
        <speeches id="2">
            <speech>Hice lo que vine a hacer, y así es como resultó. No hay nada más que decir.</speech>
        </speeches>
        <speeches id="3">
            <speech>Hice lo que vine a hacer, y así es como resultó. No hay nada más que decir.</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Qué te parece? Somos increíbles, ¿verdad? Fuiste capaz de explotar, ¿verdad?</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>¡Sup! ¡Daré todo lo que tengo! ¡¡Hagámoslo lo mejor posible!!</speech>
        </speeches>
        <speeches id="2">
            <speech>Al final de una batalla, sin aliento... ¿No es genial? ¡Completamente!</speech>
        </speeches>
        <speeches id="3">
            <speech>Al final de una batalla, sin aliento... ¿No es genial? ¡Completamente!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Sup! Buen trabajo. Intenté todo lo que pude, ¡pero sigo bastante decepcionado!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Cuántos miles de años han pasado... Si tan sólo pudiera perder, mi viaje terminaría...</speech>
        </speeches>
        <speeches id="2">
            <speech>Tú... Gracias... Ahora mi viaje puede llegar a su fin...</speech>
        </speeches>
        <speeches id="3">
            <speech>Tú... Gracias... Ahora mi viaje puede llegar a su fin...</speech>
        </speeches>
        <speeches id="4">
            <speech>Gané de nuevo... Mi viaje aún no ha terminado...</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>¡Yo!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Yo!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Yo!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Yo! ¡Yo! ¡Yo!</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>¡Empecemos la batalla! ¡El tiempo apremia!</speech>
        </speeches>
        <speeches id="2">
            <speech>¿Ves? Ya se acabó el tiempo. Fuiste demasiado duro.</speech>
        </speeches>
        <speeches id="3">
            <speech>¿Ves? Ya se acabó el tiempo. Fuiste demasiado duro.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡¿QUÉ?! ¿Ya es la hora? ¡Y no podemos ir a la prórroga!</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>Gracias por venir hasta aquí. Siento no tener mucho que ofrecer, pero ponte
                cómodo.
            </speech>
        </speeches>
        <speeches id="2">
            <speech>Siento no haber podido ser más complaciente. Buen viaje a casa.</speech>
        </speeches>
        <speeches id="3">
            <speech>Siento no haber podido ser más complaciente. Buen viaje a casa.</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Ya te vas? Acababa de hacer un poco de té.</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>¡Hola! Soy Tomar, un chico de escuela normal... que decidió que la clase era demasiado lenta para aprender.</speech>
            <speech>Batallas reales, ¡ahí es donde está!</speech>
            <speech>Dejé la escuela porque creo que puedo aprender más aquí, en la naturaleza, luchando y creciendo con mis Pokémon.
                mis Pokémon.
            </speech>
            <speech>Estoy aquí para probar que puedo hacerlo por mi cuenta. ¿Crees que puedes darme una o dos lecciones en una batalla?
            </speech>
        </speeches>
        <speeches id="2">
            <speech>¡Guau, eso fue impresionante! Realmente sabes lo que haces, ¿verdad?</speech>
            <speech>Acabo de aprender un montón, mucho más de lo que aprendí en la escuela. ¡Así se hace!</speech>
            <speech>Cada batalla me enseña algo nuevo. ¡Gracias por mostrarme que estoy en el camino correcto!</speech>
        </speeches>
        <speeches id="3">
            <speech>Tengo que tomarme un descanso y repensar mis estrategias. ¿Qué tal si nos revancha en $DURATION?</speech>
            <speech>Para entonces, habré mejorado mi juego, seguro. Será mejor que estés listo para un nuevo nivel de
                ¡desafío!
            </speech>
        </speeches>
        <speeches id="4">
            <speech>Sí, sabía que podía aprender mucho de las batallas reales. Esta victoria me da la razón.</speech>
            <speech>Tu estilo de batalla, es inspirador. Tengo mucho que aprender, pero estoy preparado para ello. Gracias por la
                ¡batalla!
            </speech>
            <speech>¿Lo veis? ¿Quién necesita la escuela cuando tienes una experiencia real como ésta?</speech>
        </speeches>
    </conversation>

    <npc direction="LEFT" hidden="false" id="1" name="Benjy" randomRotation="false" sprite="32" x="11" y="55">
        <speech>...</speech>
        <speech>¿Crees que la arena se llama arena porque está entre el mar y la tierra?</speech>
    </npc>
    <movingNpc direction="DOWN" id="3" name="Wingull" speed="1" sprite="278" type="pokemon" x="14" y="74">
        <path>LEFTx7,UPx25,DOWNx25,RIGHTx7</path>
        <onCollisionSpeech gap="4"/>
        <speech>¡¡¡Gaviota!!!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="5" name="Sandslash" shouldSleep="" speed="1" sprite="28" type="pokemon" x="29" y="19">
        <path>DOWNx10,UPx10</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="6" name="Sandshrew" shouldSleep="" speed="1" sprite="27" type="pokemon" x="32" y="25">
        <path>LEFTx5,RIGHTx5</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="7" name="Solrock" shouldSleep="" speed="1" sprite="338" type="pokemon" x="40" y="5">
        <path>DOWNx9,UPx9</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="8" name="Lunatone" shouldSleep="" speed="1" sprite="337" type="pokemon" x="39" y="14">
        <path>RIGHTx8,LEFTx8</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="9" name="Clefairy" speed="1" sprite="35" type="pokemon" x="37" y="19">
        <path>LEFTx3,DOWNx3,RIGHTx3,UPx3</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="10" name="Geodude" shouldSleep="" speed="1" sprite="74" type="pokemon" x="43" y="37">
        <path>UPx5,DOWNx5</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="12" name="Todd" randomRotation="false" sprite="21" x="12" y="34">
        <speech>Mira lo FELIZ que se ve Wailmer.</speech>
        <speech>Qué Pokemon tan mono.</speech>
    </npc>
    <movingNpc direction="DOWN" id="13" name="Wailmer" shouldSleep="" speed="1" sprite="320" type="pokemon" x="14" y="35">
        <path>LEFTx4,RIGHTx4</path>
        <onCollisionSpeech gap="4">WAIIIIIIIIIL</onCollisionSpeech>
        <speech>¡¡Wailmer!!</speech>
    </movingNpc>
    <npc direction="RIGHT" hidden="false" id="14" name="Gregg" randomRotation="true" sprite="10" x="27" y="13">
        <speech>Es increíble avistar numerosos Pokémon en las montañas, pero es descorazonador que no pueda alcanzarlos
            para capturarlos.
        </speech>
    </npc>
    <movingNpc direction="DOWN" id="15" name="Lunatone" shouldSleep="" speed="1" sprite="337" type="pokemon" x="42" y="16">
        <path>DOWNx9,UPx9</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="16" name="Solrock" shouldSleep="" speed="1" sprite="338" type="pokemon" x="44" y="26">
        <path>RIGHTx8,LEFTx8</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="17" name="Graveler" shouldSleep="" speed="1" sprite="75" type="pokemon" x="39" y="28">
        <path>RIGHTx8,LEFTx8</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="18" name="Kendall" randomRotation="true" sprite="5" x="35" y="41">
        <speech>Fácil es el camino hacia la sabiduría para quienes no están cegados por el ego.</speech>
    </npc>
    <movingNpc direction="DOWN" id="19" name="Jigglipuff" shouldSleep="" speed="1" sprite="39" type="pokemon" x="21" y="30">
        <path>UPx8,DOWNx8</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="20" name="Pidove" speed="1" sprite="519" type="pokemon" x="10" y="4">
        <path>LEFTx6,DOWNx3,RIGHTx6,UPx3</path>
        <onCollisionSpeech gap="4">Dododododove</onCollisionSpeech>
        <speech>¡Pidove!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Swablu" shouldSleep="" speed="1" sprite="333" type="pokemon" x="33" y="63">
        <path>LEFTx5,RIGHTx5</path>
        <onCollisionSpeech gap="4">Swa! blu!</onCollisionSpeech>
        <speech>Swablu está molesto contigo por estar en su camino.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="11" name="Tentacool" shouldSleep="" speed="1" sprite="72" type="pokemon" x="13" y="51">
        <path>LEFTx5,RIGHTx5</path>
        <onCollisionSpeech gap="4">cool...</onCollisionSpeech>
        <speech>Tenta, tenta.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="4" name="Pelipper" speed="1" sprite="279" type="pokemon" x="4" y="18">
        <path>DOWNx40,UPx40</path>
        <onCollisionSpeech gap="4">Peliplipliplp</onCollisionSpeech>
        <speech>¡Pelipp! Pelipper.</speech>
    </movingNpc>
</npcs>