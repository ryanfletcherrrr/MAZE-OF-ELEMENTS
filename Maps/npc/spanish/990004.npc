<npc>
    <conversation canSkip="false" id="1">
        <speeches id="1">
            <speech>Nací para ganar, deja este lugar si no quieres ser humillado.</speech>
        </speeches>
        <speeches id="2">
            <speech>Buena batalla pero perdí, que extraño perder por primera vez.</speech>
        </speeches>
        <speeches id="3">
            <speech>Buena batalla pero perdí, que extraño perder por primera vez.</speech>
        </speeches>
        <speeches id="4">
            <speech>Gano como siempre, eres demasiado aburrido para mí.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="2">
        <speeches id="1">
            <speech>No tengo ganas de hacer nada pero no puedo dejarte pasar ugh.</speech>
        </speeches>
        <speeches id="2">
            <speech>Sólo quiero irme a casa, haz lo que quieras, adiós.</speech>
        </speeches>
        <speeches id="3">
            <speech>Sólo quiero irme a casa, haz lo que quieras, adiós.</speech>
        </speeches>
        <speeches id="4">
            <speech>No vuelvas, esto es muy molesto y cansino.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="3">
        <speeches id="1">
            <speech>La vida es un juego entre la serpiente y el ratón. Así que me conseguí un equipo de serpiente y ratón.</speech>
            <speech>Veamos cómo va.</speech>
        </speeches>
        <speeches id="2">
            <speech>A veces gana la serpiente y a veces el ratón. Todo forma parte de la vida.</speech>
        </speeches>
        <speeches id="3">
            <speech>A veces gana la serpiente y a veces el ratón. Todo forma parte de la vida.</speech>
        </speeches>
        <speeches id="4">
            <speech>Qué pérdida de tiempo. Sólo si tu cerebro fuera tan grande como tu boca.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="4">
        <speeches id="1">
            <speech>¡¡La orbe de la vida y la fuerza de Sheer!! Que combinación tan molesta. Ahora dame un momento para molestarte intruso.</speech>
        </speeches>
        <speeches id="2">
            <speech>Necesito entrenar más antes de poder derrotar a alguien como tú.</speech>
        </speeches>
        <speeches id="3">
            <speech>Necesito entrenar más antes de poder derrotar a alguien como tú.</speech>
        </speeches>
        <speeches id="4">
            <speech>Dos errores no hacen un acierto, toma a tus padres como ejemplo.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
</npc>