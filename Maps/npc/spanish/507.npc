<npcs>
    <conversation canSkip="false" id="1">
        <speeches id="1">
            <speech>¡Hola, $PLAYER_NAME!</speech>
            <speech>¿Capturas Pokémon?</speech>
            <speech>...Um...</speech>
            <speech>Creo que te sentirías mucho más seguro si cogieras un poco más.</speech>
            <speech>Ya sabes, como cuando necesitas viajar a lugares lejanos.</speech>
            <speech>¡Ya llevas unos cuantos Pokémon contigo!</speech>
            <speech>A ese ritmo, ¡tu Pokédex debería estar llena en un abrir y cerrar de ojos!</speech>
            <speech>¡Oh, lo sé!</speech>
            <speech>¿No crees que es mejor saber más sobre Pokémon?</speech>
            <speech>¡Claro que sí!</speech>
            <speech>Conozco el lugar. ¡Venga! No seas tímido. Sígueme.</speech>
        </speeches>
        <speeches id="2">
            <speech>Ese hombre... ¿Qué está haciendo? Um...</speech>
        </speeches>
        <speeches id="3">
            <speech>¿Qué? ¿Cómo dice? Sólo estaba conversando...</speech>
        </speeches>
        <speeches id="4">
            <speech>...Trabajar para la Policía Internacional debe ser duro.</speech>
        </speeches>
        <speeches id="5">
            <speech>$PLAYER_NAME, aquí está. Es la Escuela de Entrenadores.</speech>
            <speech>El nombre lo dice todo.</speech>
        </speeches>
        <speeches id="6">
            <speech>Vi a tu amigo Barry entrar antes. Todavía podría estar allí estudiando.</speech>
            <speech>OK, ¡adiós!</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="2">
        <speeches id="1">
            <speech>¡¿QUÉ?! ...</speech>
            <speech>¿Cómo lo has sabido? ¡¿Cómo me desenmascaraste como miembro de la Policía Internacional?!</speech>
        </speeches>
        <speeches id="2">
            <speech>...Je. Usted afirma que sólo estaba haciendo conversación, ¿verdad?</speech>
            <speech>Pero, sé que es mejor no creer eso. No, no, no. Reconociste enseguida que yo era alguien extraordinario.</speech>
            <speech>Por eso me hablaste, ¿no?</speech>
            <speech>¡Tu poder de observación es temible!</speech>
            <speech>Eres admirable. Ahora que mi tapadera ha sido descubierta, déjame presentarme.</speech>
            <speech>Soy un trotamundos de élite de la Policía Internacional.</speech>
            <speech>Mi nombre... Ah, no. Le informaré sólo de mi nombre en clave.</speech>
            <speech>Mi nombre en clave, es Looker. Es como todos me llaman.</speech>
            <speech>En Sinnoh, hay criminales que roban los Pokémon de otros.</speech>
            <speech>Por lo tanto, he estado atento a los personajes que despertaban mis sospechas.</speech>
            <speech>Además, tengo una petición. Si volvieras a verme, te pido que no me hables, pues estoy de servicio.</speech>
            <speech>...En realidad, sí, sí, puedes hablar conmigo. Debe hacerlo. ¡No porque me sienta solo, no, no!</speech>
            <speech>¡Debes informarme de los malos! ¡Debes informarme de cualquier suceso!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Debería hablar con Dawn antes de revisar la ciudad.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>¿Te haces llamar Entrenador Pokémon? ¿Y aún así no tienes caña de pescar?</speech>
            <speech>¡Dios mío, eres un caso muy raro! ¡Ay, esto simplemente no servirá!</speech>
            <speech>¡No se puede emprender un viaje sin conocer la alegría de pescar!</speech>
            <speech>Por suerte para ti, aquí es donde entro yo, el experto en pesca.</speech>
            <speech>Todo lo que tienes que hacer es encontrar tres payasos en Ciudad Jubilife.</speech>
            <speech>Si puedes encontrarlos... ¡te regalaré una caña de pescar especial!</speech>
            <speech>Cada uno de los tres payasos te hará una pregunta para poner a prueba tus habilidades.</speech>
            <speech>Todas las preguntas tendrán que ver con Pokémon. Al fin y al cabo, una caña de pescar es esencial para cualquier entrenador Pokémon que se precie.</speech>
            <speech>Recoge un cupón de cada payaso, y luego ven a verme, ¿de acuerdo?</speech>
        </speeches>
        <speeches id="2">
            <speech>Bien, ¡déjame contar tus cupones! Usaré mi elegante Pokétch aquí...</speech>
            <speech>¡Uno, dos, tres! ¡Bravo, bravo! ¡Bravo!</speech>
            <speech>A cambio de estos cupones, te regalo esta nueva caña de pescar de alta tecnología.</speech>
            <speech>¿Lo quieres?</speech>
        </speeches>
        <speeches id="3">
            <speech>Es usted un caso excepcional.</speech>
        </speeches>
        <speeches id="4">
            <speech>Si tienes alguna pregunta al respecto, puedes visitar la Torre Pokétch.</speech>
            <speech>Nuestro Presidente suele hacer campañas de promoción, pero hoy estaba ocupado, así que he venido yo en su lugar. Qué suerte.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="2">
            <speech>Hola, soy un payaso de la campaña Pokètch. ¡Vamos a lanzar mi pregunta!</speech>
            <speech>¿Crece un Pokèmon derrotando a otros y ganando Exp. puntos?</speech>
        </speeches>
        <speeches id="3">
            <speech>Esa no es la respuesta correcta. Intentémoslo de nuevo.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Ding-ding!</speech>
            <speech>Tienes toda la razón.</speech>
        </speeches>
        <speeches id="5">
            <speech>Ya está aquí. ¡Tu cupón Pokètch!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="2">
            <speech>Hola, soy un payaso de la campaña Pokètch. ¡Vamos a lanzar mi pregunta!</speech>
            <speech>¿Puede un Pokèmon guardar objetos?</speech>
        </speeches>
        <speeches id="3">
            <speech>Esa no es la respuesta correcta. Intentémoslo de nuevo.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Ding-ding!</speech>
            <speech>Tienes toda la razón.</speech>
        </speeches>
        <speeches id="5">
            <speech>Ya está aquí. ¡Tu cupón Pokètch!</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1"/>
        <speeches id="2">
            <speech>Hola, soy un payaso de la campaña Pokètch. ¡Vamos a lanzar mi pregunta!</speech>
            <speech>Al igual que los tipos de Pokèmon, ¿los movimientos de los Pokèmon también tienen tipos?</speech>
        </speeches>
        <speeches id="3">
            <speech>Esa no es la respuesta correcta. Intentémoslo de nuevo.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Ding-ding!</speech>
            <speech>Tienes toda la razón.</speech>
        </speeches>
        <speeches id="5">
            <speech>Ya está aquí. ¡Tu cupón Pokètch!</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>Debería recoger la Caña de Pescar antes de que cierren su Campaña.</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>Debería visitar la Escuela de Entrenadores antes de dejar esta ciudad.</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>No parece haber nadie sospechoso en esta Ciudad Jubilosa.</speech>
            <speech>Por lo tanto, llevaré mi investigación a otra parte. Pero, amigo mío, te sugiero que permanezcas atento a los adultos sospechosos.</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="11">
        <speeches id="1">
            <speech>Ah, $PLAYER_NAME. ¿Y bien? ¿Cómo va la Pokédex?</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Hm! Veo que es la Insignia de Gimnasio de Oreburgh. ¿Pero no te había dado tu primer Pokémon hace poco...?</speech>
            <speech>Tal vez ser Formador sea como una segunda naturaleza para ti.</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Silencio! ¿Por qué tenéis que molestar tanto? Permítanme enumerar algunas lecciones que todavía tienen que aprender.</speech>
            <speech>#1: No merodees sin motivo.</speech>
            <speech>#2: No interrumpas a los demás mientras intentan conversar.</speech>
            <speech>#3: Si no te sales con la tuya, no levantes la voz para intimidar.</speech>
            <speech>#4: No creas que te has hecho fuerte sólo por estar en un grupo.</speech>
            <speech>#5: ¿Qué pasa con esos trajes extravagantes que llevas? Dios mío... ¿Os hacéis llamar adultos?</speech>
            <speech>Niños, no crezcáis para ser como estos lamentables especímenes.</speech>
        </speeches>
        <speeches id="4">
            <speech>$PLAYER_NAME, dale a estos matones una lección de civismo, por favor.</speech>
        </speeches>
        <speeches id="5">
            <speech>Ese lote... Se llamaban a sí mismos Equipo Galáctico.</speech>
            <speech>Cuando los Pokémon evolucionan, parecen liberar algún tipo de energía...</speech>
            <speech>Sin embargo, creo que es un poder místico que escapa a nuestro control.</speech>
            <speech>Pero el Equipo Galáctico parece estar estudiando el potencial de ese poder.</speech>
            <speech>Quieren saber si puede usarse como energía para algo...</speech>
        </speeches>
        <speeches id="6">
            <speech>Todo ha terminado, así que ya puedes relajarte. Aún así, gracias a ustedes dos, nada salió de esa situación.</speech>
            <speech>Se lo agradezco. Por cierto, $PLAYER_NAME.</speech>
            <speech>Enhorabuena por tu habilidad en la batalla. Me hizo pensar.</speech>
            <speech>¿Por qué no coleccionas todas las Insignias de Gimnasio de Sinnoh?</speech>
            <speech>De este modo, te encontrarás con un montón de Pokémon.</speech>
            <speech>Eso, por supuesto, significa que las páginas de tu Pokédex se llenarán continuamente.</speech>
            <speech>En otras palabras, será de gran ayuda para mi investigación.</speech>
            <speech>Dicho esto, te he dado tu primer Pokémon y tu Pokédex para que te los quedes.</speech>
            <speech>Eres libre de hacer con ellos lo que quieras. Cuídate.</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="12">
        <speeches id="1">
            <speech>¡Ahora, ahora, ahora, ahora! Profesor Rowan, debe obedecer.</speech>
            <speech>Entrega todos los resultados de tu investigación. Gratis, naturalmente.</speech>
            <speech>Si no lo hace, su asistente pasará un mal rato.</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh, tío profesor de Pokémon, tienes que ser tan difícil.</speech>
            <speech>Nos dirigimos a usted por negocios. Porque esto es trabajo para nosotros.</speech>
            <speech>Lo que decimos es... exigimos que cumplan nuestras demandas.</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Eeeeeeh! ¡Tenías que hacerlo personal!</speech>
            <speech>¡Nos has obligado a hacer una demostración de fuerza!</speech>
            <speech>¡Haremos que te arrepientas de insultar al Equipo Galáctico!</speech>
        </speeches>
        <speeches id="4">
            <speech>No nos dejas opción. Nos retiraremos por ahora.</speech>
            <speech>Lo haremos porque el Equipo Galáctico es benévolo con todos.</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="13">
        <speeches id="1">
            <speech>$PLAYER_NAME, ¿lo sabías? El profesor también estudia la evolución de los Pokémon.</speech>
            <speech>Según sus investigaciones, el 90% de los Pokémon están relacionados con la evolución.</speech>
            <speech>Quizá por eso esas personas intentaron llevarse por la fuerza los datos de la investigación del profesor.</speech>
            <speech>¡Eso es realmente imperdonable!</speech>
        </speeches>
    </conversation>
    <npc direction="UP" hidden="false" id="1" name="Tony" sprite="72" x="65" y="46">
        <speech>¡Estoy intercambiando Pokémon con mi amigo!</speech>
    </npc>
    <npc direction="UP" hidden="false" id="2" name="Tim" sprite="37" x="67" y="46">
        <speech>He hecho que mis Pokémon retuvieran un objeto antes de intercambiarlo.</speech>
        <speech>Eso hará doblemente feliz al otro entrenador.</speech>
    </npc>
    <movingNpc direction="DOWN" id="3" name="Jordan" shouldSleep="1" speed="1" sprite="37" x="63" y="33">
        <path>UPx3, DOWNx3</path>
        <onCollisionSpeech gap="4">Please give me space.</onCollisionSpeech>
        <speech>Bien, tengo seis pokebolas en mi cinturón...</speech>
        <speech>Sí, con eso basta. Como mucho, puedes tener seis Pokémon contigo.</speech>
        <speech>Asegúrate de tenerlos en el orden deseado.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="4" name="Oldman Harold" shouldSleep="1" speed="1" sprite="48" x="49" y="30">
        <path>UPx2, RIGHTx3, DOWNx2, LEFTx3</path>
        <onCollisionSpeech gap="4">I'm walking here!</onCollisionSpeech>
        <speech>¡Hola! Déjame preguntarte, ¿has visitado la estación de TV?</speech>
        <speech>Si nunca ha estado, se lo debe a sí mismo.</speech>
        <speech>Y, si ya ha estado antes, nunca está de más volver a visitarla.</speech>
        <speech>Al fin y al cabo, ¡tú puedes ser una estrella! O al menos soñar con serlo.</speech>
    </movingNpc>
    <movingNpc direction="LEFT" id="5" name="Ashley" shouldSleep="1" speed="1" sprite="33" x="61" y="20">
        <path>LEFTx3, UPx3, RIGHTx3, DOWNx3</path>
        <onCollisionSpeech gap="4">Uhh..What happened? Don't tell me you are lost.</onCollisionSpeech>
        <speech>Hola, ¿de dónde vienes?</speech>
        <speech>...</speech>
        <speech>Twinleaf Town, eh ... Es un lugar agradable. Tranquilo y todo eso.</speech>
        <speech>Jubilife City es un lugar grande, por lo que puede resultarle un poco chocante.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="6" name="Emma" shouldSleep="1" speed="1" sprite="12" x="44" y="17">
        <path>LEFTx4, UPx2, RIGHTx4, DOWNx2</path>
        <onCollisionSpeech gap="4">Go watch the TV!</onCollisionSpeech>
        <speech>¿Me has visto en la tele? ¡Estaba en una entrevista!</speech>
    </movingNpc>
    <movingNpc direction="UP" id="7" name="Ava" shouldSleep="1" speed="1" sprite="6" x="23" y="21">
        <path>LEFTx3, RIGHTx3</path>
        <onCollisionSpeech gap="4">Please give me space!</onCollisionSpeech>
        <speech>Cuando caminas con tus Pokémon, poco a poco se vuelven más amigables.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="32" name="Trevor" shouldSleep="1" speed="1" sprite="25" x="33" y="41">
        <path>LEFTx6, DOWNx3, RIGHTx6, UPx3</path>
        <onCollisionSpeech gap="4">Can I help you?</onCollisionSpeech>
        <speech>Los comerciantes locales visitan a menudo la Terminal Global en busca de un intercambio.</speech>
        <speech>Hay un científico dentro que está buscando un Heracross...</speech>
        <speech>¿Quizás dé algo bueno a cambio?</speech>
    </movingNpc>
    <npc direction="UP" hidden="false" id="9" name="Robert" sprite="5" x="50" y="22">
        <speech>¿Sabéis qué? La naturaleza es el mundo que nos rodea. Nosotros, como seres humanos, dependemos de la naturaleza de muchas maneras diferentes.</speech>
        <speech>Al menos hay un pequeño parque en la ciudad...</speech>
    </npc>
    <npc direction="LEFT" hidden="false" id="10" name="Cop Lucas" sprite="126" x="27" y="53">
        <speech>Hola Entrenador, estoy vigilando esas bicicletas, ¡No intentes robar una!</speech>
        <speech>Te estoy observando...</speech>
    </npc>
    <npc direction="RIGHT" hidden="false" id="11" name="Thief" sprite="35" x="13" y="49">
        <speech>¿Puedes ver si hay policías cerca de esas bicicletas por mí?</speech>
        <speech>...</speech>
        <speech>Uhh, por qué sigue ahí...</speech>
        <speech>No puedo hacer mi golpe de suerte si él no se va...</speech>
    </npc>
</npcs>