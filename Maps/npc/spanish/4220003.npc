<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Umm... Si esto va aquí, y eso va allí...</speech>
            <speech>Entonces, ¿dónde va esta cosa? ¿Y qué pasa con ese chisme?</speech>
            <speech>¡Aaargh! No entiendo nada de esto.</speech>
            <speech>¿Hmm? Tú...</speech>
            <speech>Lo siento. Soy Dock. El capitán Stern me encargó los diseños de un transbordador.</speech>
            <speech>¡Oh! Esas partes que tienes... ¡Esas son las partes Devon!</speech>
            <speech>Pero... hmm... Esto no servirá... Supongo que el Capitán Stern estará de nuevo en el Museo Oceánico...</speech>
            <speech>Perdona, pero ¿podría pedirte que busques al capitán y le des las piezas?</speech>
        </speeches>
        <speeches id="2">
            <speech>Supongo que el Capitán Stern estará de nuevo en el Museo Oceánico...</speech>
            <speech>¡Lo siento, pero encuentra al capitán y entrégale las piezas directamente!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Esos matones...</speech>
            <speech>Son los mismos que intentaron llevarse el Devon Parts del museo...</speech>
        </speeches>
        <speeches id="2">
            <speech>¿Modding? Esos criminales... ¿Qué planean hacer con mi Submarino Explorador 1?</speech>
            <speech>¡No puede ser! No pueden ir tras el Pokémon superantiguo que dormita en el fondo del mar...</speech>
            <speech>... Lo siento, pero... Mi submarino robado... Podría traer un desastre inimaginable sobre el mundo...</speech>
        </speeches>
        <speeches id="3">
            <speech/>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Hmph... Así que te has molestado en perseguirme, Maxie, todo el camino hasta aquí desde el Monte Pyre...</speech>
            <speech>Hohoho. Te has ganado mi respeto por la persistencia que has demostrado.</speech>
            <speech>Sin embargo... Nadie puede detenernos ahora.</speech>
            <speech>Lo único que nos queda es reequipar este submarino y abrirnos paso hasta la Caverna del Fondo Marino, donde duerme el gran Pokémon...</speech>
            <speech>Nuestros planes para impulsar a la humanidad a sus cotas más altas han entrado en su fase final.</speech>
            <speech>Si desea prolongar su lucha inútil, no le negaré su derecho a intentarlo.</speech>
            <speech>Nuestro escondite se encuentra en la ciudad de Lilycove. Síguenos hasta nuestra puerta si crees que la justicia lo exige.</speech>
            <speech>Y ahora debo irme. ¡Tabitha! Vámonos.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Estamos de acuerdo, Líder Maxie... ¡Ustedes Gruñidos, aquí!</speech>
            <speech>Hasta que nuestro Líder y yo, su Admin, hayamos escapado en el submarino, ¡quédese aquí y consíganos algo de tiempo!</speech>
            <speech>Por aquí, Líder Maxie... Debemos darnos prisa.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Esto no es sólo para ganar tiempo. ¡Te aplastaré!</speech>
        </speeches>
        <speeches id="2">
            <speech>Pero, pero... Soy un gruñón del equipo Magma Ace.</speech>
            <speech>¿Cómo he podido perder?</speech>
            <speech>De todos modos, misión cumplida, ¡voy a dirigirme al escondite y unirme al proyecto de modificación del submarino!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>$PLAYER_NAME, por favor... ¿Puedo pedirle ayuda?</speech>
            <speech>Al menos puedo llevarte hasta Lilycove, donde está su escondite...</speech>
            <speech>¿Crees que tú y tus Pokémon podríais detenerlos y salvar a mi submarino de ser utilizado para el mal?</speech>
            <speech>¡Por favor!</speech>
        </speeches>
        <speeches id="2">
            <speech>O-oh... Dime si cambias de opinión. No hay nadie más a quien pueda preguntar...</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Muchas gracias! ¡Lanzaremos enseguida!</speech>
        </speeches>
    </conversation>
    <npc direction="DOWN" hidden="false" id="1" name="Alfred" randomRotation="true" sprite="5" x="3" y="13">
        <speech>Viajar por el mundo siempre ha sido mi sueño.</speech>
        <speech>Si pudiera hablar con alguien de mis aventuras...</speech>
        <speech>Oh hola, ¿estás aquí para escuchar mis cuentos épicos?</speech>
        <speech>Eso tendrá que esperar, ya que aún no he hecho ningún viaje...</speech>
    </npc>
    <movingNpc direction="DOWN" id="2" name="Gurdurr" shouldSleep="" speed="1" sprite="533" type="pokemon" x="20" y="25">
        <path>RIGHTx5,LEFTx5</path>
        <onCollisionSpeech gap="4">Gurdurr!</onCollisionSpeech>
        <speech>¡Gurdurr!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="3" name="Machop" shouldSleep="" speed="1" sprite="66" type="pokemon" x="32" y="12">
        <path>LEFTx6,RIGHTx6</path>
        <onCollisionSpeech gap="4">Machop!</onCollisionSpeech>
        <speech>¡Machop!</speech>
    </movingNpc>
</npcs>