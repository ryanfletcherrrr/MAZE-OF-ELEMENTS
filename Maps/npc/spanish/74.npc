<npcs>
    <npc direction="DOWN" id="1000" name="Lady Beatrice" randomRotation="true" sprite="73" x="44" y="36">
        <speech>¡Hola, joven entrenador! ¿Qué tal estás?</speech>
        <speech>Genial, ¡déjame hacerme un selfie contigo!</speech>
        <speech>¡Me encanta!</speech>
    </npc>
    <npc direction="DOWN" id="1001" name="Tom" randomRotation="true" sprite="80" x="18" y="26">
        <speech>Ewwww, me está costando una eternidad pasar.</speech>
        <speech>Casi lo logro, pero, ¡ewwwww!</speech>
    </npc>
    <npc direction="UP" id="1002" name="Trainer Dane" randomRotation="true" sprite="102" x="4" y="2">
        <speech>Whatsupppp muchacho, ¡veamos qué Pokémon viven en esta zona!</speech>
        <speech>¡Voy a atraparlos a todos!</speech>
    </npc>
    <conversation id="1">
        <speeches id="1">
            <speech>Es un día maravilloso para ir de picnic, pero un verdadero picnicker sabe que todos los días son buenos para
                ¡picnic!
            </speech>
        </speeches>
        <speeches id="2">
            <speech>Bueno, hemos perdido la batalla, ¡pero disfrutaremos del picnic!</speech>
        </speeches>
        <speeches id="3">
            <speech>Hum hum hum, tararear tu canción favorita y disfrutar de un picnic con tus amigos más queridos es
                ¡maravilloso!
            </speech>
        </speeches>
        <speeches id="4">
            <speech>Estaré aquí fuera disfrutando del picnic con mis Pokemon, ¡vuelve a pasar!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Un verdadero as del entrenamiento supera todos los obstáculos, ¡vamos a ver lo que tienes!</speech>
        </speeches>
        <speeches id="2">
            <speech>He oído hablar de ti por los otros entrenadores, pero no esperaba que fueras tan fuerte.</speech>
        </speeches>
        <speeches id="3">
            <speech>Tengo que trabajar mucho más para vencerte en nuestra revancha.</speech>
        </speeches>
        <speeches id="4">
            <speech>Me lo has hecho pasar muy mal, pero al final no has sido gran cosa.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Voy por la región exorcizando fantasmas malignos siempre que me llaman, últimamente un grupo llamado
                "Hexers" está causando problemas también.
            </speech>
        </speeches>
        <speeches id="2">
            <speech>Te has hecho muy amigo de tus Pokemon, puedo sentirlo en la batalla que acabamos de tener,
                tu futuro te depara grandes sorpresas.
            </speech>
        </speeches>
        <speeches id="3">
            <speech>¡Mejor me apresuro y voy a mi próxima cita de exorcismo!</speech>
        </speeches>
        <speeches id="4">
            <speech>Ya había previsto tu derrota aquí, debes hacerte más fuerte, ve a entrenar, tu futuro será muy
                agitado y ocupado.
            </speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Hmm, hola, ¿podría decirme el camino a Glassmoor, tengo una cita para llegar allí, pero entonces
                de nuevo que puede esperar, te ves muy fuerte, vamos a probar.
            </speech>
        </speeches>
        <speeches id="2">
            <speech>Oh eres fuerte de verdad, mis ojos no me engañaron, no me importaría ir a una cita contigo
                tampoco, ¡pero tengo que darme prisa ahora! *Winks*
            </speech>
        </speeches>
        <speeches id="3">
            <speech>Gracias por decirme la dirección, ¡llámame si quieres quedar algún día! *Wink*
            </speech>
        </speeches>
        <speeches id="4">
            <speech>Supongo que me equivoqué, mejor me doy prisa o llegaré tarde a mi cita.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>¡Gah, adónde se fue!</speech>
            <speech>Hola, ¿has visto a una chica de picnic por aquí? Se suponía que íbamos a venir aquí
                juntos, ¡pero se emocionó demasiado y salió corriendo!
            </speech>
        </speeches>
        <speeches id="2">
            <speech>Vaya, eres increíble, pero no puedo seguir charlando aquí, ¡será mejor que vaya a buscarla!</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh, ¿así que está en el camino? Gracias.</speech>
        </speeches>
        <speeches id="4">
            <speech>Maldita sea, ¿me he subestimado? Ha sido muy fácil.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Hola, ¿has visto quizás un Pokémon volador por aquí? Oh, lo siento, mi nombre es Fern, a menudo
                traigo aquí a los Pokémon pájaro que cuido para que desplieguen un poco sus alas.
            </speech>
            <speech>De todas formas, si te lo encuentras ten cuidado porque es bastante fuerte, a ver si eres capaz de
                enfrentarte a él.
            </speech>
        </speeches>
        <speeches id="2">
            <speech>Hohoho, eres bastante fuerte, no tienes nada que temer, ¡diviértete en tu viaje!</speech>
        </speeches>
        <speeches id="3">
            <speech>¿Dónde ha ido ese pequeño granuja? ¡Le regañaré cuando vuelva!</speech>
        </speeches>
        <speeches id="4">
            <speech>Oh, será mejor que tengas cuidado porque si no pudiste vencerme, podrías estar en serios problemas contra ese
                ¡pequeño alborotador!
            </speech>
        </speeches>
    </conversation>
</npcs>