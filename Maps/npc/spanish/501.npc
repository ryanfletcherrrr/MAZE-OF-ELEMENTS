<npcs>
    <conversation canSkip="false" id="1">
        <speeches id="1">
            <speech>¡Demasiado lento! ¡Muy bien! Vamos al laboratorio del Prof. Rowan.</speech>
        </speeches>
        <speeches id="2">
            <speech>.....</speech>
            <speech>¿Cómo? No te metas en la hierba, ¿verdad? ¡No te preocupes! ¡Ningún problema!</speech>
            <speech>No importa que no tengamos ningún Pokémon. Créeme.</speech>
            <speech>¡Tengo una idea! Ahora escucha.</speech>
            <speech>¿Sabes cómo saltan los Pokémon salvajes cuando te metes en la hierba alta?</speech>
            <speech>Así que lo que tienes que hacer es escabullirte a la siguiente zona de hierba antes de que aparezca ningún Pokémon salvaje.
            </speech>
            <speech>Si seguimos corriendo, podremos llegar a Pueblo Sandgem sin toparnos con Pokémon salvajes.</speech>
            <speech>OK, ¡quédate conmigo! ¡Bien, aquí va!</speech>
        </speeches>
        <speeches id="3">
            <speech>En sus marcas...</speech>
        </speeches>
        <speeches id="4">
            <speech>Hey, $PLAYER_NAME Este viejo... Es el Prof. Rowan, ¿no? ¿Qué está haciendo aquí...?</speech>
        </speeches>
        <speeches id="5">
            <speech>Puedes preguntar cien veces. La respuesta nunca cambiará.</speech>
            <speech>Los dos contestaremos cien veces, ¡nos encantan los Pokémon! Correcto, $PLAYER_NAME</speech>
        </speeches>
        <speeches id="6">
            <speech>... Uh ... Bueno, yo, eh ... ...</speech>
            <speech>Bueno, entonces olvídate de mí, ¡pero dale un Pokémon a mi amigo!</speech>
            <speech>Quiero decir, fui yo quien intentó entrar en la hierba alta y todo...</speech>
        </speeches>
        <speeches id="7">
            <speech>¡¿En serio?! ¡Prof. Rowan! ¡No puedo creerlo! ¡Estoy tan feliz que no puedo mantener la cara seria!
            </speech>
            <speech>Hey, $PLAYER_NAME. Puedes elegir primero. Hey, soy prácticamente un adulto. Tengo que mostrar un poco de clase
                aquí.
            </speech>
        </speeches>
        <speeches id="8">
            <speech>Entonces, ¡te elijo a ti! Elijo este Piplup.</speech>
        </speeches>
        <speeches id="9">
            <speech>¡Entonces, te elijo a ti! Elijo a este Turtwig.</speech>
        </speeches>
        <speeches id="10">
            <speech>¡Entonces, te elijo a ti! Elijo a este Chimchar.</speech>
        </speeches>
        <speeches id="11">
            <speech>¿Qué te parece?</speech>
            <speech>El profesor Rowan es muy agradable. En la tele parece tan severo y asustadizo. ¡Heheh, $PLAYER_NAME!</speech>
            <speech>Ahora los dos tenemos Pokémon. Sólo hay una cosa que hacer, ¿verdad? ¿Estás listo para esto?</speech>
        </speeches>
        <speeches id="12">
            <speech>¡¿Qué estás diciendo?! ¡¿Terminamos perdiendo?!</speech>
        </speeches>
        <speeches id="13">
            <speech>No estuviste mal. ¡Sólo soy naturalmente bueno en esto!</speech>
        </speeches>
        <speeches id="14">
            <speech>¡Uf! Vámonos a casa. Estoy agotado después de esa batalla. Mi Pokémon también necesita descansar. ¡Nos vemos, $Nombre_del_jugador!
            </speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="2">
        <speeches id="1">
            <speech>¡Quieto!</speech>
            <speech>¿No parece que tengáis ningún Pokémon entre vosotros? Entonces, ¿qué significa ir a la hierba alta?
                hierba alta?
            </speech>
        </speeches>
        <speeches id="2">
            <speech>... ... Trataron de ir a la hierba alta porque querían Pokémon ...</speech>
            <speech>Hmm... ¿Qué hacer...? Su mundo seguramente cambiaría si se encontraran con Pokémon...</speech>
            <speech>¿Es correcto que los ponga en ese camino...?</speech>
            <speech>... ... Ustedes dos. Realmente amáis a los Pokémon, ¿verdad?</speech>
        </speeches>
        <speeches id="3">
            <speech>...¿un par de niños imprudentes que intentan entrar tontamente en la hierba alta sin Pokémon propios?
            </speech>
            <speech>Me preocupa lo que gente así podría hacer con Pokémon.</speech>
        </speeches>
        <speeches id="4">
            <speech>Qué grande eres... ¡Muy bien, entonces! ¡Os confiaré Pokémon a vosotros dos!</speech>
            <speech>Le pido disculpas por haberle hecho pasar por ese ejercicio.</speech>
            <speech>Sin embargo... Deben prometerme que no volverán a ponerse en peligro imprudentemente.</speech>
            <speech>Ahora, entonces... ¿Hm? Ahora, donde...</speech>
        </speeches>
        <speeches id="5">
            <speech>¡Ahí está! Dawn, buen trabajo. Lo que iba a hacer era confiar a estos dos sus propios
                Pokémon.
            </speech>
        </speeches>
        <speeches id="6">
            <speech>¡Hm! Existimos codo con codo con los Pokémon.</speech>
            <speech>Llega un momento en que la gente debe conocer a los Pokémon.</speech>
            <speech>Hay un mundo que deberíamos explorar juntos.</speech>
            <speech>Para ellos, hoy es ese momento. El lugar, aquí mismo.</speech>
            <speech>¡Adelante! Abre el maletín y elige un Pokémon.</speech>
        </speeches>
        <speeches id="7">
            <speech>¡Muy bien! Parece que ambos habéis elegido un buen Pokémon.</speech>
            <speech>¡Escucha bien! Los Pokémon que se te han confiado no están familiarizados con el mundo.</speech>
            <speech>En ese sentido, son muy parecidos a ti. Como compañeros recién llegados al mundo, espero que les vaya bien...
                juntos.
            </speech>
            <speech>Si tienes algún problema, ven a verme a mi laboratorio en Sandgem Town.</speech>
            <speech>Y ahora, seguiremos nuestro camino.</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="3">
        <speeches id="1">
            <speech>Profesor Rowan. ¡Dejó su maletín en el lago! ¿Oh? ¿Pasa algo aquí?</speech>
        </speeches>
        <speeches id="2">
            <speech>¡¿Perdón?! Esos Pokémon son difíciles de reemplazar. ¿Estás seguro de regalarlos?</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Profesor! ¡Espéreme, por favor!</speech>
        </speeches>
        <speeches id="4">
            <speech>Lo siento... Por favor, déjeme pasar.</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="4">
        <speeches id="1">
            <speech>¡Demasiado lento! $PLAYER_NAME, ¡estoy harto de esperar!</speech>
            <speech>Voy a ver al Prof. Rowan, para darle las gracias como es debido.</speech>
            <speech>Entonces, tuve esta gran idea. Escuchad, ¿vale? ¿Conoces el lago donde siempre jugamos?</speech>
            <speech>¿Sabes que dicen que allí vive un Pokémon legendario?</speech>
            <speech>¡Lo has adivinado! Atrapemos a ese Pokémon.</speech>
            <speech>Eso hará feliz al profesor Rowan.</speech>
            <speech>¡Estoy seguro de ello! Tú y yo juntos, ¡no tenemos nada que temer!</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="5">
        <speeches id="1">
            <speech>¡Hey, $PLAYER_NAME! ¡He dicho que el lago no está por ahí!</speech>
        </speeches>
    </conversation>
    <conversation canSkip="true" id="6">
        <speeches id="1">
            <speech/>
        </speeches>
        <speeches id="2">
            <speech>¡Eh!</speech>
            <speech>Trabajo en un Pokémon Mart.</speech>
            <speech>¿Sabías que la salud de un Pokemon se mide por sus Puntos de Vida (PV)?</speech>
            <speech>si un Pokémon se queda sin PS, se desmaya y ya no puede combatir.</speech>
            <speech>Si la salud de un Pokemon es baja, debes curarlo con una poción.</speech>
            <speech>Toma, ¿quieres una poción? ¡La primera es gratis!</speech>
        </speeches>
        <speeches id="3">
            <speech>Vale, puedes tenerlo más tarde, no me importa.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Buena suerte en la naturaleza!</speech>
        </speeches>
        <speeches id="5">
            <speech>Puedes encontrar un Pokemon Mart en las ciudades y en la mayoría de los pueblos importantes.</speech>
        </speeches>
    </conversation>
    <npc direction="DOWN" id="1" name="" sprite="187" x="68" y="12">
        <speech>No seas tímido. Habla con cualquier persona que veas.</speech>
        <speech>Hablando con la gente, obtendrá información y consejos inestimables.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="2" name="Youngster Marcus" sprite="2" x="73" y="4">
        <speech>Esa cornisa es de una sola dirección. Salta para tomar un atajo a Ciudad Hoja Gemela.</speech>
    </npc>
    <npc direction="RIGHT" id="3" name="Young Girl Verena" sprite="12" x="58" y="11">
        <speech>Si la salud de tu Pokemon, es decir, su HP está bajando, ¡deberías ir a un Centro Pokemon!
        </speech>
        <speech>Curarán a tus Pokémon gratis. Su edificio se identifica por un tejado rojo.</speech>
    </npc>
    <npc direction="UP" id="4" name="Young Trainer Ted" sprite="4" x="43" y="19">
        <speech>Los Pokémon salvajes acechan en la hierba alta. Pueden aparecer en cualquier momento.</speech>
        <speech>Así que, si quieres luchar contra un Pokémon salvaje, simplemente camina por la hierba alta.</speech>
        <speech>Si quieres evitar a los Pokémon salvajes, evita la hierba alta.</speech>
    </npc>
    <movingNpc direction="RIGHT" id="5" name="Beedrill" shouldSleep="" speed="1" sprite="15" type="pokemon" x="17" y="19">
        <path>LEFTx4, DOWNx2, RIGHTx4, UPx2</path>
        <onCollisionSpeech gap="4">Buzzzzz</onCollisionSpeech>
        <speech>Beedrill....</speech>
    </movingNpc>
    <movingNpc direction="LEFT" id="6" name="Starly" shouldSleep="" speed="1" sprite="396" type="pokemon" x="72" y="21">
        <path>LEFTx4, DOWNx2, RIGHTx4, UPx2</path>
        <onCollisionSpeech gap="4">Starrr</onCollisionSpeech>
        <speech>Starly .. Starly ..</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="7" name="Gentleman Mark" sprite="5" x="12" y="5">
        <speech>A nuestra izquierda está el lago Verity. Es un lugar precioso.</speech>
        <speech>Dicen que de vez en cuando se oye allí un grito desconocido...</speech>
    </npc>
    <movingNpc direction="RIGHT" id="8" name="Youngster Atlas" shouldSleep="" speed="1" sprite="24" type="npc" x="41" y="6">
        <path>RIGHTx4, LEFTx4</path>
        <onCollisionSpeech gap="4">I'm walking here!!</onCollisionSpeech>
        <speech>¡Estoy tratando de encontrar un Starly muy bonito!</speech>
        <speech>Si quieres ser un entrenador Pokemon de éxito, ¡tienes que entender la naturaleza!</speech>
    </movingNpc>
    <movingNpc direction="LEFT" id="9" name="Chloe" speed="1" sprite="17" type="npc" x="23" y="6">
        <path>LEFTx3, DOWNx3, RIGHTx3, UPx3</path>
        <onCollisionSpeech gap="4">Hi!</onCollisionSpeech>
        <speech>Me encanta moler aquí. Los spawns cambian según la hora del día.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="10" name="Shinx" shouldSleep="" speed="1" sprite="403" type="pokemon" x="19" y="13">
        <path>RIGHTx5, LEFTx5</path>
        <onCollisionSpeech gap="4">Shiiiinx</onCollisionSpeech>
        <speech>¡Shinx!</speech>
    </movingNpc>

    <conversation id="7">
        <speeches id="1">
            <speech>Debería visitar a mamá y contarle sobre mi nuevo inicial antes de irme.</speech>
        </speeches>
    </conversation>

</npcs>