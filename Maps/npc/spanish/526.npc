<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>¡Soy la gran cordillera de tu vida! ¡Vénceme si puedes!</speech>
        </speeches>
        <speeches id="2">
            <speech>Si quieres llegar a la cima como Entrenador, ¡tendrás que pasar por encima de mí!</speech>
        </speeches>
        <speeches id="3">
            <speech>Si quieres llegar a la cima como Entrenador, ¡tendrás que pasar por encima de mí!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Jajaja! Yo soy la cumbre, ¡y el camino para llegar a mí sigue siendo muy empinado!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>¡Sup! ¡Daré todo lo que tengo! ¡¡Hagámoslo lo mejor posible!!</speech>
        </speeches>
        <speeches id="2">
            <speech>El sudor que gotea antes de una batalla... ¿No te encanta lo fresco que es?</speech>
        </speeches>
        <speeches id="3">
            <speech>El sudor que gotea antes de una batalla... ¿No te encanta lo fresco que es?</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Sup! ¡Ya basta, amigo! ¡Tienes que valorar tu vida!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>¡Hola! Eres una montaña que se interpone en mi camino, ¿verdad?</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Yahoo! ¡Yahooooo! ¡Escucha mi grito de triunfo!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Yahoo! ¡Yahooooo! ¡Escucha mi grito de triunfo!</speech>
        </speeches>
        <speeches id="4">
            <speech>Grrr... Mi victoria ha desaparecido en alguna grieta oscura...</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Muy bien. Seamos todos buenos niños y empecemos nuestra lección Pokémon, ¿de acuerdo?</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh mi... Parece que vas a repetir esta lección.</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh mi... Parece que vas a repetir esta lección.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Vaya! Has aprobado con nota.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>La batalla entre nosotros dos... En sí misma, es arte.</speech>
        </speeches>
        <speeches id="2">
            <speech>Sí... Llamaré a esta pieza... La lamentable y de alguna manera antiestética juventud.</speech>
        </speeches>
        <speeches id="3">
            <speech>Sí... Llamaré a esta pieza... La lamentable y de alguna manera antiestética juventud.</speech>
        </speeches>
        <speeches id="4">
            <speech>Antes de perder el tiempo en charlas ociosas, demuéstrame tus habilidades.</speech>
        </speeches>
    </conversation>

    <conversation id="11">
        <speeches id="2">
            <speech>Hola! Soy un payaso de la campaña Tutorial PBO. ¡Vamos a lanzar mi pregunta!</speech>
            <speech>¿Puedes usar tu tarjeta de entrenador para personalizar tu aspecto?</speech>
        </speeches>
        <speeches id="3">
            <speech>Esa no es la respuesta correcta. Intentémoslo de nuevo.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Ding-ding!</speech>
            <speech>Tienes toda la razón.</speech>
            <speech>Sí, ¡puedes personalizar tu aspecto desde tu tarjeta de entrenador!</speech>

        </speeches>
        <speeches id="5">
            <speech>¡Aquí tiene! ¡Por favor, acepta esta Lum Berry!</speech>
            <speech>Si lo sujeta un Pokémon, se recupera de cualquier problema de estado.</speech>
        </speeches>
    </conversation>

</npcs>