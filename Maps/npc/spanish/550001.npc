<npcs>
    <npc direction="RIGHT" id="1000" name="Monk Boo Jong" sprite="167" x="10" y="8">
        <speech>Si se necesita inspiración, siempre se puede mirar hacia el pasado y hacia la obra de grandes individuos que
            vivieron en aquellos tiempos.
        </speech>
        <speech>Aunque estas personas ya no vivan, sus pensamientos y emociones siguen vivos en sus escritos.
            escritos.
        </speech>
        <speech>Estos registros de antiguos monjes, por ejemplo, forman parte de un valioso archivo histórico que puede ayudar a guiar a la humanidad hacia un futuro mejor.
            a la humanidad hacia un futuro mejor.
        </speech>
    </npc>
    <npc direction="LEFT" id="1001" name="Monk Dreyfus" sprite="167" x="1" y="8">
        <speech>Muchos de estos escritos contienen detalles de siete fragmentos "místicos", con forma de ala.</speech>
        <speech>Algunos monjes han llegado a afirmar que estos fragmentos no son un mito, sino una realidad.</speech>
        <speech>Ahora que lo pienso, las tallas realizadas por los antiguos parecen parecerse a algún tipo de ave, por lo que
            puede haber más en esto de lo que sabemos.
        </speech>
    </npc>
    <npc direction="UP" id="1002" name="Monk Zachary" sprite="167" x="13" y="22">
        <speech>Todos los años conmemoramos el aniversario del renacimiento honrando a Ho-Oh.</speech>
        <speech>Y, sin embargo, ninguno de nosotros lo ha visto en su vida, y puede que ni siquiera tengamos nunca el privilegio de presenciar su presencia.</speech>
        <speech>Sin embargo, esto va a cambiar este año en el festival de Ho-Oh.</speech>
    </npc>
    <npc direction="LEFT" id="1003" name="Monk Janardhan" sprite="167" x="18" y="7">
        <speech>"Cuatro traen destrucción, y siete traen alegría"</speech>
        <speech>¿Qué es esto? Por qué, por supuesto, este es un extracto de los cuentos del monje Joo Lah - uno de los
            fundadores de este monasterio.
        </speech>
        <speech>Describe la época en que la humanidad vivía en estrecha armonía con la naturaleza, una era de estrecha cooperación
            entre humanos y Pokemon.
        </speech>
        <speech>Y aunque no soy un experto, creo que estas palabras pueden estar relacionadas con el poder de las llamas -
            la llama mística de la muerte y el renacimiento.
        </speech>
    </npc>
    <npc direction="UP" id="1004" name="Monk Ramiel" randomRotation="true" sprite="167" x="14" y="5">
        <speech>"Hubo un tiempo en que algunas personas, movidas por la codicia y la ambición ciega, trataron de establecer su</speech>
        <speech>dominio sobre el mundo natural".</speech>
        <speech>"Para lograr este objetivo, intentaron invocar el poder de las llamas,</speech>
        <speech>para limpiarlo todo y empezar</speech>
        <speech>de nuevo".</speech>
        <speech>"Estas personas, seguras de sus motivaciones, convocaron al fénix para que ejerciera su poder en este mundo</speech>
        <speech>y enjuagarla de los que esta gente consideraba débiles".</speech>
        <speech>"El fénix, sin embargo, podía ver la duda que persistía en sus mentes. Y en ausencia de</speech>
        <speech>convicción, sólo hay miedo -"</speech>
        <speech>"y así, el fénix, en lugar de seguir a estos humanos, eligió castigarlos".</speech>
        <speech>"Esa fue la última vez que alguien vio a estas personas, y - como las generaciones futuras llegarían a reconocer -</speech>
        <speech>la razón de la prolongada paz en la tierra de las llamas"</speech>
    </npc>
    <conversation canSkip="false" id="2">
        <speeches id="1">
            <speech/>
        </speeches>
        <speeches id="2">
            <speech>Sí, soy el hermano de Ching Ling.</speech>
            <speech>Ya veo... Es triste que ya no pueda recordar las oraciones.</speech>
            <speech>¿Quieres ayudarlo entregándole este libro? Tengo que irme a Barfi a meditar, si no, le habría entregado el libro yo mismo.</speech>
        </speeches>
        <speeches id="3">
            <speech>Estoy muy decepcionado, $PLAYER_NAME. Nunca debes decir que no a alguien que lo necesita...</speech>
        </speeches>
        <speeches id="4">
            <speech>Gracias. Me iré a las montañas Barfi a meditar.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
</npcs>