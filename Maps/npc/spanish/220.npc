<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>El océano es mi segundo hogar, ¡espero que puedas seguirme el ritmo!</speech>
        </speeches>
        <speeches id="2">
            <speech>Supongo que me toca nadar de vuelta a la mesa de dibujo...</speech>
        </speeches>
        <speeches id="3">
            <speech>Supongo que me toca nadar de vuelta a la mesa de dibujo...</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Sin problemas para mí! Mejor suerte la próxima marea.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>El agua está en calma ahora... ¡pero yo seré la tormenta que te hunda!</speech>
        </speeches>
        <speeches id="2">
            <speech>Supongo que volqué...</speech>
        </speeches>
        <speeches id="3">
            <speech>Supongo que volqué...</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Lo veis? ¡Incluso los mares en calma pueden sorprenderte!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Llevo cabalgando estas olas desde que podía andar. ¿Crees que puedes mantener la cabeza fuera del agua?</speech>
        </speeches>
        <speeches id="2">
            <speech>Vaya... supongo que me he desmayado.</speech>
        </speeches>
        <speeches id="3">
            <speech>Vaya... supongo que me he desmayado.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Ja! ¡Te hundiste más rápido que una roca!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>¡Apuesto a que no puedes nadar mejor que un tipo que prácticamente vive en el agua!</speech>
        </speeches>
        <speeches id="2">
            <speech>Parece que necesito golpear más fuerte las corrientes...</speech>
        </speeches>
        <speeches id="3">
            <speech>Parece que necesito golpear más fuerte las corrientes...</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Jaja! La próxima vez, ¡trae un tubo!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>¡Hagamos de esto un torbellino de batalla! ¡Mis Pokémon te absorberán hasta la derrota!</speech>
        </speeches>
        <speeches id="2">
            <speech>Yo soy el que está drenado... Has escapado de mi remolino.</speech>
        </speeches>
        <speeches id="3">
            <speech>Yo soy el que está drenado... Has escapado de mi remolino.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Fuiste absorbido por mi remolino! Mejor suerte la próxima vez.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Empaqué bocadillos... ¡y estrategias de batalla! ¡Adelante!</speech>
        </speeches>
        <speeches id="2">
            <speech>Supongo que debería haberme limitado a los sándwiches...</speech>
        </speeches>
        <speeches id="3">
            <speech>Supongo que debería haberme limitado a los sándwiches...</speech>
        </speeches>
        <speeches id="4">
            <speech>Estrategia Y aperitivos... ¡un combo imbatible!</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>El océano es mi segundo hogar... ¡espero que sepas nadar!</speech>
        </speeches>
        <speeches id="2">
            <speech>Supongo que me dejé llevar...</speech>
        </speeches>
        <speeches id="3">
            <speech>Supongo que me dejé llevar...</speech>
        </speeches>
        <speeches id="4">
            <speech>Como una fuerte corriente, ¡sigo empujando hacia delante!</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>Batallar podría estropearme el pelo... ¡pero vas a caer de todos modos!</speech>
        </speeches>
        <speeches id="2">
            <speech>Uf... Ahora tengo que arreglar mi pelo Y mi estrategia.</speech>
        </speeches>
        <speeches id="3">
            <speech>Uf... Ahora tengo que arreglar mi pelo Y mi estrategia.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Victoria impecable! Igual que mi look.</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>¡Mis pájaros son agudos y rápidos! ¿Crees que podrás seguirles el ritmo?</speech>
        </speeches>
        <speeches id="2">
            <speech>Supongo que mi rebaño necesita más entrenamiento de vuelo...</speech>
        </speeches>
        <speeches id="3">
            <speech>Supongo que mi rebaño necesita más entrenamiento de vuelo...</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Supremacía aérea! No hay nada mejor que el viento a tu espalda.</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>¡He luchado contra corrientes más fuertes que cualquier entrenador! ¿Crees que puedes superar la marea?</speech>
        </speeches>
        <speeches id="2">
            <speech>Supongo que me dejé llevar...</speech>
        </speeches>
        <speeches id="3">
            <speech>Supongo que me dejé llevar...</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Te agitaste como un Magikarp en aguas turbulentas!</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>Las olas me mantienen en calma... ¿pero mis Pokémon? ¡Son feroces!</speech>
        </speeches>
        <speeches id="2">
            <speech>Parece que mi calma se rompió...</speech>
        </speeches>
        <speeches id="3">
            <speech>Parece que mi calma se rompió...</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Mis Pokémon surgen como una marea imparable!</speech>
        </speeches>
    </conversation>
    <npc direction="UP" hidden="false" id="1" name="Sailor Jimbo" randomRotation="true" sprite="11" x="30" y="18">
        <speech>Llevo tanto tiempo en el mar que he olvidado cómo huele la tierra...</speech>
        <speech>Pero estoy bastante seguro de que no es este Magikarp empapado.</speech>
    </npc>
    <npc direction="RIGHT" hidden="false" id="3" name="Researcher Dana" randomRotation="false" sprite="7" x="64" y="14">
        <speech>Dicen que las corrientes cerca de las Islas Seafoam están embrujadas...</speech>
        <speech>Yo digo que eso es sólo energía de Cloyster enfadado.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="4" name="Fisherman Pete" randomRotation="false" sprite="16" x="68" y="27">
        <speech>Una vez enganché un Sharpedo y me miró fijamente.</speech>
        <speech>No he pescado desde entonces. Ahora me siento aquí y reflexiono.</speech>
    </npc>
    <npc direction="RIGHT" hidden="false" id="5" name="Lost Tourist Sheila" randomRotation="true" sprite="94" x="84" y="14">
        <speech>¿Tienes idea de la distancia en flotación entre Cinnabar y Vermilion?</speech>
        <speech>Porque yo no. Por favor, ayuda.</speech>
    </npc>
    <movingNpc direction="DOWN" id="6" name="Tentacool" shouldSleep="" speed="1" sprite="72" type="pokemon" x="11" y="15">
        <path>RIGHTx5,LEFTx5</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="7" name="Magikarp" shouldSleep="" speed="1" sprite="129" type="pokemon" x="30" y="15">
        <path>LEFTx2,RIGHTx2</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="8" name="Slowpoke" shouldSleep="" speed="1" sprite="79" type="pokemon" x="40" y="22">
        <path>DOWNx3,UPx3</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="9" name="Gyarados" shouldSleep="" speed="1" sprite="130" type="pokemon" x="8" y="31">
        <path>RIGHTx10,LEFTx10</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="10" name="Sharpedo" shouldSleep="" speed="1" sprite="319" type="pokemon" x="15" y="8">
        <path>RIGHTx7,LEFTx7</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="11" name="Tentacruel" shouldSleep="" speed="1" sprite="73" type="pokemon" x="59" y="4">
        <path>DOWNx4,UPx4</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="12" name="Staryu" shouldSleep="" speed="1" sprite="120" type="pokemon" x="103" y="11">
        <path>RIGHTx5,LEFTx5</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="13" name="Shellder" shouldSleep="" speed="1" sprite="90" type="pokemon" x="74" y="13">
        <path>DOWNx3,UPx4,DOWNx1</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="14" name="Horsea" shouldSleep="" speed="1" sprite="116" type="pokemon" x="102" y="20">
        <path>DOWNx3,RIGHTx5,LEFTx5,UPx3</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Swimmer Riko" shouldSleep="" speed="1" sprite="21" type="npc" x="6" y="20">
        <path>RIGHTx5,LEFTx5</path>
        <onCollisionSpeech gap="4"/>
        <speech>¡He estado nadando desde Fucsia!</speech>
        <speech>Necesito subir esto a mi historia seguro.</speech>
    </movingNpc>
</npcs>