<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>¡¿Magos?!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Tú... aquí... ¡¿Cómo?!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Debo... decírselo... al jefe!</speech>
        </speeches>
        <speeches id="3">
            <speech/>
        </speeches>
        <speeches id="4">
            <speech>¡Vamos!</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>¡Tú... no... puedes! ¡Vamos... bac!</speech>
        </speeches>
        <speeches id="2">
            <speech>Ooooooooh ... espíritu ... piedra!!!</speech>
            <speech>¿Darme... a mí?</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Vamos... bac! ¡Vamos... bac!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Nang... ve... a... decírselo al... jefe! ¡Tú... no... pises... la casa!</speech>
        </speeches>
        <speeches id="5">
            <speech>¡No... vete... a casa! Si no... ¡castigo!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>¡Tú... no... puedes! ¡Vamos... bac!</speech>
        </speeches>
    </conversation>

    <conversation id="5">
        <speeches id="1">
            <speech>Pin Pin.. Señor...</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Pin pin! ¡Pinsirrrrr!</speech>
        </speeches>
        <speeches id="3">
            <speech>*Pinsir quiere que te vayas por ahora, pero que vuelvas más tarde*.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡¡¡Piiiinsirrrrr!!!</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>

  <conversation id="6">
      <speeches id="1">
          <speech>Vienes portando el sello oscuro; estoy seguro de que sabes mucho~</speech>
          <speech>En el gran culto existen los tres elementos: las llamas, los mares y los bosques.</speech>
          <speech>Cada uno con sus creencias; cada uno con sus bienes~</speech>
      </speeches>
      <speeches id="2">
        <speech>Vienes portando el sello oscuro; estoy seguro de que sabes mucho~</speech>
        <speech>En el gran culto existen los tres elementos: las llamas, los mares y los bosques.</speech>
        <speech>Cada uno con sus creencias; cada uno con sus bienes~</speech>
        <speech>¿Qué dices, jovencito? ¿Juras respetar el bosque encantado?</speech>
      </speeches>
      <speeches id="3">
          <speech>Una elección tonta es; un gran error es~</speech>
      </speeches>
      <speeches id="4">
          <speech>Has elegido bien, o' youngling. Busca las oscuras mareas oceánicas en el lugar donde todo empezó, y allí verás el camino que te espera~</speech>
      </speeches>
      <speeches id="5">
          <speech>Adiós... por ahora</speech>
      </speeches>
  </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Oh ho ho, me has encontrado de nuevo, $PLAYER_NAME.</speech>
            <speech>Tenía que ver si tu alma estaba limpia de cualquier pecado, pero aún no estoy seguro.</speech>
            <speech>Sin embargo, un intento más debería bastar. ¿Crees que puedes encontrarme una vez más, $PLAYER_NAME? Si es así, ¡continuemos!</speech>
            <speech>Si quieres una pista, escucha esto: "Cerca del agua maldita es donde estaré; en compañía de los ahogados es donde estaré~".</speech>
        </speeches>
    </conversation>
</npcs>