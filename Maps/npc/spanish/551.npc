<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Tus Pokémon... Enséñamelos...</speech>
        </speeches>
        <speeches id="2">
            <speech>Sí... Tienes buenos Pokémon... Los Pokémon deben estar contentos de ser criados por ti...</speech>
        </speeches>
        <speeches id="3">
            <speech>Sí... Tienes buenos Pokémon... Los Pokémon deben estar contentos de ser criados por ti...</speech>
        </speeches>
        <speeches id="4">
            <speech>Todo dentro de mis expectativas... Nada de lo que sorprenderse...</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Aunque la gente te llame As de la formación, no es que te den nada especial por ello.</speech>
        </speeches>
        <speeches id="2">
            <speech>Al final, ser bueno luchando solo no es suficiente, por muy fuerte que seas.</speech>
        </speeches>
        <speeches id="3">
            <speech>Al final, ser bueno luchando solo no es suficiente, por muy fuerte que seas.</speech>
        </speeches>
        <speeches id="4">
            <speech>Sólo soy bueno batallando. Ni siquiera tengo trabajo. Sólo soy otro desempleado.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>¡Aparece el soldado Pokémon de bonito traje que rocía de amor el mundo!</speech>
        </speeches>
        <speeches id="2">
            <speech>Quizá pierdo porque presto más atención a rezar que a luchar.</speech>
        </speeches>
        <speeches id="3">
            <speech>Quizá pierdo porque presto más atención a rezar que a luchar.</speech>
        </speeches>
        <speeches id="4">
            <speech>Aún no puedo ser derrotado... Todavía tengo que proteger todo lo bonito del mundo...</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Soy el Mochilero más fuerte. Tengo muchos Pokémon en mi mochila.</speech>
        </speeches>
        <speeches id="2">
            <speech>Soñar con ser libre es lo mejor...</speech>
        </speeches>
        <speeches id="3">
            <speech>Soñar con ser libre es lo mejor...</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Tengo más Pokémon en mi Bolsa! Oh... Espera... Mi Bolsa tiene un agujero...</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>¡Te voy a dar una experiencia tan dulce que te van a dar vueltas los ojos!</speech>
        </speeches>
        <speeches id="2">
            <speech>No es que pierdas realmente nada cuando pierdes. Mientras lo disfrutes, es suficiente.</speech>
        </speeches>
        <speeches id="3">
            <speech>No es que pierdas realmente nada cuando pierdes. Mientras lo disfrutes, es suficiente.</speech>
        </speeches>
        <speeches id="4">
            <speech>Uf... ¡Estás que echas humo! Esto parece una sofocante noche de verano.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>¡Sup! ¡Daré todo lo que tengo! ¡¡Hagámoslo lo mejor posible!!</speech>
        </speeches>
        <speeches id="2">
            <speech>Al final de una batalla, sin aliento... ¿No es genial? ¡Completamente!</speech>
        </speeches>
        <speeches id="3">
            <speech>Al final de una batalla, sin aliento... ¿No es genial? ¡Completamente!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Sup! Buen trabajo. Intenté todo lo que pude, ¡pero sigo bastante decepcionado!</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>Alabo tu valentía al desafiarme. ¡Porque yo soy el que tiene la patada más fuerte!</speech>
        </speeches>
        <speeches id="2">
            <speech>Hmmm... Si iba a perder de todos modos, esperaba quedar totalmente mal en el proceso.</speech>
        </speeches>
        <speeches id="3">
            <speech>Hmmm... Si iba a perder de todos modos, esperaba quedar totalmente mal en el proceso.</speech>
        </speeches>
        <speeches id="4">
            <speech>Oh. Los Pokémon lucharon. Mi fuerte patada no ayudó ni un poco.</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>Como soy una Ace Trainer, la gente piensa que soy una mujer fuerte.</speech>
        </speeches>
        <speeches id="2">
            <speech>Tienes que ser fuerte por dentro cuando no hay mucha gente que sea más fuerte que tú por fuera...</speech>
        </speeches>
        <speeches id="3">
            <speech>Tienes que ser fuerte por dentro cuando no hay mucha gente que sea más fuerte que tú por fuera...</speech>
        </speeches>
        <speeches id="4">
            <speech>Pensé que crecería para ser una mujer frágil que parecía que se rompería si la apretabas demasiado fuerte.</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>Trabajo muy duro, pero eso no significa que sea fuerte.</speech>
        </speeches>
        <speeches id="2">
            <speech>Eres un entrenador inteligente, teniendo en cuenta que no sabes mucho.</speech>
        </speeches>
        <speeches id="3">
            <speech>Eres un entrenador inteligente, teniendo en cuenta que no sabes mucho.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡¿Qué?! ¡¿Incluso yo puedo perder?! ¡Pero soy un genio de la lucha!</speech>
        </speeches>
    </conversation>

    <conversation id="12">
        <speeches id="1">
            <speech>¡¡Mismagi!!</speech>
            <speech>*Mismagius parece estresado y ataca*</speech>
        </speeches>
        <speeches id="2">
            <speech>Magi... Mis. Magi...</speech>
            <speech>*Mismagius parece hacer un gesto de que algo le asusta y busca ayuda.*</speech>
        </speeches>
        <speeches id="3">
            <speech/>
        </speeches>
        <speeches id="4">
            <speech>¡¡¡Magiiiiiiiiiiiiiiii!!!</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
</npcs>