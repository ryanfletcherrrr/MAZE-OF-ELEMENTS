<npcs>
    <conversation canSkip="false" id="1">
        <speeches id="1">
            <speech>¡Hey! ¡$PLAYER_NAME! ¡Dime que te has vuelto un poco más duro!</speech>
            <speech>¿A mí? ¿Necesitas siquiera preguntarlo? ¡Por supuesto, me he vuelto más duro! ¡Adelante! ¡Luchemos!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Waah! ¡¿Qué quieres decir con que he perdido?!</speech>
            <speech>¡Bueno, se acabó! ¡Es la última vez que pierdo! Voy a ser el entrenador más duro del mundo,
                ¡y lo sabes!
            </speech>
            <speech>Lo primero que hay que hacer es enfrentarse al Gimnasio Pokémon de Ciudad Oreburgh. Voy a endurecerme para eso,
                ¡totalmente!
            </speech>
        </speeches>
        <speeches id="3"/>
        <speeches id="4">
            <speech>No pierdas las esperanzas. No eras tan malo. Soy demasiado bueno.</speech>
        </speeches>
        <speeches id="5"/>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>No hace falta perder el tiempo saludando. Hazlo cuando quieras.</speech>
        </speeches>
        <speeches id="2">
            <speech>¡No perderé la próxima vez! ¡Volvamos a luchar alguna vez!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡No perderé la próxima vez! ¡Volvamos a luchar alguna vez!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Vaya partido! Estoy bastante satisfecho con el resultado.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Haw haw haw... Te enseñaré lo geniales que son mis Pokémon.</speech>
        </speeches>
        <speeches id="2">
            <speech>Podría ser... Cómo... Aunque mis Pokémon y yo somos los más fuertes.</speech>
        </speeches>
        <speeches id="3">
            <speech>Podría ser... Cómo... Aunque mis Pokémon y yo somos los más fuertes.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡¿Qué te parece?! Impresionante, ¿eh? ¡Mis Pokémon y yo somos los más fuertes!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>¡Muy bien! ¡Allá voy! ¡Te mostraré mi poder!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡YWhoa! ¡Eres increíble! ¡Estoy asombrado y sorprendido!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Guau! ¡Eres increíble! ¡Estoy asombrado y sorprendido!</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Estás asombrado? ¿Sorprendido? ¡¿Por el poder de mis Pokémon?!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>¡Tengamos una divertida batalla Pokémon!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Eso fue asombrosamente divertido! Me has agotado totalmente...</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Eso fue asombrosamente divertido! Me has agotado totalmente...</speech>
        </speeches>
        <speeches id="4">
            <speech>Jejeje ¡Mehehehehe! ¿Lo veis? ¡Es divertido ganar!</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Una batalla seria empieza por un principio serio. ¿Seguro que estás preparado?</speech>
        </speeches>
        <speeches id="2">
            <speech>En serio, perdí. Eso es, como, seriamente deprimente, pero estuviste seriamente genial.</speech>
        </speeches>
        <speeches id="3">
            <speech>En serio, perdí. Eso es, como, seriamente deprimente, pero estuviste seriamente genial.</speech>
        </speeches>
        <speeches id="4">
            <speech>En serio, ¡ganar una batalla seria es lo mejor!</speech>
        </speeches>
    </conversation>
    <movingNpc direction="RIGHT" id="1" name="Abra" shouldSleep="" speed="1" sprite="63" type="pokemon" x="24" y="2">
        <path>RIGHTx1, LEFTx1</path>
        <onCollisionSpeech gap="4">Abra! Abra!</onCollisionSpeech>
        <speech>¡¡¡Aaaabra!!!</speech>
        <speech>¡¡Este Abra no sabe teletransportarse!!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Seedot" shouldSleep="" speed="1" sprite="273" type="pokemon" x="26" y="6">
        <path>DOWNx1, UPx1</path>
        <onCollisionSpeech gap="4">See! Seedot! Seedot!</onCollisionSpeech>
        <speech>¡¡¡Auch!!! ¡¡Seedot te ataca!!</speech>
    </movingNpc>
    <movingNpc direction="LEFT" id="3" name="Magikarp" shouldSleep="" speed="1" sprite="129" type="pokemon" x="33" y="8">
        <path>LEFTx2, RIGHTx2</path>
        <onCollisionSpeech gap="4">Karp Karp</onCollisionSpeech>
        <speech>Karp... *Splash*</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="4" name="Joshua" sprite="23" x="36" y="15">
        <speech>¿Puede Abras dejar de teletransportarse lejos de mí?</speech>
        <speech>Será mejor que los ponga a dormir.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="5" name="" sprite="162" x="47" y="9">
        <speech>(DERECHA) Ciudad de Oreburgh</speech>
        <speech>(IZQUIERDA) Ciudad Jubilife</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="6" name="" sprite="162" x="48" y="9">
        <speech>(DERECHA) Ciudad de Oreburgh</speech>
        <speech>(IZQUIERDA) Ciudad Jubilife</speech>
    </npc>
    <npc direction="UP" hidden="false" id="7" name="Chadwick" sprite="10" x="44" y="18">
        <speech>Estos salientes están bien porque puedes saltar por ellos para volver rápidamente a Ciudad Jubilife.</speech>
        <speech>...</speech>
        <speech>Ahora, si sólo pudieras volver a subirlas...</speech>
    </npc>

    <conversation id="8">
        <speeches id="2">
            <speech>Hola! Soy un payaso de la campaña Tutorial PBO. ¡Vamos a lanzar mi pregunta!</speech>
            <speech>¿Se puede comprar un Game Pass en Mart?</speech>
        </speeches>
        <speeches id="3">
            <speech>Esa no es la respuesta correcta. Intentémoslo de nuevo.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Ding-ding!</speech>
            <speech>Tienes toda la razón.</speech>
            <speech>Deberías probarlo.</speech>
        </speeches>
        <speeches id="5">
            <speech>¡Aquí tienes! ¡Tus merecidas 2 bolas de inicio!</speech>
        </speeches>
    </conversation>
</npcs>