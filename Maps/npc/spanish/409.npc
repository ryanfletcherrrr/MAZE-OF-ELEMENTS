<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Ohhh, ¿qué voy a hacer?</speech>
            <speech>Estábamos de paseo, Peeko y yo, cuando nos asaltó un matón raro...</speech>
            <speech>¡El sinvergüenza se ha llevado a mi querido Peeko! ¡Wrrrooooooaaaar! ¡Peeko!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Peeko! ¡Mi querido Peeko!</speech>
            <speech>¿Puede encontrarlo para mí, joven entrenador?</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Ohhh, ¿qué voy a hacer?</speech>
            <speech>Estábamos en nuestro paseo, Peeko y yo, cuando nos asaltó un extraño matón... ¡El sinvergüenza se llevó a mi querido Peeko! ¡Wrrrooooooaaaar! ¡Peeko!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Peeko! ¡Me alegra ver que estás a salvo! ¡Peeko te debe la vida!</speech>
            <speech>¿Puedo recuperarla?</speech>
        </speeches>
        <speeches id="3">
            <speech>¿Qué? La necesito...</speech>
        </speeches>
        <speeches id="4">
            <speech>Me llaman Sr. Briney. ¿Y tú eres? ¡Ah, así que usted es $NOMBRE_DE_JUGADOR!</speech>
            <speech>Se lo agradezco sinceramente. Ahora, si hay algo que te preocupa, ¡no dudes en decírmelo!</speech>
            <speech>Suelen encontrarme en mi casita junto al mar, cerca del bosque de Petalburg.</speech>
            <speech>Ven, Peeko, debemos irnos a casa.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Haw haw haw... Te enseñaré lo geniales que son mis Pokémon.</speech>
        </speeches>
        <speeches id="2">
            <speech>Podría ser... Cómo... Aunque mis Pokémon y yo somos los más fuertes...</speech>
        </speeches>
        <speeches id="3">
            <speech>Podría ser... Cómo... Aunque mis Pokémon y yo somos los más fuertes...</speech>
        </speeches>
        <speeches id="4">
            <speech>¡¿Qué te parece?! Impresionante, ¿eh? ¡Mis Pokémon y yo somos los más fuertes!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>No hace falta perder el tiempo saludando. Hazlo cuando quieras.</speech>
        </speeches>
        <speeches id="2">
            <speech>¡No perderé la próxima vez! ¡Volvamos a luchar alguna vez!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡No perderé la próxima vez! ¡Volvamos a luchar alguna vez!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Vaya partido! Estoy bastante satisfecho con el resultado.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Cerrar los ojos... Agudizar mis sentidos... Tengo que confiar en mis instintos...</speech>
        </speeches>
        <speeches id="2">
            <speech>Aunque mi juicio no estaba equivocado...</speech>
        </speeches>
        <speeches id="3">
            <speech>Aunque mi juicio no estaba equivocado...</speech>
        </speeches>
        <speeches id="4">
            <speech>Me alegro de haber confiado en mis instintos...</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Mi mediana edad me ha dado tanta seriedad como las montañas por las que camino.</speech>
        </speeches>
        <speeches id="2">
            <speech>Al menos no puedo perder en lo que respecta al IMC.</speech>
        </speeches>
        <speeches id="3">
            <speech>Al menos no puedo perder en lo que respecta al IMC.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Jajaja! Tú también ganarás si aumentas un poco tu consumo de calorías.</speech>
        </speeches>
    </conversation>
    <conversation id="16">
        <speeches id="1">
            <speech>Vine aquí a hacer el tonto. No quiero estudiar para el gran examen...</speech>
        </speeches>
        <speeches id="2">
            <speech>¡No! ¡No quiero ir a casa! ¡No quiero tener que estudiar!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡No! ¡No quiero ir a casa! ¡No quiero tener que estudiar!</speech>
        </speeches>
        <speeches id="4">
            <speech>No puedo perder ahora... ¡No quiero estudiar más!</speech>
        </speeches>
    </conversation>
    <conversation id="17">
        <speeches id="1">
            <speech>Estoy dispuesto a proteger la naturaleza por todos los medios.</speech>
        </speeches>
        <speeches id="2">
            <speech>¿Estás escuchando? Recuerda esto... Nunca subestimes el poder de la naturaleza...</speech>
        </speeches>
        <speeches id="3">
            <speech>¿Estás escuchando? Recuerda esto... Nunca subestimes el poder de la naturaleza...</speech>
        </speeches>
        <speeches id="4">
            <speech>Todo tiene su origen en la naturaleza. Todo el mundo debería venerarla.</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Nincada" shouldSleep="" speed="1" sprite="290" type="pokemon" x="37" y="15">
        <path>RIGHTx3,DOWNx2,LEFTx3,UPx2</path>
        <onCollisionSpeech gap="4">cadacada!</onCollisionSpeech>
        <speech>Nincada está intentando alimentarse de raíces, y tú estás en su camino.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Joltik" shouldSleep="" speed="1" sprite="595" type="pokemon" x="12" y="6">
        <path>RIGHTx3,LEFTx3</path>
        <onCollisionSpeech gap="4">tiktiktik</onCollisionSpeech>
        <speech>¡Oh, un joltik! Eso es algo raro de ver.</speech>
    </movingNpc>
    <npc direction="UP" hidden="false" id="3" name="Alexander" randomRotation="false" sprite="71" x="22" y="13">
        <speech>¡Jajaja!</speech>
        <speech>Ojalá pudiera leer ese cartel.</speech>
    </npc>
    <movingNpc direction="DOWN" id="4" name="Swellow" shouldSleep="" speed="1" sprite="277" type="pokemon" x="35" y="8">
        <path>RIGHTx2,LEFTx2</path>
        <onCollisionSpeech gap="4">Swellolololow</onCollisionSpeech>
        <speech>¡LOWWW!</speech>
    </movingNpc>
    <conversation id="20">
        <speeches id="1">
            <speech>¡Bax! ¡Baxca! ¡Baxcalibur!</speech>
        </speeches>
        <speeches id="2">
            <speech>¿Bax? ¡Baxca-li!</speech>
        </speeches>
        <speeches id="3">
            <speech>¿Baxca? ¡Bax, Bax!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Baxcalibur! ¡Bax, Baxca!</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="5" name="Abra" shouldSleep="" speed="1" sprite="63" type="pokemon" x="63" y="4">
        <path>RIGHTx2,LEFTx2</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="6" name="Whismur" shouldSleep="" speed="1" sprite="293" type="pokemon" x="83" y="15">
        <path>RIGHTx3,LEFTx3</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
</npcs>