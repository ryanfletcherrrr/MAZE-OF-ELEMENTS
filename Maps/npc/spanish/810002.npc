<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>El General Thanda es mi maestro...</speech>
            <speech>¡Y no irás más lejos!</speech>
        </speeches>
        <speeches id="2">
            <speech>Lo siento, mi General.</speech>
        </speeches>
        <speeches id="3">
            <speech>Siempre creeré en mi General.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Espero que esté orgulloso de mí, General!</speech>
        </speeches>
    </conversation>


    <conversation id="2">
        <speeches id="1">
            <speech>Otro día, otro desafío.</speech>
            <speech>Empiezo a acostumbrarme a esto.</speech>
        </speeches>
        <speeches id="2">
            <speech>Has conseguido ganarme.</speech>
        </speeches>
        <speeches id="3">
            <speech>Buena suerte.</speech>
        </speeches>
        <speeches id="4">
            <speech>Y otro reto completado.</speech>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>¿Has venido a desafiar al General Thanda?</speech>
            <speech>Créeme, ¡ni siquiera podrás vencerme!</speech>
        </speeches>
        <speeches id="2">
            <speech>Después de todo me ganaste...</speech>
        </speeches>
        <speeches id="3">
            <speech>Créeme, no vencerás a nuestro General.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Te lo advertí!</speech>
        </speeches>
    </conversation>

    <conversation id="4">
        <speeches id="1">
            <speech>¿Estás acostumbrado a este tiempo?</speech>
            <speech>¡A ver qué tienes!</speech>
        </speeches>
        <speeches id="2">
            <speech>¿Cómo pudo vencerme alguien tan joven como tú?</speech>
        </speeches>
        <speeches id="3">
            <speech>Sr. Thanda es impresionante, buena suerte tho.</speech>
        </speeches>
        <speeches id="4">
            <speech>No tienes nada.</speech>
        </speeches>
    </conversation>

    <conversation id="5">
        <speeches id="1">
            <speech>¿Has derrotado a los mineros anteriores?</speech>
            <speech>¡Me vengaré de ellos!</speech>
        </speeches>
        <speeches id="2">
            <speech>Necesito entrenar a mis Lapras.</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Nuestro General nos vengará!</speech>
        </speeches>
        <speeches id="4">
            <speech>Yo, mi vida y mi Lapras. No tenías ninguna oportunidad de todos modos.</speech>
        </speeches>
    </conversation>

    <conversation id="6">
        <speeches id="1">
            <speech>Soy un minero orgulloso.</speech>
            <speech>¡A la batalla!</speech>
        </speeches>
        <speeches id="2">
            <speech>Sigo siendo un Minero orgulloso, perder es mejorar.</speech>
        </speeches>
        <speeches id="3">
            <speech>Te estás acercando, pero no lo lograrás.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Orgullosamente Minero, orgullosamente Minero!</speech>
        </speeches>
    </conversation>

    <conversation id="7">
        <speeches id="1">
            <speech>¿Así que has vencido a todos mis amigos?</speech>
            <speech>Soy el último minero ante nuestro respetado General, ¡luchemos!</speech>
        </speeches>
        <speeches id="2">
            <speech>Que sepas que entiendo cómo has llegado hasta aquí.</speech>
        </speeches>
        <speeches id="3">
            <speech>Buena suerte, podrías tener la oportunidad de desarrollar una gran batalla.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Adiós!</speech>
        </speeches>
    </conversation>
</npcs>