<npcs>
    <conversation id="3">
        <speeches id="1">
            <speech>¡Hola!</speech>
            <speech>¿Le gustaría viajar al estadio?</speech>
        </speeches>
        <speeches id="2">
            <speech>De acuerdo. Por favor, hable conmigo de nuevo si desea ir al estadio.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Oooh, ¿es esa la insignia Terran? ¡No está mal, no está nada mal!</speech>
            <speech>Tu victoria sobre Arturo demuestra que te has hecho más fuerte, y eso es bueno, ¡porque yo también me he hecho mucho más fuerte!</speech>
            <speech>Y, como es costumbre, ha llegado el momento de averiguar cuál de los dos es el mejor entrenador en estos momentos.</speech>
            <speech>No hay tiempo que perder. Pongamos este espectáculo en marcha</speech>
        </speeches>
        <speeches id="2">
            <speech>Felicitaciones, supongo. Quiero decir, eres mejor que yo... por ahora. Pero todavía hay un largo camino a la
                la cima, y no estamos cerca todavía.
            </speech>
            <speech>De todos modos, uh, estaré por Lansoil Town por el momento. Tengo que resolver todo este
                'Horus' negocio. Pfft...
            </speech>
            <speech>¿Y ahora qué? Puedes viajar a los Muelles de Moonshire hacia el Volcán para el Gimnasio 6.</speech>
            <speech>Tiene que viajar hasta allí en barco, para lo que necesitará un Seafarer Pass.</speech>
            <speech>Hay un barco en Lansoil Docks (al sur de Lansoil City) que te llevará hasta allí.</speech>
            <speech>¿Nos vemos?</speech>
        </speeches>
        <speeches id="3">
            <speech>Felicitaciones, supongo. Quiero decir, eres mejor que yo... por ahora. Pero todavía hay un largo camino a la
                la cima, y no estamos cerca todavía.
            </speech>
            <speech>De todos modos, uh, estaré por Lansoil Town por el momento. Tengo que resolver todo este
                'Horus' negocio. Pfft...
            </speech>
            <speech>¿Y ahora qué? Puedes viajar a los Muelles de Moonshire hacia el Volcán para el Gimnasio 6.</speech>
            <speech>Tiene que viajar hasta allí en barco, para lo que necesitará un Seafarer Pass.</speech>
            <speech>Hay un barco en Lansoil Docks (al sur de Lansoil City) que te llevará hasta allí.</speech>
            <speech>¿Nos vemos?</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Me subestimaste?</speech>
        </speeches>
        <speeches id="5">
            <speech>Deberías darte prisa y superar el Gimnasio 5. Es todo un reto, por lo que he visto.</speech>
        </speeches>
    </conversation>
</npcs>