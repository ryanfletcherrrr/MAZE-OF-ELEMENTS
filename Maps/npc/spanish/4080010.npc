<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Soy el Sr. Stone, el presidente de la Corporación Devon.</speech>
            <speech>Acabo de enterarme de que tenemos mucho que agradecerte. Así que ayudó a mi personal no sólo una vez, ¡sino dos!</speech>
            <speech>Hay un favor que me gustaría pedirle a un entrenador de confianza como tú.</speech>
            <speech>Ahora quiero que sepan que soy un presidente en el que pueden confiar.</speech>
            <speech>Nunca sería tan mezquino como para pedir un favor a cambio de nada.</speech>
            <speech>Toma, ten este Blaze Radar.</speech>
            <speech>Quiero pedirle que entregue esta carta a un hombre llamado Steven. Deberías encontrarlo en Dewford.</speech>
            <speech>Tendrás que cruzar el mar para llegar a Dewford, por supuesto.</speech>
            <speech>Le pediré al Sr. Briney, el viejo marinero que vive en esa cabaña de la ruta 104, que me ayude con la travesía.</speech>
            <speech>Ve a buscarle y debería acceder a ayudarte.</speech>
            <speech>¡Cuento contigo, chico!</speech>
            <speech>Si alguna vez tienes dudas sobre qué hacer, ¡ven a hablar conmigo otra vez!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Entrega esa carta a Steven en Dewford Town por mí!</speech>
            <speech>Tendrás que cruzar el mar para llegar a Dewford, por supuesto.</speech>
            <speech>Le pediré al Sr. Briney, el viejo marinero que vive en esa cabaña de la ruta 104, que me ayude con la travesía.</speech>
            <speech>Ve a buscarlo, y él debería estar de acuerdo en ayudarte. ¡Cuento contigo, chico!</speech>
        </speeches>
    </conversation>
    <npc direction="UP" hidden="false" id="1" name="Kevin" randomRotation="true" sprite="10" x="25" y="8">
        <speech>Yo pienso, ¿por qué perder el tiempo decir muchas palabras, cuando pocas palabras hacen el truco?</speech>
    </npc>
    <npc direction="UP" hidden="false" id="2" name="Stanley" randomRotation="true" sprite="5" x="27" y="5">
        <speech>Sí, tengo un sueño.</speech>
        <speech>Quiero tener un faro fuera de servicio.</speech>
        <speech>Y quiero vivir en la cima. Y nadie sabe que vivo allí.</speech>
        <speech>Y hay un botón que puedo pulsar, que lanza el faro al espacio.</speech>
    </npc>
    <npc direction="UP" hidden="false" id="3" name="Kelly" randomRotation="true" sprite="31" x="15" y="17">
        <speech>¿Quién dice exactamente lo que piensa?</speech>
        <speech>¿Qué clase de juego es ése?</speech>
    </npc>
    <npc direction="UP" hidden="false" id="4" name="Andy" randomRotation="true" sprite="23" x="5" y="11">
        <speech>Ojalá hubiera una forma de saber que estás en los buenos tiempos antes de haberlos dejado realmente.</speech>
    </npc>
</npcs>