<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Haw haw haw... ¡Te enseñaré lo geniales que son mis Pokémon!</speech>
        </speeches>
        <speeches id="2">
            <speech>Podría ser... Cómo... Aunque mis Pokémon y yo somos los más fuertes...</speech>
        </speeches>
        <speeches id="3">
            <speech>Podría ser... Cómo... Aunque mis Pokémon y yo somos los más fuertes...</speech>
        </speeches>
        <speeches id="4">
            <speech>¡¿Qué te parece?! Impresionante, ¿eh? ¡Mis Pokémon y yo somos los más fuertes!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>¡Hola! Eres una montaña en mi camino, ¿verdad?</speech>
        </speeches>
        <speeches id="2">
            <speech>Grrr... Mi victoria ha desaparecido en alguna grieta oscura...</speech>
        </speeches>
        <speeches id="3">
            <speech>Grrr... Mi victoria ha desaparecido en alguna grieta oscura...</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Yahoo! ¡Yahooooo! ¡Escucha mi grito de triunfo!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Venga, ¡manos a la obra! No hay que preocuparse por los detalles.</speech>
        </speeches>
        <speeches id="2">
            <speech>Aunque intente olvidar, no puedo recordar... Eso es probablemente todo lo que necesito saber, ¿no?</speech>
        </speeches>
        <speeches id="3">
            <speech>Aunque intente olvidar, no puedo recordar... Eso es probablemente todo lo que necesito saber, ¿no?</speech>
        </speeches>
        <speeches id="4">
            <speech>Los remordimientos del pasado, las preocupaciones por el futuro, ¡olvídate de todo eso! Lo único que importa es el aquí y el ahora.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>No es que esté llamando a las montañas. Son las montañas las que me llaman a mí.</speech>
        </speeches>
        <speeches id="2">
            <speech>Oigo una voz sollozante... Las montañas lloran...</speech>
        </speeches>
        <speeches id="3">
            <speech>Oigo una voz sollozante... Las montañas lloran...</speech>
        </speeches>
        <speeches id="4">
            <speech>Un hombre que es amado por las montañas... Culpable de los cargos...</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Me gustaría luchar en lugar de mis Pokémon, si pudiera.</speech>
        </speeches>
        <speeches id="2">
            <speech>Je...</speech>
        </speeches>
        <speeches id="3">
            <speech>Je...</speech>
        </speeches>
        <speeches id="4">
            <speech>Ah, me estremezco de emoción. Seguro que me gustaría luchar...</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Las batallas Pokémon y las sesiones de estudio son muy parecidas. ¡Seamos eficientes!</speech>
        </speeches>
        <speeches id="2">
            <speech>Si holgazaneas en tus estudios, no tienes ninguna oportunidad. Las chicas capaces como yo son capaces.</speech>
        </speeches>
        <speeches id="3">
            <speech>Si holgazaneas en tus estudios, no tienes ninguna oportunidad. Las chicas capaces como yo son capaces.</speech>
        </speeches>
        <speeches id="4">
            <speech>Son demasiado ineficaces. Deben ser más rápidos y reactivos.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>¡Vete niño! Hemos capturado esta zona.</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>¡Socorro, socorro, entrenador! Por favor, quiero ver a mi papá.</speech>
            <speech>Mi papá y yo vivíamos en el Valley Windworks.</speech>
            <speech>Pero entonces llegó un montón de gente vestida de astronauta...</speech>
            <speech>Me echaron y están obligando a mi papá a hacer algo.</speech>
            <speech>¡Por favor, entrenador! ¡Extraño a mi papá!</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Whiscash" shouldSleep="" speed="1" sprite="340" type="pokemon" x="7" y="58">
        <path>DOWNx4, UPx4</path>
        <onCollisionSpeech gap="4">Whiscash</onCollisionSpeech>
        <speech>Whiscash</speech>
    </movingNpc>
    <movingNpc direction="LEFT" id="2" name="Gyarados" shouldSleep="" speed="1" sprite="130" type="pokemon" x="20" y="84">
        <path>LEFTx4, RIGHTx4</path>
        <onCollisionSpeech gap="4">Raaaawr!</onCollisionSpeech>
        <speech>¡Gyaradossssss!</speech>
    </movingNpc>
    <movingNpc direction="LEFT" id="3" name="Gastrodon" shouldSleep="" speed="1" sprite="422" type="pokemon" x="30" y="72">
        <path>LEFTx1, RIGHTx1</path>
        <onCollisionSpeech gap="4">She! Shellos!</onCollisionSpeech>
        <speech>*Shellos usa Mud-Slap!!!!*</speech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="4" name="Beautifly" shouldSleep="" speed="1" sprite="267" type="pokemon" x="25" y="64">
        <path>RIGHTx3, LEFTx3</path>
        <onCollisionSpeech gap="4">Fly! Fly! Fly!</onCollisionSpeech>
        <speech>¿No es encantadora?</speech>
    </movingNpc>
    <movingNpc direction="LEFT" id="5" name="Buizel" shouldSleep="" speed="1" sprite="418" type="pokemon" x="24" y="77">
        <path>LEFTx2, RIGHTx2</path>
        <onCollisionSpeech gap="4">Bui! Bui! Bui!</onCollisionSpeech>
        <speech>*Buizel Gruñe*</speech>
    </movingNpc>
</npcs>