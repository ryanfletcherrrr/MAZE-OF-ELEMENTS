<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>{COLOR=AMARILLO}Por favor, seleccione una planta.{ENDCOLOR}</speech>
            <speech>Los botones esperan a que los introduzcas, listos para llevarte donde necesites.</speech>
        </speeches>
        <speeches id="2">
            <speech>{COLOR=VERDE}La consola del ascensor se cierra sola con un suave clic.{ENDCOLOR}</speech>
            <speech>Tendrás que activarlo de nuevo si deseas utilizarlo.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>{COLOR=RED}La puerta está cerrada. Puede que necesite una tarjeta especial.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>{COLOR=RED}La puerta está cerrada. Puede que necesite una tarjeta especial.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>{COLOR=RED}La puerta está cerrada. Puede que necesite una tarjeta especial.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>{COLOR=RED}La puerta está cerrada. Puede que necesite una tarjeta especial.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>{COLOR=RED}La puerta está cerrada. Puede que necesite una tarjeta especial.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>{COLOR=RED}La puerta está cerrada. Puede que necesite una tarjeta especial.</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="8">
        <speeches id="1">
            <speech>¿Qué te retuvo $PLAYER_NAME? ¡Jajaja! ¡Pensé que aparecerías si te esperaba aquí! Supongo que el Team Rocket te ha retrasado.</speech>
            <speech>¡No es que me importe! ¡Te vi en Azafrán, así que decidí ver si mejorabas!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Oh-oh! Entonces, ¡estás listo para Boss Rocket!</speech>
            <speech>¡Bien, $PLAYER_NAME! ¡Voy hacia arriba y adelante!</speech>
            <speech>Revisando mi Pokédex, ¡estoy empezando a ver qué es fuerte y cómo evolucionan!</speech>
            <speech>¡Voy a la Liga Pokémon a echar a los Cuatro de Élite!</speech>
            <speech>¡Me convertiré en el entrenador más poderoso del mundo! $PLAYER_NAME, ¡buena suerte! ¡No sudes! ¡Huele!
            </speech>
        </speeches>
        <speeches id="3"/>
        <speeches id="4">
            <speech>¿Cómo puedo decirlo? ¡No eres lo suficientemente bueno para jugar con nosotros los grandes!</speech>
        </speeches>
        <speeches id="5"/>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>¡Acabo de unirme al Equipo Rocket y ya estoy aplastando intrusos! ¡Tú eres el siguiente!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Espera, espera, se suponía que eso no iba a pasar!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Espera, espera, se suponía que eso no iba a pasar!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Ja! ¡Tal vez debería conseguir un ascenso ya!</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>Las batallas no son más que ecuaciones. Y nunca resuelvo el fracaso.</speech>
        </speeches>
        <speeches id="2">
            <speech>Recalculando... Esta variable no se ha tenido en cuenta.</speech>
        </speeches>
        <speeches id="3">
            <speech>Recalculando... Esta variable no se ha tenido en cuenta.</speech>
        </speeches>
        <speeches id="4">
            <speech>Resultado esperado alcanzado. Ahora, vete.</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>Chico, llevo en el Team Rocket más tiempo del que tú has sido Entrenador. No tienes ninguna oportunidad.</speech>
        </speeches>
        <speeches id="2">
            <speech>Hmph... Tal vez me estoy oxidando ..</speech>
        </speeches>
        <speeches id="3">
            <speech>Hmph... Tal vez me estoy oxidando ..</speech>
        </speeches>
        <speeches id="4">
            <speech>La experiencia gana batallas, no la suerte. Vuelve cuando hayas aprendido algo.</speech>
        </speeches>
    </conversation>
    <conversation id="12">
        <speeches id="1">
            <speech>...Deberías haberte dado la vuelta mientras tuviste la oportunidad.</speech>
        </speeches>
        <speeches id="2">
            <speech>Tch... Lo que sea. No cambia nada.</speech>
        </speeches>
        <speeches id="3">
            <speech>Tch... Lo que sea. No cambia nada.</speech>
        </speeches>
        <speeches id="4">
            <speech>No te levantes. Estás perdiendo el tiempo.</speech>
        </speeches>
    </conversation>
    <conversation id="13">
        <speeches id="1">
            <speech>El mundo teme lo que no comprende... ¡y pronto me temerán a mí!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡No! Mi investigación... ¡todo arruinado!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡No! Mi investigación... ¡todo arruinado!</speech>
        </speeches>
        <speeches id="4">
            <speech>La ciencia avanza, ¡mientras tú te quedas atrás!</speech>
        </speeches>
    </conversation>
    <conversation id="14">
        <speeches id="1">
            <speech>¡Ay! ¡Parece que tu {COLOR=RED}fiesta está llena{ENDCOLOR} y tus {COLOR=BLUE}cajas de PC están completamente llenas{ENDCOLOR}!</speech>
            <speech>Soy la Dra. Marina, {COLOR=CYAN}investigadora principal{ENDCOLOR} de la División de Combate Acuático de Silph Co.</speech>
            <speech>Tengo una {COLOR=PURPLE}Basculegion{ENDCOLOR} muy especial que me encantaría darte: ¡es un tipo {COLOR=GRAY}Ghost/Water{ENDCOLOR} poco común con un increíble {COLOR=RED}potencial de batalla{ENDCOLOR}!</speech>
            <speech>Pero antes tendrás que hacer algo de {COLOR=VERDE}espacio en tu fiesta o PC{ENDCOLOR}.</speech>
            <speech>Por favor, vuelva cuando tenga sitio - ¡esta {COLOR=PURPLE}Basculegion{ENDCOLOR}es un {COLOR=GOLD}valioso activo corporativo{ENDCOLOR}!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡En el momento perfecto! ¡Soy la Dra. Marina, y superviso el armamento acuático avanzado aquí en Silph Co.!</speech>
            <speech>He estado desarrollando aplicaciones de combate para esta {COLOR=PURPLE}Basculegion{ENDCOLOR} - ¡un tipo {COLOR=GRIS}Fantasma/Agua{ENDCOLOR} con {COLOR=ROJO}potencial devastador{ENDCOLOR}!</speech>
            <speech>Este espécimen evolucionó a través de {COLOR=ROJO}intensos traumas de batalla{ENDCOLOR} - ¡las almas caídas crean {COLOR=PURPLE}poder sobrenatural{ENDCOLOR}!</speech>
            <speech>¡Los espíritus vengativos le otorgan {COLOR=GRIS}capacidades de fase{ENDCOLOR} y {COLOR=CYAN}control hidrocinético{ENDCOLOR} sobre escuelas enteras!</speech>
            <speech>Nuestro consejo quiere datos de campo sobre su rendimiento: ¿aceptaría esta {COLOR=GOLD}asociación empresarial{ENDCOLOR}?</speech>
        </speeches>
        <speeches id="3">
            <speech>La vacilación es comprensible - {COLOR=PURPLE}Basculegion{ENDCOLOR}lleva las {COLOR=GRAY}almas de los derrotados{ENDCOLOR}...</speech>
            <speech>Pero piense en la ventaja estratégica. ¡Esto que ofrecemos es poder corporativo!</speech>
        </speeches>
        <speeches id="4">
            <speech>{¡Excelente decisión! ¡Silph Co. le confía nuestro {COLOR=PURPLE}prototipo de unidad de combate{ENDCOLOR}!</speech>
            <speech>Esta {COLOR=PURPLE}Basculegion{ENDCOLOR} ha sido {COLOR=RED}mejorada{ENDCOLOR} mediante nuestros protocolos de formación corporativos.</speech>
            <speech>Su {COLOR=GRIS}fase espectral{ENDCOLOR} y {COLOR=CIAN}dominio acuático{ENDCOLOR} lo convierten en un {COLOR=ROJO}arma formidable{ENDCOLOR}.</speech>
            <speech>Utilícelo con prudencia - Silph Co. espera {COLOR=GOLD}impresionantes resultados{ENDCOLOR} de nuestra inversión.</speech>
            <speech>Recuerda, ¡Basculegion puede infiltrarse en cualquier defensa acuática y comandar ejércitos de marines!</speech>
            <speech>Enorgullece a nuestra corporación con tu nuevo {COLOR=PURPLE}activo táctico{ENDCOLOR}.</speech>
        </speeches>
        <speeches id="5">
            <speech>Confío en que {COLOR=PURPLE}Basculegion{ENDCOLOR} esté demostrando su {COLOR=RED}valor corporativo{ENDCOLOR} sobre el terreno.</speech>
            <speech>Ese fue nuestro único prototipo listo para el campo. ¡Silph Co. cuenta con su éxito!</speech>
        </speeches>
    </conversation>
    <conversation id="15">
        <speeches id="1">
            <speech>¿Has llegado hasta aquí? {COLOR=RED}Remarcable{ENDCOLOR}... pero también {COLOR=PURPLE}frívolo{ENDCOLOR}.</speech>
            <speech>Soy {COLOR=ROJO}Elite Grunt Lex{ENDCOLOR} - especialista en {COLOR=PURPLE}manipulación dimensional{ENDCOLOR} y {COLOR=GOLD}fuerza arrolladora{ENDCOLOR}.</speech>
            <speech>Mi táctica del {COLOR=PURPLE}Trick Room{ENDCOLOR} volverá la velocidad en tu contra: ¡el {COLOR=RED}más lento{ENDCOLOR}, el {COLOR=GOLD}más letal{ENDCOLOR}!</speech>
            <speech>Con {COLOR=PURPLE}Tera Energy{ENDCOLOR} amplificando mis barridos, ¡te aplastaré en un {COLOR=RED}solo turno devastador{ENDCOLOR}!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Imposible! Mi {COLOR=PURPLE}Trick Room{ENDCOLOR} estaba perfectamente calibrado...</speech>
            <speech>Incluso mis más poderosos... {COLOR=PURPLE}Las barredoras con tera{ENDCOLOR} no pudieron atravesarlo.</speech>
            <speech>Has interrumpido nuestra investigación dimensional, ¡pero esto está lejos de terminar!</speech>
            <speech>El {COLOR=ROJO}verdadero cerebro{ENDCOLOR} del {COLOR=ORO}Proyecto T.E.R.A.{ENDCOLOR} te espera arriba... ¡Buena suerte sobreviviendo a {COLOR=PURPLE}eso{ENDCOLOR}!</speech>
        </speeches>
        <speeches id="3">
            <speech>Mis generadores del Cuarto de Trucos están completamente fritos... Los campos dimensionales han colapsado.</speech>
            <speech>¡Has retrasado meses nuestra investigación sobre la manipulación del espacio-tiempo!</speech>
            <speech>Pero destruir nuestras {COLOR=ROJO}operaciones inferiores{ENDCOLOR}no significa nada... El {COLOR=PURPUL}jefe final{ENDCOLOR} os mostrará el {COLOR=ORO}verdadero poder{ENDCOLOR}.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Perfecto! ¡Mi estrategia dimensional funcionó a la perfección!</speech>
            <speech>Cuando {COLOR=ROJO}la fuerza bruta{ENDCOLOR}se encuentra con {COLOR=PÚRPURA}la energía Tera{ENDCOLOR}, ¡hasta los entrenadores más fuertes caen!</speech>
            <speech>¡Su derrota proporcionará datos valiosos para nuestros {COLOR=GOLD}protocolos de mejora ofensiva{ENDCOLOR}!</speech>
        </speeches>
        <speeches id="5"/>
    </conversation>
</npcs>