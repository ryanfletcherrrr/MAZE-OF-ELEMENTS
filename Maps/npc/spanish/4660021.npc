<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Pareces un poco débil. ¿Qué tal si te hago pasar por el escurridor?</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Lo lograste! La próxima vez, me harás pasar por el escurridor, ¿eh?</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Lo lograste! La próxima vez, me harás pasar por el escurridor, ¿eh?</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Ajá! ¡Aún no! ¡Aún no he terminado!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>¡Eh, chico! ¿Eres nuevo? Soy el domador de dragones del que todo el mundo habla.</speech>
        </speeches>
        <speeches id="2">
            <speech>Supongo que he empezado a ablandarme. Oye, no puedo esperar estar en la cima de mi juego para siempre.</speech>
        </speeches>
        <speeches id="3">
            <speech>Supongo que he empezado a ablandarme. Oye, no puedo esperar estar en la cima de mi juego para siempre.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Chico! ¡Recordadme! ¡Soy el trabajador del que todo el mundo habla!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>¡Lancémonos a la batalla! ¡Mis Pokémon dragón son imbatibles!</speech>
        </speeches>
        <speeches id="2">
            <speech>Necesito un salvavidas</speech>
        </speeches>
        <speeches id="3">
            <speech>Necesito un salvavidas</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Estás sobrepasado! Tal vez deberías quedarte en la piscina para niños.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>¡Te hundirás como una piedra cuando te enfrentes a mis Pokémon de agua!</speech>
        </speeches>
        <speeches id="2">
            <speech>Yo soy el que ha salido a la superficie... Has flotado hacia la victoria.</speech>
        </speeches>
        <speeches id="3">
            <speech>Yo soy el que ha salido a la superficie... Has flotado hacia la victoria.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Ahora estás en el fondo del océano!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>¡Hagamos de esto un torbellino de batalla! ¡Mis Pokémon te absorberán hasta la derrota!</speech>
        </speeches>
        <speeches id="2">
            <speech>Yo soy el que está drenado... Has escapado de mi remolino.</speech>
        </speeches>
        <speeches id="3">
            <speech>Yo soy el que está drenado... Has escapado de mi remolino.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Fuiste absorbido por mi remolino! Mejor suerte la próxima vez.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>¡Te vas a quedar hecho polvo cuando acabe esta batalla!</speech>
        </speeches>
        <speeches id="2">
            <speech>Yo soy el que está reseco... Has agotado mis posibilidades de ganar.</speech>
        </speeches>
        <speeches id="3">
            <speech>Yo soy el que está reseco... Has agotado mis posibilidades de ganar.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Estás anegado y te hundes rápido!</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>¡Te vas a quedar hecho polvo cuando acabe esta batalla!</speech>
        </speeches>
        <speeches id="2">
            <speech>Yo soy el que está reseco... Has agotado mis posibilidades de ganar.</speech>
        </speeches>
        <speeches id="3">
            <speech>Yo soy el que está reseco... Has agotado mis posibilidades de ganar.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Estás anegado y te hundes rápido!</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>¡Te vas a mojar en esta batalla! ¡Mis Pokémon te empaparán!</speech>
        </speeches>
        <speeches id="2">
            <speech>Yo soy el que está seco... Tú me has empapado de derrota.</speech>
        </speeches>
        <speeches id="3">
            <speech>Yo soy el que está seco... Tú me has empapado de derrota.</speech>
        </speeches>
        <speeches id="4">
            <speech>Estás empapado. Es hora de secarse y replantearse la estrategia.</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>Mi mediana edad me ha dado tanta seriedad como las montañas por las que camino.</speech>
        </speeches>
        <speeches id="2">
            <speech>Al menos no puedo perder en lo que respecta al IMC.</speech>
        </speeches>
        <speeches id="3">
            <speech>Al menos no puedo perder en lo que respecta al IMC.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Jajaja! Tú también ganarás si aumentas un poco tu consumo de calorías.</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>¡Hagamos olas! ¡Mis Pokémon están listos para surfear sobre ti!</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh, no.</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh, no.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Eres sólo una onda en mi océano de victoria!</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>¡Yo!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Yo!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Yo!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Yo!</speech>
        </speeches>
    </conversation>
    <conversation id="12">
        <speeches id="1">
            <speech>¡Hagamos de esto un torbellino de batalla! ¡Mis Pokémon te absorberán hasta la derrota!</speech>
        </speeches>
        <speeches id="2">
            <speech>Yo soy el que está drenado... Has escapado de mi remolino.</speech>
        </speeches>
        <speeches id="3">
            <speech>Yo soy el que está drenado... Has escapado de mi remolino.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Fuiste absorbido por mi remolino! Mejor suerte la próxima vez.</speech>
        </speeches>
    </conversation>
</npcs>