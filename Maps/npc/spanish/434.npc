<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>¡Hey! El camino hasta aquí fue bastante largo, ¿eh? Me cansé tanto que tuve que tomar un pequeño descanso.</speech>
            <speech>Tus Pokémon parecen bastante cansados. Deja que me ocupe de ellos un momento.</speech>
        </speeches>
        <speeches id="2">
            <speech>...¡Allí!</speech>
            <speech>Así está mejor.</speech>
            <speech>Voy de camino a hacerle una visita al profesor Cozmo.</speech>
            <speech>Es famoso por sus investigaciones sobre meteoritos.</speech>
            <speech>Estaba trabajando en un proyecto con mi padre, es decir, con el profesor Birch, sobre cómo los meteoritos podrían afectar a los Pokémon.</speech>
            <speech>¡Basta de perder el tiempo! Creo que no falta mucho para Fallarbor. ¡Démosle un último empujón!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Tanto mi madre como mi padre son entrenadores As. Probablemente yo también sea un As.</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Waaah! Debería tener genes superiores y ser capaz de cabalgar sobre los faldones de mis padres...</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Waaah! Debería tener genes superiores y ser capaz de cabalgar sobre los faldones de mis padres...</speech>
        </speeches>
        <speeches id="4">
            <speech>Quiero ser un verdadero As como mi madre y mi padre.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>La verdad es que no se me dan muy bien las batallas Pokémon... Sin embargo, cuando pienso en mi futuro, ¡parece que no tengo más remedio que luchar!</speech>
        </speeches>
        <speeches id="2">
            <speech>Verás... Sabía que no podía ganar. No estoy hecho para la competición.</speech>
        </speeches>
        <speeches id="3">
            <speech>Verás... Sabía que no podía ganar. No estoy hecho para la competición.</speech>
        </speeches>
        <speeches id="4">
            <speech>Odio decir esto, pero si ni siquiera puedes vencerme, el resto del camino va a ser muy duro.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Si todavía hay sueños en tu corazón, entonces sigo siendo una chica de cuento de hadas.</speech>
        </speeches>
        <speeches id="2">
            <speech>Deja de hablar de mi edad.</speech>
        </speeches>
        <speeches id="3">
            <speech>Deja de hablar de mi edad.</speech>
        </speeches>
        <speeches id="4">
            <speech>He decidido ignorar la realidad. Después de todo, soy una chica de cuento de hadas.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>¡Ah! Flores y tormentas serán vencidas!  ¡Mientras recorro el camino de una mujer batalladora!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Perdiendo, desmoronándose, llorando!  ¡Se cierra el camino de una mujer viajera!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Perdiendo, desmoronándose, llorando!  ¡Se cierra el camino de una mujer viajera!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Oh! ¡He conseguido una victoria!  ¡Adelante, por el camino de una mujer luchadora!</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Huelo a una persona de valor excepcional. ¡Ho! ¡Estoy deseando que llegue!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Ja! ¡Esa era justo la energía que estaba esperando! ¡Somos parecidos! No, somos iguales, ¡tú y yo!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Ja! ¡Esa era justo la energía que estaba esperando! ¡Somos parecidos! No, somos iguales, ¡tú y yo!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Uf! No eres lo que esperaba. Tú y tus Pokémon tenéis que madurar.</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>Estoy tan obsesionado con Pokémon que mi mujer está a punto de estallar de rabia.</speech>
        </speeches>
        <speeches id="2">
            <speech>Me enganché demasiado a las batallas Pokémon, así que nunca hacía nada en casa.</speech>
        </speeches>
        <speeches id="3">
            <speech>Me enganché demasiado a las batallas Pokémon, así que nunca hacía nada en casa.</speech>
        </speeches>
        <speeches id="4">
            <speech>No quiero volver a casa, porque mi mujer da tanto miedo como un Pokémon legendario.</speech>
        </speeches>
    </conversation>
    <npc direction="DOWN" hidden="false" id="1" name="Bjorn" randomRotation="false" sprite="48" x="50" y="9">
        <speech>Incluso los Pokémon más fuertes tienen problemas con el suelo cubierto de ceniza de la Ruta 113. ¡Ten cuidado, Entrenador!</speech>
    </npc>
    <movingNpc direction="DOWN" id="2" name="Haakon" shouldSleep="" speed="1" sprite="20" type="npc" x="91" y="8">
        <path>RIGHTx4,LEFTx4</path>
        <onCollisionSpeech gap="4"/>
        <speech>Ruta 113, ¡donde las tormentas de arena desvelan antiguos tesoros!</speech>
        <speech>Los cazadores de fósiles como yo prosperan en esta extensión desértica, ansiosos por descubrir los secretos del pasado ocultos bajo las arenas arremolinadas.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="3" name="Trapinch" shouldSleep="" speed="1" sprite="328" type="pokemon" x="84" y="26">
        <path>UPx4,LEFTx2,RIGHTx2,DOWNx4</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="4" name="Erling" randomRotation="true" sprite="10" x="6" y="24">
        <speech>La ruta 113 es un paraíso desértico. Las tormentas de arena modelan el paisaje, revelando acantilados y dunas hasta donde alcanza la vista.</speech>
        <speech>Es salvaje, indómita y absolutamente impresionante.</speech>
    </npc>
    <movingNpc direction="DOWN" id="5" name="Sandshrew" shouldSleep="" speed="1" sprite="27" type="pokemon" x="6" y="16">
        <path>RIGHTx5,LEFTx5</path>
        <onCollisionSpeech gap="4">Shrew!</onCollisionSpeech>
        <speech>¿Fierecilla?</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="6" name="Baltoy" shouldSleep="" speed="1" sprite="343" type="pokemon" x="21" y="24">
        <path>RIGHTx4,LEFTx4</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="7" name="Skarmory" speed="1" sprite="227" type="pokemon" x="61" y="19">
        <path>LEFTx22,RIGHTx22</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="8" name="Cacnea" shouldSleep="" speed="1" sprite="331" type="pokemon" x="117" y="25">
        <path>RIGHTx3,LEFTx3</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="9" name="Swellow" speed="1" sprite="277" type="pokemon" x="144" y="4">
        <path>LEFTx10,DOWNx2,RIGHTx10,UPx2</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="10" name="Whismur" shouldSleep="" speed="1" sprite="293" type="pokemon" x="133" y="29">
        <path>UPx4,DOWNx4</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="11" name="Numel" shouldSleep="" speed="1" sprite="322" type="pokemon" x="123" y="11">
        <path>RIGHTx1,UPx1,DOWNx1,LEFTx1</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="12" name="Trapinch" shouldSleep="" speed="1" sprite="328" type="pokemon" x="138" y="20">
        <path>RIGHTx5,LEFTx5</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="15" name="Torkoal" shouldSleep="" speed="1" sprite="324" type="pokemon" x="7" y="7">
        <path>DOWNx2,LEFTx2,RIGHTx2,UPx2</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="14" name="Skarmory" speed="1" sprite="227" type="pokemon" x="24" y="4">
        <path>DOWNx3,LEFTx7,UPx3,RIGHTx7</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="16" name="Swellow" speed="1" sprite="277" type="pokemon" x="34" y="26">
        <path>LEFTx8,RIGHTx8</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="17" name="Swellow" speed="1" sprite="277" type="pokemon" x="67" y="10">
        <path>UPx3,RIGHTx6,DOWNx3,LEFTx6</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
</npcs>