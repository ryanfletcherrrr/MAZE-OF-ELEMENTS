<npcs>

    <npc direction="DOWN" id="1000" name="Youngster Borris" sprite="4" x="48" y="18">
        <speech>Oyi forastero, ¿también eres miembro de la Pandilla Sutta?</speech>
        <speech>Es bueno saberlo, nos han hecho la vida imposible.</speech>
    </npc>

    <npc direction="UP" id="1001" name="Dragon Tamer Ren" sprite="173" x="47" y="46">
        <speech>Quiero ser el mejor domador de dragones del mundo.</speech>
        <speech>¿Es mucho pedir? No creo que sea muy difícil controlar a los dragones. Todo lo que necesitas es un hada para
            mantenerlos bajo control hwehehehe.
        </speech>
    </npc>

    <npc direction="DOWN" id="1002" name="Priest Samurai" sprite="167" x="51" y="34">
        <speech>¿Ves esta campana? Se dice que la campana empieza a sonar cuando la leyenda del dragón nos hace una visita.
        </speech>
        <speech>No la he oído repicar ni una sola vez, pero creo en lo que me dijeron mis antepasados. Al final esta campana debe
            existir por una razón.
        </speech>
    </npc>

    <npc direction="UP" id="1003" name="Fisherman Chu" sprite="16" x="43" y="46">
        <speech>Estoy tratando de encontrar un Dratini aquí. Me pregunto si viven aquí o emigraron a otro lugar.</speech>
        <speech>Quién sabe... Seguiré intentándolo.</speech>
    </npc>

    <npc direction="RIGHT" id="1004" name="Weird Guy Tim" sprite="48" x="27" y="22">
        <speech>¿Cómo?</speech>
        <speech>Deja de mirarme como si fuera un ladrón.</speech>
    </npc>

    <npc direction="LEFT" id="1005" name="Dragon Tamer Paul" sprite="174" x="64" y="15">
        <speech>Vengo aquí a meditar todos los días. Es un lugar muy tranquilo. Vengo aquí después de entrenar con mi
            Bagon.
        </speech>
        <speech>En mi opinión, es uno de los lugares más tranquilos de Jvaloh.</speech>
    </npc>

    <npc direction="LEFT" id="1006" name="Random Interviewer" sprite="51" x="11" y="20">
        <speech>¿Ha visitado ya la Torre del Dragón? ¿Le gustaría compartir su experiencia con nosotros?</speech>
    </npc>

    <npc direction="RIGHT" id="1007" name="Cute Girl Disha" sprite="77" x="10" y="60">
        <speech>Me encanta pasear por esta zona. Me encanta el terreno, los puentes, los lagos y los dragones.</speech>
        <speech>Una vez vi una serpiente de color verde volando por ahí pero nadie quiere creerme porque la campana no
            sonó :(
        </speech>
    </npc>

    <npc direction="RIGHT" id="1008" name="Pokemon Trainer Cena" sprite="77" x="33" y="53">
        <speech>Se ha llegado a un punto en el que "Gotta Catch'em all" no debería existir.</speech>
        <speech>Me refiero a unos 700+ pokemon. Vamos... Ya no puedo seguir el ritmo.</speech>
        <speech>He perdido toda mi motivación. Me pregunto qué te hace seguir adelante.</speech>
    </npc>

    <npc direction="DOWN" id="1008" name="Psychic Boy Laksh" sprite="72" x="54" y="47">
        <speech>Me paso el día aquí sentado esperando a que ocurra algo. No sé qué es ese algo pero no tengo
            nada mejor que hacer.
        </speech>
    </npc>

    <conversation id="1">
        <speeches id="1">
            <speech>¡Saludos! Bienvenido a Skynet Travel Technologies.</speech>
            <speech>¿Le gustaría viajar a algún sitio?</speech>
        </speeches>
        <speeches id="2">
            <speech>Es una pena. Por favor, vuelva cuando desee viajar a otro lugar.</speech>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>¡Bienvenido! Bienvenido al sistema de cajeros automáticos del Banco de Jvaloh.</speech>
            <speech>¿Desea retirar o ingresar dinero?</speech>
        </speeches>
        <speeches id="2">
            <speech>Vuelva siempre que desee realizar una transacción.</speech>
        </speeches>
        <speeches id="3">
            <speech>Esta función sólo está disponible para las personas con una "afiliación bancaria".</speech>
            <speech>Los no socios pueden utilizar la sucursal principal de nuestro banco en la ciudad de Bijli.</speech>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>Hey $PLAYER_NAME, Charil no está en el gimnasio en este momento.</speech>
            <speech>Uno de sus Pokémon está muy enfermo y se ha ido a Pueblo Jannat para recibir tratamiento.</speech>
            <speech>¿Tal vez puedas ir a ver cómo está?</speech>
        </speeches>
    </conversation>

    <conversation id="4">
        <speeches id="1">
            <speech>¿Eres un aspirante? ¿Cómo te llamas?</speech>
            <speech>Hey $PLAYER_NAME, Charil no está en el gimnasio en este momento.</speech>
            <speech>Ella se fue a Jannat Village en la prisa, ninguno de nosotros sabe cuándo va a volver.</speech>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="5">
        <speeches id="1">
            <speech>Por fin has conseguido tu octava insignia.</speech>
            <speech>Tu victoria sobre $GYM8_LEADER demuestra que te has hecho más fuerte, así que eso es bueno, porque yo también me he hecho mucho más fuerte.
                ¡mucho más fuerte!
            </speech>
            <speech>Y, como es costumbre, ha llegado el momento de averiguar cuál de los dos es el mejor entrenador en estos momentos.</speech>
            <speech>¡No hay tiempo que perder! Pongamos este espectáculo en marcha.</speech>
        </speeches>
        <speeches id="2">
            <speech>Wow. Nunca dejas de sorprenderme.</speech>
            <speech>Todo este tiempo he estado entrenando tan duro para ser más fuerte que
                que nunca, pero sigo sin tener ninguna oportunidad frente a ti.
            </speech>
            <speech>Eres increíble $PLAYER_NAME. Tengo suerte de tenerte como rival.</speech>
            <speech>Antes de abandonar este lugar, dirígete hacia la Torre del Dragón y la Estatua de Rayquaza.</speech>
            <speech>Las leyendas dicen que las líneas rojas en el cuerpo de Rayquaza pertenecen a la sangre de la esposa de Osiris corriendo por su
                cuerpo.
            </speech>
            <speech>Vamos a comprobarlo.</speech>
        </speeches>
        <speeches id="3">
            <speech>Wow. Nunca dejas de sorprenderme.</speech>
            <speech>Todo este tiempo he estado entrenando tan duro para ser más fuerte que
                que nunca, pero sigo sin tener ninguna oportunidad frente a ti.
            </speech>
            <speech>Eres increíble $PLAYER_NAME. Tengo suerte de tenerte como rival.</speech>
            <speech>Antes de abandonar este lugar, dirígete hacia la Torre del Dragón y la Estatua de Rayquaza.</speech>
            <speech>Las leyendas dicen que las líneas rojas en el cuerpo de Rayquaza pertenecen a la sangre de su esposa corriendo por su
                cuerpo.
            </speech>
            <speech>Vamos a comprobarlo.</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Fue tu victoria sobre $GYM8_LEADER una casualidad o me he hecho demasiado fuerte hasta el punto de que ya no eres mi rival?
                mi rival.
            </speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Hey $PLAYER_NAME, tengo más información sobre Osiris.</speech>
            <speech>Osiris era un sacerdote pacífico que estaba obsesionado con su esposa.</speech>
            <speech>Su mujer era una arrogante dama que consiguió viajar a Hoenn y capturar a un Rayquaza.</speech>
            <speech>La Rayquaza fue torturada por ella. Ella solía pensar que estaba cuidando bien de la Rayquaza, pero ella
                no era así.
            </speech>
            <speech>Un día Rayquaza se cansó demasiado de ser acosado por ella y la consumió por completo.</speech>
            <speech>Después hubo una explosión y nunca más se volvió a ver a Rayqyuaza.</speech>
            <speech>Nadie sabe qué le pasó a Rayquaza, pero la leyenda dice que fue Rayquaza quien explotó debido al
                egoísmo y arrogancia de su dueño.
            </speech>
            <speech>Osiris se volvió loco desde ese día. Al principio, intentó invocar a Rayquaza construyendo su estatua.
            </speech>
            <speech>Luego intentó cazar a Rayquaza en la región de Hoenn, pero tampoco funcionó.</speech>
            <speech>Finalmente decidió invocar a Ho-Oh y utilizar sus poderes para devolver la vida a su esposa.</speech>
            <speech>Creo que esta es la razón por la que ha capturado a los perros legendarios.</speech>
            <speech>Los lugareños dicen que invocar a Ho-Oh para que traiga de vuelta a su esposa podría traer también de vuelta a Rayqyaza.</speech>
            <speech>Y ese Rayquaza no estará contento... Los lugareños piensan que tomará su mega forma y quemará
                Jvaloh entero.
            </speech>
            <speech>Tenemos que detenerlo antes de que sea demasiado tarde.</speech>
            <speech>Oh otra cosa. Gané mi octava insignia de gimnasio hace unos días. Me he vuelto demasiado fuerte ahora.</speech>
            <speech>Quiero ponerme a prueba contra ti, pero antes quiero que ganes también la 8ª insignia.</speech>
            <speech>Te esperaré en el sur de Goldburn City para luchar. Hasta luego.</speech>
            <speech>¡¡¡FERALIGATR!!!</speech>
        </speeches>
    </conversation>
</npcs>