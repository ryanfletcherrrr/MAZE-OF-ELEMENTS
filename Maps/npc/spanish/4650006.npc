<npcs>
    <npc direction="DOWN" hidden="false" id="1" name="Sandrine" randomRotation="true" sprite="28" x="7" y="10">
        <speech>Vaya, ¡mira esto! De pie sobre el suelo de cristal, es como asomarse a un mundo submarino oculto.</speech>
        <speech>Es como un cuadro vivo, en constante cambio y evolución.</speech>
        <speech>Viviendo en Pacifidlog Town, nunca se sabe qué lugares increíbles se pueden encontrar bajo los pies.</speech>
    </npc>
    <movingNpc direction="DOWN" id="2" name="Smeargle" shouldSleep="" speed="1" sprite="235" type="pokemon" x="3" y="6">
        <path>UPx2,DOWNx2</path>
        <onCollisionSpeech gap="4">Smeargle!</onCollisionSpeech>
        <speech>¡Smeargle!</speech>
    </movingNpc>

    <conversation id="1">
        <speeches id="1">
            <speech>Tu ayuda ha sido inestimable, $PLAYER_NAME.</speech>
            <speech>Sin embargo, antes de seguir adelante, necesito algo de tiempo para evaluar los próximos pasos para la restauración de Pacifidilog.</speech>
            <speech>Por favor, permítanme un momento para reunir información y prepararme para nuestra próxima empresa.</speech>
            <speech>Vuelve en $DURACIÓN, y tendré más tareas que contribuirán al renacimiento de nuestra ciudad.</speech>
            <speech>Agradezco su paciencia y comprensión. Su apoyo constante es un faro de esperanza para todos nosotros.</speech>
            <speech>Hasta pronto, $PLAYER_NAME.</speech>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="2">
            <speech>Saludos, $PLAYER_NAME. Soy el alcalde de Pacifidlog Town, una comunidad que se enorgullece de su armonía con el mar.</speech>
            <speech>Por desgracia, nos hemos encontrado con problemas que amenazan nuestra serena existencia.</speech>
            <speech>He oído hablar de tus hazañas y creo que eres quien puede ayudarnos.</speech>
            <speech>Nuestra primera preocupación se refiere a los miembros de la tripulación que desaparecieron durante una exploración submarina.</speech>
            <speech>Son vitales para comprender y resolver nuestros apuros actuales.</speech>
            <speech>¿Nos ayudarás en este momento de necesidad encontrando y devolviendo sanos y salvos a nuestros exploradores perdidos?</speech>
        </speeches>
        <speeches id="3">
            <speech>Ya veo. Es descorazonador, pero respeto tu decisión.</speech>
            <speech>Las puertas de Pacifidlog Town siguen abiertas por si decide ayudarnos en el futuro.</speech>
        </speeches>
        <speeches id="4">
            <speech>Su acuerdo para ayudar llena mi corazón de esperanza.</speech>
            <speech>Por favor, embárquese en esta misión para localizar a nuestros tripulantes desaparecidos entre las ruinas bajo las olas.</speech>
            <speech>Su regreso seguro es crucial para el bienestar de nuestra ciudad.</speech>
            <speech>Confío en sus habilidades y espero buenas noticias. Gracias, $PLAYER_NAME.</speech>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>¿Has tenido suerte buscando a los miembros perdidos de nuestra tripulación, $PLAYER_NAME? Su seguridad es crucial para nosotros.</speech>
        </speeches>

        <speeches id="2">
            <speech>Ah, $PLAYER_NAME, ¡los has encontrado! La ciudad de Pacifidilog está en deuda contigo. Su regreso nos trae un inmenso alivio.</speech>
            <speech>Hay más tareas que necesitan atención para el bienestar de nuestra ciudad. ¿Considerarías continuar con tu ayuda?</speech>
        </speeches>

        <speeches id="3">
            <speech>Es descorazonador oírlo, pero lo comprendo. Las luchas de Pacifidilog son muchas, y cualquier ayuda es un faro de esperanza.</speech>
            <speech>Le agradecemos la ayuda que ya nos ha prestado. Si alguna vez desea prestarnos más ayuda, le agradeceríamos mucho que lo hiciera.</speech>
        </speeches>

        <speeches id="4">
            <speech>Tu dedicación a nuestra causa me calienta el corazón, $PLAYER_NAME. Déjame reflexionar sobre cuál debe ser el siguiente paso para el renacimiento de nuestra ciudad.</speech>
            <speech>Dame un momento para reunir más información. Seguro que encontraremos la forma de devolver a Pacifidilog su antiguo esplendor, con tu ayuda.</speech>
            <speech>Como muestra de mi gratitud por aceptar mi petición, por favor acepta esto: 2500F y 1 Piedra de Agua.</speech>
        </speeches>
    </conversation>

    <conversation id="4">
        <speeches id="2">
            <speech>Gracias por tu ayuda con la tripulación, $PLAYER_NAME. Tus esfuerzos han aliviado a muchas familias.</speech>
            <speech>Sin embargo, tenemos otra tarea por delante. El mar también se ha cobrado varios cargamentos esenciales para la supervivencia de nuestra ciudad.</speech>
            <speech>Estos suministros incluyen alimentos, equipos médicos y otros recursos críticos perdidos en las profundidades.</speech>
            <speech>¿Podemos contar con usted una vez más para recuperar estos cargamentos perdidos? Su ayuda significaría mucho para nosotros.</speech>
        </speeches>
        <speeches id="3">
            <speech>Comprendo sus dudas. Las necesidades de nuestra ciudad son grandes, pero también lo son las exigencias de su tiempo.</speech>
            <speech>Si encuentras un momento para ayudarnos más, por favor vuelve. Pacifidlog Town siempre agradecerá su ayuda.</speech>
        </speeches>
        <speeches id="4">
            <speech>Su voluntad de seguir ayudándonos aporta luz a estos tiempos difíciles.</speech>
            <speech>Los cargamentos perdidos están esparcidos por varias naves submarinas. Cada uno de ellos es crucial para la recuperación de Pacifidlog.</speech>
            <speech>El tiempo es esencial, pero confío en tus habilidades. Buen viaje, $PLAYER_NAME, y rápido regreso.</speech>
            <speech>Cuando tenga éxito, por favor, vuelva a mí. Estaré esperando ansiosamente su regreso con los suministros recuperados.</speech>
        </speeches>
    </conversation>

    <conversation id="5">
        <speeches id="1">
            <speech>¿Cómo va la búsqueda de nuestra carga perdida, $PLAYER_NAME? Esos suministros son vitales para nuestra supervivencia.</speech>
        </speeches>

        <speeches id="2">
            <speech>¡Maravilloso, $PLAYER_NAME! Los cargamentos perdidos han vuelto sanos y salvos. Pacifidilog te debe mucho por esto.</speech>
            <speech>¿Puedo quitarte los cargamentos de las manos y buscarte otra tarea?</speech>
        </speeches>

        <speeches id="3">
            <speech>Oh, ¿rechazando nuestra petición? ¿Pero qué harás con los cargamentos entonces?</speech>
            <speech>Esperábamos que pudieran ayudar a la recuperación de nuestra ciudad. Piénsenlo; les agradeceríamos mucho que siguieran apoyándonos.</speech>
        </speeches>

        <speeches id="4">
            <speech>Una vez más, tus esfuerzos iluminan nuestro camino, $PLAYER_NAME. Tu ayuda está dando forma al futuro de Pacifidilog.</speech>
            <speech>Necesito un momento para identificar nuestros próximos pasos. Ten por seguro que estamos más cerca de la revitalización gracias a ti.</speech>
            <speech>En agradecimiento a tu continuo apoyo, aquí tienes una recompensa por tu duro trabajo: 5000F y una Pieza Estrella.</speech>
        </speeches>
    </conversation>

    <conversation id="6">
        <speeches id="2">
            <speech>Hay un asunto que pesa mucho en mi corazón, $PLAYER_NAME. Es un poco personal, pero debo compartirlo.</speech>
            <speech>El marido de mi hija, un alma valiente que amaba el mar, ha desaparecido sin dejar rastro. Nos quedamos con preguntas y sin respuestas.</speech>
            <speech>Dudo en pedirte más, pero ¿podrías investigar estas desapariciones? Tal vez empezar con los barcos hundidos.</speech>
            <speech>Busca cualquier pista, pero sobre todo un "Cuaderno" que podría haber sido suyo. Podría contener respuestas... o incluso conducir a un reencuentro.</speech>
            <speech>¿Puedes encargarte de esta tarea por mí y por mi hija...?</speech>
        </speeches>
        <speeches id="3">
            <speech>Lo entiendo, es un asunto muy deprimente. No obstante, agradecemos su tiempo.</speech>
        </speeches>
        <speeches id="4">
            <speech>Su disposición a sumergirse en lo desconocido por nuestro bien es una gentileza que nunca olvidaremos.</speech>
            <speech>Busca en las profundidades y en los restos de las naves. Ese cuaderno podría cambiarlo todo.</speech>
            <speech>Esperaremos su regreso con gran expectación. Que los mares sean amables y tu viaje fructífero.</speech>
        </speeches>
    </conversation>

    <conversation id="7">
        <speeches id="1">
            <speech>Un asunto personal pesa sobre mí, $PLAYER_NAME. Se trata del marido de mi hija, perdido en el mar.</speech>
            <speech>Nos quedamos con preguntas, sin respuestas. La incertidumbre es dura para mi hija, para todos nosotros.</speech>
            <speech>He pedido mucho, pero busco su ayuda de nuevo. ¿Podrías investigar los barcos hundidos en busca de pistas?</speech>
            <speech>Busca un 'Cuaderno' que podría ser suyo. Es una posibilidad remota, pero podría ofrecer un cierre o esperanza.</speech>
        </speeches>
        <speeches id="2">
            <speech>Comprendiendo tu decisión de declinar, $PLAYER_NAME. Es una tarea pesada, que no se pide a la ligera.</speech>
            <speech>Si lo reconsideras, significaría mucho. Un rayo de esperanza para una familia en duelo.</speech>
        </speeches>
        <speeches id="3">
            <speech>Su voluntad de ayudar en este asunto nos llena de esperanza. Gracias, de verdad.</speech>
            <speech>Tenga cuidado en su búsqueda. El cuaderno, si se encuentra, podría ser inestimable. Esperamos ansiosamente.</speech>
        </speeches>
        <speeches id="4">
            <speech>A su regreso, $PLAYER_NAME, con o sin hallazgos, venga a verme inmediatamente.</speech>
            <speech>Por tus esfuerzos, acepta 5000F y un fragmento de cometa. Que te ayuden en tu viaje.</speech>
        </speeches>
        <speeches id="5">
            <speech>Gracias por todo lo que has hecho por Pacifidilog, $PLAYER_NAME. Tus acciones llegaron a muchos corazones.</speech>
            <speech>Nos has traído esperanza y has demostrado verdadero espíritu de comunidad. Siempre serás un amigo muy querido aquí.</speech>
            <speech>Que tu viaje sea tan amable como lo fuiste con nosotros. Pacifidilog te recordará con cariño.</speech>
            <speech>Adiós, y que los mares te guíen de vuelta a nosotros, si decides regresar.</speech>
        </speeches>
    </conversation>
</npcs>