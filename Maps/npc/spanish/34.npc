<npcs>
    <npc direction="RIGHT" id="1000" name="Aroma Lady Jenna" sprite="27" x="20" y="37">
        <speech>Grayroot Town es una ciudad agradable y tranquila, a pesar de estar tan cerca de Glassmoor City.</speech>
        <speech>Aquí encontrará gente amable, así que no tiene por qué preocuparse. Siempre intentamos mantener una actitud
            actitud fuertemente centrada en la comunidad.
        </speech>
        <speech>Espero que disfrutes aquí, y tómate un tiempo para oler el delicioso aroma de esos narcisos,
            estoy segura de que le gustarán.
        </speech>
    </npc>
    <npc direction="RIGHT" id="1001" name="Artist Obi" sprite="28" x="43" y="36">
        <speech>El truco está en entender el objeto de tu arte, su superficie y su volumen. Una vez que lo hayas hecho,
            recrearlo será mucho más sencillo.
        </speech>
        <speech>¿Notas cómo esas ramas individuales tienen su propia forma y textura? Un artista nunca debe intentar
            suprimir esa belleza natural homogeneizándola.
        </speech>
        <speech>Hacerlo significaría simplemente rechazar la belleza de la naturaleza, lo que sería una pena</speech>
    </npc>
    <npc direction="RIGHT" id="1002" name="Artist Hikai" sprite="29" x="43" y="37">
        <speech>Haré un hermoso paisaje, sólo mira.</speech>
        <speech>Va a tener mucho color y mucho realismo, a diferencia de los modernistas, que tienden a favorecer el arte abstracto en detrimento de las obras realistas.
            el arte abstracto sobre las piezas realistas.
        </speech>
        <speech>Ser capaz de reproducir exactamente lo que perciben los sentidos, ¿no es una sensación maravillosa?</speech>
    </npc>
    <conversation id="1">
        <speeches id="1">
            <speech>¡Saludos! Bienvenido a Skynet Travel Technologies.</speech>
            <speech>¿Le gustaría viajar a algún sitio?</speech>
        </speeches>
        <speeches id="2">
            <speech>Es una pena. Por favor, vuelva cuando desee viajar a otro lugar.</speech>
        </speeches>
    </conversation>
    <npc direction="DOWN" id="1003" name="Artist Diallo" sprite="28" x="14" y="29">
        <speech>Este lugar es precioso.</speech>
        <speech>La gente, los Pokémon y la naturaleza están en perfecta armonía.</speech>
        <speech>Me pregunto si habrá algún otro lugar como éste en la Tierra.</speech>
    </npc>
    <npc direction="DOWN" id="1004" name="Artist Leonardo" sprite="28" x="14" y="29">
        <speech>La vida, la fortuna y la belleza están muy influenciadas por el enfoque que cada uno tenga de la vida.</speech>
        <speech>Los pesimistas considerarían que este mundo no tiene más que decepción y tristeza, como un vaso medio vacío.
            un vaso medio vacío.
        </speech>
        <speech>Por otro lado, un optimista vería el mérito de su existencia y reconocería las alegrías y la belleza de la vida.
            belleza de la vida.
        </speech>
        <speech>¿Y usted? ¿Te has preguntado alguna vez qué tipo de persona eres?</speech>
    </npc>
    <conversation id="2">
        <speeches id="1">
            <speech>¿Quieres un regalo, joven entrenador? Tengo unas cuantas Grandes Bolas que ya no me sirven.</speech>
        </speeches>
        <speeches id="2">
            <speech>Y ya está. No te preocupes.</speech>
        </speeches>
        <speeches id="3">
            <speech>Bueno, toma estos, entonces. Creo que serán más útiles para ti que para mí.</speech>
        </speeches>
        <speeches id="4">
            <speech>Todavía tengo un gran lote en mi casa. Por lo tanto, si usted puede regresar en 2 horas, entonces puedo darle un poco de
                más.
            </speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>

    <conversation id="4">
        <speeches id="1">
            <speech>¿Es la cuarta insignia que veo ahí? Enhorabuena, supongo.</speech>
            <speech>Aurelia me ha dicho que estás listo para enfrentarte a ellos tú solo en la vieja central eléctrica...</speech>
            <speech>¿Sabes cómo llegar a la vieja central eléctrica tonto?</speech>
            <speech>Ven a la aldea de Patthar y te lo enseñaré.</speech>
            <speech>¡Adiós!</speech>
        </speeches>
    </conversation>
</npcs>