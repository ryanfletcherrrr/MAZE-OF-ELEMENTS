<npcs>
    <conversation id="13">
        <speeches id="1">
            <speech>¡Un enorme {COLOR=YELLOW}Snorlax{ENDCOLOR} está desparramado por el puente, bloqueando el paso!</speech>
            <speech>Su pecho sube y baja con cada respiración lenta y rumorosa...</speech>
            <speech>No importa lo que hagas, permanece completamente imperturbable.</speech>
            <speech>Debe haber una manera de despertarlo...</speech>
        </speeches>
    </conversation>
    <conversation id="1">
        <speeches id="1">
            <speech>¡Un enorme {COLOR=YELLOW}Snorlax{ENDCOLOR} está desparramado por el puente, bloqueando el paso!</speech>
            <speech>Su pecho sube y baja con cada respiración lenta y rumorosa...</speech>
            <speech>No importa lo que hagas, permanece completamente imperturbable.</speech>
            <speech>Debe haber una manera de despertarlo...</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>¡Un enorme {COLOR=YELLOW}Snorlax{ENDCOLOR} está desparramado por el puente, bloqueando el paso!</speech>
            <speech>Sus ronquidos resuenan en el agua, ahogando el sonido de las olas.</speech>
            <speech>No importa lo que hagas, permanece completamente imperturbable.</speech>
            <speech>Debe haber una manera de despertarlo...</speech>
        </speeches>
        <speeches id="2">
            <speech>El {COLOR=YELLOW}Snorlax{ENDCOLOR}se mueve ligeramente cuando te acercas, moviendo las orejas.</speech>
            <speech>¿Quieres tocar la {COLOR=CYAN}Flauta Poké{ENDCOLOR} para intentar despertarlo?</speech>
        </speeches>
        <speeches id="3">
            <speech>Dudas y decides no tocar la {COLOR=CYAN}Flauta Poké{ENDCOLOR}.</speech>
            <speech>El {COLOR=YELLOW}Snorlax{ENDCOLOR} suelta un profundo suspiro y se da la vuelta ligeramente, aún bloqueando el camino.</speech>
        </speeches>
        <speeches id="4">
            <speech>Respiras hondo y empiezas a tocar la {COLOR=CYAN}Flauta Poké{ENDCOLOR}...</speech>
            <speech>Una suave pero poderosa melodía llena el aire, llegando a los oídos del gigante dormido.</speech>
            <speech>El {COLOR=YELLOW}Snorlax{ENDCOLOR}se agita y sus ojos se abren.</speech>
            <speech>Suelta un largo bostezo, se estira... ¡y de repente parece {COLOR=RED}extremadamente irritado{ENDCOLOR}!</speech>
            <speech>Con un rugido, ataca con {COLOR=RED}rabia malhumorada{ENDCOLOR} ¡y luego huye!</speech>
        </speeches>
        <completion id="5">
            <!-- This can remain empty as instructed -->
        </completion>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Los días de lluvia son los mejores. Todo parece tan fresco y vivo, ¡como mis Pokémon en combate!</speech>
        </speeches>
        <speeches id="2">
            <speech>Aww Supongo que mi sol se nubló un poco.</speech>
        </speeches>
        <speeches id="3">
            <speech>Aww Supongo que mi sol se nubló un poco.</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Lo veis? Un poco de lluvia nunca hace daño a nadie, ¡excepto quizá a tu estrategia de batalla!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Paciencia y habilidad es lo que hace a un gran pescador y a un gran entrenador. ¡Veamos si tienes ambas!</speech>
        </speeches>
        <speeches id="2">
            <speech>Supongo que tienes más habilidad de la que esperaba. ¡Pero apuesto a que puedo pescar un pez más grande que tú!</speech>
        </speeches>
        <speeches id="3">
            <speech>Supongo que tienes más habilidad de la que esperaba. ¡Pero apuesto a que puedo pescar un pez más grande que tú!</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Lo veis? Una batalla es como pescar, ¡tienes que saber cuándo atacar!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>¿Luchar? Claro, ¿por qué no? No es como si los peces picaran ahora mismo, de todos modos.</speech>
        </speeches>
        <speeches id="2">
            <speech>Bueno, eso seguro que no fue a las mil maravillas. Tal vez debería dedicarme a pescar.</speech>
        </speeches>
        <speeches id="3">
            <speech>Bueno, eso seguro que no fue a las mil maravillas. Tal vez debería dedicarme a pescar.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡No está mal, chico! ¡Pero creo que me quedaré con mi caña de pescar que nunca pierde!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Velocidad, resistencia y estrategia como en un triatlón de verdad, ¡esta batalla pondrá a prueba las tres!</speech>
        </speeches>
        <speeches id="2">
            <speech>Huff... ¡Quizás debería haber calentado más antes de esta batalla!</speech>
        </speeches>
        <speeches id="3">
            <speech>Huff... ¡Quizás debería haber calentado más antes de esta batalla!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡La victoria! Igual que cruzar la línea de meta, ¡nada sienta mejor!</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Aire fresco, buena comida y una batalla Pokémon, ¿qué podría hacer mejor un picnic?</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Oh no, mis sandwiches se están aplastando! ¡Estaba demasiado distraído!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Oh no, mis sandwiches se están aplastando! ¡Estaba demasiado distraído!</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Ganar y una buena comida? Eso sí que es un picnic perfecto.</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>La gente se ríe de Magikarp, ¡pero espera a que evolucione! ¿Quieres ver por qué lo llaman poderoso?</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Ack! Puede que Magikarp no esté listo aún, ¡pero pronto! ¡PRONTO!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Ack! Puede que Magikarp no esté listo aún, ¡pero pronto! ¡PRONTO!</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Lo veis? Magikarp no es débil, sólo está esperando su momento.</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>La música y las batallas son cuestión de ritmo. Veamos si puedes seguir mi ritmo.</speech>
        </speeches>
        <speeches id="2">
            <speech>Supongo que me equivoqué de nota. Tengo que practicar mis acordes y mis habilidades de batalla.</speech>
        </speeches>
        <speeches id="3">
            <speech>Supongo que me equivoqué de nota. Tengo que practicar mis acordes y mis habilidades de batalla.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Eso fue eléctrico! ¡Tienes que sentir la música si quieres ganar!</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>Mis Pokémon surcan los cielos, libres como el viento. ¿Puedes cortarles las alas?</speech>
        </speeches>
        <speeches id="2">
            <speech>Parece que mi rebaño necesita un poco más de entrenamiento...</speech>
        </speeches>
        <speeches id="3">
            <speech>Parece que mi rebaño necesita un poco más de entrenamiento...</speech>
        </speeches>
        <speeches id="4">
            <speech>No se puede atrapar el viento y no se puede vencer al cielo.</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>Un buen pescador sabe cuándo esperar y cuándo recoger. A ver si tú sabes cuándo atacar.</speech>
        </speeches>
        <speeches id="2">
            <speech>Recogido y devuelto Supongo que lo intentaré de nuevo mañana.</speech>
        </speeches>
        <speeches id="3">
            <speech>Recogido y devuelto Supongo que lo intentaré de nuevo mañana.</speech>
        </speeches>
        <speeches id="4">
            <speech>La paciencia siempre da sus frutos. Igual que en la pesca, ¡igual que en la batalla!</speech>
        </speeches>
    </conversation>
    <conversation id="12">
        <speeches id="1">
            <speech>No solo soy mono, ¿sabes? ¡Mis Pokémon son súper duros!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Hmph! Tal vez ser lindo no es suficiente para ganar...</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Hmph! Tal vez ser lindo no es suficiente para ganar...</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Lo veis? Duro y adorable, ¡esa es la combinación perfecta!</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Ernie" speed="1" sprite="16" type="npc" x="17" y="20">
        <path>DOWNx3,UPx3</path>
        <onCollisionSpeech gap="4"/>
        <speech>¡Estoy tan emocionada de empezar a pescar aquí!</speech>
        <speech>Hay montones de Pokémon esperando a ser capturados.</speech>
        <speech>¡Ahora sólo estoy esperando a mi mejor amigo, Bert!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Fearow" speed="1" sprite="22" type="pokemon" x="39" y="40">
        <path>DOWNx7,UPx7</path>
        <onCollisionSpeech gap="4">Feaaar!!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="3" name="Cramorant" speed="1" sprite="1130" type="pokemon" x="12" y="45">
        <path>RIGHTx3,UPx4,DOWNx4,LEFTx3</path>
        <onCollisionSpeech gap="4">CRAAHH-rak!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="UP" id="4" name="Luvdisc" speed="1" sprite="370" type="pokemon" x="35" y="22">
        <path>UPx5,LEFTx5,RIGHTx5,DOWNx5</path>
        <onCollisionSpeech gap="4">Diiiiisc!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="DOWN" id="5" name="Skwovet" speed="1" sprite="1097" type="pokemon" x="33" y="83">
        <path>DOWNx3,RIGHTx3,LEFTx3,UPx3</path>
        <onCollisionSpeech gap="4">Squee-squee-squeek!</onCollisionSpeech>
    </movingNpc>
    <npc direction="UP" hidden="false" id="6" name="Henley" randomRotation="false" sprite="25" x="7" y="84">
        <speech>Hay bastantes Pokémon bonitos en esta zona.</speech>
        <speech>¡Voy a atrapar a todos los bichos!</speech>
    </npc>
    <movingNpc direction="RIGHT" id="7" name="Fearow" speed="1" sprite="22" type="pokemon" x="10" y="58">
        <path>RIGHTx5,LEFTx5</path>
        <onCollisionSpeech gap="4">Feaaar!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="LEFT" id="8" name="Daisy" speed="1" sprite="28" type="npc" x="16" y="65">
        <path>LEFTx4,RIGHTx4</path>
        <onCollisionSpeech gap="4"/>
        <speech>¿Se siente perdido?</speech>
        <speech>Si sigues bajando, llegarás a Ciudad Fucsia.</speech>
        <speech>Toma el atajo a la izquierda en el cruce y acabarás en Vermilion City.</speech>
        <speech>Si subes hasta arriba, te encontrarás en el Pueblo de la Lavanda.</speech>
    </movingNpc>
    <movingNpc direction="LEFT" id="9" name="Basculin" speed="1" sprite="550" type="pokemon" x="29" y="96">
        <path>LEFTx3,UPx5,LEFTx2,RIGHTx2,DOWNx5,RIGHTx3</path>
        <onCollisionSpeech gap="4">SKRRAK!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="DOWN" id="10" name="Marill" speed="1" sprite="183" type="pokemon" x="30" y="57">
        <path>DOWNx12,RIGHTx8,UPx12,LEFTx8</path>
        <onCollisionSpeech gap="4">Mariiiii!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="UP" id="11" name="Ben" speed="1" sprite="21" type="npc" x="31" y="48">
        <path>UPx5,RIGHTx1,DOWNx5,LEFTx1</path>
        <onCollisionSpeech gap="4"/>
        <speech>Todos están ocupados preocupándose de pescar o de llegar a su próxima parada.</speech>
        <speech>¿Yo? ¡Sólo estoy concentrado en practicar la natación!</speech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="13" name="Pinsir" speed="1" sprite="127" type="pokemon" x="0" y="87">
        <path>RIGHTx2,UPx3,DOWNx3,LEFTx2</path>
        <onCollisionSpeech gap="4">Pinsiiiiir!</onCollisionSpeech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="14" name="Summer" randomRotation="true" sprite="60" x="30" y="92">
        <speech>No deje de visitar de vez en cuando los lugares que ya ha explorado.</speech>
        <speech>Nunca se sabe. Puede que se haya abierto algo nuevo, ¡y tú podrías ser el primero en descubrirlo!</speech>
    </npc>
</npcs>