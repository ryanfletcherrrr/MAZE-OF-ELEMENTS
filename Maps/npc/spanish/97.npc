<npcs>
    <npc direction="DOWN" id="1000" name="Swimmer Kartik" sprite="93" x="46" y="46">
        <speech>Estoy esperando a que llegue mi amigo para ir a nadar hacia las cataratas Barfi.</speech>
    </npc>
    <npc direction="DOWN" id="1001" name="Hiker Swami" sprite="48" x="54" y="30">
        <speech>Estoy recogiendo trozos de madera para llevar para mi viaje de senderismo. No me moleste por favor buen señor.</speech>
    </npc>
    <npc direction="RIGHT" id="1002" name="Old Man Kooga" randomRotation="true" sprite="39" x="48" y="7">
        <speech>Roca gigante .. Quiero romperla en pedazos con mi jutsu. Aléjate o serás destruido.</speech>
        <speech>¿Qué son estas cosas? Las veo por todo Jvaloh pero nunca entiendo qué son en realidad.</speech>
    </npc>
    <npc direction="RIGHT" id="1002" name="Old Man Kooga" randomRotation="true" sprite="39" x="40" y="8">
        <speech>Roca gigante .. Quiero romperla en pedazos con mi jutsu. Aléjate o serás destruido.</speech>
        <speech>¿Qué son estas cosas? Las veo por todo Jvaloh pero nunca entiendo qué son en realidad.</speech>
    </npc>
    <npc direction="DOWN" id="1003" name="Rich Boy Mansu" randomRotation="true" sprite="75" x="22" y="18">
        <speech>Estoy arrancando estas flores para mi cita. ¿Tienes algún consejo?</speech>
        <speech>Quiero decir que parece que lleváis saliendo mucho tiempo.</speech>
        <speech>Estaba bromeando, vete.</speech>
    </npc>
    <conversation id="1">
        <speeches id="1">
            <speech>Las apariencias y la edad engañan. Deja que te enseñe cómo.</speech>
        </speeches>
        <speeches id="2">
            <speech>Ya lo creo. Parecías joven y débil, pero luchaste como alguien con mucha experiencia.</speech>
        </speeches>
        <speeches id="3">
            <speech>Ya lo creo. Parecías joven y débil, pero luchaste como alguien con mucha experiencia.</speech>
        </speeches>
        <speeches id="4">
            <speech>Me pregunto cómo has llegado hasta aquí.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>¡Déjame mostrarte el poder de un verdadero pescador!</speech>
        </speeches>
        <speeches id="2">
            <speech>Aunque hayas ganado, estoy seguro de que lo he hecho mucho mejor que otros pescadores.</speech>
        </speeches>
        <speeches id="3">
            <speech>Aunque hayas ganado, estoy seguro de que lo he hecho mucho mejor que otros pescadores. Soy una élite.</speech>
        </speeches>
        <speeches id="4">
            <speech>No estuviste mal. Es sólo que soy una élite.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Estoy viajando a la aldea cercana para las reparaciones. Pero tengamos una batalla.</speech>
        </speeches>
        <speeches id="2">
            <speech>Perdí pero fue divertido. Gracias por la batalla.</speech>
        </speeches>
        <speeches id="3">
            <speech>Yo también quería ser maestro Pokémon, pero no tenía suficiente dinero para comprar pokebolas.</speech>
        </speeches>
        <speeches id="4">
            <speech>Chico, ¿quieres ser maestro Pokémon? ¿Estás seguro?</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>¿Quiénes somos? Cazadores de bichos.</speech>
            <speech>¿Qué queremos? Bichos por todo el planeta.</speech>
            <speech>¿Cómo pensamos hacerlo? Derrotando a entrenadores como tú.</speech>
        </speeches>
        <speeches id="2">
            <speech>¿Quiénes somos? Perdedores....</speech>
        </speeches>
        <speeches id="3">
            <speech>¿Qué tienen de malo los bichos? Bueno, de todos modos, yo estaba aquí para encontrar el padre de mi amigo que también es un coleccionista de errores actualmente en su viaje hacia $GYM8_TOWN.</speech>
        </speeches>
        <speeches id="4">
            <speech>Otro que muerde el polvo.</speech>
        </speeches>
    </conversation>
</npcs>