<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>*Una fuerza invisible te empuja hacia atrás de la entrada de la cueva*</speech>
            <speech>El propio aire parece rechazar tu presencia. Una poderosa energía psíquica crepita alrededor de la entrada sellada.</speech>
            <speech>Lo que haya dentro de esta cueva está muy lejos del alcance de los entrenadores ordinarios.</speech>
            <speech>Necesitarás un permiso especial -o una fuerza extraordinaria- para traspasar esta barrera.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>El Equipo Rocket es cuestión de poder, ¡y tú no tienes ninguno!</speech>
        </speeches>
        <speeches id="2">
            <speech>¡No te saldrás con la tuya!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡No te saldrás con la tuya!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Otro debilucho aplastado bajo las botas del Equipo Rocket!</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>¿Crees que convertirte en Campeón te hace especial? No eres más que otro obstáculo.</speech>
        </speeches>
        <speeches id="2">
            <speech>No... ¡Se suponía que Giovanni regresaría con Mewtwo!</speech>
        </speeches>
        <speeches id="3">
            <speech>No... ¡Se suponía que Giovanni regresaría con Mewtwo!</speech>
        </speeches>
        <speeches id="4">
            <speech>Patético. Mewtwo volverá a ser nuestro, y no hay nada que puedas hacer.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>¿Crees que Mewtwo es sólo un Pokemon? No... es una llave para el control absoluto. No eres digno de empuñarla.</speech>
        </speeches>
        <speeches id="2">
            <speech>I... Vi nuestro futuro ¿por qué no se hizo realidad ...?</speech>
        </speeches>
        <speeches id="3">
            <speech>I... Vi nuestro futuro ¿por qué no se hizo realidad ...?</speech>
        </speeches>
        <speeches id="4">
            <speech>Otra mente reducida a polvo. Mewtwo pertenece a Rocket, no a tontos como tú.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Seguí a Giovanni a las sombras y lo seguiré directo a la conquista. Mewtwo le pertenece.</speech>
        </speeches>
        <speeches id="2">
            <speech>Giovanni... perdóname... No fui lo suficientemente fuerte.</speech>
        </speeches>
        <speeches id="3">
            <speech>Giovanni... perdóname... No fui lo suficientemente fuerte.</speech>
        </speeches>
        <speeches id="4">
            <speech>Este es el coste de la traición. Te volviste contra el destino y perdiste.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Beldum" speed="1" sprite="374" type="pokemon" x="58" y="36">
        <path>DOWNx4,UPx4</path>
        <onCollisionSpeech gap="4">Bzzzt</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="2" name="Klink" speed="1" sprite="599" type="pokemon" x="21" y="49">
        <path>RIGHTx1,DOWNx1,RIGHTx2,DOWNx1,UPx1,LEFTx2,UPx1,LEFTx1</path>
        <onCollisionSpeech gap="4">KliiiiiiiiiI!</onCollisionSpeech>
        <speech>¡KliiI!</speech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="3" name="Hariyama" speed="1" sprite="297" type="pokemon" x="34" y="8">
        <path>RIGHTx3,LEFTx3</path>
        <onCollisionSpeech gap="4">Hariiiiiiii!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="LEFT" id="4" name="Stunfisk" speed="1" sprite="618" type="pokemon" x="36" y="31">
        <path>LEFTx1,UPx1,DOWNx1,RIGHTx1</path>
        <onCollisionSpeech gap="4">Stuuun!</onCollisionSpeech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="5" name="Declan" randomRotation="true" sprite="101" x="28" y="27">
        <speech>Si has llegado tan lejos en la Cueva Cerúlea, tienes que ser de verdad.</speech>
        <speech>No cualquiera puede enfrentarse al tipo de Pokémon que acecha aquí abajo.</speech>
    </npc>
    <movingNpc direction="LEFT" id="6" name="Dean" speed="1" sprite="93" type="npc" x="39" y="15">
        <path>LEFTx8,RIGHTx8</path>
        <onCollisionSpeech gap="4"/>
        <speech>Estos pasajes de agua dulce esconden algo más que fuertes Pokémon..</speech>
        <speech>He encontrado todo tipo de objetos raros abandonados.</speech>
        <speech>A los entrenadores se les deben haber caído mientras corrían.</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="7" name="Dragonite" randomRotation="false" sprite="176" x="37" y="33">
        <speech>Dragonite suelta un gruñido grave y estruendoso y extiende las alas para proteger a su amigo.</speech>
    </npc>
    <movingNpc direction="RIGHT" id="8" name="Eric" speed="1" sprite="39" type="npc" x="8" y="44">
        <path>RIGHTx2,LEFTx2</path>
        <onCollisionSpeech gap="4"/>
        <speech>Llevo años esperando encontrar un Cufant, pero parece que en su lugar siguen apareciendo Beldums.</speech>
    </movingNpc>
    <npc direction="RIGHT" hidden="false" id="9" name="Phoebe" randomRotation="false" sprite="82" x="50" y="30">
        <speech>¿Ves ese Dragonite?</speech>
        <speech>Supuestamente, es amigo de un Pokémon muy poderoso que vive aquí.</speech>
        <speech>¿¡Qué dulce!?</speech>
    </npc>
</npcs>