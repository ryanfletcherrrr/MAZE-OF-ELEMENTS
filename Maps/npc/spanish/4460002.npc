<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Sólo... qué... es esto...</speech>
            <speech>¡¿El Líder Maxie sabía que pasaría así?!.</speech>
            <speech>¡Cállate!</speech>
            <speech>¡¿Qué está pasando aquí?!</speech>
            <speech>¡Ahyahya! Incluso yo, Tabitha, me siento desconcertada. ¡Líder Maxie!</speech>
            <speech>¡¿Qué intentas hacer?! ...Al mundo. ...A nosotros.</speech>
            <speech>...Al Equipo Magma. ¡Esto nunca, nunca puede ser perdonado!</speech>
            <speech>Ahya. ¿Eres uno de mis fans? ¡Eres el mismo chico que siempre está apareciendo!</speech>
            <speech>No puedo creer que me sigas en mi vida privada.</speech>
            <speech>¡Ahyahya! ¡Bueno, está bien!</speech>
            <speech>Tal vez me aclare esta sensación tan desagradable que tengo dentro de mí...</speech>
            <speech>¡Dándote una paliza!</speech>
        </speeches>
        <speeches id="2">
            <speech>Ahya... Ahya... Ahya... Ahya... Santo cielo...</speech>
            <speech>Hoy no ha habido más que estrés. No puedo soportarlo... ¡Es tan desagradable!</speech>
            <speech>Será mejor que escuches, niño estresante. Cuando el plan del Líder Maxie haya sido ejecutado, el crepúsculo caerá sobre el mundo.</speech>
            <speech>El Mar Primordial se convertirá en Tierra Desolada. En otras palabras, toda la vida... ¡Niño!</speech>
            <speech>¿Qué crees que puedes hacer ante lo que está por venir?</speech>
            <speech>¡Estoy deseando verte entrar en acción! ¡Ahya! ¡Ahyahyahyahya!</speech>
            <speech>El Líder debe dirigirse al Monte Pyre... Lo que significa que yo...</speech>
        </speeches>
        <speeches id="3">
            <speech>Ahya... Ahya... Ahya... Ahya... Santo cielo...</speech>
            <speech>Hoy no ha habido más que estrés. No puedo soportarlo... ¡Es tan desagradable!</speech>
            <speech>Será mejor que escuches, niño estresante. Cuando el plan del Líder Maxie haya sido ejecutado, el crepúsculo caerá sobre el mundo.</speech>
            <speech>El Mar Primordial se convertirá en Tierra Desolada. En otras palabras, toda la vida... ¡Niño!</speech>
            <speech>¿Qué crees que puedes hacer ante lo que está por venir?</speech>
            <speech>¡Estoy deseando verte entrar en acción! ¡Ahya! ¡Ahyahyahyahya!</speech>
            <speech>El Líder debe dirigirse al Monte Pyre... Lo que significa que yo...</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Ahora vete!</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>Somos el Equipo Magma.</speech>
            <speech>Aparecemos allí donde se encuentra algo raro.</speech>
        </speeches>
        <speeches id="2">
            <speech>Pero... Pero eres sólo un niño...</speech>
        </speeches>
        <speeches id="3">
            <speech>Pero... Pero eres sólo un niño...</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Ahora vete!</speech>
        </speeches>
        <speeches id="5">
            <speech>Pero... Pero eres sólo un niño...</speech>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>¿Qué? ¿Qué hace un niño aquí?</speech>
        </speeches>
        <speeches id="2">
            <speech>Pero... Pero eres sólo un niño...</speech>
        </speeches>
        <speeches id="3">
            <speech>Pero... Pero eres sólo un niño...</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Ahora vete!</speech>
        </speeches>
        <speeches id="5">
            <speech>Pero... Pero eres sólo un niño...</speech>
        </speeches>
    </conversation>

    <conversation id="4">
        <speeches id="1">
            <speech>Gracias, jovencito. ¡Nos has salvado de un buen apuro!</speech>
            <speech>Esos ladrones, ¿qué podrían ganar investigando patrones meteorológicos de hace miles de años?</speech>
            <speech>Pero en cuanto a los datos que buscaban esos rufianes...</speech>
            <speech>Querían conocer las condiciones climáticas extremas que imperaban hace miles de años.</speech>
            <speech>Por esos dos Pokémon superantiguos.</speech>
            <speech>Uno de ellos era el Pokémon legendario que conocemos como Mighty Groudon.</speech>
            <speech>Al absorber la energía que abunda en el mundo natural, Groundon se transformó a sí mismo, o eso dice.</speech>
            <speech>El Groudon transformado perturbó tanto los patrones climáticos que el mundo se volvió estéril.</speech>
            <speech>El calor que generó secó los océanos y la tierra reseca cubrió cada vez más superficie del planeta.</speech>
            <speech>Denominamos a esta transformación Reversión Primal...</speech>
            <speech>El resultado de este terror que llamamos Primal Groudon</speech>
            <speech>La Reversión Primigenia es una posible forma de Evolución como y sin embargo no como la Mega Evolución...</speech>
            <speech>O eso se ha teorizado. Pero nunca lo ha conseguido ningún Pokémon que no sea un Pokémon legendario superantiguo,</speech>
            <speech>por lo que ha caído en el olvido como método de evolución.</speech>
            <speech>¡Oh, pero me estoy olvidando de mí mismo! En primer lugar, debo agradecerle su ayuda.</speech>
            <speech>Baja y reúnete conmigo y te recompensaré con algo.</speech>
        </speeches>
    </conversation>

    <conversation id="5">
        <speeches id="1">
            <speech>Voy a bajar ahora, pero habla con nosotros cuando tengas un momento.</speech>
            <speech>También queremos darle las gracias.</speech>
        </speeches>
    </conversation>

    <conversation id="6">
        <speeches id="1">
            <speech>Hola, $PLAYER_NAME. Soy el Profesor Cedric Greenwood. Nuestra crisis actual requiere las propiedades únicas de Treecko Scales.</speech>
            <speech>Hemos descubierto que las escamas de ciertos Treeckos pueden usarse para crear un dispositivo que podría calmar al alborotado Mega Sceptile.</speech>
            <speech>Los Treeckos que necesitamos deben serlo:</speech>
            <speech>- Atrapado en el Safari de Hoenn, sin objetos.</speech>
            <speech>- Poseer IVs totales de 100 o más y de calidad Ultra Rara.</speech>
            <speech>- Al menos de nivel 1 y capturados originalmente por ti, su afinidad contigo contribuye a la potencia de la balanza.</speech>
            <speech>¿Puede traerme un Treecko así? Extraeremos sus escamas con cuidado para que su Treecko no sufra ningún daño.</speech>
        </speeches>
        <speeches id="2">
            <speech>Me alegro de verte de nuevo, $PLAYER_NAME. Tienes un Treecko que cumpla nuestros criterios para la extracción de escamas?</speech>
            <speech>Los criterios para el Treecko son los siguientes:</speech>
            <speech>- Atrapado por ti en el Safari de Hoenn, sin objetos retenidos.</speech>
            <speech>- IVs totales de 100 o más, de estatus Ultra Raro.</speech>
            <speech>- Y al menos de nivel 1, asegurando su fuerte conexión contigo.</speech>
            <speech>¡Maravilloso, has traído un Treecko adecuado! Con su permiso, extraeremos las escamas ahora. Este proceso es suave y su Treecko estará bien después. ¿Procedemos?</speech>
        </speeches>
        <speeches id="3">
            <speech>Entiendo, $PLAYER_NAME. Decisiones como estas llevan su tiempo. El bienestar de tu Treecko es nuestra máxima prioridad. Vuelve cuando estés listo y estaremos aquí para ayudarte.</speech>
        </speeches>
        <speeches id="4">
            <speech>Gracias por su confianza, $PLAYER_NAME. Comencemos el proceso de extracción de la escala.</speech>
            <speech>...El proceso ha terminado. Tu Treecko está sano y salvo, y aquí están las escamas que hemos recogido. Son precisamente lo que necesitamos para el condensador de rayos.</speech>
            <speech>Con estas escalas, estamos un paso más cerca de resolver la crisis con Mega Sceptile. Vuestra ayuda ha sido crucial para nuestros esfuerzos.</speech>
        </speeches>
    </conversation>

    <conversation id="7">
        <speeches id="1">
            <speech>Bienvenido de nuevo, $PLAYER_NAME. La creación del condensador de relámpagos es un paso fundamental en nuestro esfuerzo por estabilizar el clima y calmar a Mega Sceptile.</speech>
            <speech>Las escamas de treecko son esenciales por su capacidad única para aprovechar y distribuir armoniosamente la energía eléctrica.</speech>
        </speeches>
        <speeches id="2">
            <speech>Impresionante, ¡has conseguido reunir todas las Escamas de Treecko necesarias! Con ellas, podremos empezar a fabricar el condensador de rayos.</speech>
            <speech>Esta tarea requiere precisión y comprensión del equilibrio natural. Estás preparado para llevarla a cabo hasta el final?</speech>
        </speeches>
        <speeches id="3">
            <speech>Es comprensible tomarse un momento para reflexionar. Al fin y al cabo, el equilibrio de la naturaleza está en nuestras manos.</speech>
            <speech>Tómese el tiempo que necesite. La urgencia de nuestra tarea no pesa más que la necesidad de una acción meditada. Estaré aquí cuando estés preparado.</speech>
        </speeches>
        <speeches id="4">
            <speech>Entonces procedamos con el máximo cuidado y respeto por las fuerzas con las que trabajamos.</speech>
            <speech>...El condensador está completo. Su diseño está inspirado en la esencia misma de las maravillas naturales de Hoenn y en las Escamas Treecko que nos has proporcionado.</speech>
            <speech>Este dispositivo representa una esperanza no sólo para calmar a Mega Sceptile, sino para la futura armonía entre tecnología y naturaleza.</speech>
            <speech>Ahora debo seguir investigando y explorar nuevas aplicaciones de esta tecnología. El camino por recorrer es largo y lleno de descubrimientos.</speech>
            <speech>Gracias, $PLAYER_NAME. Tu contribución ha sido inestimable y estoy deseando que llegue el día en que nos volvamos a ver.</speech>
        </speeches>
        <speeches id="5">
            <speech>Con el condensador ahora en tus capaces manos, mi propio viaje hacia los misterios del clima de Hoenn continúa.</speech>
            <speech>La naturaleza salvaje me llama, con promesas de secretos por descubrir y nuevos retos que afrontar.</speech>
            <speech>Ojalá nuestros caminos se vuelvan a cruzar, $PLAYER_NAME. Hasta entonces, que los vientos te guíen y las tormentas nunca desalienten tu espíritu.</speech>
        </speeches>
    </conversation>

</npcs>