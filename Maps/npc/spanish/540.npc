<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>¿Has visto un Cleffa en algún sitio?</speech>
            <speech>Miembros de la Pandilla Sutta han tomado a mi amo como rehén dentro de la mansión y Cleffa se asustó y huyó
                con la llave de repuesto.
            </speech>
            <speech>¿Puede ayudarme a encontrarlo? Yo también lo buscaré.</speech>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>¡Gracias por encontrar a Cleffa por mí!</speech>
            <speech>¿Me ayudas a salvar al Sr. Backlot, por favor?</speech>
            <speech>Intentaré reunir a más gente para ayudar.</speech>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>La puerta parece estar cerrada.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Podrías haberte marchado, ¿sabes?</speech>
        </speeches>
        <speeches id="2">
            <speech>Déjame en paz</speech>
        </speeches>
        <speeches id="3">
            <speech>Déjame en paz</speech>
        </speeches>
        <speeches id="4">
            <speech>Es culpa tuya que hayas perdido.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Ojalá pudiera vivir en esa mansión. Hagamos una carrera para ver quién puede ir allí.</speech>
        </speeches>
        <speeches id="2">
            <speech>*sob*</speech>
        </speeches>
        <speeches id="3">
            <speech>*sob*</speech>
        </speeches>
        <speeches id="4">
            <speech>Vayamos juntos la próxima vez.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>¿Qué le pasa a mi caña? ¿O es mi cebo? No encuentro ningún pez. Muéstrame cómo lo haces.</speech>
        </speeches>
        <speeches id="2">
            <speech>Me siento estúpido por pescar en un lago vacío.</speech>
        </speeches>
        <speeches id="3">
            <speech>Me siento estúpido por pescar en un lago vacío.</speech>
        </speeches>
        <speeches id="4">
            <speech>No es así como lo hacemos.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Esto está lleno de bichos, no es genial.</speech>
        </speeches>
        <speeches id="2">
            <speech>Seré tan fuerte como tú la próxima vez.</speech>
        </speeches>
        <speeches id="3">
            <speech>Seré tan fuerte como tú la próxima vez.</speech>
        </speeches>
        <speeches id="4">
            <speech>Sí, puedo ser el campeón.</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>No perderé contra el equipo Milotic. YO SOY EL MEJOR.
                Todos saluden al señor Gyarados.</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Por qué te entrometiste para empezar!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Por qué te entrometiste para empezar!</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Sí! Esto es lo que pasa cuando no eres del equipo Gyarados.</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>¡Hola entrenador! Únete a nuestro equipo, por el amor de Milotic vamos a ganar.</speech>
        </speeches>
        <speeches id="2">
            <speech>¡Traidor!</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Traidor!</speech>
        </speeches>
        <speeches id="4">
            <speech>¿Y? ¿Te unes a nosotros ahora?</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>¡Siento que me han sustituido por Eevee!</speech>
        </speeches>
        <speeches id="2">
            <speech>De todas formas, no lo entenderás.</speech>
        </speeches>
        <speeches id="3">
            <speech>De todas formas, no lo entenderás.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Vale! ¡Vuelve a mirar!</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>¿Crees que encontraré algún Eevee por aquí? ¡¡Eevee Eevee donde estas!!</speech>
        </speeches>
        <speeches id="2">
            <speech>Las batallas deberían haber sido 8v8. No puedo hablar en serio sin usar todos mis Eevees. *sob*</speech>
        </speeches>
        <speeches id="3">
            <speech>Las batallas deberían haber sido 8v8. No puedo hablar en serio sin usar todos mis Eevees. *sob*</speech>
        </speeches>
        <speeches id="4">
            <speech>Asustas a mis Eevees.</speech>
        </speeches>
    </conversation>
</npcs>