<npcs>
    <conversation id="1">
        <!-- Initial meeting where Professor Oak introduces the choice of starter Pokémon -->
        <speeches id="1">
            <speech>Bienvenido, $PLAYER_NAME. El equilibrio de Kanto está alterado, y necesitamos entrenadores capaces.</speech>
            <speech>Se están produciendo fenómenos extraños: las migraciones de Pokémon son erráticas y algunas especies se comportan de forma inusualmente agresiva.</speech>
            <speech>Elige uno de estos Pokémon de la mesa. Están listos para enfrentarse a cualquier desafío que se les ponga por delante.</speech>
            <speech>Tu ayuda es crucial. Debemos entender estas perturbaciones para restaurar la armonía en Kanto.</speech>
        </speeches>

        <!-- Player has picked a Pokémon, Oak asks for help -->
        <speeches id="2">
            <speech>¡Excelente elección! Ahora que tienes tu Pokémon, tengo una tarea para ti. ¿Podrías ayudarme?</speech>
        </speeches>

        <!-- If the player declines to help Oak -->
        <speeches id="3">
            <speech>Lo comprendo. No todo el mundo está preparado para asumir responsabilidades adicionales. Reflexiona sobre tu elección.</speech>
            <speech>Si decides asistir, vuelve a verme. Estaré esperando aquí en el laboratorio.</speech>
        </speeches>

        <!-- Player agrees to help -->
        <speeches id="4">
            <speech>Gracias. Necesito que recojas un paquete para mí en el Poké Mart de Ciudad Viridian.</speech>
            <speech>Contiene un equipo de investigación vital. Una vez que lo tengas, por favor tráelo aquí al laboratorio.</speech>
            <speech>Estaré esperando su regreso. Buena suerte y cuídate en tu viaje.</speech>
        </speeches>

        <!-- Completion placeholder, can remain empty -->
        <speeches id="5">
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>¡Espera!</speech>
        </speeches>
        <speeches id="2">
            <speech>Yo también quiero un Pokémon.</speech>
        </speeches>
        <speeches id="3">
            <speech>¡Entonces me quedo con éste!</speech>
        </speeches>
        <speeches id="4">
            <speech> Mi Pokémon parece mucho más duro que el tuyo.</speech>
        </speeches>
    </conversation>

    <conversation id="4">
        <speeches id="1">
            <speech>Bienvenido, $PLAYER_NAME. ¿Tienes el paquete que pedí de Ciudad Viridian?</speech>
        </speeches>

        <speeches id="2">
            <speech>¡Maravilloso! ¿Quieres entregar el paquete ahora?</speech>
        </speeches>

        <speeches id="3">
            <speech>No te preocupes, entiendo que tengas otras tareas que atender primero.</speech>
            <speech>Cuando estés listo para entregarlo, estaré aquí esperando. Realmente necesitamos ese paquete para continuar nuestro trabajo.</speech>
        </speeches>

        <speeches id="4">
            <speech>Muchas gracias por esto. El material de este paquete es esencial para nuestra investigación.</speech>
            <speech>Tu ayuda es inestimable, y como muestra de mi gratitud, aquí tienes 5 cajas de almacenamiento pokemon.</speech>
            <speech>Te serán muy útiles para organizar a tus pokémon durante el viaje.</speech>
            <speech>Ahora, hay otro asunto del que me gustaría que te ocuparas. ¿Ya conociste a Daisy?</speech>
            <speech>Posee una rara reliquia de nuestra región: un detallado mapa del mundo de Kanto. Es vital para cualquier entrenador.</speech>
        </speeches>

        <speeches id="5">
            <speech>Por favor, ve a ver a Daisy. Está deseando conocer a alguien de tu calibre, y el mapa podría ser inestimable para tu viaje.</speech>
        </speeches>
    </conversation>

    <conversation id="5">
        <!-- Existing lines -->
        <speeches id="1">
            <speech>Me alivia que hayas venido. Las cosas han estado... inestables en Kanto últimamente. Patrones climáticos extraños, Pokémon mostrando signos de agitación, y repentinos...</speech>
            <speech>cambios en los hábitats locales: algo grande está ocurriendo y no puedo manejarlo solo.</speech>
            <speech>En tiempos como estos, necesitamos formadores capaces y preparados para hacer frente a cualquier amenaza.</speech>
            <speech>Coge uno de estos Pokémon. Te ayudarán en tu viaje.</speech>
        </speeches>
    </conversation>

    <conversation id="7">
        <!-- Initial meeting where Professor Oak introduces the choice of starter Pokémon -->
        <speeches id="1">
            <speech>¡Hola, $PLAYER_NAME! ¿Cómo te está tratando el viaje?</speech>
            <speech>¿Tu Pokédex empieza a llenarse bien?</speech>
            <speech>Kanto está lleno de sorpresas: siempre hay algo nuevo a la vuelta de la esquina.</speech>
        </speeches>

        <!-- Player has picked a Pokémon, Oak asks for help
        <speeches id="2">
            <speech>Excellent choice! Now that you have your Pokémon, I have a task for you. Could you assist me with it?</speech>
        </speeches>

        &lt;!&ndash; If the player declines to help Oak &ndash;&gt;
        <speeches id="3">
            <speech>I understand. Not everyone is ready to take on additional responsibilities. Reflect on your choice.</speech>
            <speech>If you decide to assist, come back and see me. I'll be waiting here in the lab.</speech>
        </speeches>

        &lt;!&ndash; Player agrees to help &ndash;&gt;
        <speeches id="4">
            <speech>Thank you! I need you to pick up a parcel for me from the Poké Mart in Viridian City.</speech>
            <speech>It contains some vital research equipment. Once you have it, please bring it back here to the lab.</speech>
            <speech>I'll be waiting for your return. Good luck, and take care on your journey!</speech>
        </speeches>-->

        <!-- Completion placeholder, can remain empty -->
        <speeches id="5">
        </speeches>
    </conversation>
</npcs>