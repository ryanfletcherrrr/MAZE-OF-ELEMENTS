<npcs>
    <npc direction="DOWN" id="1000" name="Guide Hari" sprite="23" x="14" y="41">
        <speech>¡Saludos, retador! Arturo es un usuario de Pokemon de tipo tierra.</speech>
        <speech>Los tipos agua, hierba y hielo se defienden bien contra él.</speech>
        <speech>No subestimes sus tipos terrestres, especialmente en una tormenta de arena.</speech>
        <speech>Recuerda que Sand Rush es para los pokemon de tipo tierra lo que Adrenaline rush es para los humanos. ¡Buena suerte!</speech>
    </npc>
    <conversation id="1">
        <speeches id="1">
            <speech>¿Has venido a desafiar a Arturo?</speech>
            <speech>Antes de eso, veamos si vales su tiempo.</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh, está bien. No estás tan mal, sabes.</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh, está bien. No estás tan mal, sabes.</speech>
        </speeches>
        <speeches id="4">
            <speech>Vuelve, sólo le harás perder el tiempo.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Troll... ¡troll en el calabozo!</speech>
        </speeches>
        <speeches id="2">
            <speech>Sólo bromeaba con lo de 'troll'. No te lo tomes tan en serio.</speech>
        </speeches>
        <speeches id="3">
            <speech>Sólo bromeaba con lo de 'troll'. No te lo tomes tan en serio.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡El troll ha sido derrotado! Jaja</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Parece que has sido atrapado por el rompecabezas de arena. Lástima, porque tu suerte está a punto de empeorar.</speech>
        </speeches>
        <speeches id="2">
            <speech>Estaba equivocado. Tu fortuna brilla, y puede que te lleve hasta Arturo, creo.</speech>
        </speeches>
        <speeches id="3">
            <speech>Estaba equivocado. Tu fortuna brilla, y puede que te lleve hasta Arturo, creo.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Y eso es el beso de la muerte!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Mira cómo la arena te quita las fuerzas y cómo mis Pokémon te roban el espíritu.</speech>
        </speeches>
        <speeches id="2">
            <speech>Tu espíritu es fuerte, más fuerte que mi Pokemon.</speech>
        </speeches>
        <speeches id="3">
            <speech>Tu espíritu es fuerte, más fuerte que mi Pokemon.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Ahora descansa en la oscuridad eterna!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>¿De verdad crees que puedes ganar a Arturo? Eso es mucha confianza, ¿o es sólo arrogancia fuera de lugar?</speech>
        </speeches>
        <speeches id="2">
            <speech>Veo que tu confianza está justificada, pero el simple hecho de tener confianza no basta para superar a Arturo.</speech>
        </speeches>
        <speeches id="3">
            <speech>Hay que adaptarse, porque sólo así se puede tener una verdadera oportunidad contra alguien del calibre de Arturo.</speech>
        </speeches>
        <speeches id="4">
            <speech>Así que, después de todo, era arrogancia.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>¿Adónde crees que vas, chico?</speech>
        </speeches>
        <speeches id="2">
            <speech>Vas en la dirección correcta.</speech>
        </speeches>
        <speeches id="3">
            <speech>Una vez que hayas elegido un camino, no lo abandones hasta que lo consigas". Esas son las palabras de Arturo.</speech>
        </speeches>
        <speeches id="4">
            <speech>¡Tienes que elegir bien tu camino, Kid!</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>¿Has venido a desafiar a Arturo?</speech>
            <speech>De acuerdo. Pero primero, ¡muéstrame lo que has aprendido hasta ahora!</speech>
        </speeches>
        <speeches id="2">
            <speech>Arturo dijo una vez que uno aprende de sus fracasos.</speech>
        </speeches>
        <speeches id="3">
            <speech>Arturo dijo una vez que uno aprende de sus fracasos.</speech>
        </speeches>
        <speeches id="4">
            <speech>Hay que aprender de los fracasos.</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>Me gusta buscar Pokemon raros para cumplir mi sueño como entrenador.</speech>
            <speech>Pero ahora mismo, parece que derrotarte me hará sentir mejor.</speech>
        </speeches>
        <speeches id="2">
            <speech>Una vez encontré un Pupitar aquí.. Continuaré mi búsqueda de tales Pokemons.</speech>
        </speeches>
        <speeches id="3">
            <speech>Una vez encontré un Pupitar aquí.. Continuaré mi búsqueda de tales Pokemons.</speech>
        </speeches>
        <speeches id="4">
            <speech>Me siento tan bien...</speech>
        </speeches>
    </conversation>
</npcs>