<npcs>
    <npc direction="DOWN" id="1000" name="Black Belt Master Miles" randomRotation="true" sprite="34" x="19" y="72">
        <speech>Soy Miles, el Cinturón Negro más fuerte de Jvaloh.</speech>
        <speech>Actualmente, estoy desafiando a Elite 4, ya que mi entrenamiento llegó a su punto álgido.</speech>
        <speech>Dicen: "Acepta los retos para poder sentir la euforia de la victoria".</speech>
        <speech>Yo, por supuesto, acepté el reto de lograr lo que ningún otro Cinturón Negro ha logrado jamás.</speech>
        <speech>Yo, Miles, me aseguraré de que mi legado permanezca, ¡como el Cinturón Negro más fuerte de todos los tiempos!</speech>
    </npc>
    <npc direction="UP" id="1001" name="Police Executive Jo" sprite="126" x="23" y="76">
        <speech>¡Policía Ejecutiva Jo de servicio, señor!</speech>
        <speech>Mucho mejor es atreverse a cosas poderosas, obtener triunfos gloriosos, aunque estén salpicados de fracasos...
        </speech>
        <speech>...que alinearse con esos pobres espíritus que ni gozan ni sufren mucho, porque viven en un crepúsculo gris que no conoce la victoria ni la derrota.
        </speech>
        <speech>¡Arcanine y yo, Arcanine y yo!</speech>
    </npc>
    <npc direction="RIGHT" id="1002" name="Advanced Pokemon Collector Clinton" randomRotation="true" sprite="33" x="34" y="76">
        <speech>Por lo que he visto, estoy muy cerca de cumplir mi objetivo soñado, que era coleccionar todas las especies de Pokémon de todas las regiones.</speech>
        <speech>¿Crees que fue fácil? Me llevó toda una vida. Visité montones de regiones diferentes, algunos lugares que ni te imaginas.</speech>
        <speech>Pero aquí estoy. Es mejor conquistarse a uno mismo que ganar mil batallas.</speech>
        <speech>Entonces, la victoria es tuya. No te la pueden quitar ni los ángeles ni los demonios, ni el cielo ni el infierno.</speech>
        <speech>Aunque los 4 entrenadores de élite sean considerados los más fuertes de esta región, los superaré pase lo que pase.</speech>
    </npc>
    <npc direction="UP" id="1003" name="Hiker Veteran Deandre" randomRotation="true" sprite="10" x="38" y="36">
        <speech>He alcanzado ese estado que ningún otro senderista ha alcanzado. ¿Pensarías alguna vez que yo, Dreandre, me he rendido?</speech>
        <speech>Tú tampoco deberías. Sé perfectamente quién eres, $PLAYER_NAME, te estás haciendo bastante famoso por esta Región.</speech>
        <speech>Sabes... hay un poder asombroso en conocer tu silf interior y aprender a usarlo y no pelearte con el mundo.</speech>
        <speech>Haz lo que te haga feliz y el éxito acabará llegando.</speech>
        <speech>Este reto de Elite 4 me hace bastante feliz. Utilizaré mis capacidades y mi personalidad, y el resto fluirá de maravilla.</speech>
    </npc>
    <npc direction="UP" id="1004" name="Master Dragon Tamer Willie" sprite="173" x="62" y="76">
        <speech>Pareces bastante fuerte, bienvenido a la Elite 4.</speech>
        <speech>Soy domador de dragones. El misterio del poder del Dragón ilumina mi alma, muy dentro, desde que era un niño.
        </speech>
        <speech>La primera vez que vi un Salamence sentí que se me saltaban las lágrimas... la presión, el misterio, el poder.
        </speech>
        <speech>En aquella época, las lágrimas eran sagradas. Entonces eran la marca de la debilidad. Ahora, son la marca del poder.
        </speech>
        <speech>Hablan con más elocuencia que diez mil lenguas. Son los mensajeros de un dolor abrumador, de una profunda contrición y de un amor indecible.
        </speech>
        <speech>El mejor consejo que puedo darte, entre estos fuertes, no, en realidad, entre los más fuertes entrenadores de Jvaloh es:</speech>
        <speech>Nunca pierdas la esperanza en tus Pokémon, o ellos acabarán por perderla también en ti.
        </speech>
    </npc>
</npcs>