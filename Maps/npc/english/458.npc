<npcs>
    <conversation id="4">
        <speeches id="1">
            <speech>This... This is not...</speech>
        </speeches>
        <speeches id="2">
            <speech>... I... I wanted... I wanted to make...</speech>
            <speech>It was supposed to be a world where the human race would attain new heights...</speech>
            <speech>The next stage... Of our new development...</speech>
            <speech>It was all... For humanity's future...</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>So this...is the power of the super-ancient Pokémon... This is how Groudon brings everything to an end...</speech>
            <speech>All of us, people and Pokémon... Every living thing on this planet... Everything's gonna die...</speech>
            <speech>OK, little scamp... We're setting sail for Sootopolis.</speech>
            <speech>That blasted Groudon is no doubt gonna get there ahead of us.</speech>
            <speech>It'll be waiting for us deep in the Cave of Origin, there in Sootopolis...</speech>
            <speech>There's a pool of energy there that folk says is needful for Primal Reversion.</speech>
            <speech>There's no doubt in my mind that Groudon will be racing to that cave, thirsting for that power...</speech>
            <speech>We got no choice but to go ourselves. We gotta do whatever we can to fight back!</speech>
            <speech>All right, Maxie! You Team Magma blighters better come with us.</speech>
            <speech>We're responsible for this mess. This ridiculous, impossible mess.</speech>
            <speech>It only makes sense for us all to step up and clean up after ourselves. Agreed?</speech>
        </speeches>
        <speeches id="2">
            <speech>... Hey, little scamp.</speech>
            <speech>Look, I'm supposed to be a grown-up, right? So let me say sorry for the way this has gone down.</speech>
            <speech>And...I'm sorry 'cause I've gotta ask you to pitch in with the cleanup.</speech>
            <speech>We need every hand on deck if we're gonna do something about this mess...</speech>
            <speech>So...I'll be waitin' for you in Sootopolis</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>What...</speech>
        </speeches>
        <speeches id="2">
            <speech>Boss... Maxie...</speech>
        </speeches>
        <speeches id="3">
            <speech>Let's go. Boss Maxie...</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>$PLAYER_NAME! I'm sorry I could not be here sooner.</speech>
            <speech>Terrible… So this is what was being depicted in that painting in Granite Cave.</speech>
            <speech>If this doesn't stop, all Hoenn—no, the entire world—will burn up.</speech>
            <speech>Nothing could live in such a land of death—neither Pokémon nor humans!</speech>
            <speech>This dreadful blaze… It must be caused by the sweltering heat wave forming above Sootopolis...</speech>
            <speech>Come on, Steven… Think! What are you going to do?</speech>
            <speech>No. There's no point in agonizing over the situation from here...</speech>
            <speech>I have to go to Sootopolis. There must be answers here.</speech>
            <speech>$PLAYER_NAME… I will count on you to help with this crisis...</speech>
            <speech>But... please... Promise you won't do anything reckless.</speech>
            <speech>Well then. I'll go ahead to Sootopolis. Good luck to you.</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>You're going to get wet and wild in this battle! My Pokémon  will soak you!</speech>
        </speeches>
        <speeches id="2">
            <speech>I'm the one who's dry... You've soaked me in defeat.</speech>
        </speeches>
        <speeches id="3">
            <speech>I'm the one who's dry... You've soaked me in defeat.</speech>
        </speeches>
        <speeches id="4">
            <speech>You're soaked! Time to dry off and rethink your strategy.</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>You're going to be all washed up when this battle is over!</speech>
        </speeches>
        <speeches id="2">
            <speech>You've drained my chances of winning.</speech>
        </speeches>
        <speeches id="3">
            <speech>You've drained my chances of winning.</speech>
        </speeches>
        <speeches id="4">
            <speech>Wow you are really bad...</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>You'll be out of your depth in this battle! My Pokémon are deep-sea champions!</speech>
        </speeches>
        <speeches id="2">
            <speech>I'm the one who's deep... in defeat. You've won fair and square.</speech>
        </speeches>
        <speeches id="3">
            <speech>I'm the one who's deep... in defeat. You've won fair and square.</speech>
        </speeches>
        <speeches id="4">
            <speech>You're in the shallows! Time to learn how to swim.</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>You'll be swimming with the Magikarp when I'm done with you!</speech>
        </speeches>
        <speeches id="2">
            <speech>I can't believe it.</speech>
        </speeches>
        <speeches id="3">
            <speech>I can't believe it.</speech>
        </speeches>
        <speeches id="4">
            <speech>You're fish food! My Pokémon are the predators of the sea!</speech>
        </speeches>
    </conversation>
    <conversation id="12">
        <speeches id="1">
            <speech>Are you ready to ride the wave of defeat? Because my Pokémon are surf champions!</speech>
        </speeches>
        <speeches id="2">
            <speech>I'm the one who's beached... You rode that wave to victory.</speech>
        </speeches>
        <speeches id="3">
            <speech>I'm the one who's beached... You rode that wave to victory.</speech>
        </speeches>
        <speeches id="4">
            <speech>You wiped out! Better practice your surfing skills.</speech>
        </speeches>
    </conversation>
    <conversation id="13">
        <speeches id="1">
            <speech>I will test the Pokémon  you have been training.</speech>
        </speeches>
        <speeches id="2">
            <speech>Wow! You're amazing! You've trained some great Pokémon !</speech>
        </speeches>
        <speeches id="3">
            <speech>Wow! You're amazing! You've trained some great Pokémon !</speech>
        </speeches>
        <speeches id="4">
            <speech>Bah! Is that the best you can do? I expected more from you...</speech>
        </speeches>
    </conversation>
    <conversation id="14">
        <speeches id="1">
            <speech>Hey! This is no laughing matter! We're about to battle!</speech>
        </speeches>
        <speeches id="2">
            <speech>Regardless of who wins or loses, we should thank each other after a battle.</speech>
        </speeches>
        <speeches id="3">
            <speech>Regardless of who wins or loses, we should thank each other after a battle.</speech>
        </speeches>
        <speeches id="4">
            <speech>Regardless of who wins or loses, we should thank each other after a battle.</speech>
        </speeches>
    </conversation>
    <conversation id="15">
        <speeches id="1">
            <speech>You'll be swimming in defeat when my water Pokémon wash over you!</speech>
        </speeches>
        <speeches id="2">
            <speech>I'm the one who's buoyant... You've sunk my hopes of winning.</speech>
        </speeches>
        <speeches id="3">
            <speech>I'm the one who's buoyant... You've sunk my hopes of winning.</speech>
        </speeches>
        <speeches id="4">
            <speech>You're drowning in my wave of victory!</speech>
        </speeches>
    </conversation>
    <conversation id="16">
        <speeches id="1">
            <speech>You're going to sink like a stone when you face my water Pokémon!</speech>
        </speeches>
        <speeches id="2">
            <speech>I'm the one who's surfaced... You've floated to victory.</speech>
        </speeches>
        <speeches id="3">
            <speech>I'm the one who's surfaced... You've floated to victory.</speech>
        </speeches>
        <speeches id="4">
            <speech>You're at the bottom of the ocean now!</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Sharpedo" speed="1" sprite="319" type="pokemon" x="60" y="52">
        <path>RIGHTx14,LEFTx14</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Sharpedo" speed="1" sprite="319" type="pokemon" x="107" y="55">
        <path>LEFTx15,DOWNx2,RIGHTx15,UPx2</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="3" name="Gyarados" speed="1" sprite="130" type="pokemon" x="76" y="55">
        <path>RIGHTx14,DOWNx2,LEFTx14,UPx2</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="4" name="Wailmer" speed="1" sprite="320" type="pokemon" x="40" y="14">
        <path>DOWNx20,UPx20</path>
        <onCollisionSpeech gap="4">Wailmer!</onCollisionSpeech>
        <speech>Wailmer!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="5" name="Gyarados" speed="1" sprite="130" type="pokemon" x="36" y="38">
        <path>RIGHTx10,DOWNx10,LEFTx10,UPx10</path>
        <onCollisionSpeech gap="4">Gyarados!</onCollisionSpeech>
        <speech>Gyarados!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="6" name="Gyarados" speed="1" sprite="130" type="pokemon" x="8" y="44">
        <path>UPx6,RIGHTx6,DOWNx6,LEFTx6</path>
        <onCollisionSpeech gap="4">Gyarados!</onCollisionSpeech>
        <speech>Gyarados!</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="7" name="Jamal" randomRotation="true" sprite="21" x="19" y="43">
        <speech>Isn't it odd? A donut-shaped island, yet not a single bakery in sight!</speech>
    </npc>
    <movingNpc direction="DOWN" id="8" name="Pelipper" speed="1" sprite="279" type="pokemon" x="40" y="54">
        <path>UPx20,RIGHTx20,LEFTx20,DOWNx20</path>
        <onCollisionSpeech gap="4">Pelipper!</onCollisionSpeech>
        <speech>Pelipper!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="9" name="Corphish" shouldSleep="" speed="1" sprite="341" type="pokemon" x="32" y="21">
        <path>LEFTx8,RIGHTx8</path>
        <onCollisionSpeech gap="4">Corphish!</onCollisionSpeech>
        <speech>Corphish!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="11" name="Gyarados" speed="1" sprite="130" type="pokemon" x="35" y="4">
        <path>DOWNx8,LEFTx10,UPx8,RIGHTx10</path>
        <onCollisionSpeech gap="4">Gyarados!</onCollisionSpeech>
        <speech>Gyarados!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="12" name="Pelipper" speed="1" sprite="279" type="pokemon" x="3" y="23">
        <path>UPx12,DOWNx12</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="13" name="Wailord" speed="1" sprite="321" type="pokemon" x="63" y="8">
        <path>RIGHTx26,LEFTx26</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="14" name="Wailord" speed="1" sprite="321" type="pokemon" x="59" y="12">
        <path>RIGHTx26,LEFTx26</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="15" name="Wailord" speed="1" sprite="321" type="pokemon" x="105" y="16">
        <path>LEFTx26,RIGHTx26</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="16" name="Wailord" speed="1" sprite="321" type="pokemon" x="99" y="9">
        <path>LEFTx26,RIGHTx26</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="17" name="Wingull" speed="1" sprite="278" type="pokemon" x="88" y="23">
        <path>RIGHTx10,LEFTx10</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="18" name="Carvanha" speed="1" sprite="318" type="pokemon" x="71" y="26">
        <path>DOWNx12,UPx12</path>
        <onCollisionSpeech gap="4">Carvanha!</onCollisionSpeech>
        <speech>Carvanha!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="19" name="Carvanha!" speed="1" sprite="318" type="pokemon" x="76" y="28">
        <path>DOWNx12,UPx12</path>
        <onCollisionSpeech gap="4">Carvanha!</onCollisionSpeech>
        <speech>Carvanha!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="10" name="Corphish" shouldSleep="" speed="1" sprite="341" type="pokemon" x="33" y="30">
        <path>RIGHTx3,UPx4,DOWNx4,LEFTx3</path>
        <onCollisionSpeech gap="4">Corphish!</onCollisionSpeech>
        <speech>Corphish!</speech>
    </movingNpc>
</npcs>
