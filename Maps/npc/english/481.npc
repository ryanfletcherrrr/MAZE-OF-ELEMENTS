<npcs>
    <conversation id="3">
        <speeches id="1">
            <speech>Your Pokémon look tired. Would you like me to heal them?</speech>
        </speeches>
        <speeches id="2">
            <speech>There you go, all healthy and happy!</speech>
        </speeches>
        <speeches id="3">
            <speech>Aww, I'm sure they would have liked to rest.</speech>
        </speeches>
    </conversation>
    <!-- Option Display Dialogue -->
    <conversation canSkip="false" id="5">
        <speeches id="1">
            <speech>Welcome, $PLAYER_NAME, to the wild expanse of the Safari Zone!</speech>
            <speech>Showcase your discoveries by presenting up to $MAX_SUBMISSIONS self-caught Ultra Rare Pokémon from our lands.</speech>
            <speech>Less is acceptable, but each must be a testament to your skill as a trainer.</speech>
            <speech>Strive for the title of Safari Champion and the Legendary Safari Crown!</speech>
            <speech>This challenge concludes in $CONCLUDES_IN_DURATION. Make every moment count!</speech>
            <speech>What adventure calls you to these untamed lands today?</speech>
        </speeches>
        <!-- Concluded Dialogue -->
        <speeches id="2">
            <speech>The Safari Zone challenge now quiets as the sun dips below the horizon, marking the end of this year's competition.</speech>
            <speech>Champions are named, stories forged into the annals of the Safari Zone. We bid farewell for now, $PLAYER_NAME, until next season's call beckons.</speech>
        </speeches>
        <!-- No Eligible Submission Dialogue -->
        <speeches id="3">
            <speech>Ah, $PLAYER_NAME, your collection seems to lack the spark of the Ultra Rare.</speech>
            <speech>The Safari Zone is vast and filled with hidden corners where the rarest of Pokémon lurk.</speech>
            <speech>Seek them out and return when you've captured the essence of rarity.</speech>
        </speeches>
        <!-- Max Submissions Dialogue -->
        <speeches id="4">
            <speech>Impressive, $PLAYER_NAME! You've reached the pinnacle of submissions with your current collection.</speech>
            <speech>Remember, you can submit fewer than $MAX_SUBMISSIONS if you believe your chosen Pokémon best reflect your skills.</speech>
            <speech>Should you wish to adjust your entries, the option to reset is available to you.</speech>
        </speeches>
        <!-- Invalid Submission Dialogue -->
        <speeches id="5">
            <speech>Hold, $PLAYER_NAME! Your submission seems to wander from the path of the Ultra Rare.</speech>
            <speech>Ensure that each Pokémon you present is a jewel of the Safari, capturing the true essence of what it means to be rare within these wilds.</speech>
        </speeches>
        <!-- Successful Submission Dialogue -->
        <speeches id="6">
            <speech>Well done, $PLAYER_NAME! Your offerings resonate with the spirit of the Safari Zone.</speech>
            <speech>You stand among the elite contenders for the Safari Champion title.</speech>
            <speech>May your name climb high on the leaderboard of legends!</speech>
        </speeches>
        <!-- Successful Reset Dialogue -->
        <speeches id="7">
            <speech>Your collection has been scattered to the winds, $PLAYER_NAME, a fresh slate granted to you.</speech>
            <speech>The Safari awaits your renewed endeavor. Embark again with eyes wide to the wonders it holds.</speech>
        </speeches>
        <speeches id="8">
            <speech>You're poised to reset your journey, $PLAYER_NAME.</speech>
            <speech>This choice will clear your current ledger of discoveries, allowing you to seek new rarities within our bounds.</speech>
            <speech>Such a step is irreversible. Proceed only if your heart is set on curating a new collection that better captures the Safari's essence.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Welcome to our exclusive Ranger Costume exchange. Do you want to buy something?</speech>
        </speeches>
        <speeches id="2">
            <speech>Okay, see you later!</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Wynaut" shouldSleep="" speed="1" sprite="360" type="pokemon" x="12" y="32">
        <path>LEFTx1,UPx1,RIGHTx1,DOWNx1</path>
        <onCollisionSpeech gap="4">Wynaut?</onCollisionSpeech>
        <speech>Wynaut?</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Kecleon" shouldSleep="" speed="1" sprite="352" type="pokemon" x="42" y="17">
        <path>UPx2,LEFTx2,RIGHTx2,DOWNx2</path>
        <onCollisionSpeech gap="4">Kecleon!</onCollisionSpeech>
        <speech>Kecleon!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="3" name="Tauros" speed="1" sprite="128" type="pokemon" x="41" y="26">
        <path>LEFTx8,RIGHTx8</path>
        <onCollisionSpeech gap="4">Tauros!</onCollisionSpeech>
        <speech>Tauros!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="4" name="Toedscool" shouldSleep="" speed="1" sprite="72" type="pokemon" x="13" y="7">
        <path>RIGHTx5,LEFTx5</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="5" name="Girafarig" shouldSleep="" speed="1" sprite="203" type="pokemon" x="18" y="19">
        <path>RIGHTx3,LEFTx3</path>
        <onCollisionSpeech gap="4">Girafarig!</onCollisionSpeech>
        <speech>Girafarig!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="6" name="Zigzagoon" shouldSleep="" speed="1" sprite="263" type="pokemon" x="30" y="32">
        <path>RIGHTx4,LEFTx4</path>
        <onCollisionSpeech gap="4">Zigzagoon!</onCollisionSpeech>
        <speech>Zigzagoon!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="7" name="Pidove" speed="1" sprite="519" type="pokemon" x="46" y="36">
        <path>LEFTx2,RIGHTx2</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="8" name="Zigzagoon" shouldSleep="" speed="1" sprite="263" type="pokemon" x="31" y="13">
        <path>DOWNx2,LEFTx2,RIGHTx2,UPx2</path>
        <onCollisionSpeech gap="4">Zigzagoon!</onCollisionSpeech>
        <speech>Zigzagoon!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="9" name="Kecleon" shouldSleep="" speed="1" sprite="352" type="pokemon" x="17" y="27">
        <path>RIGHTx4,LEFTx4</path>
        <onCollisionSpeech gap="4">Kecleon!</onCollisionSpeech>
        <speech>Kecleon!</speech>
    </movingNpc>
</npcs>
