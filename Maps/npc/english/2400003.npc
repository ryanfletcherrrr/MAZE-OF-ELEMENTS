<npcs>
    <conversation id="1">
        <!-- First Battle (Classic Koga Style) -->
        <speeches id="1">
            <speech>Fwahaha! A mere child dares to challenge me?</speech>
            <speech>Very well. I am {COLOR=PURPLE}Koga{ENDCOLOR}, the Fuchsia City Gym Leader!</speech>
            <speech>My intricate techniques shall confound and dismantle you!</speech>
            <speech>{COLOR=PURPLE}Poison{ENDCOLOR} runs through my veins, and my Pokémon are masters of endurance and deception.</speech>
            <speech>Can you withstand our relentless assault, or will you succumb to the creeping venom?</speech>
            <speech>Let the battle begin!</speech>
        </speeches>
        <speeches id="2">
            <speech>Ah… You have proven yourself most formidable.</speech>
            <speech>As proof of your victory, I bestow upon you the {COLOR=GOLD}Soul Badge{ENDCOLOR}!</speech>
            <speech>With this badge, Pokémon up to {COLOR=CYAN}Level 60{ENDCOLOR} shall heed your command.</speech>
            <speech>Take this as well—{COLOR=PURPLE}TM84 Poison Jab{ENDCOLOR}!</speech>
            <speech>It is a fierce strike infused with venom, capable of striking swiftly and leaving your foes weakened.</speech>
            <speech>Use it wisely, and may your technique grow sharper with each battle.</speech>
        </speeches>
        <speeches id="3">
            <speech>Hmph. Your skills have yet to reach their peak.</speech>
            <speech>Return when you have honed your mind and body to withstand my toxic techniques.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ah, you hesitate? A wise warrior knows when to fight and when to retreat.</speech>
            <speech>When your resolve is absolute, step forward, and we shall battle once more.</speech>
        </speeches>
        <!-- Repeated Battle (More Intense & Thematic) -->
        <speeches id="5">
            <speech>Once more, you seek to challenge my discipline?</speech>
            <speech>Very well! A true ninja never stagnates, nor does he allow his blade to rust!</speech>
            <speech>{COLOR=PURPLE}Poison is patient… it waits, it weakens, and it conquers!{ENDCOLOR}</speech>
            <speech>Show me if your spirit remains unshaken!</speech>
        </speeches>
        <speeches id="6">
            <speech>Impressive… Once more, you have endured my relentless tactics.</speech>
            <speech>This marks your {COLOR=GOLD}$TOTAL_VICTORY{ENDCOLOR} victory against me, with {COLOR=CYAN}$CONSECUTIVE{ENDCOLOR} in a row.</speech>
            <speech>Your mastery grows like a sharpened blade—deadly, precise.</speech>
        </speeches>
        <speeches id="7">
            <speech>Even the most disciplined warrior can falter.</speech>
            <speech>Do not let this defeat consume you. Study my techniques, refine your strategy, and return when you are prepared.</speech>
            <speech>The shadows shall await your return.</speech>
        </speeches>
        <speeches id="8">
            <speech>Hesitation? Perhaps a moment of patience will serve you well.</speech>
            <speech>When you are ready, step forth, and I shall test you once more.</speech>
        </speeches>
        <speeches id="9">
            <speech>Your endurance impresses me, but even a ninja must recover.</speech>
            <speech>Return in {COLOR=YELLOW}$DURATION{ENDCOLOR}, and then we shall see if you have truly refined your technique.</speech>
        </speeches>
        <!-- Special Condition: Battle Requirement Not Met -->
        <speeches id="10">
            <speech>Hmm… You seek a rematch, yet you do not meet the challenge criteria.</speech>
            <speech>To test your skills against me again, you must have {COLOR=PURPLE}at least 3 Poison-type Pokémon{ENDCOLOR} in your team.</speech>
            <speech>Return when you are truly prepared, and we shall see if you can endure my toxic onslaught.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Koga's teachings flow like poison slow, steady, and lethal.</speech>
        </speeches>
        <speeches id="2">
            <speech>You resisted longer than I expected... impressive.</speech>
        </speeches>
        <speeches id="3">
            <speech>You resisted longer than I expected... impressive.</speech>
        </speeches>
        <speeches id="4">
            <speech>Master Koga always says... victory belongs to the patient.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Master Koga's precision is unmatched. I've studied his tactics for years!</speech>
        </speeches>
        <speeches id="2">
            <speech>So close... I thought I had you figured out.</speech>
        </speeches>
        <speeches id="3">
            <speech>So close... I thought I had you figured out.</speech>
        </speeches>
        <speeches id="4">
            <speech>Precision and patience that's the Koga way!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Battle's all about misdirection. Can you see through my tricks?</speech>
        </speeches>
        <speeches id="2">
            <speech>Hah! Guess you saw right through me...</speech>
        </speeches>
        <speeches id="3">
            <speech>Hah! Guess you saw right through me...</speech>
        </speeches>
        <speeches id="4">
            <speech>A little deception goes a long way!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Poison flows like breath unseen, yet deadly. Can you endure it?</speech>
        </speeches>
        <speeches id="2">
            <speech>Your movements... they're sharper than I expected.</speech>
        </speeches>
        <speeches id="3">
            <speech>Your movements... they're sharper than I expected.</speech>
        </speeches>
        <speeches id="4">
            <speech>You hesitated. Poison only needs one moment to take hold.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Watch closely! One wrong step, and you're trapped in my game.</speech>
        </speeches>
        <speeches id="2">
            <speech>You were quicker than I expected... impressive!</speech>
        </speeches>
        <speeches id="3">
            <speech>You were quicker than I expected... impressive!</speech>
        </speeches>
        <speeches id="4">
            <speech>Poison thrives on confusion... and I know how to keep you guessing.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>My Pokémon's fangs drip with venom. Care to test your endurance?</speech>
        </speeches>
        <speeches id="2">
            <speech>Even my fiercest beasts couldn't shake you.</speech>
        </speeches>
        <speeches id="3">
            <speech>Even my fiercest beasts couldn't shake you.</speech>
        </speeches>
        <speeches id="4">
            <speech>Don't underestimate my Pokémon's instincts. They always know when to strike.</speech>
        </speeches>
    </conversation>
</npcs>
