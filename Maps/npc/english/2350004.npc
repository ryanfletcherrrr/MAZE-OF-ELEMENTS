<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>I was hoping for a nice picnic outside, but I got lost in this cave Might as well battle to pass the time!</speech>
        </speeches>
        <speeches id="2">
            <speech>Well, that didn't go as planned Just like my picnic.</speech>
        </speeches>
        <speeches id="3">
            <speech>Well, that didn't go as planned Just like my picnic.</speech>
        </speeches>
        <speeches id="4">
            <speech>See? Even in a dark cave, a little fun and a good battle can brighten the mood!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>You think you can just stroll through Rock Tunnel? Without strength, you won't make it far!</speech>
        </speeches>
        <speeches id="2">
            <speech>Hmph...Maybe you're tougher than you look. Keep climbing.</speech>
        </speeches>
        <speeches id="3">
            <speech>Hmph...Maybe you're tougher than you look. Keep climbing.</speech>
        </speeches>
        <speeches id="4">
            <speech>Just as I thought. Strength isn't't just muscle its endurance!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>This cave holds ancient secrets but right now, I'm more interested in testing your battle skills!</speech>
        </speeches>
        <speeches id="2">
            <speech>Looks like I need to dig deeper into my training...</speech>
        </speeches>
        <speeches id="3">
            <speech>Looks like I need to dig deeper into my training...</speech>
        </speeches>
        <speeches id="4">
            <speech>Another discovery! Strategy and knowledge are just as important as raw power.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>..Shadows whisper of your arrival. Let's see if you have what it takes to walk among them.</speech>
        </speeches>
        <speeches id="2">
            <speech>The darkness fades but only for now. It always returns.</speech>
        </speeches>
        <speeches id="3">
            <speech>The darkness fades but only for now. It always returns.</speech>
        </speeches>
        <speeches id="4">
            <speech>Do you feel it? The weight of the unknown pressing in? Embrace it, or be lost to it</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Ahh, nothing like the cool air of a cave and a good battle! Let's take it nice and steady.</speech>
        </speeches>
        <speeches id="2">
            <speech>Well, that was a landslide. Guess I'll just sit here and enjoy the tunnel breeze.</speech>
        </speeches>
        <speeches id="3">
            <speech>Well, that was a landslide. Guess I'll just sit here and enjoy the tunnel breeze.</speech>
        </speeches>
        <speeches id="4">
            <speech>See? No need to rush strength comes from patience and a solid foundation!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>I think I'm heading the right way. But hey, a battle sounds more fun than checking my map!</speech>
        </speeches>
        <speeches id="2">
            <speech>Maybe losing and getting lost isn't my best combo.</speech>
        </speeches>
        <speeches id="3">
            <speech>Maybe losing and getting lost isn't my best combo.</speech>
        </speeches>
        <speeches id="4">
            <speech>See? Sometimes, wandering off the beaten path leads to success.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Hahaha! Rock Tunnel is my training ground, and you're just another boulder to crush!</speech>
        </speeches>
        <speeches id="2">
            <speech>What?! No way! That was supposed to be my landslide victory!</speech>
        </speeches>
        <speeches id="3">
            <speech>What?! No way! That was supposed to be my landslide victory!</speech>
        </speeches>
        <speeches id="4">
            <speech>That's how it's done! Power, confidence, and a bit of shouting never hurt!</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>A dark, damp cave isn't exactly glamorous but I never let my elegance fade. Shall we battle?</speech>
        </speeches>
        <speeches id="2">
            <speech>Ugh, now I'm all scuffed up and not just my pride.</speech>
        </speeches>
        <speeches id="3">
            <speech>Ugh, now I'm all scuffed up and not just my pride.</speech>
        </speeches>
        <speeches id="4">
            <speech>Grace and power true beauty shines no matter where you are!</speech>
        </speeches>
    </conversation>
    <movingNpc direction="RIGHT" id="1" name="Zubat" speed="1" sprite="41" type="pokemon" x="29" y="53">
        <path>RIGHTx4,LEFTx4</path>
        <onCollisionSpeech gap="4">Zuuubaat!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="ONIX" speed="1" sprite="95" type="pokemon" x="56" y="36">
        <path>DOWNx5,UPx5</path>
        <onCollisionSpeech gap="4">Oniiiiix!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="LEFT" id="3" name="Emma" speed="1" sprite="31" type="npc" x="45" y="33">
        <path>LEFTx4,RIGHTx4</path>
        <onCollisionSpeech gap="4"/>
        <speech>I'm not sure why, but my Nacli looks different from the others I've encountered and it sparkles when it comes out of its Poké Ball.</speech>
        <speech>Should I release it?</speech>
    </movingNpc>
    <npc direction="UP" hidden="false" id="4" name="Jasper" randomRotation="true" sprite="39" x="16" y="16">
        <speech>Back in my day, we had to waste an HM slot just to use Flash!</speech>
        <speech>If you're still doing that, lad, best get your eyes checked!</speech>
    </npc>
</npcs>
