<npcs>
    <npc direction="UP" id="1000" name="Sailor Orin" sprite="11" x="47" y="34">
        <speech>Whale whale whale ... what do we have here</speech>
        <speech>What do you know about the Marine Line, kid?</speech>
        <speech>So ... nothing, then? In that case, let me enlighten you.</speech>
        <speech>The Marine Line connects Lehar Town to the archipelago up north, which is otherwise inaccessible.
        </speech>
        <speech>How so, you ask? The answer is simple - the path to the islands is full of Whirlpools.</speech>
        <speech>And because of that, sailors like me cannot go there by sea, see?</speech>
    </npc>
    <npc direction="LEFT" id="1001" name="Fisherman Min" sprite="16" x="28" y="50">
        <speech>This right here is a great fishing spot.</speech>
        <speech>Oh wait! Something's on the line! ...</speech>
        <speech>aaannnd ... it's another Magikarp. Pfft, my luck is pathetic!</speech>
    </npc>
    <conversation id="1">
        <speeches id="1">
            <speech>Hey $PLAYER_NAME. I am blocking the Gym's entrance from these evil grunts.</speech>
            <speech>Let's help Izumi and wipe all these evil grunts out of this town!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Greetings! Welcome to Skynet Travel Technologies!</speech>
            <speech>Would you like to travel somewhere?</speech>
        </speeches>
        <speeches id="2">
            <speech>That's unfortunate. Please come back whenever you wish to travel elsewhere.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Hmm ... let's try and get that third badge, first.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>I'm feeling somewhat generous right now, so let me ask you a question, kid:</speech>
            <speech>Do you want a freebie? I believe that's what its called, nowadays</speech>
        </speeches>
        <speeches id="2">
            <speech>Interesting, you seem to be different than the others.</speech>
        </speeches>
        <speeches id="3">
            <speech>Here you go, then. You're just like the others ...</speech>
        </speeches>
        <speeches id="4">
            <speech>Return in 3 hours. I may feel generous again, who knows</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>You've beaten my two younger brothers, huh?</speech>
            <speech>I can imagine you're feeling pretty confident right now, and I don't blame you. But, I'm a lot stronger than either of them, so lets see what you've got!</speech>
        </speeches>
        <speeches id="2">
            <speech>Woah, you're good, huh! Or maybe I'm not that good?</speech>
            <speech>Pfft, nonsense! You're good, alright.</speech>
        </speeches>
        <speeches id="3">
            <speech>We can battle tomorrow too, if you're up for it.</speech>
        </speeches>
        <speeches id="4">
            <speech>Told you I'm strong ...</speech>
        </speeches>
        <speeches id="5">
            <speech>You're not good enough to battle me just yet.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Greetings! Welcome to the Bank of Jvaloh's ATM system!</speech>
            <speech>Would you like to withdraw or deposit money?</speech>
        </speeches>
        <speeches id="2">
            <speech>Please return whenever you wish to make a transaction.</speech>
        </speeches>
        <speeches id="3">
            <speech>This feature is available only to people with a 'bank membership'.</speech>
            <speech>For all non-members, our bank's main branch in Bijli City is available for use.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>What are you doing here?</speech>
        </speeches>
        <speeches id="2">
            <speech>Kid, you need to leave this region.</speech>
        </speeches>
        <speeches id="3">
            <speech>Kid, you need to leave this region.</speech>
        </speeches>
        <speeches id="4">
            <speech>Hope you don't show your face ever again.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>What are you doing here?</speech>
        </speeches>
        <speeches id="2">
            <speech>Kid, you need to leave this region.</speech>
        </speeches>
        <speeches id="3">
            <speech>Kid, you need to leave this region.</speech>
        </speeches>
        <speeches id="4">
            <speech>Hope you don't show your face ever again.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>What are you doing here?</speech>
        </speeches>
        <speeches id="2">
            <speech>Kid, you need to leave this region.</speech>
        </speeches>
        <speeches id="3">
            <speech>Kid, you need to leave this region.</speech>
        </speeches>
        <speeches id="4">
            <speech>Hope you don't show your face ever again.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>What are you doing here?</speech>
        </speeches>
        <speeches id="2">
            <speech>Kid, you need to leave this region.</speech>
        </speeches>
        <speeches id="3">
            <speech>Kid, you need to leave this region.</speech>
        </speeches>
        <speeches id="4">
            <speech>Hope you don't show your face ever again.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>What are you doing here?</speech>
        </speeches>
        <speeches id="2">
            <speech>Kid, you need to leave this region.</speech>
        </speeches>
        <speeches id="3">
            <speech>Kid, you need to leave this region.</speech>
        </speeches>
        <speeches id="4">
            <speech>Hope you don't show your face ever again.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <conversation id="12">
        <speeches id="1">
            <speech>I should defeat all the grunts before I try to speak with this guy.</speech>
        </speeches>
    </conversation>
    <conversation id="13">
        <speeches id="1">
            <speech>You again?</speech>
            <speech>What are you here for? Candies?</speech>
            <speech>Little kid, it's all done. We have already captured Suicune.</speech>
            <speech>We will now proceed to the next phase of our plan.</speech>
            <speech>Good job at defeating those weaklings though.</speech>
        </speeches>
    </conversation>
    <conversation id="14">
        <speeches id="1">
            <speech>Hello $PLAYER_NAME.</speech>
            <speech>I just won my 3rd badge and did speak with Izumi regarding the motive behind capturing of Suicune.</speech>
            <speech>She is unsure herself but she is worried.</speech>
            <speech>Lets continue our journey and try to find out who is behind all of this destruction and stop them.</speech>
            <speech>Izumi is waiting for you, good luck with your gym battle.</speech>
        </speeches>
    </conversation>

    <conversation id="15">
        <speeches id="1">
            <speech>Oh hey $PLAYER_NAME!</speech>
            <speech>Congrulations on the 3rd Gym Badge.</speech>
            <speech>I was leaving town, but I wanted to battle you before I leave.</speech>
            <speech>I want to see how far we both have gotten since we last battled.</speech>
        </speeches>
        <speeches id="2">
            <speech>Wow, you are really strong.</speech>
            <speech>I am not too far, considering this is my first time as a Pokémon trainer.</speech>
            <speech>By the way, the Ace Trainer nearby told me that there are evil people up ahead.</speech>
            <speech>Let's be careful. I will see you around.</speech>
        </speeches>
        <speeches id="3">
            <speech>Wow, you are really strong.</speech>
            <speech>I am not too far, considering this is my first time as a Pokémon trainer.</speech>
            <speech>By the way, the Ace Trainer nearby told me that there are evil people up ahead.</speech>
            <speech>Let's be careful. I will see you around.</speech>
        </speeches>
        <speeches id="4">
            <speech>Uh oh! Did I just defeat you? I am sorry...</speech>
            <speech>You were meant to be strong...</speech>
        </speeches>
        <speeches id="5">
            <speech></speech>
        </speeches>
    </conversation>

    <conversation id="16">
        <speeches id="1">
            <speech>So you are the kid who brought balance back to Jvaloh...</speech>
            <speech>Quite young I must say...</speech>
            <speech>Anyway, I have meditated for a whole 50 years of my life in order to speak telepathically to Suicune.</speech>
            <speech>I did it so that I could protect Jvaloh from any unseen danger. And look how that went</speech>
            <speech>You want to take care of the Suicune? Hmm, after what happened in Jvaloh I think Suicune won't mind a master.</speech>
            <speech>But for me to summon it for you, I need to test your strength.</speech>
            <speech>Defeat me and I will summon Suicune for you!</speech>
        </speeches>
        <speeches id="2">
            <speech>Step aside!</speech>
            <speech>...</speech>
            <speech>Suicune has now appeared in Jvaloh.</speech>
            <speech>Good luck trainer!</speech>
        </speeches>
        <speeches id="3">
            <speech>Not too soon kid. It takes me time to gather energy to communicate telepathically.</speech>
            <speech>Come back after $DAYS.</speech>
        </speeches>
        <speeches id="4">
            <speech>You need to train further. Come back once you are ready.</speech>
        </speeches>
        <speeches id="5">
            <speech></speech>
        </speeches>
    </conversation>
</npcs>
