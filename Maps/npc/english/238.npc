<npcs>
    <conversation id="13">
        <speeches id="1">
            <speech>A huge {COLOR=YELLOW}Snorlax{ENDCOLOR} is sprawled across the bridge, blocking the way!</speech>
            <speech>Its chest rises and falls with each slow, rumbling breath...</speech>
            <speech>No matter what you do, it remains completely unbothered.</speech>
            <speech>There must be a way to wake it up...</speech>
        </speeches>
    </conversation>
    <conversation id="1">
        <speeches id="1">
            <speech>A huge {COLOR=YELLOW}Snorlax{ENDCOLOR} is sprawled across the bridge, blocking the way!</speech>
            <speech>Its chest rises and falls with each slow, rumbling breath...</speech>
            <speech>No matter what you do, it remains completely unbothered.</speech>
            <speech>There must be a way to wake it up...</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>A huge {COLOR=YELLOW}Snorlax{ENDCOLOR} is sprawled across the bridge, blocking the way!</speech>
            <speech>Its snoring echoes across the water, drowning out the sounds of the waves.</speech>
            <speech>No matter what you do, it remains completely unbothered.</speech>
            <speech>There must be a way to wake it up...</speech>
        </speeches>
        <speeches id="2">
            <speech>The {COLOR=YELLOW}Snorlax{ENDCOLOR} shifts slightly as you approach, twitching its ears.</speech>
            <speech>Do you want to play the {COLOR=CYAN}Poké Flute{ENDCOLOR} to try waking it up?</speech>
        </speeches>
        <speeches id="3">
            <speech>You hesitate and decide not to play the {COLOR=CYAN}Poké Flute{ENDCOLOR}.</speech>
            <speech>The {COLOR=YELLOW}Snorlax{ENDCOLOR} lets out a deep sigh and rolls over slightly, still blocking the path.</speech>
        </speeches>
        <speeches id="4">
            <speech>You take a deep breath and begin playing the {COLOR=CYAN}Poké Flute{ENDCOLOR}...</speech>
            <speech>A gentle yet powerful melody fills the air, reaching the ears of the sleeping giant.</speech>
            <speech>The {COLOR=YELLOW}Snorlax{ENDCOLOR} stirs, its eyes flickering open!</speech>
            <speech>It lets out a long yawn, stretches... and then suddenly looks {COLOR=RED}extremely irritated{ENDCOLOR}!</speech>
            <speech>With a roar, it attacks in a {COLOR=RED}grumpy rage{ENDCOLOR} and then runs away!</speech>
        </speeches>
        <completion id="5">
            <!-- This can remain empty as instructed -->
        </completion>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Rainy days are the best! Everything feels so fresh and alive, just like my Pokémon in battle!</speech>
        </speeches>
        <speeches id="2">
            <speech>Aww Guess my sunshine got a little cloudy.</speech>
        </speeches>
        <speeches id="3">
            <speech>Aww Guess my sunshine got a little cloudy.</speech>
        </speeches>
        <speeches id="4">
            <speech>See? A little rain never hurt anyone, except maybe your battle strategy!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Patience and skill that's what makes a great angler and a great trainer. Let's see if you've got both!</speech>
        </speeches>
        <speeches id="2">
            <speech>Guess you've got more skill than I expected. But I still bet I can catch a bigger fish than you!</speech>
        </speeches>
        <speeches id="3">
            <speech>Guess you've got more skill than I expected. But I still bet I can catch a bigger fish than you!</speech>
        </speeches>
        <speeches id="4">
            <speech>See? A battle is just like fishing you gotta know when to strike!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Battling? Sure, why not? Not like the fish are biting right now anyway.</speech>
        </speeches>
        <speeches id="2">
            <speech>Well, that sure didn't go swimmingly Maybe I should just stick to fishing.</speech>
        </speeches>
        <speeches id="3">
            <speech>Well, that sure didn't go swimmingly Maybe I should just stick to fishing.</speech>
        </speeches>
        <speeches id="4">
            <speech>Not bad, kid! But I think I'll stick to my fishing rod it never loses!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Speed, endurance, and strategy just like a real triathlon, this battle will test all three!</speech>
        </speeches>
        <speeches id="2">
            <speech>Huff... Maybe I should've warmed up more before this battle!</speech>
        </speeches>
        <speeches id="3">
            <speech>Huff... Maybe I should've warmed up more before this battle!</speech>
        </speeches>
        <speeches id="4">
            <speech>Victory! Just like crossing the finish line, nothing feels better!</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>The fresh air, good food, and a Pokémon battle what could make a picnic better?</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh no, my sandwiches are getting squished! I was too distracted!</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh no, my sandwiches are getting squished! I was too distracted!</speech>
        </speeches>
        <speeches id="4">
            <speech>Winning and a nice meal? Now that's a perfect picnic!</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>People laugh at Magikarp, but just wait until it evolves! Wanna see why they call it mighty?</speech>
        </speeches>
        <speeches id="2">
            <speech>Ack! Maybe Magikarp isn't ready yet but soon! SOON!</speech>
        </speeches>
        <speeches id="3">
            <speech>Ack! Maybe Magikarp isn't ready yet but soon! SOON!</speech>
        </speeches>
        <speeches id="4">
            <speech>See? Magikarp's not weak its just biding its time!</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>Music and battles are all about rhythm! Let's see if you can keep up with my beat!</speech>
        </speeches>
        <speeches id="2">
            <speech>Guess I hit a wrong note there. Gotta practice my chords and my battle skills.</speech>
        </speeches>
        <speeches id="3">
            <speech>Guess I hit a wrong note there. Gotta practice my chords and my battle skills.</speech>
        </speeches>
        <speeches id="4">
            <speech>That was electric! You have to feel the music if you want to win!</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>My Pokémon soar through the skies, free as the wind! Can you clip their wings?</speech>
        </speeches>
        <speeches id="2">
            <speech>Looks like my flock needs a little more training...</speech>
        </speeches>
        <speeches id="3">
            <speech>Looks like my flock needs a little more training...</speech>
        </speeches>
        <speeches id="4">
            <speech>You can't catch the wind, and you can't beat the skies!</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>A good fisherman knows when to wait and when to reel in. Let's see if you know when to strike!</speech>
        </speeches>
        <speeches id="2">
            <speech>Reeled in and tossed back Guess I'll try again tomorrow.</speech>
        </speeches>
        <speeches id="3">
            <speech>Reeled in and tossed back Guess I'll try again tomorrow.</speech>
        </speeches>
        <speeches id="4">
            <speech>Patience always pays off! Just like in fishing, just like in battle!</speech>
        </speeches>
    </conversation>
    <conversation id="12">
        <speeches id="1">
            <speech>I'm not just cute, you know! My Pokémon are super tough!</speech>
        </speeches>
        <speeches id="2">
            <speech>Hmph! Maybe being cute isn't enough to win...</speech>
        </speeches>
        <speeches id="3">
            <speech>Hmph! Maybe being cute isn't enough to win...</speech>
        </speeches>
        <speeches id="4">
            <speech>See? Tough and adorable that's the perfect combo!</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Ernie" speed="1" sprite="16" type="npc" x="17" y="20">
        <path>DOWNx3,UPx3</path>
        <onCollisionSpeech gap="4"/>
        <speech>I'm so excited to start fishing here!</speech>
        <speech>There are tons of Pokémon just waiting to be caught.</speech>
        <speech>Now i'm just waiting on my best friend, Bert!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Fearow" speed="1" sprite="22" type="pokemon" x="39" y="40">
        <path>DOWNx7,UPx7</path>
        <onCollisionSpeech gap="4">Feaaar!!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="3" name="Cramorant" speed="1" sprite="1130" type="pokemon" x="12" y="45">
        <path>RIGHTx3,UPx4,DOWNx4,LEFTx3</path>
        <onCollisionSpeech gap="4">CRAAHH-rak!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="UP" id="4" name="Luvdisc" speed="1" sprite="370" type="pokemon" x="35" y="22">
        <path>UPx5,LEFTx5,RIGHTx5,DOWNx5</path>
        <onCollisionSpeech gap="4">Diiiiisc!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="DOWN" id="5" name="Skwovet" speed="1" sprite="1097" type="pokemon" x="33" y="83">
        <path>DOWNx3,RIGHTx3,LEFTx3,UPx3</path>
        <onCollisionSpeech gap="4">Squee-squee-squeek!</onCollisionSpeech>
    </movingNpc>
    <npc direction="UP" hidden="false" id="6" name="Henley" randomRotation="false" sprite="25" x="7" y="84">
        <speech>There are quite a few nice Pokémon in this area.</speech>
        <speech>I'm going to catch all the Bug-types!</speech>
    </npc>
    <movingNpc direction="RIGHT" id="7" name="Fearow" speed="1" sprite="22" type="pokemon" x="10" y="58">
        <path>RIGHTx5,LEFTx5</path>
        <onCollisionSpeech gap="4">Feaaar!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="LEFT" id="8" name="Daisy" speed="1" sprite="28" type="npc" x="16" y="65">
        <path>LEFTx4,RIGHTx4</path>
        <onCollisionSpeech gap="4"/>
        <speech>Feeling lost?</speech>
        <speech>If you keep going down, you'll eventually reach Fuchsia City.</speech>
        <speech>Take the shortcut left at the crossroads, and you'll end up in Vermilion City.</speech>
        <speech>If you head all the way up, you'll find yourself in Lavender Town!</speech>
    </movingNpc>
    <movingNpc direction="LEFT" id="9" name="Basculin" speed="1" sprite="550" type="pokemon" x="29" y="96">
        <path>LEFTx3,UPx5,LEFTx2,RIGHTx2,DOWNx5,RIGHTx3</path>
        <onCollisionSpeech gap="4">SKRRAK!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="DOWN" id="10" name="Marill" speed="1" sprite="183" type="pokemon" x="30" y="57">
        <path>DOWNx12,RIGHTx8,UPx12,LEFTx8</path>
        <onCollisionSpeech gap="4">Mariiiii!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="UP" id="11" name="Ben" speed="1" sprite="21" type="npc" x="31" y="48">
        <path>UPx5,RIGHTx1,DOWNx5,LEFTx1</path>
        <onCollisionSpeech gap="4"/>
        <speech>Everyone's busy worrying about fishing or getting to their next stop.</speech>
        <speech>Me? I'm just focused on getting in some good swim practice!</speech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="13" name="Pinsir" speed="1" sprite="127" type="pokemon" x="0" y="87">
        <path>RIGHTx2,UPx3,DOWNx3,LEFTx2</path>
        <onCollisionSpeech gap="4">Pinsiiiiir!</onCollisionSpeech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="14" name="Summer" randomRotation="true" sprite="60" x="30" y="92">
        <speech>Be sure to revisit places you've already explored every now and then.</speech>
        <speech>You never know! Something new might have opened up, and you could be the first to discover it!</speech>
    </npc>
</npcs>
