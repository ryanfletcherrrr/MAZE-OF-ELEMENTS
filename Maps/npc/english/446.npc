<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Hey, you!</speech>
            <speech>Stay away from the Weather Institute. It's not safe.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>$PLAYER_NAME! Gosh, where have you been hiding? I've been looking all over for you!</speech>
            <speech>Wow! So that's a Mega Bracelet? And you can use it for Mega Evolution...</speech>
            <speech>Where did you get that thing on your wrist? That's a pretty fancy-looking bracelet...</speech>
            <speech>...  I guess now you can keep getting even closer to your Pokémon, huh?</speech>
            <speech>Some guys have all the luck... But I'm not about to lose to you and some accessory!</speech>
            <speech>Let's see who's best in battle! Are your Pokémon all ready? Of course, they are! Let's go!</speech>
        </speeches>
        <speeches id="2">
            <speech>Achah! You're as strong as I expected!</speech>
            <speech>Well, till we meet again! And next time I won't lose!</speech>
        </speeches>
        <speeches id="3">
            <speech>Achah! You're as strong as I expected!</speech>
            <speech>Well, till we meet again! And next time I won't lose!</speech>
        </speeches>
        <speeches id="4">
            <speech>It takes more to be a trainer than just flaunting fancy accessories.</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>I'm prepared to protect nature by any means necessary!</speech>
        </speeches>
        <speeches id="2">
            <speech>Are you listening? Remember this... Never underestimate the power of nature...</speech>
        </speeches>
        <speeches id="3">
            <speech>Are you listening? Remember this... Never underestimate the power of nature...</speech>
        </speeches>
        <speeches id="4">
            <speech>Everything has its origin in nature! Everyone should revere it!</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>The only people who can pull off furisode are flashy girls and old ladies, right?</speech>
        </speeches>
        <speeches id="2">
            <speech>Don't you think old ladies look super cute in furisode?</speech>
        </speeches>
        <speeches id="3">
            <speech>Don't you think old ladies look super cute in furisode?</speech>
        </speeches>
        <speeches id="4">
            <speech>You had better think about your age when picking out clothes, right?</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>Obedient Pokémon, selfish Pokémon... Pokémon have unique characteristics.</speech>
        </speeches>
        <speeches id="2">
            <speech>Unlike my diabolical self, these are some good Pokémon.</speech>
        </speeches>
        <speeches id="3">
            <speech>Unlike my diabolical self, these are some good Pokémon.</speech>
        </speeches>
        <speeches id="4">
            <speech>It is important to nurture and train each Pokémon's characteristics.</speech>
        </speeches>
    </conversation>
    <conversation id="12">
        <speeches id="1">
            <speech>The secret to my Pokémon's strength is their specially blended food.</speech>
        </speeches>
        <speeches id="2">
            <speech>How could that happen to my Pokémon... What are you feeding your Pokémon?</speech>
        </speeches>
        <speeches id="3">
            <speech>How could that happen to my Pokémon... What are you feeding your Pokémon?</speech>
        </speeches>
        <speeches id="4">
            <speech>How about that? Strong, huh? What you eat is important!</speech>
        </speeches>
    </conversation>
    <conversation id="13">
        <speeches id="1">
            <speech>In my pursuit of success, I became lonely beyond all imagining...</speech>
        </speeches>
        <speeches id="2">
            <speech>Those with overwhelming abilities can welcome loneliness at times.</speech>
        </speeches>
        <speeches id="3">
            <speech>Those with overwhelming abilities can welcome loneliness at times.</speech>
        </speeches>
        <speeches id="4">
            <speech>The loneliness of genius... There's no way you could possibly comprehend it.</speech>
        </speeches>
    </conversation>
    <conversation id="14">
        <speeches id="1">
            <speech>I need to be on a bike with acro tires in order to traverse this ledge.</speech>
        </speeches>
    </conversation>
    <conversation id="15">
        <speeches id="1">
            <speech>Don't be nervous leave it to me. If it's technique we're talking about, I'm confident.</speech>
        </speeches>
        <speeches id="2">
            <speech>For my Pokémon to not even stand a chance, you must be quite the technician!</speech>
        </speeches>
        <speeches id="3">
            <speech>For my Pokémon to not even stand a chance, you must be quite the technician!</speech>
        </speeches>
        <speeches id="4">
            <speech>How was it? It was fun, right? I knew my technique would win out!</speech>
        </speeches>
    </conversation>

    <conversation id="18">
        <speeches id="1">
            <speech>Hello, $PLAYER_NAME! I'm in a bit of a situation here.</speech>
            <speech>We were studying the Feebas phenomenon when a Sceptile, affected by some extreme weather changes, started causing chaos.</speech>
            <speech>It seems the Weather Institute's experiment might have gone awry, and now, they can't control the weather, influencing Sceptile's behavior.</speech>
            <speech>The institute and I have developed a lightning condenser we believe can calm Sceptile, but it requires Treecko Scales to work.</speech>
            <speech>These scales have unique properties that make them essential for the condenser. Could you help us gather them?</speech>
            <speech>You'll find Treeckos in areas dense with vegetation. The scales are crucial for our device and further research at the institute.</speech>
            <speech>Once we have enough scales, we can build the condenser and hopefully revert Sceptile to its normal state. I'm counting on your help.</speech>
            <speech>Please, $PLAYER_NAME, we need those scales to prevent any more havoc. Will you assist us in this urgent matter?</speech>
        </speeches>
        <speeches id="2">
            <speech>How goes the hunt for Treecko Scales, $PLAYER_NAME? Those little guys can be elusive, but their scales are key to our solution.</speech>
            <speech>The Weather Institute's scientists are on edge, and without the condenser, we're at a standstill. We're all relying on your success.</speech>
            <speech>Remember, the scales you collect will help us calm the rampaging Sceptile and restore balance to the area's weather system.</speech>
            <speech>Thank you for taking on this task. It's not every day we face such a challenge, but I believe in you. Keep up the good work!</speech>
        </speeches>
    </conversation>

    <conversation id="19">
        <speeches id="1">
            <speech>**The air vibrates with tension as Mega Sceptile's overgrown energy crackles, reacting wildly to the area's disturbed weather.**</speech>
            <speech>**Leaves whirl in a frenzied dance, each movement of Mega Sceptile sharp and unpredictable.</speech>
            <speech>Will the condenser's power be enough?**</speech>
            <speech>**Mega Sceptile's roars slice through the turmoil, a challenge to the storm and to your courage.**</speech>
        </speeches>
        <speeches id="2">
            <speech>**Slowly, the storm within Mega Sceptile begins to quell, the lightning condenser harmonizing with its natural energy.**</speech>
            <speech>**'The tempest inside me quiets, Trainer.</speech>
            <speech>Your actions... they speak louder than any battle cry,'</speech>
            <speech>the newfound calm seems to acknowledge.**</speech>
            <speech>**With a nod of respect, Mega Sceptile retreats into the forest's depths,</speech>
            <speech>its chaotic energy now a mere whisper among the trees.**</speech>
        </speeches>
        <speeches id="3">
            <speech>**Hesitation only fuels Mega Sceptile's restlessness. 'Victory favors the bold,' the storm around you seems to rage.**</speech>
            <speech>**'Come back when you're ready to stand firm against the gale.</speech>
            <speech>Until then, we walk different paths,' the rustling leaves seem to say.**</speech>
        </speeches>
        <speeches id="4">
            <speech>**Mega Sceptile's laughter is almost lost in the howling wind.</speech>
            <speech>'Is it the storm you fear, Trainer?' it mocks from within the tempest.**</speech>
            <speech>**'Find your footing amidst the chaos. Only then, consider facing me once more,' the whispering canopy advises as you reconsider your approach.**</speech>
        </speeches>
        <speeches id="5">
            <speech>**Mega Sceptile's aura is palpable, a wild force untamed by the recent experiments gone awry.**</speech>
            <speech>**Its calls, a blend of defiance and challenge, echo for a challenger to emerge.</speech>
            <speech>**Without the lightning condenser, engaging with Mega Sceptile seems an insurmountable task.**</speech>
        </speeches>
    </conversation>

    <conversation id="20">
        <speeches id="1">
            <speech>Despite our efforts, Mega Sceptile is still agitated. Our approach hasn't fully penetrated its frenzy. Yet, I remain hopeful, $PLAYER_NAME.</speech>
            <speech>We may need to reassess our strategy or explore alternate methods to pacify it. Abandoning hope is not an option for us.</speech>
        </speeches>
        <speeches id="2">
            <speech>Success! The Lightning Condenser's effect was more profound than I anticipated. Mega Sceptile's rage is subsiding.</speech>
            <speech>Your determination made this possible, $PLAYER_NAME!</speech>
            <speech>This milestone not only brings peace to Mega Sceptile but also enriches our comprehension of Pokémon's environmental responses.</speech>
            <speech>Your involvement has been crucial, and I'm truly grateful.</speech>
            <speech>Your prowess has inspired me to reconsider my hiatus from battling.</speech>
            <speech>Would you grace me with your presence for a battle at my residence in Fallarbor?</speech>
            <speech>It seems you've rekindled a flame I thought had dimmed.</speech>
        </speeches>
        <speeches id="3">
            <speech>Declining, are we? That's quite alright. The timing must be perfect, much like the precision in our research.</speech>
            <speech>Your success today prompts me to reflect on my own journey.</speech>
            <speech>Perhaps it's time I emerged from my scholarly retreat to once again embrace the challenge of battle.</speech>
            <speech>Your assistance today has been nothing short of transformative, $PLAYER_NAME.</speech>
            <speech>It's reawakened a part of me I had set aside. When you're ready, I hope to test my mettle against yours.</speech>
            <speech>Until then, I shall immerse myself in my studies, invigorated by the thought of our future encounter.</speech>
        </speeches>
        <speeches id="4">
            <speech>That's wonderful to hear! I'll eagerly await your arrival at my home in Fallarbor.</speech>
            <speech>It's a chance not just to battle but to learn from each other.</speech>
            <speech>Your assistance with Mega Sceptile has been a beacon of hope. I'm looking forward to our battle and further collaborations.</speech>
            <speech>See you in Fallarbor, $PLAYER_NAME!</speech>
        </speeches>
        <speeches id="5" />
    </conversation>

    <movingNpc direction="DOWN" id="1" name="Sharpedo" speed="1" sprite="319" type="pokemon" x="29" y="66">
        <path>LEFTx10,UPx8,RIGHTx10,DOWNx8</path>
        <onCollisionSpeech gap="4"/>
        <speech>Sharpedo!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Sharpedo" speed="1" sprite="319" type="pokemon" x="19" y="58">
        <path>RIGHTx10,DOWNx8,LEFTx10,UPx8</path>
        <onCollisionSpeech gap="4"/>
        <speech>Sharpedo!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="3" name="Pelipper" speed="1" sprite="279" type="pokemon" x="28" y="110">
        <path>UPx2,RIGHTx6,DOWNx2,LEFTx6</path>
        <onCollisionSpeech gap="4">Pelipper!</onCollisionSpeech>
        <speech>Pelipper!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="4" name="Pelipper" speed="1" sprite="279" type="pokemon" x="37" y="98">
        <path>UPx12,RIGHTx4,DOWNx12,LEFTx4</path>
        <onCollisionSpeech gap="4">Pelipper!</onCollisionSpeech>
        <speech>Pelipper!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="5" name="Sharpedo" speed="1" sprite="319" type="pokemon" x="39" y="102">
        <path>UPx20,DOWNx20</path>
        <onCollisionSpeech gap="4">Sharpedo!</onCollisionSpeech>
        <speech>Sharpedo!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="6" name="Nuzleaf" shouldSleep="" speed="1" sprite="274" type="pokemon" x="41" y="109">
        <path>DOWNx4,UPx4</path>
        <onCollisionSpeech gap="4">Nuzleaf!</onCollisionSpeech>
        <speech>Nuzleaf!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="7" name="Seedot" shouldSleep="" speed="1" sprite="273" type="pokemon" x="12" y="100">
        <path>UPx3,DOWNx3</path>
        <onCollisionSpeech gap="4">Seedot!</onCollisionSpeech>
        <speech>Seedot!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="8" name="Tentacruel" shouldSleep="" speed="1" sprite="73" type="pokemon" x="27" y="74">
        <path>RIGHTx7,LEFTx7</path>
        <onCollisionSpeech gap="4">Tentacruel!</onCollisionSpeech>
        <speech>Tentacruel!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="9" name="Castform" shouldSleep="" speed="1" sprite="351" type="pokemon" x="15" y="49">
        <path>LEFTx3,RIGHTx3</path>
        <onCollisionSpeech gap="4">Castform!</onCollisionSpeech>
        <speech>Castform!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="10" name="Lombre" shouldSleep="" speed="1" sprite="271" type="pokemon" x="20" y="72">
        <path>LEFTx3,RIGHTx3</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="11" name="Carvanha" speed="1" sprite="318" type="pokemon" x="21" y="12">
        <path>LEFTx10,UPx4,DOWNx4,RIGHTx10</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="12" name="Carvanha" speed="1" sprite="318" type="pokemon" x="21" y="5">
        <path>LEFTx7,RIGHTx7</path>
        <onCollisionSpeech gap="4">Carvanha!</onCollisionSpeech>
        <speech>Carvanha!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="13" name="Lotad" shouldSleep="" speed="1" sprite="270" type="pokemon" x="20" y="30">
        <path>UPx5,DOWNx5</path>
        <onCollisionSpeech gap="4">Lotad!</onCollisionSpeech>
        <speech>Lotad!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="14" name="Shiftry" shouldSleep="" speed="1" sprite="275" type="pokemon" x="13" y="33">
        <path>LEFTx6,RIGHTx6</path>
        <onCollisionSpeech gap="4">Shiftry!</onCollisionSpeech>
        <speech>Shiftry!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="15" name="Carvanha" speed="1" sprite="318" type="pokemon" x="25" y="35">
        <path>UPx6,DOWNx6</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="16" name="Tropius" shouldSleep="" speed="1" sprite="357" type="pokemon" x="38" y="11">
        <path>DOWNx4,UPx4</path>
        <onCollisionSpeech gap="4">Tropius!</onCollisionSpeech>
        <speech>Tropius!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="17" name="Tropius" shouldSleep="" speed="1" sprite="357" type="pokemon" x="38" y="28">
        <path>LEFTx2,DOWNx3,UPx3,RIGHTx2</path>
        <onCollisionSpeech gap="4">Tropius!</onCollisionSpeech>
        <speech>Tropius!</speech>
    </movingNpc>
</npcs>
