<npcs>
    <movingNpc direction="DOWN" id="1" name="Duskull" speed="1" sprite="355" type="pokemon" x="8" y="23">
        <path>LEFTx1,DOWNx2,UPx2,RIGHTx1</path>
        <onCollisionSpeech gap="4">Duskull</onCollisionSpeech>
        <speech>Duskull</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Shuppet" speed="1" sprite="353" type="pokemon" x="13" y="7">
        <path>DOWNx5,RIGHTx1,LEFTx1,UPx5</path>
        <onCollisionSpeech gap="4">Shuppet!</onCollisionSpeech>
        <speech>Shuppet!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="3" name="Duskull" speed="1" sprite="355" type="pokemon" x="24" y="8">
        <path>DOWNx2,LEFTx2,RIGHTx2,UPx2</path>
        <onCollisionSpeech gap="4">Duskull!</onCollisionSpeech>
        <speech>Duskull!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="4" name="Shuppet" speed="1" sprite="353" type="pokemon" x="38" y="11">
        <path>LEFTx11,RIGHTx11</path>
        <onCollisionSpeech gap="4">Shuppet!</onCollisionSpeech>
        <speech>Shuppet!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="6" name="Chimecho" speed="1" sprite="358" type="pokemon" x="71" y="31">
        <path>UPx4,DOWNx4</path>
        <onCollisionSpeech gap="4">Chimecho!</onCollisionSpeech>
        <speech>Chimecho!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="7" name="Dusknoir" speed="1" sprite="477" type="pokemon" x="36" y="34">
        <path>LEFTx16,UPx1,DOWNx1,RIGHTx16</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="8" name="Duskull" speed="1" sprite="355" type="pokemon" x="23" y="58">
        <path>DOWNx3,UPx3</path>
        <onCollisionSpeech gap="4">Duskull!</onCollisionSpeech>
        <speech>Duskull!</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="11" name="Hex Maniac Esmeralda" randomRotation="true" sprite="169" x="41" y="88">
        <speech>Sableye lead quiet lives deep inside caverns.</speech>
        <speech>They are feared, however, because these Pokémon are thought to steal the spirits of people...</speech>
        <speech>When their eyes burn with a sinister glow in the darkness.</speech>
    </npc>
    <npc direction="UP" hidden="false" id="12" name="Hex Maniac Lilith" randomRotation="true" sprite="170" x="35" y="60">
        <speech>Duskull can pass through any wall no matter how thick it may be.</speech>
        <speech>Once this Pokémon chooses a target, it will doggedly pursue the intended victim until the break of dawn.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="13" name="Hex Maniac Morrigan" randomRotation="true" sprite="171" x="41" y="30">
        <speech>Dusknoir's body is entirely hollow. There is nothing at all inside. It is said that its body is like a black hole.</speech>
        <speech>This Pokémon will absorb anything into its body, but nothing will ever come back out!</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="14" name="Hex Maniac Nyx" randomRotation="true" sprite="170" x="45" y="13">
        <speech>Shuppet is attracted by feelings of jealousy and vindictiveness.</speech>
        <speech>If someone develops strong feelings of vengeance, this Pokémon will appear in a swarm and line up beneath the eaves of that person's home.</speech>
    </npc>
    <movingNpc direction="DOWN" id="15" name="Banette" speed="1" sprite="354" type="pokemon" x="49" y="68">
        <path>RIGHTx2,DOWNx2,LEFTx2,UPx2</path>
        <onCollisionSpeech gap="4">Banette!</onCollisionSpeech>
        <speech>Banette!</speech>
    </movingNpc>
    <npc direction="LEFT" hidden="false" id="16" name="Hex maniac Thalia" randomRotation="true" sprite="171" x="63" y="65">
        <speech>Banette generates energy for laying strong curses by sticking pins into its own body.</speech>
        <speech>This Pokémon was originally a pitiful plush doll that was thrown away.</speech>
    </npc>
    <movingNpc direction="DOWN" id="5" name="Sableye!" speed="1" sprite="302" type="pokemon" x="65" y="11">
        <path>LEFTx6,RIGHTx6</path>
        <onCollisionSpeech gap="4">Sableye!</onCollisionSpeech>
        <speech>Sableye!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="17" name="Sableye" shouldSleep="" speed="1" sprite="302" type="pokemon" x="29" y="84">
        <path>LEFTx2,UPx2,DOWNx2,RIGHTx2</path>
        <onCollisionSpeech gap="4">Sableye!</onCollisionSpeech>
        <speech>Sableye!</speech>
    </movingNpc>
    <conversation id="1">
        <speeches id="1">
            <speech>Whispers of ancient power echo through the night. Do you dare to heed their call?</speech>
            <speech>Under the watchful gaze of the moon, our covenant assembles. The challenge of the ages awaits your courage.</speech>
        </speeches>
        <speeches id="2">
            <speech>Though you triumph, the eternal darkness weaves its patience. Our resolve remains unshaken, undimmed.</speech>
            <speech>The shadows part, revealing a path to our enigmatic leader. A reward for the brave, the strong, the victorious.</speech>
        </speeches>
        <speeches id="3">
            <speech>Incredible! Your strength pierces the veil of night, rivaling the ancient powers we command.</speech>
            <speech>Veiled in secrecy, our leader awaits. Your victory has earned you an audience in the heart of shadows.</speech>
            <speech>Our rituals, bound to the celestial dance, find no favor at this hour. The right moment eludes us still.</speech>
            <speech>Return when the moon reigns supreme over the night, in $DURATION. Only then shall the veil lift.</speech>
        </speeches>
        <speeches id="4">
            <speech>Incredible! Your strength pierces the veil of night, rivaling the ancient powers we command.</speech>
            <speech>Veiled in secrecy, our leader awaits. Your victory has earned you an audience in the heart of shadows.</speech>
        </speeches>
        <speeches id="5">
            <speech>The celestial bodies have yet to align; our power lies dormant, awaiting the ordained time.</speech>
            <speech>Return on Friday, when the moon's glow pierces the veil of reality, and our power is at its zenith.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Whispers of ancient power echo through the night. Do you dare to heed their call?</speech>
            <speech>Under the watchful gaze of the moon, our covenant assembles. The challenge of the ages awaits your courage.</speech>
        </speeches>
        <speeches id="2">
            <speech>Though you triumph, the eternal darkness weaves its patience. Our resolve remains unshaken, undimmed.</speech>
            <speech>The shadows part, revealing a path to our enigmatic leader. A reward for the brave, the strong, the victorious.</speech>
        </speeches>
        <speeches id="3">
            <speech>Incredible! Your strength pierces the veil of night, rivaling the ancient powers we command.</speech>
            <speech>Veiled in secrecy, our leader awaits. Your victory has earned you an audience in the heart of shadows.</speech>
            <speech>Our rituals, bound to the celestial dance, find no favor at this hour. The right moment eludes us still.</speech>
            <speech>Return when the moon reigns supreme over the night, in $DURATION. Only then shall the veil lift.</speech>
        </speeches>
        <speeches id="4">
            <speech>Incredible! Your strength pierces the veil of night, rivaling the ancient powers we command.</speech>
            <speech>Veiled in secrecy, our leader awaits. Your victory has earned you an audience in the heart of shadows.</speech>
        </speeches>
        <speeches id="5">
            <speech>The celestial bodies have yet to align; our power lies dormant, awaiting the ordained time.</speech>
            <speech>Return on Friday, when the moon's glow pierces the veil of reality, and our power is at its zenith.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Whispers of ancient power echo through the night. Do you dare to heed their call?</speech>
            <speech>Under the watchful gaze of the moon, our covenant assembles. The challenge of the ages awaits your courage.</speech>
        </speeches>
        <speeches id="2">
            <speech>Though you triumph, the eternal darkness weaves its patience. Our resolve remains unshaken, undimmed.</speech>
            <speech>The shadows part, revealing a path to our enigmatic leader. A reward for the brave, the strong, the victorious.</speech>
        </speeches>
        <speeches id="3">
            <speech>Incredible! Your strength pierces the veil of night, rivaling the ancient powers we command.</speech>
            <speech>Veiled in secrecy, our leader awaits. Your victory has earned you an audience in the heart of shadows.</speech>
            <speech>Our rituals, bound to the celestial dance, find no favor at this hour. The right moment eludes us still.</speech>
            <speech>Return when the moon reigns supreme over the night, in $DURATION. Only then shall the veil lift.</speech>
        </speeches>
        <speeches id="4">
            <speech>Incredible! Your strength pierces the veil of night, rivaling the ancient powers we command.</speech>
            <speech>Veiled in secrecy, our leader awaits. Your victory has earned you an audience in the heart of shadows.</speech>
        </speeches>
        <speeches id="5">
            <speech>The celestial bodies have yet to align; our power lies dormant, awaiting the ordained time.</speech>
            <speech>Return on Friday, when the moon's glow pierces the veil of reality, and our power is at its zenith.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Whispers of ancient power echo through the night. Do you dare to heed their call?</speech>
            <speech>Under the watchful gaze of the moon, our covenant assembles. The challenge of the ages awaits your courage.</speech>
        </speeches>
        <speeches id="2">
            <speech>Though you triumph, the eternal darkness weaves its patience. Our resolve remains unshaken, undimmed.</speech>
            <speech>The shadows part, revealing a path to our enigmatic leader. A reward for the brave, the strong, the victorious.</speech>
        </speeches>
        <speeches id="3">
            <speech>Incredible! Your strength pierces the veil of night, rivaling the ancient powers we command.</speech>
            <speech>Veiled in secrecy, our leader awaits. Your victory has earned you an audience in the heart of shadows.</speech>
            <speech>Our rituals, bound to the celestial dance, find no favor at this hour. The right moment eludes us still.</speech>
            <speech>Return when the moon reigns supreme over the night, in $DURATION. Only then shall the veil lift.</speech>
        </speeches>
        <speeches id="4">
            <speech>Incredible! Your strength pierces the veil of night, rivaling the ancient powers we command.</speech>
            <speech>Veiled in secrecy, our leader awaits. Your victory has earned you an audience in the heart of shadows.</speech>
        </speeches>
        <speeches id="5">
            <speech>The celestial bodies have yet to align; our power lies dormant, awaiting the ordained time.</speech>
            <speech>Return on Friday, when the moon's glow pierces the veil of reality, and our power is at its zenith.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Whispers of ancient power echo through the night. Do you dare to heed their call?</speech>
            <speech>Under the watchful gaze of the moon, our covenant assembles. The challenge of the ages awaits your courage.</speech>
        </speeches>
        <speeches id="2">
            <speech>Though you triumph, the eternal darkness weaves its patience. Our resolve remains unshaken, undimmed.</speech>
            <speech>The shadows part, revealing a path to our enigmatic leader. A reward for the brave, the strong, the victorious.</speech>
        </speeches>
        <speeches id="3">
            <speech>Incredible! Your strength pierces the veil of night, rivaling the ancient powers we command.</speech>
            <speech>Veiled in secrecy, our leader awaits. Your victory has earned you an audience in the heart of shadows.</speech>
            <speech>Our rituals, bound to the celestial dance, find no favor at this hour. The right moment eludes us still.</speech>
            <speech>Return when the moon reigns supreme over the night, in $DURATION. Only then shall the veil lift.</speech>
        </speeches>
        <speeches id="4">
            <speech>Incredible! Your strength pierces the veil of night, rivaling the ancient powers we command.</speech>
            <speech>Veiled in secrecy, our leader awaits. Your victory has earned you an audience in the heart of shadows.</speech>
        </speeches>
        <speeches id="5">
            <speech>The celestial bodies have yet to align; our power lies dormant, awaiting the ordained time.</speech>
            <speech>Return on Friday, when the moon's glow pierces the veil of reality, and our power is at its zenith.</speech>
        </speeches>
    </conversation>
</npcs>
