<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>We're Team Galactic! We'll take all the Pokémon we want!</speech>
            <speech>We're abducting all the Pokémon from this rusted-out Iron Island!</speech>
        </speeches>
        <speeches id="2">
            <speech>The Pokémon here are terrible.</speech>
            <speech>I don't even know what Team Galactic's big plan is anyway!</speech>
        </speeches>
        <speeches id="4">
            <speech>Don't try to interfere in Team Galactic's matter again.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>I am no mere Hiker. Call me an alpinist.</speech>
        </speeches>
        <speeches id="2">
            <speech>A specialist in mountainous matters. That's an alpinist.</speech>
        </speeches>
        <speeches id="3">
            <speech>A specialist in mountainous matters. That's an alpinist.</speech>
        </speeches>
        <speeches id="4">
            <speech>A mountain maniac like me is properly called an alpinist.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Harrumph! Harooo!</speech>
        </speeches>
        <speeches id="2">
            <speech>Time for a battle haiku! I can't believe it. I can still continue on. I can still battle.</speech>
        </speeches>
        <speeches id="3">
            <speech>Time for a battle haiku! I can't believe it. I can still continue on. I can still battle.</speech>
        </speeches>
        <speeches id="4">
            <speech>Harrumph!!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>I praise your courage in challenging me! For I am the one with the strongest kick!</speech>
        </speeches>
        <speeches id="2">
            <speech>Hmmm... If I was going to lose anyway, I was hoping to get totally messed up in the process.</speech>
        </speeches>
        <speeches id="3">
            <speech>Hmmm... If I was going to lose anyway, I was hoping to get totally messed up in the process.</speech>
        </speeches>
        <speeches id="4">
            <speech>Oh. The Pokémon did the fighting. My strong kick didn't help a bit.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Go easy on me is not in my vocabulary.</speech>
        </speeches>
        <speeches id="2">
            <speech>Even if I give it my all, it's meaningless when I lose.</speech>
        </speeches>
        <speeches id="3">
            <speech>Even if I give it my all, it's meaningless when I lose.</speech>
        </speeches>
        <speeches id="4">
            <speech>To me, etiquette is mercilessly defeating my opponents in battle even the weak.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>I'll show you we can break you. We've been training in the field!</speech>
        </speeches>
        <speeches id="2">
            <speech>How strange... How could this be... I shouldn't have been outmuscled.</speech>
        </speeches>
        <speeches id="3">
            <speech>How strange... How could this be... I shouldn't have been outmuscled.</speech>
        </speeches>
        <speeches id="4">
            <speech>How were my Pokémon? Powerful, weren't they?</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Our lives have plenty of ordinary days...so I gotta have Pokémon!</speech>
        </speeches>
        <speeches id="2">
            <speech>Not throwing a tantrum when you lose is part of being a Trainer, right?</speech>
        </speeches>
        <speeches id="3">
            <speech>Not throwing a tantrum when you lose is part of being a Trainer, right?</speech>
        </speeches>
        <speeches id="4">
            <speech>When I look at a special person like you, I just melt.</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>To challenge me you must be a reckless, fearless person who doesn't know his/her place!</speech>
        </speeches>
        <speeches id="2">
            <speech>You're a smart Trainer, considering you don't know very much.</speech>
        </speeches>
        <speeches id="3">
            <speech>You're a smart Trainer, considering you don't know very much.</speech>
        </speeches>
        <speeches id="4">
            <speech>Hmmph... To challenge me must mean that even ignorance has its limit!</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>Even if people call you an Ace Trainer, it's not like you get anything special for it.</speech>
        </speeches>
        <speeches id="2">
            <speech>In the end, being good at battling alone isn't enough, no matter how strong you are.</speech>
        </speeches>
        <speeches id="3">
            <speech>In the end, being good at battling alone isn't enough, no matter how strong you are.</speech>
        </speeches>
        <speeches id="4">
            <speech>I'm just good at battling. I don't even have a job. I'm just another unemployed guy.</speech>
        </speeches>
    </conversation>
</npcs>
