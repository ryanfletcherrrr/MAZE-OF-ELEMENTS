<npcs>
    <conversation id="1">
        <speeches id="2">
            <speech>Wh-what was that?! Who are you people?!</speech>
            <speech>Young $GENDER_MAN_LADY... Ah, $PLAYER_NAME, is it? That was quite a tense situation!</speech>
            <speech>Thank you for helping me out!</speech>
            <speech>Oh, yes, I almost forgot that you brought the parts from Devon! Can I have them?</speech>
        </speeches>
        <speeches id="3">
            <speech>Why?</speech>
        </speeches>
        <speeches id="4">
            <speech>This is it! I can't be standing around here!</speech>
            <speech>It's finally time for us to set out on our ocean-floor expedition!</speech>
            <speech>Thanks for this, and excuse me!</speech>
        </speeches>
        <speeches id="5">
            <speech>This is it! I can't be standing around here!</speech>
            <speech>It's finally time for us to set out on our ocean-floor expedition!</speech>
            <speech>Thanks for this, and excuse me!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Ha Ha Ha!</speech>
            <speech>Just a moment and we will be taking those parts!</speech>
        </speeches>
        <speeches id="2">
            <speech>This is quite disastrous.</speech>
            <speech>At this rate, I am going to become the target of boss' fury.</speech>
        </speeches>
        <speeches id="3">
            <speech>This is quite disastrous.</speech>
            <speech>At this rate, I am going to become the target of boss' fury.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ha Ha Ha!</speech>
            <speech>Now give us those parts!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Ha Ha Ha!</speech>
            <speech>Those parts are ours to take!</speech>
        </speeches>
        <speeches id="2">
            <speech>Hmph.</speech>
            <speech>I would have never posited that a mere child would prove such an obstacle.</speech>
        </speeches>
        <speeches id="2">
            <speech>Hmph.</speech>
            <speech>I would have never posited that a mere child would prove such an obstacle.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ha Ha Ha!</speech>
            <speech>Now give us those parts!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Now here I was wondering how you could be held up in the simple act of seizing a case.</speech>
            <speech>Do I take it you are being stymied by this child?"</speech>
            <speech>Hmm. Though you are but a child, your eyes tell me of your fierce determination.</speech>
            <speech>My heart is pounding in my chest...</speech>
            <speech>Yes, I think I can see why my lowly Grunts could not stand one minute against you. I am called
                Maxie.
            </speech>
            <speech>I stand as the head of Team Magma, a noble organization whose goal is to propel humanity to even
                greater heights of progress and evolution.
            </speech>
            <speech>Indeed. And you are one of the young persons who may shape our society's future.</speech>
            <speech>Considering that fact, I believe I shall educate you in the ways of the world.</speech>
            <speech>The land... It is the stage upon which humanity stands.</speech>
            <speech>The land exists so we humans might continue onward and upward, stepping into the future...</speech>
            <speech>For us to continue growing and evolving, humans require a grand stage upon which to stand.</speech>
            <speech>A land upon which we can stride forward... A land we can explore...develop...exploit...</speech>
            <speech>This is the basis for the growth of all human endeavor.</speech>
            <speech>That is why we, Team Magma, must increase the landmass of the world!</speech>
            <speech>Believe that this will lead to a future of eternal happiness for humanity...</speech>
            <speech>And consequently for all life!</speech>
            <speech>Humph. I suppose the concept may still be too difficult for a child to comprehend.</speech>
            <speech>Is that the case? At least I have tried to open your mind. I will take my leave for now.</speech>
            <speech>I suggest you take care that you never again stand against Team Magma.</speech>
            <speech>I will not be so lenient next time. I implore you to remember that.</speech>
            <speech>We are done here.</speech>
        </speeches>
    </conversation>
    <npc direction="DOWN" hidden="false" id="1" name="Corey " randomRotation="true" sprite="11" x="15" y="9">
        <speech>The Oceanic Museum isn't just a building; it's a sanctuary for marine enthusiasts like myself.</speech>
        <speech>The exhibits here tell the story of our deep connection to the sea, and Captain Stern is the guardian of that legacy.</speech>
    </npc>
    <movingNpc direction="DOWN" id="2" name="Tito" shouldSleep="" speed="1" sprite="8" type="npc" x="4" y="17">
        <path>RIGHTx3,LEFTx3</path>
        <onCollisionSpeech gap="4"/>
        <speech>Captain Stern is a beacon of knowledge when it comes to maritime history.</speech>
        <speech>His dedication to preserving our oceanic heritage is truly inspiring.</speech>
        <speech>It's a shame that Team Magma chose to disturb the tranquility of this place.</speech>
    </movingNpc>
</npcs>
