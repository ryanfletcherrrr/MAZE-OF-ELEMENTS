<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Hi there! I'm on a quest to research the diverse range of Pokémon in Hoenn. Can you assist me?</speech>
            <speech>Show me a new Pokémon each day, and I'll reward you with valuable tokens.</speech>
            <speech>So, what would you like to do?</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh, it seems you don't have any new Pokémon to show me today. I'm looking for different ones each day.</speech>
            <speech>Keep exploring and catch more Pokémon! Come back when you've got something new to show.</speech>
        </speeches>
        <speeches id="3">
            <speech>Hmm, this doesn't seem to be a new Pokémon. I'm looking for unique finds that I haven't seen before!</speech>
        </speeches>
        <speeches id="4">
            <speech>Excellent! This is exactly the kind of Pokémon I'm looking to research. Here are your tokens, as promised.</speech>
            <speech>Come back tomorrow with another new Pokémon and earn more rewards!</speech>
        </speeches>
        <speeches id="5">
            <speech>It looks like you've already shown me a Pokémon today. One per day is the rule, I'm afraid.</speech>
            <speech>Let's give other trainers a chance too. Come back tomorrow for more discoveries!</speech>
        </speeches>
        <speeches id="6">
            <speech>You've done well today! Come back in $DURATION for your next opportunity to contribute and earn tokens.</speech>
        </speeches>
    </conversation>

    <conversation id="3">
        <question id="1">
            <speech>Greetings! I see you've been gathering Daycare Tokens. Interested in exchanging them for some special items?</speech>
        </question>
        <no id="2">
            <speech>All right, no rush. These items aren't going anywhere. Whenever you're ready to trade or just curious, come on back.</speech>
            <speech>And remember, every new Pokémon you show earns you more tokens. See you around!</speech>
        </no>
    </conversation>

    <conversation id="4">
        <speeches id="1">
            <speech>The dance of life and nurture unfolds under the sun's embrace. Do you feel the pulse of creation at your fingertips?</speech>
            <speech>Here, in the heart of care and growth, we test the bonds between trainer and Pokémon. Are you prepared to prove the strength of your connection?</speech>
        </speeches>

        <speeches id="2">
            <speech>Your victory speaks volumes of the care and training you've bestowed upon your Pokémon. Our bond, though tested, remains strong and true.</speech>
            <speech>Through this battle, our understanding deepens, revealing the path to true harmony and strength. Your efforts are commendable.</speech>
        </speeches>

        <speeches id="3">
            <speech>Astonishing! The depth of your bond mirrors the most profound connections found in nature itself.</speech>
            <speech>Your dedication has earned you my utmost respect. Our battle today has sown seeds of growth and understanding.</speech>
            <speech>Each day offers a new opportunity for challenge and growth. Return in $DURATION to strengthen your bonds further.</speech>
        </speeches>

        <speeches id="4">
            <speech>Remarkable! Your strength and the bond with your Pokémon are truly inspiring.</speech>
            <speech>The lessons learned today will serve as a foundation for future growth. May your journey continue with the same passion and dedication.</speech>
        </speeches>

        <speeches id="5">
            <speech>Life's cycle continues; with each new sunrise, our connections deepen, our bonds strengthen.</speech>
            <speech>Return tomorrow, under the bright sky, to challenge anew. Together, we'll explore the vast potential of partnership and growth.</speech>
        </speeches>
    </conversation>
</npcs>
