<npcs>
    <conversation id="3">
        <speeches id="1">
            <speech>Your Pokémon look tired. Would you like me to heal them?</speech>
        </speeches>
        <speeches id="2">
            <speech>There you go, all healthy and happy!</speech>
        </speeches>
        <speeches id="3">
            <speech>Aww, I'm sure they would have liked to rest.</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="6">
        <speeches id="1">
            <speech>{COLOR=YELLOW}Greetings, $PLAYER_NAME! The time has come to test your finest Electrike!{ENDCOLOR}</speech>
            <speech>Present me {COLOR=CYAN}up to 5 self-caught Electrike{ENDCOLOR}, and I shall judge their potential.</speech>
            <speech>The {COLOR=GOLD}strongest, most flawless{ENDCOLOR} Electrike will earn its trainer the coveted {COLOR=RED}Manectite Mega Stone!{ENDCOLOR}</speech>
            <speech>Do you have what it takes to claim the prize?</speech>
        </speeches>

        <speeches id="2">
            <speech>{COLOR=RED}The competition has concluded!{ENDCOLOR}</speech>
            <speech>All scores have been recorded, and the strongest Electrike has been crowned.</speech>
            <speech>Return next time to test your mettle once more!</speech>
        </speeches>

        <speeches id="3">
            <speech>{COLOR=YELLOW}A setback, $PLAYER_NAME!{ENDCOLOR}</speech>
            <speech>You do not have {COLOR=CYAN}enough self-caught Electrike{ENDCOLOR} for me to judge.</speech>
            <speech>Seek out more, and return when you are ready.</speech>
        </speeches>

        <speeches id="4">
            <speech>{COLOR=GREEN}You've reached the maximum of 5 submissions!{ENDCOLOR}</speech>
            <speech>If you wish to change your entries, you may reset your selections.</speech>
        </speeches>

        <speeches id="5">
            <speech>{COLOR=RED}This one does not qualify!{ENDCOLOR}</speech>
            <speech>Your Electrike lacks the {COLOR=GOLD}flawless strength and potential{ENDCOLOR} we seek.</speech>
            <speech>Only the best shall be considered—bring me stronger ones!</speech>
        </speeches>

        <speeches id="6">
            <speech>{COLOR=CYAN}A worthy submission!{ENDCOLOR}</speech>
            <speech>The judges have acknowledged your Electrike.</speech>
            <speech>You now stand a chance at claiming the {COLOR=RED}Manectite!{ENDCOLOR}</speech>
        </speeches>

        <speeches id="7">
            <speech>{COLOR=PURPLE}Your previous submissions have been reset.{ENDCOLOR}</speech>
            <speech>The path is open for new contenders. Choose wisely this time!</speech>
        </speeches>

        <speeches id="8">
            <speech>{COLOR=YELLOW}Do you truly wish to reset your submissions, $PLAYER_NAME?{ENDCOLOR}</speech>
            <speech>This will erase all previous entries, allowing fresh contenders to be judged.</speech>
            <speech>But once done, it cannot be undone. Are you certain?</speech>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="7">
        <speeches id="1">
            <speech>{COLOR=YELLOW}Ah, $PLAYER_NAME! I seek the most... peculiar Electrike.{ENDCOLOR}</speech>
            <speech>Bring me {COLOR=CYAN}up to 5 self-caught Electrike{ENDCOLOR}, and I shall judge them in a most unconventional manner.</speech>
            <speech>The {COLOR=RED}least gifted, most lackluster{ENDCOLOR} Electrike shall win its trainer the grand prize—{COLOR=GOLD}Manectite Mega Stone!{ENDCOLOR}</speech>
            <speech>Do you dare to take part in this unusual contest?</speech>
        </speeches>

        <speeches id="2">
            <speech>{COLOR=RED}The competition has ended!{ENDCOLOR}</speech>
            <speech>The most... underwhelming Electrike has been chosen, and the results are final.</speech>
            <speech>Return next time for another chance at victory.</speech>
        </speeches>

        <speeches id="3">
            <speech>{COLOR=YELLOW}Hmm, something is missing, $PLAYER_NAME.{ENDCOLOR}</speech>
            <speech>You do not yet have {COLOR=CYAN}enough self-caught Electrike{ENDCOLOR} for me to judge.</speech>
            <speech>Venture out, and bring back more candidates.</speech>
        </speeches>

        <speeches id="4">
            <speech>{COLOR=GREEN}You've reached the maximum of 5 submissions!{ENDCOLOR}</speech>
            <speech>If you wish to reconsider your choices, you may reset your submissions.</speech>
            <speech>But remember, only the weakest will claim the prize!</speech>
        </speeches>

        <speeches id="5">
            <speech>{COLOR=RED}This one is far too impressive!{ENDCOLOR}</speech>
            <speech>Your Electrike has {COLOR=GOLD}too much potential and skill!{ENDCOLOR}</speech>
            <speech>Only the {COLOR=YELLOW}most unfortunate{ENDCOLOR} specimens will be accepted here.</speech>
        </speeches>

        <speeches id="6">
            <speech>{COLOR=CYAN}Yes, yes... this will do!{ENDCOLOR}</speech>
            <speech>Your Electrike has been deemed sufficiently lacking in talent.</speech>
            <speech>You are one step closer to claiming the {COLOR=GOLD}Manectite!{ENDCOLOR}</speech>
        </speeches>

        <speeches id="7">
            <speech>{COLOR=PURPLE}Your previous submissions have been erased.{ENDCOLOR}</speech>
            <speech>The stage is set for new hopefuls—or rather, the hopeless. Choose your entries wisely.</speech>
        </speeches>

        <speeches id="8">
            <speech>{COLOR=YELLOW}Are you certain you wish to reset your submissions, $PLAYER_NAME?{ENDCOLOR}</speech>
            <speech>This will clear all previous entries, allowing new contenders to be judged.</speech>
            <speech>Once done, it cannot be reversed. Proceed with caution.</speech>
        </speeches>
    </conversation>
</npcs>