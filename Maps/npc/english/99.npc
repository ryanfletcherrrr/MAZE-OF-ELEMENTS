<npcs>
    <npc id="1000" x="49" y="23" direction="DOWN" name="Red Belt Nori" sprite="58">
        <speech>I want to reach the top of Dragon Tower, but I keep getting thrashed by the wild Pokémon.</speech>
        <speech>I will try again after earning a black belt.</speech>
    </npc>

    <npc id="1001" x="32" y="18" direction="LEFT" name="Pokémon Trainer Chamda" sprite="32">
        <speech>I am lost. Please help..</speech>
        <speech>Or not very much, god help those who help themselves.</speech>
    </npc>

    <npc id="1002" x="47" y="34" direction="DOWN" name="Fisherman Salmo" sprite="16">
        <speech>Yeah Yeah.. I am just nother fisherman looking for Dratini..</speech>
        <speech>Its totally worth it young boy. Totally worth it..</speech>
        <speech>Yes I haven't found any yet, but soon I will. I have faith.</speech>
    </npc>

    <npc id="1003" x="6" y="11" direction="RIGHT" name="Pokémon Trainer Jack" sprite="32">
        <speech>I am trying to find my friend Zack, but I am too afraid of heights.</speech>
        <speech>I will wait for him to find me -_-</speech>
    </npc>

    <npc id="1004" x="44" y="7" direction="LEFT" name="Pokémon Trainer Cassy" sprite="35">
        <speech>I am sure I saw a scared kid entering the tower. I am not sure what his motive is..</speech>
    </npc>

    <npc id="1005" x="29" y="9" direction="UP" name="Old Woman Sharmeeli" sprite="38">
        <speech>Hello trainer. I am here trying to collect some mushrooms for my daughters Sakura and Champa.</speech>
        <speech>Have you met them? They are really nice to others.</speech>
    </npc>

    <conversation id="1">
        <speeches id="1">
            <speech>Why did you not tell me I was from Sinnoh?</speech>
            <speech>I only found out because that annoying kid that was trying to ruin our plans dropped something, and I realized we are rela…</speech>
        </speeches>
        <speeches id="2">
            <speech>That’s the kid from Sinnoh I was telling you about.</speech>
            <speech>I have had enough of this kid, and I feel like I am owed this fight. Am I okay to finish him and his weak Pokémon?</speech>
        </speeches>
        <speeches id="3">
            <speech>Get ready to eat dust, kid.</speech>
        </speeches>
        <speeches id="4">
            <speech>Of course you are strong! We are rela..</speech>
            <speech>Never mind! Stop ruining our plans.</speech>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>Stop right there Horus, You do know I have taken you all from your families, you are all my kids now!!</speech>
            <speech>I have trained all of you my children for this moment.</speech>
            <speech>Our time has finally come, with the 3 legendary beasts in our possession we will be able to finally capture our Ho-Oh.</speech>
            <speech>It is known that it has the power to revive any Pokémon, and a Pokémon that powerful can surely revive my beloved wife.</speech>
            <speech>It was last seen near its shrine located at Amberwick town.</speech>
            <speech>Oh, and Who are you?</speech>
        </speeches>
        <speeches id="2">
            <speech>You have earned this moment, Horus.</speech>
            <speech>Finish this and meet me at the place I was just telling you about.</speech>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>The Dragon Tower is currently closed due to recent activities by a bunch of stupid priests.</speech>
        </speeches>
    </conversation>

    <conversation id="4">
        <speeches id="1">
            <speech>That was one immense feet...</speech>
            <speech>That Rayquaza was fully out of control and 4 strongest Pokémon of Jvaloh were no match against it.</speech>
            <speech>I know I have not been the brother you would be proud of, but you have made me proud my little $BROTHER_SISTER.</speech>
            <speech>You came this far all alone, battled the most crazy people all alone, I was never there for you.</speech>
            <speech>Before I met you I had no real purpose in life except being someone's puppet.</speech>
            <speech>Now, I know what I want to do.</speech>
            <speech>Yep, I want to be the guardian of Jvaloh. I want to protect it from all the evils.</speech>
            <speech>I want to make sure the Osiris never bats an eye on this region.</speech>
            <speech>I will keep training for that. I will travel through the entire region and cleanse it of any evil that exist.</speech>
            <speech>I will make you proud $PLAYER_NAME. You have my words.</speech>
            <speech>Thanks for believing in me. Thanks for trusting me.</speech>
            <speech>I will give mom a visit and tell her everything.</speech>
            <speech>By the way, Nushkie asked me to tell you to give Professor Blaze a visit in his lab.</speech>
            <speech>He has some information regarding the 3 legendary dogs which he wants to share with you.</speech>
            <speech>I bid you goodbye for now.</speech>
            <speech>See ya later... Feraligatrrr!!!!</speech>
        </speeches>
    </conversation>

    <conversation id="5" canSkip="false">
        <speeches id="1">
            <speech>I am sorry. Please forgive me. I have done nothing. I was being forced by Tikku to do all this.</speech>
            <speech>He wanted me to join them else he threatens to kidnap my family.</speech>
            <speech>He asked me to steal this Pokémon from the old man for me to prove my worth.</speech>
            <speech>I don't want to do all this, I want to be a Guitarist. Not a Pokémon trainer fighting with others.</speech>
            <speech>I managed to get my family in a safe house, but I don't have any place to hide.</speech>
            <speech>Wait did you defeat him? Wow. Thank you so much. I promise not to do this again.</speech>
            <speech>I can hand you this Delibird but for that you need a space in party. I will wait here. Please come back when you have a space in your party.</speech>
        </speeches>
        <speeches id="2">
            <speech>I am sorry. Please forgive me. I have done nothing. I was being forced by Rajni to do all this.</speech>
            <speech>He wanted me to join his gang else he threatens to kidnap my family.</speech>
            <speech>He asked me to steal this Pokémon from the old man for me to prove my worth.</speech>
            <speech>I managed to get my family in a safe house, but I don't have any place to hide.</speech>
            <speech>Wait did you defeat him? Wow. Thank you so much. I promise not to do this again.</speech>
            <speech>Do you want to have this Delibird? I took it from the old man.</speech>
        </speeches>
        <speeches id="3">
            <speech>You haven't forgiven me yet? I am just a kid.</speech>
        </speeches>
        <speeches id="4">
            <speech>Thank you. You are the best.</speech>
        </speeches>
        <speeches id="5">
            <speech></speech>
        </speeches>
    </conversation>
</npcs>