<npcs>
    <movingNpc direction="DOWN" id="1" name="Zubat" speed="1" sprite="41" type="pokemon" x="13" y="6">
        <path>RIGHTx2,LEFTx2</path>
        <onCollisionSpeech gap="4">Zubat!</onCollisionSpeech>
        <speech>ZUUUUU!</speech>
    </movingNpc>
    <npc direction="UP" hidden="false" id="2" name="Cooper" randomRotation="true" sprite="25" x="18" y="16">
        <speech>A wild Zubat managed to get inside the Pokémon Center...</speech>
        <speech>Time to catch it using...my mighty bug catching net.</speech>
    </npc>

    <conversation id="7">
        <speeches id="1">
            <speech>Hey! I'm super into collecting Pokémon, it's like my biggest hobby! But choosing the next one is kinda tough...</speech>
            <speech>I need a little bit of time to think about which Pokémon I wanna see next in my collection.</speech>
            <speech>Could you come back later? I promise I'll have an awesome Pokémon for us to find together!</speech>
            <speech>Return in $DURATION, and I'm sure I'll have decided on a super cool challenge for both of us.</speech>
        </speeches>
    </conversation>

    <conversation id="8">
        <speeches id="2">
            <speech>Hiya! I haven't seen you around before. I'm on a mission to become a Pokémon master and I need your help!</speech>
            <speech>First up, I'm really curious about Marill. It's so cute and round, don't you think?</speech>
            <speech>Can you show me a Marill at Level 12?</speech>
            <speech>I've got something special for you if you do! It's gonna be awesome, promise!</speech>
        </speeches>
        <speeches id="3">
            <speech>Aww, you don't wanna? That's okay, I guess. Maybe another time!</speech>
            <speech>If you ever find a Level 12 Marill and wanna show it to me, I'll be right here waiting!</speech>
        </speeches>
        <speeches id="4">
            <speech>Yes! I knew you'd be up for it! Seeing a Level 12 Marill is gonna be so cool!</speech>
            <speech>And don't worry, I've got a really neat reward for you. Can't wait to see it!</speech>
        </speeches>
    </conversation>

    <conversation id="9">
        <speeches id="1">
            <speech>Did you find a Level 12 Marill yet? I've been thinking about it non-stop!</speech>
        </speeches>
        <speeches id="2">
            <speech>Whoa, you actually found a Level 12 Marill? That's so cool! Can I see it, pretty please?</speech>
            <speech>I can't believe I'm gonna see a real Marill up close! This is gonna be the best day ever!</speech>
        </speeches>
        <speeches id="3">
            <speech>No luck, huh? It's all good. Marill can be pretty tricky to find, I guess.</speech>
            <speech>But hey, if you ever do find one and wanna show me, I'll be super happy!</speech>
        </speeches>
        <speeches id="4">
            <speech>You did it! I'm so excited to see the Marill! This is like, the best day ever!</speech>
            <speech>I've gotta think about which Pokémon I wanna see next... But for now, here's your awesome reward!</speech>
            <speech>You're the best! Thank you so much for helping me with my Pokémon collecting dream!</speech>
        </speeches>
    </conversation>

    <conversation id="10">
        <speeches id="2">
            <speech>Hey there! Remember me? I'm still on my quest to become a Pokémon master, and guess what? I need your help again!</speech>
            <speech>This time, I'm super curious about Slakoth. It's so chill and moves so slowly... It's kinda cool, right?</speech>
            <speech>Could you show me a Slakoth at Level 12? I bet it's as relaxed as they say!</speech>
            <speech>If you can find one for me, I've got something really cool for you. It's a promise!</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh, not interested? That's a bummer. But no pressure, really!</speech>
            <speech>If you ever come across a Level 12 Slakoth and feel like sharing, you know where to find me!</speech>
        </speeches>
        <speeches id="4">
            <speech>Awesome! I knew you'd be on board. A Level 12 Slakoth is something I've gotta see!</speech>
            <speech>And don't you worry, I've prepared a really special reward for your efforts. Can't wait to give it to you!</speech>
        </speeches>
    </conversation>

    <conversation id="11">
        <speeches id="1">
            <speech>So, have you met a Level 12 Slakoth yet? I bet it's super chill to hang around with!</speech>
        </speeches>
        <speeches id="2">
            <speech>Whoa, you got a Level 12 Slakoth? That's amazing! Can you show it to me, please?</speech>
            <speech>I'm so excited to see how relaxed Slakoth really is. This is going to be so cool!</speech>
        </speeches>
        <speeches id="3">
            <speech>No Slakoth yet? Ah, it's all good. They do love their naps, after all.</speech>
            <speech>But hey, if you do find a Level 12 Slakoth and want to share, I'll be here waiting eagerly!</speech>
        </speeches>
        <speeches id="4">
            <speech>You're the best! Seeing a Slakoth up close is going to be awesome. Thanks for doing this!</speech>
            <speech>I've got to start thinking about the next Pokémon I want to see... But first, here's your reward!</speech>
            <speech>Thanks a bunch! Your help means a lot to me and my Pokémon master dreams!</speech>
        </speeches>
    </conversation>
    <conversation id="12">
        <speeches id="2">
            <speech>It's me again! Thanks to you, my Pokémon journey's getting super exciting. But there's more to explore!</speech>
            <speech>This time, I'm totally intrigued by Shroomish. They're so mysterious and mossy, right?</speech>
            <speech>Could you find and show me a Shroomish at Level 12? I bet it's as fascinating as it sounds!</speech>
            <speech>Just like before, I've got a really cool reward waiting for you. You're gonna love it!</speech>
        </speeches>
        <speeches id="3">
            <speech>Hmm, not feeling it? That's okay, no rush. I'm here whenever you're ready to share.</speech>
            <speech>Remember, if you come across a Level 12 Shroomish and want to show it off, I'll be all ears!</speech>
        </speeches>
        <speeches id="4">
            <speech>Yes! I knew you wouldn't let me down. A Level 12 Shroomish is sure to be a sight to see!</speech>
            <speech>And about that reward, trust me, it's worth the effort. I can't wait to see what you bring back!</speech>
        </speeches>
    </conversation>

    <conversation id="13">
        <speeches id="1">
            <speech>Got any luck finding that Level 12 Shroomish? I'm super curious to see one!</speech>
        </speeches>
        <speeches id="2">
            <speech>You found a Level 12 Shroomish? That's incredible! Can I take a look, please?</speech>
            <speech>I'm so thrilled to see a Shroomish in real life. This is going to be awesome!</speech>
        </speeches>
        <speeches id="3">
            <speech>Still searching for Shroomish, huh? No worries, they can be a bit elusive.</speech>
            <speech>But if you do snag a Level 12 Shroomish, I'd be thrilled to see it. Keep me posted!</speech>
        </speeches>
        <speeches id="4">
            <speech>Wow, you actually did it! Seeing a Shroomish is going to make my day!</speech>
            <speech>Now, let me think about which Pokémon we should discover next... In the meantime, here's your well-earned reward!</speech>
            <speech>Thanks so much for helping out. You're really making my Pokémon master dreams come alive!</speech>
        </speeches>
        <speeches id="5">
            <speech>Thank you so much for showing me all these amazing Pokémon! You've truly inspired me.</speech>
            <speech>I know I'll become a Pokémon master someday, and it's all thanks to you. Until then, I'll keep dreaming big!</speech>
        </speeches>
    </conversation>

</npcs>
