<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Please, Please help us!</speech>
            <speech>He is trying to take my little Sai away.</speech>
        </speeches>
        <speeches id="2">
            <speech>Thank you for saving our little Sai.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>I wish I became a Pokémon trainer rather than being the CEO of Fesla.</speech>
            <speech>I could have defended my kid from this goon.</speech>
        </speeches>
        <speeches id="2">
            <speech>Thank you for saving our little Sai.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>You again?</speech>
            <speech>Let me teach you a lesson!</speech>
        </speeches>
        <speeches id="2">
            <speech>Okay, I am leaving. This kid is not worth kidnapping anyway.</speech>
        </speeches>
        <speeches id="3">
            <speech>Okay, I am leaving. This kid is not worth kidnapping anyway.</speech>
        </speeches>
        <speeches id="4">
            <speech>Now don't come back ever again.</speech>
        </speeches>
    </conversation>
    <npc direction="DOWN" hidden="false" id="1" name="Sai" randomRotation="true" sprite="2" x="20" y="6">
        <speech>Hello, I am Sai. Do you have candies for me?</speech>
    </npc>
</npcs>
