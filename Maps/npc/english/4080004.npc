<npcs>
    <npc direction="DOWN" hidden="false" id="1" name="Arnold" randomRotation="true" sprite="5" x="12" y="10">
        <speech>Belief is not a matter of choice, but of conviction.</speech>
    </npc>
    <movingNpc direction="DOWN" id="2" name="Sunkern" shouldSleep="" speed="1" sprite="191" type="pokemon" x="9" y="2">
        <path>DOWNx1,UPx1</path>
        <onCollisionSpeech gap="4">Sunsun^^</onCollisionSpeech>
        <speech>Sunkern is basking in the strong sunlight.</speech>
    </movingNpc>

    <conversation id="7">
        <speeches id="1">
            <speech>Hello there! I'm Tina, and I adore the joy that Pokémon bring into our lives. Their presence is so comforting, isn't it?</speech>
            <speech>Deciding which Pokémon to learn about next is always a bit of a puzzle for me. Each one is so special in its own way.</speech>
            <speech>Would you mind giving me a bit of time? I'd love to come up with a delightful Pokémon challenge for us to share.</speech>
            <speech>Please, come back in $DURATION. I'm certain I'll have a heartfelt and joyful task ready for us then.</speech>
        </speeches>
    </conversation>

    <conversation id="8">
        <speeches id="2">
            <speech>Hello! You seem like a kind soul. My name's Tina, and I adore all Pokémon, especially the water-dwelling ones.</speech>
            <speech>Right now, I'm utterly fascinated by Tentacool. Their grace in water is just mesmerizing, don't you think?</speech>
            <speech>If it's not too much trouble, could you show me a Level 15 Tentacool? I'd be ever so grateful.</speech>
            <speech>In return, I'd be delighted to share something quite special with you. It's a promise from the heart!</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh, that's perfectly alright. I understand. Tentacool can be shy, after all.</speech>
            <speech>Should you come across a Level 15 Tentacool and feel like sharing, I'll be here with open arms!</speech>
        </speeches>
        <speeches id="4">
            <speech>Oh, wonderful! I'm so excited to meet a Tentacool through your eyes. This is going to be a real treat!</speech>
            <speech>And don't worry, I've prepared a lovely thank-you for you. I'm eager for you to have it!</speech>
        </speeches>
    </conversation>

    <conversation id="9">
        <speeches id="1">
            <speech>Have you come across a Level 15 Tentacool yet? I've been daydreaming about their elegant swimming.</speech>
        </speeches>
        <speeches id="2">
            <speech>A Level 15 Tentacool? Oh, my! Could you let me have a look? Their underwater dance is so captivating.</speech>
            <speech>Seeing one up close will surely be a highlight of my day. Your efforts bring so much joy and wonder into my life!</speech>
        </speeches>
        <speeches id="3">
            <speech>Still searching, I see. Tentacool do have a knack for hiding in the vast ocean.</speech>
            <speech>Remember, if you manage to find one and want to share the beauty with me, my gratitude would know no bounds.</speech>
        </speeches>
        <speeches id="4">
            <speech>You've found one! This is beyond wonderful. I'm thrilled to witness a Tentacool's grace because of you.</speech>
            <speech>Let me take a moment to decide what beautiful creature we can discover next. Meanwhile, here's a heartfelt thank you for your kindness.</speech>
            <speech>Your contributions to my happiness are immense. I can't wait to see what other wonders we'll explore together!</speech>
        </speeches>
    </conversation>

    <conversation id="10">
        <speeches id="2">
            <speech>Hi again! I can't thank you enough for all the cool Pokémon you've shown me. Ready for another adventure?</speech>
            <speech>This time, I'm fascinated by Whismur. They're so cute with their big ears, don't you think?</speech>
            <speech>Could you bring me a Whismur at Level 15? I've heard they have the most interesting sounds!</speech>
            <speech>As always, I've got a super cool reward waiting for you. You're going to love it, I promise!</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh, not up for it? No worries, everyone needs a break sometimes!</speech>
            <speech>If you ever come across a Level 15 Whismur and want to show it off, just let me know. I'll be here!</speech>
        </speeches>
        <speeches id="4">
            <speech>Awesome, I knew you'd come through! A Level 15 Whismur is going to be so interesting!</speech>
            <speech>Can't wait for the show-and-tell. Your reward is all set and waiting. It's something special, just like last time!</speech>
        </speeches>
    </conversation>

    <conversation id="11">
        <speeches id="1">
            <speech>Have you had the chance to befriend a Level 15 Whismur yet? I'm so curious about their unique sounds!</speech>
        </speeches>
        <speeches id="2">
            <speech>You've got a Level 15 Whismur? How exciting! Can I take a closer look? I'm eager to hear all about it.</speech>
            <speech>Showing me a Whismur will surely be a highlight. Your discoveries always bring so much joy and wonder!</speech>
        </speeches>
        <speeches id="3">
            <speech>Still on the hunt for Whismur? They're quite the whisperers. Take your time, I understand the challenge.</speech>
            <speech>But remember, if you find one, I'd be over the moon to see it. Your efforts are always appreciated!</speech>
        </speeches>
        <speeches id="4">
            <speech>You did it! Seeing a Whismur up close will be a treat. Thank you for sharing this moment with me.</speech>
            <speech>Let me ponder what might capture our interest next. Meanwhile, here's a token of my appreciation for your dedication.</speech>
            <speech>Your adventures add so much to my days. I'm truly grateful for your help and can't wait for our next discovery!</speech>
        </speeches>
    </conversation>

    <conversation id="12">
        <speeches id="2">
            <speech>Hey, it's me again! Every new Pokémon you introduce me to adds a spark to my journey. Now, I've got a new fascination.</speech>
            <speech>Have you seen a Lickitung before? Not just any Lickitung, but a Level 15 one! I've read they have incredible tongues!</speech>
            <speech>Could you bring a Level 15 Lickitung for me to see? I promise, the reward for this will be something you'll really like!</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh, you're not up for it? That's alright. I understand finding a Lickitung might not be everyone's cup of tea.</speech>
            <speech>If you ever come across a Level 15 Lickitung and think of me, I'd be thrilled to see it!</speech>
        </speeches>
        <speeches id="4">
            <speech>Wow, you're on board? That's fantastic! I can't wait to see a Level 15 Lickitung in action!</speech>
            <speech>Bring it on over, and let's check it out together. Your reward? Oh, it'll definitely be worth your while!</speech>
        </speeches>
    </conversation>

    <conversation id="13">
        <speeches id="1">
            <speech>Have you managed to find a Level 15 Lickitung yet? I've been eagerly awaiting your return!</speech>
        </speeches>
        <speeches id="2">
            <speech>A Level 15 Lickitung? Fantastic! May I see it? Their unique abilities are so fascinating!</speech>
            <speech>Seeing a Lickitung firsthand is going to be a memorable experience. I'm all excited!</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh, no luck with Lickitung? That's okay; they're quite the rare find.</speech>
            <speech>If you happen to come across one, I'd love to see it. Your discoveries always brighten my day!</speech>
        </speeches>
        <speeches id="4">
            <speech>You've done it again! Witnessing a Level 15 Lickitung is sure to be an absolute delight.</speech>
            <speech>I'll start pondering over the next Pokémon to fascinate us.</speech>
            <speech>Meanwhile, please accept this reward for your fantastic effort.</speech>
            <speech>Your contributions are making my Pokémon dreams a vibrant reality. Thank you!</speech>
        </speeches>
        <speeches id="5">
            <speech>I'm overwhelmed with gratitude for all the remarkable Pokémon you've shown me. It's been an incredible journey.</speech>
            <speech>With your help, I'm more motivated than ever to pursue my dream of becoming a Pokémon master.</speech>
            <speech>Thank you for the inspiration!</speech>
        </speeches>
    </conversation>
</npcs>
