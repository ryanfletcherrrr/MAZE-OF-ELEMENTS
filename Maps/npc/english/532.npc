<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Hey $PLAYER_NAME, are you going to take the Gym challenge?</speech>
            <speech>Gee, you keep getting tougher and tougher, don’t you?</speech>
            <speech>Me? Well, I went shopping at the department store, and...</speech>
            <speech>I mean, well, of course I’ve been working on my Pokédex, but...</speech>
        </speeches>
        <speeches id="2">
            <speech>...</speech>
            <speech>So, uh, $PLAYER_NAME. Good luck on your gym challenge.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>The ring is my roiling sea.</speech>
            <speech>The towering waves shaped me.</speech>
            <speech>Crash! Crash! Crasher Wake!</speech>
            <speech>Crash! Crash! Crasher Wake!</speech>
            <speech>I'm the tidal wave of power to wash you away!</speech>
            <speech>Put out the fire, Crasher Wake!</speech>
            <speech>Run from electricity, Crasher Wake!</speech>
            <speech>Ah, ah, aaaah!</speech>
            <speech>The ring is my sea.</speech>
        </speeches>
        <speeches id="2">
            <speech>Hello, dude and young lady! You're challenging the Gym Leader, are you?</speech>
            <speech>Let me tell you now, she's young, but she's a born genius. I tried training with her, and I was
                stunned by how tough she was!
            </speech>
            <speech>Whoops! I'd better tell you who I am!</speech>
            <speech>I'm the triple-threat Gym Leader in Pokémon, wrestling, and song.</speech>
            <speech>I'm Crasher Wake of Pastoria Gym! We'll meet again!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Hi, $PLAYER_NAME! Please, can you help me?</speech>
            <speech>Some Team Galactic goons took my Pokédex away from me.</speech>
            <speech>I need your help to get it back. I'll be waiting in front of the warehouses.</speech>
            <speech>Please come!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Hi, $PLAYER_NAME! Please, can you help me?</speech>
            <speech>Do you remember Team Galactic? Those horrible people? They tried to steal Prof. Rowan's research
                results in Jubilife, remember?
            </speech>
            <speech>I ran into them, and they took away my Pokédex.</speech>
            <speech>Please, I need your help. Battle and defeat these guys for me.</speech>
        </speeches>
        <speeches id="2">
            <speech>What's going on? Why is Team Galactic out in the streets like they own the place? $PLAYER_NAME,
                thank you, sincerely.
            </speech>
            <speech>I would've been lost without my Pokédex. It's indispensable for helping Prof. Rowan with his
                studies.
            </speech>
            <speech>So, $PLAYER_NAME, what are you going to do now? I'm thinking of going to the Pokémon Mansion on
                Route 212.
            </speech>
            <speech>I hear they show rare Pokémon to visitors there.</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh...It's that funny man from Jubilife...</speech>
        </speeches>
        <speeches id="4">
            <speech>I'm terribly sorry. Team Galactic took my Pokédex, so I was very irritated...</speech>
            <speech>I just blurted it out... ...I should be going now. Be wary of Team Galactic.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Hey kid, go away. We are busy planning our next big heist.</speech>
        </speeches>
        <speeches id="2">
            <speech>Aw, that stinks. Our Pokémon are chumps!</speech>
            <speech>We should get new ones from headquarters.</speech>
            <speech>Humph! Who cares about some Pokédex anyway?</speech>
            <speech>Team Galactic is going to take down all the Pokémon in the world...</speech>
            <speech>No, in the universe...</speech>
            <speech>There have your Pokédex.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>That device you have, what is it called?</speech>
            <speech>A Pokédex? Hmm..</speech>
        </speeches>
        <speeches id="2">
            <speech>Those things we had in warehouse've already been moved to Pastoria City anyway...</speech>
            <speech>So, we'll say "You will get yours!" and run like grunts we are.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Kid! Stop right there.</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>Have no fear, I have come running. I heard of children feuding with the Team Galactic.</speech>
            <speech>It turns out, of course, to be you.</speech>
        </speeches>
        <speeches id="2">
            <speech>You insult me to my face? How very uncouth of you.</speech>
        </speeches>
        <speeches id="3">
            <speech>It is of no matter. Of more interest is the criminal behavior of the Team Galactic.</speech>
            <speech>They attempt to steal the belongings of a child? The scale of their criminality, it seems rather minuscule.</speech>
            <speech>The triviality of their action makes them more sinister, perhaps.</speech>
            <speech>Their warehouse needs investigation. Come with me, and we'll take a look!</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>There! Would you look at those antennae?</speech>
            <speech>I don't know what they do but they are massive antennae's!</speech>
            <speech>Hey! It's you! I bet you don't remember me but I still remember you!</speech>
            <speech>Because of you, they took my CLEFAIRY away...</speech>
            <speech>My partner called it quits and went back to his country...</speech>
            <speech>Waah! I know nothing! I don't know anything about any Storage Key!</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>Ah-hah! You leave this to me!</speech>
            <speech>The Storage Key for entering the Team Galactic hideout, I have right here.</speech>
            <speech>A frontal assault, it is not possible.</speech>
            <speech>But we can enter their hideout. Well? Will you enter the hideout? You have your reasons, yes?</speech>
            <speech>Very well. Inside the Team Galactic warehouse. We will meet there. Prepare the best you can.</speech>
            <speech>I shall join you shortly.</speech>
        </speeches>
    </conversation>
    <npc direction="RIGHT" hidden="false" id="1" name="Lass Sally" sprite="12" x="36" y="57">
        <speech>I wanted to go to the Veilstone Game Corner, but it appears to be closed.</speech>
    </npc>
    <npc direction="LEFT" hidden="false" id="2" name="Youngster Rylease" sprite="26" x="43" y="50">
        <speech>Is there an exact ETA for the Veilstone Gamer Corner?</speech>
        <speech>They said it's coming "Soon".</speech>
        <speech>They told me I could be an beta-tester for the casino. When is the beta? When!?!</speech>
        <speech>I don't think it's coming at all.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="3" name="Spencer" sprite="26" x="16" y="49">
        <speech>There used to be a guy here who sang macho, macho man.</speech>
        <speech>Officer Jenny removed him for disrupting the peace!</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="4" name="Youngster Tony" sprite="26" x="53" y="36">
        <speech>I went to battle the fourth gym leader, Maylene.</speech>
        <speech>My Torterra wasn't able to beat her team, I need more pokemon on my team.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="5" name="Jackie" sprite="34" x="42" y="36">
        <speech>Your Focus needs more focus!</speech>
    </npc>
    <npc direction="LEFT" hidden="false" id="6" name="Beauty Annie" sprite="6" x="38" y="29">
        <speech>People keep asking me "Annie are you okay? Are you okay Annie?"</speech>
        <speech>I'm okay. I'm okay. Ha! I hope all these fans of mine come support me when I challenge Maylene, the gym leader.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="7" name="Lass Charlotte" sprite="12" x="32" y="31">
        <speech>I can't wait to go shopping with my Cleffa!!!</speech>
    </npc>
    <movingNpc direction="RIGHT" id="8" name="Cleffa" shouldSleep="" speed="1" sprite="173" type="pokemon" x="31" y="31">
        <path>LEFTx3,RIGHTx3</path>
        <onCollisionSpeech gap="4">Cleffa! Cleffa!</onCollisionSpeech>
        <speech>Cleffa! Cleffa!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="9" name="Machamp" shouldSleep="" speed="1" sprite="68" type="pokemon" x="41" y="36">
        <path>DOWNx1,LEFTx1,UPx1,RIGHTx1</path>
        <onCollisionSpeech gap="4">Machamp!</onCollisionSpeech>
        <speech>Machamp!</speech>
    </movingNpc>
    <movingNpc direction="LEFT" id="10" name="Elder Kerry" shouldSleep="" speed="1" sprite="39" type="npc" x="36" y="39">
        <path>LEFTx3,RIGHTx3</path>
        <onCollisionSpeech gap="4">Carry on wayward Trainer.</onCollisionSpeech>
        <speech>Carry on wayward Trainer. There'll be peace when you are done.</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="11" name="Scientist Kenny" sprite="8" x="66" y="53">
        <speech>Why do Java Developers wear glasses?</speech>
        <speech>Because they don't c#!</speech>
        <speech>I'm actually here to work out if there any fossils in these rocks</speech>
    </npc>
    <npc direction="RIGHT" hidden="false" id="12" name="Beauty Belle" sprite="6" x="31" y="43">
        <speech>I'd like to go The Great Marsh in Pastoria City, but I don't want to get my clothes dirty.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="13" name="Skater Chad" sprite="80" x="25" y="37">
        <speech>It looks like there's an item on that other ledge, if only we could skate over those ledges.
        </speech>
    </npc>
    <movingNpc direction="DOWN" id="14" name="Toxicroak" shouldSleep="" speed="1" sprite="454" type="pokemon" x="18"
               y="52">
        <path>LEFTx3,RIGHTx7,LEFTx4</path>
        <onCollisionSpeech gap="4">Croak! Croak!</onCollisionSpeech>
        <speech>Toxicroak!</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="15" name="Nerd Timothy" sprite="8" x="32" y="10">
        <speech>I'm hiding from them the Team Galactic grunts</speech>
        <speech>What?! They are gone?</speech>
    </npc>
</npcs>
