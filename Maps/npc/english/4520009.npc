<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Listen, I love Pokémon more than life itself!</speech>
        </speeches>
        <speeches id="2">
            <speech>I love your Pokémon, too! Please, let me pet them!</speech>
        </speeches>
        <speeches id="3">
            <speech>I love your Pokémon, too! Please, let me pet them!</speech>
        </speeches>
        <speeches id="4">
            <speech>I'll be a Pokémon in my next life.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>I'm working very hard, but that doesn't mean that I'm strong.</speech>
        </speeches>
        <speeches id="2">
            <speech>You're a smart Trainer, considering you don't know very much.</speech>
        </speeches>
        <speeches id="3">
            <speech>You're a smart Trainer, considering you don't know very much.</speech>
        </speeches>
        <speeches id="4">
            <speech>What?! Even I can lose?! But I'm a battling genius!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Huh? Huh? A battle? Time to go all out!</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh! You did pretty well, didn't you? You're better than I thought!</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh! You did pretty well, didn't you? You're better than I thought!</speech>
        </speeches>
        <speeches id="4">
            <speech>Terrible! You're extremely unprepared! Come back when you've learned how to throw a Poké Ball!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Miniskirts are, like, unbelievable, right? Especially in winds.</speech>
        </speeches>
        <speeches id="2">
            <speech>Stop staring.</speech>
        </speeches>
        <speeches id="3">
            <speech>Stop staring.</speech>
        </speeches>
        <speeches id="4">
            <speech>They're easy to move in and cute. Anything but a miniskirt would be unbelievable, right?</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Listen, I love Flying Pokémon more than life itself!</speech>
        </speeches>
        <speeches id="2">
            <speech>I love your Flying Pokémon, too! Please, let me pet them!</speech>
        </speeches>
        <speeches id="3">
            <speech>I love your Flying Pokémon, too! Please, let me pet them!</speech>
        </speeches>
        <speeches id="4">
            <speech>I'll be a bird in my next life.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>When I am surrounded by nature, most other things cease to matter.</speech>
        </speeches>
        <speeches id="2">
            <speech>Something like this is pretty trivial compared to the stifling feelings of city life.</speech>
        </speeches>
        <speeches id="3">
            <speech>Something like this is pretty trivial compared to the stifling feelings of city life.</speech>
        </speeches>
        <speeches id="4">
            <speech>It doesn't matter to the vastness of nature whether I win or lose...</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Pokémon never betray you. They return all the love you give them.</speech>
        </speeches>
        <speeches id="2">
            <speech>I am happy! Happy, I tell you! Don't look at me like that!</speech>
        </speeches>
        <speeches id="3">
            <speech>I am happy! Happy, I tell you! Don't look at me like that!</speech>
        </speeches>
        <speeches id="4">
            <speech>It's about time for me to give a human my affection, though.</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>Talk is unnecessary... I will just break you...</speech>
        </speeches>
        <speeches id="2">
            <speech>Unnh... Not yet... I can still keep going...</speech>
        </speeches>
        <speeches id="3">
            <speech>Unnh... Not yet... I can still keep going...</speech>
        </speeches>
        <speeches id="4">
            <speech>Ugh, I'm broken...</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>Come. I will give you a taste of a Bird Keeper's well-trained Pokémon.</speech>
        </speeches>
        <speeches id="2">
            <speech>It's too late to tell time to stop. I'm glad I enjoyed myself when I was young.</speech>
        </speeches>
        <speeches id="3">
            <speech>It's too late to tell time to stop. I'm glad I enjoyed myself when I was young.</speech>
        </speeches>
        <speeches id="4">
            <speech>You have served me a spicy defeat. And yet defeat is also part of life.</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>Huhuehuehue... No crying when you lose...</speech>
        </speeches>
        <speeches id="2">
            <speech>Sniffle... Sniffle sniffle... I'm disappointed... So disappointed...</speech>
        </speeches>
        <speeches id="3">
            <speech>Sniffle... Sniffle sniffle... I'm disappointed... So disappointed...</speech>
        </speeches>
        <speeches id="4">
            <speech>Hey, hey! No crying! I've got no time for some kid's tears!</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>The main character of this story... I'll tell you who it is!</speech>
        </speeches>
        <speeches id="2">
            <speech>You have to be strong inside when there aren't many people who are stronger than you on the outside...</speech>
        </speeches>
        <speeches id="3">
            <speech>You have to be strong inside when there aren't many people who are stronger than you on the outside...</speech>
        </speeches>
        <speeches id="4">
            <speech>Of course, you are the main character!</speech>
        </speeches>
    </conversation>
    <conversation id="12">
        <speeches id="1">
            <speech>I am Winona. I am the Leader of the Fortree Pokémon Gym.</speech>
            <speech>I have become one with bird Pokémon and have soared the skies...</speech>
            <speech>However grueling the battle, we will triumph with grace...</speech>
            <speech>Witness the elegant choreography of my bird Pokémon and me!</speech>
        </speeches>
        <speeches id="2">
            <speech>Never before have I seen a Trainer command Pokémon with more grace than I...</speech>
            <speech>I recognize your talent and present you with this Gym Badge.</speech>
            <speech>Also, this is a gift from me.</speech>
            <speech>Air Slash... Air Slash inflicts damage and has a 30% chance of causing the target to flinch. </speech>
            <speech>You won against me... I know you'll keep aiming higher and higher!</speech>
            <speech>Someday, you may even fly up into the sky... That's the impression I get from you</speech>
        </speeches>
        <speeches id="3">
            <speech>Never before have I seen a Trainer command Pokémon with more grace than I...</speech>
            <speech>I recognize your talent and present you with this Gym Badge.</speech>
            <speech>Also, this is a gift from me.</speech>
            <speech>Air Slash... Air Slash inflicts damage and has a 30% chance of causing the target to flinch. </speech>
            <speech>You won against me... I know you'll keep aiming higher and higher!</speech>
            <speech>Someday, you may even fly up into the sky... That's the impression I get from you</speech>
        </speeches>
        <speeches id="4">
            <speech>This battle was too easy for me. Nevertheless, I am happy to give you another chance.</speech>
        </speeches>
    </conversation>
    <npc direction="DOWN" hidden="false" id="1" name="Gym Guide" randomRotation="false" sprite="5" x="22" y="77">
        <speech>Ahoy, Champion in the making!</speech>
        <speech>Fortree Gym's skies are clear for your challenge, but Winona's Flying-types won't make it easy.</speech>
        <speech>Fear not, though! Electric, Rock, or Ice Pokémon are your wingmen for this aerial battle.</speech>
        <speech>Keep your eyes on the prize, stay steady, and you'll soar to victory!</speech>
    </npc>
</npcs>
