<npcs>
    <movingNpc direction="DOWN" id="1" name="Torchic" shouldSleep="" speed="1" sprite="255" type="pokemon" x="14" y="8">
        <path>LEFTx2,RIGHTx2</path>
        <onCollisionSpeech gap="4">Torchic!</onCollisionSpeech>
        <speech>Torchic!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Whismer" shouldSleep="" speed="1" sprite="293" type="pokemon" x="30" y="3">
        <path>RIGHTx2,LEFTx2</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="3" name="Fletchling" shouldSleep="" speed="1" sprite="661" type="pokemon" x="10" y="28">
        <path>LEFTx2,UPx2,RIGHTx2,DOWNx2</path>
        <onCollisionSpeech gap="4">Fletchling!!</onCollisionSpeech>
        <speech>Fletchling!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="4" name="Doduo" shouldSleep="" speed="1" sprite="84" type="pokemon" x="31" y="28">
        <path>DOWNx2,RIGHTx2,LEFTx2,UPx2</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="5" name="Aron" shouldSleep="" speed="1" sprite="304" type="pokemon" x="54" y="23">
        <path>LEFTx1,UPx3,DOWNx3,RIGHTx1</path>
        <onCollisionSpeech gap="4">Aron!</onCollisionSpeech>
        <speech>Aron!</speech>
    </movingNpc>
        
    <movingNpc direction="DOWN" id="7" name="Numel" shouldSleep="" speed="1" sprite="322" type="pokemon" x="29" y="18">
        <path>UPx1,RIGHTx3,LEFTx3,DOWNx1</path>
        <onCollisionSpeech gap="4">Numel!</onCollisionSpeech>
        <speech>Numel!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="8" name="Fletchling" shouldSleep="" speed="1" sprite="661" type="pokemon" x="52" y="4">
        <path>RIGHTx3,LEFTx3</path>
        <onCollisionSpeech gap="4">Fletchling!</onCollisionSpeech>
        <speech>Fletchling!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="9" name="Whismur" shouldSleep="" speed="1" sprite="293" type="pokemon" x="59" y="18">
        <path>RIGHTx1,UPx3,DOWNx3,LEFTx1</path>
        <onCollisionSpeech gap="4">Whismur!</onCollisionSpeech>
        <speech>Whismur!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="10" name="Doduo" shouldSleep="" speed="1" sprite="84" type="pokemon" x="55" y="27">
        <path>DOWNx3,RIGHTx1,LEFTx1,UPx3</path>
        <onCollisionSpeech gap="4">Doduo!</onCollisionSpeech>
        <speech>Doduo!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="11" name="Numel" shouldSleep="" speed="1" sprite="322" type="pokemon" x="12" y="13">
        <path>RIGHTx3,LEFTx3</path>
        <onCollisionSpeech gap="4">Numel!</onCollisionSpeech>
        <speech>Numel!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="12" name="Aron" shouldSleep="" speed="1" sprite="304" type="pokemon" x="37" y="26">
        <path>LEFTx3,UPx2,DOWNx2,RIGHTx3</path>
        <onCollisionSpeech gap="4">Aron!</onCollisionSpeech>
        <speech>Aron!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="13" name="Houndour" shouldSleep="" speed="1" sprite="228" type="pokemon" x="13" y="35">
        <path>LEFTx3,RIGHTx3</path>
        <onCollisionSpeech gap="4">Houndour!</onCollisionSpeech>
        <speech>Houndour!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="14" name="Whismur" shouldSleep="" speed="1" sprite="293" type="pokemon" x="41" y="29">
        <path>UPx1,RIGHTx3,LEFTx3,DOWNx1</path>
        <onCollisionSpeech gap="4">Whismur!</onCollisionSpeech>
        <speech>Whismur!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="15" name="Doduo" shouldSleep="" speed="1" sprite="84" type="pokemon" x="37" y="7">
        <path>LEFTx3,RIGHTx3</path>
        <onCollisionSpeech gap="4">Doduo!</onCollisionSpeech>
        <speech>Doduo!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="16" name="Numel" shouldSleep="" speed="1" sprite="322" type="pokemon" x="20" y="31">
        <path>RIGHTx5,LEFTx5</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <conversation id="1">
        <speeches id="1">
            <speech>Hey! I'm super into collecting Pokémon, especially birds, but we don't get many of them here in the Hoenn Safari.</speech>
            <speech>Picking the next one to find is always so tough...</speech>
            <speech>I need a little bit of time to think about which bird Pokémon I want to see next in my collection.</speech>
            <speech>Could you come back later? I promise I'll have an awesome bird Pokémon for us to find together!</speech>
            <speech>Return in $DURATION, and I'm sure I'll have decided on a super cool challenge for both of us.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="2">
            <speech>Hiya! I haven't seen you around before. I'm on a mission to collect bird Pokémon, and I need your help!</speech>
            <speech>First up, I'm really curious about Wattrel. It's so sleek and its flight is mesmerizing, don't you think?</speech>
            <speech>Can you show me a Wattrel at Level 20?</speech>
            <speech>I've got something special for you if you do! It's gonna be awesome, promise!</speech>
        </speeches>
        <speeches id="3">
            <speech>Aww, you don't wanna? That's okay, I guess. Maybe another time!</speech>
            <speech>If you ever find a Level 20 Wattrel and wanna show it to me, I'll be right here waiting!</speech>
        </speeches>
        <speeches id="4">
            <speech>Yes! I knew you'd be up for it! Seeing a Level 20 Wattrel is gonna be so cool!</speech>
            <speech>And don't worry, I've got a really neat reward for you. Can't wait to see it!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Did you find a Level 20 Wattrel yet? I've been thinking about it non-stop!</speech>
        </speeches>
        <speeches id="2">
            <speech>Whoa, you actually found a Level 20 Wattrel? That's so cool! Can I see it, pretty please?</speech>
            <speech>I can't believe I'm gonna see a real Wattrel up close! This is gonna be the best day ever!</speech>
        </speeches>
        <speeches id="3">
            <speech>No luck, huh? It's all good. Wattrel can be pretty tricky to find, I guess.</speech>
            <speech>But hey, if you ever do find one and wanna show me, I'll be super happy!</speech>
        </speeches>
        <speeches id="4">
            <speech>You did it! I'm so excited to see the Wattrel! This is like, the best day ever!</speech>
            <speech>I've gotta think about which bird Pokémon I wanna see next... But for now, here's your awesome
                reward!
            </speech>
            <speech>You're the best! Thank you so much for helping me with my bird collecting dream!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="2">
            <speech>Hey there! Remember me? I'm still on my quest to collect bird Pokémon, and guess what? I need your
                help again!
            </speech>
            <speech>This time, I'm super curious about Fletchling. It's so fiery and its chirp is so cheerful... It's
                kinda cool, right?
            </speech>
            <speech>Could you show me a Fletchling at Level 20? I bet it's as vibrant as they say!</speech>
            <speech>If you can find one for me, I've got something really cool for you. It's a promise!</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh, not interested? That's a bummer. But no pressure, really!</speech>
            <speech>If you ever come across a Level 20 Fletchling and feel like sharing, you know where to find me!
            </speech>
        </speeches>
        <speeches id="4">
            <speech>Awesome! I knew you'd be on board. A Level 20 Fletchling is something I've gotta see!</speech>
            <speech>And don't you</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>So, have you met a Level 20 Fletchling yet? I bet it's super vibrant and full of energy!</speech>
        </speeches>
        <speeches id="2">
            <speech>Whoa, you got a Level 20 Fletchling? That's amazing! Can you show it to me, please?</speech>
            <speech>I'm so excited to see how fiery Fletchling really is. This is going to be so cool!</speech>
        </speeches>
        <speeches id="3">
            <speech>No Fletchling yet? Ah, it's all good. They do have a tendency to flit about, after all.</speech>
            <speech>But hey, if you do find a Level 20 Fletchling and want to share, I'll be here waiting eagerly!
            </speech>
        </speeches>
        <speeches id="4">
            <speech>You're the best! Seeing a Fletchling up close is going to be awesome. Thanks for doing this!
            </speech>
            <speech>I've got to start thinking about the next bird Pokémon I want to see... But first, here's your
                reward!
            </speech>
            <speech>Thanks a bunch! Your help means a lot to me and my bird collecting dreams!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="2">
            <speech>It's me again! Thanks to you, my bird Pokémon journey's getting super exciting. But there's more to
                explore!
            </speech>
            <speech>This time, I'm totally intrigued by Taillow. They're so swift and their calls are so sharp, right?
            </speech>
            <speech>Could you find and show me a Taillow at Level 20? I bet it's as fascinating as it sounds!</speech>
            <speech>Just like before, I've got a really cool reward waiting for you. You're gonna love it!</speech>
        </speeches>
        <speeches id="3">
            <speech>Hmm, not feeling it? That's okay, no rush. I'm here whenever you're ready to share.</speech>
            <speech>Remember, if you come across a Level 20 Taillow and want to show it off, I'll be all ears!</speech>
        </speeches>
        <speeches id="4">
            <speech>Yes! I knew you wouldn't let me down. A Level 20 Taillow is sure to be a sight to see!</speech>
            <speech>And about that reward, trust me, it's worth the effort. I can't wait to see what you bring back!
            </speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Got any luck finding that Level 20 Taillow? I'm super curious to see one!</speech>
        </speeches>
        <speeches id="2">
            <speech>You found a Level 20 Taillow? That's incredible! Can I take a look, please?</speech>
            <speech>I'm so thrilled to see a Taillow in real life. This is going to be awesome!</speech>
        </speeches>
        <speeches id="3">
            <speech>Still searching for Taillow, huh? No worries, they can be a bit elusive.</speech>
            <speech>But if you do snag a Level 20 Taillow, I'd be thrilled to see it. Keep me posted!</speech>
        </speeches>
        <speeches id="4">
            <speech>Wow, you actually did it! Seeing a Taillow is going to make my day!</speech>
            <speech>Now, let me think about which Pokémon we should discover next... In the meantime, here's your
                well-earned reward!
            </speech>
            <speech>Thanks so much for helping out. You're really making my bird collecting dreams come alive!</speech>
        </speeches>
        <speeches id="5">
            <speech>Thank you so much for showing me all these amazing bird Pokémon! You've truly inspired me.</speech>
            <speech>I know I'll become a bird Pokémon master someday, and it's all thanks to you. Until then, I'll keep
                dreaming big!
            </speech>
        </speeches>
    </conversation>
</npcs>
