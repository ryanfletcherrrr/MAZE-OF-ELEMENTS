<npcs>
    <conversation canSkip="false" id="1">
        <speeches id="1">
            <speech>Well, well, look who’s here. $PLAYER_NAME, was it? Let’s have a look at your Pokémon.</speech>
            <speech>… Hmm… I see… This Pokémon seems to be rather happy..</speech>
            <speech>Hm! Entrusting you with your partner was no mistake, it seems!</speech>
            <speech>When I first saw you two about to step into the tall grass without Pokémon, I was shocked.</speech>
            <speech>I was astounded by these foolhardy children. But now, you’ve astounded me in an entirely different way.</speech>
            <speech>Already, there is a bond growing between you and that Pokémon. I feel privileged to have met you.</speech>
            <speech>I’m sure your partner feels the same way about you.</speech>
            <speech>That’s why I’ll ask you to cherish that Pokémon of yours.</speech>
        </speeches>
        <speeches id="2">
            <speech>Er-hem!</speech>
            <speech>Let’s move on to the main topic.</speech>
            <speech>There is something I want you to do for me.</speech>
            <speech>Allow me to properly introduce myself first.</speech>
            <speech>My name, as you know, is Rowan. I study Pokémon.</speech>
            <speech>First of all, I want to know exactly what kinds of Pokémon live in the Sinnoh region.</speech>
            <speech>To do so, it is necessary to collect data using the Pokédex.</speech>
            <speech>This is what I wish to ask of you. I want to entrust you with this Pokédex.</speech>
            <speech>Will you use it to record data on all the Pokémon in Sinnoh for me?</speech>
            <speech>Hm! Good answer!</speech>
            <speech>That Pokedex is a very high-tech device. It will automatically record data on every kind of Pokémon you encounter.</speech>
            <speech>$PLAYER_NAME, I ask that you go everywhere and meet every kind of Pokémon in this region!"</speech>
        </speeches>
        <speeches id="3">
            <speech>When you walked up Route 201 with your Pokémon, what did you feel?</speech>
            <speech>I’ve lived for 60 long years. Even now, I get a thrill when I’m with a Pokémon.</speech>
            <speech>Now, you should know that there are countless Pokémon in this world.</speech>
            <speech>That means there are just as many thrills waiting for you out there!</speech>
            <speech>Now go! $PLAYER_NAME, your grand adventure begins right now!</speech>
        </speeches>
        <speeches id="4">
            <speech>Go on! $PLAYER_NAME, your grand adventure awaits you!</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="2">
        <speeches id="1">
            <speech>I'm so glad that you're kind toward Pokémon!</speech>
            <speech>If you weren't, I'd have to...</speech>
            <speech>Oh, I just can't say it...</speech>
        </speeches>
        <speeches id="2">
            <speech>I've got one, too!</speech>
        </speeches>
        <speeches id="3">
            <!--turtwig-->
            <speech>The Pokémon that I met for the first time was a Turtwig!</speech>
            <speech>If you would have chosen a Turtwig on Route 201, we'd have the same Pokémon now!</speech>
            <speech>Not that it matters, but... Anyway, I'm Dawn.</speech>
            <speech>I also help the professor add pages to the Pokédex.</speech>
            <speech>So, in a sense, I'm just like you. I just got a little head start on you, that's all.</speech>
            <speech>I'll be happy to teach you things. Glad to meet you, $PLAYER_NAME</speech>
        </speeches>
        <speeches id="4">
            <!--chimchar-->
            <speech>The Pokémon that I met for the first time was a Chimchar!</speech>
            <speech>If you would have chosen a Chimchar on Route 201, we'd have the same Pokémon now!</speech>
            <speech>Not that it matters, but... Anyway, I'm Dawn.</speech>
            <speech>I also help the professor add pages to the Pokédex.</speech>
            <speech>So, in a sense, I'm just like you. I just got a little head start on you, that's all.</speech>
            <speech>I'll be happy to teach you things. Glad to meet you, $PLAYER_NAME</speech>
        </speeches>
        <speeches id="5">
            <!--piplup-->
            <speech>The Pokémon that I met for the first time was a Piplup!</speech>
            <speech>If you would have chosen a Piplup on Route 201, we'd have the same Pokémon now!</speech>
            <speech>Not that it matters, but... Anyway, I'm Dawn.</speech>
            <speech>I also help the professor add pages to the Pokédex.</speech>
            <speech>So, in a sense, I'm just like you. I just got a little head start on you, that's all.</speech>
            <speech>I'll be happy to teach you things. Glad to meet you, $PLAYER_NAME</speech>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>You see this machine here? It can be used to extract IV Potions from Pokémons.</speech>
            <speech>There is a catch though, the Pokémon has to be Ultra rare.</speech>
            <speech>Come back to me if you want IV Potions and you are willing to trade away your Ultra Rares.</speech>
        </speeches>
        <speeches id="2">
            <speech>You see this machine here? It can be used to extract IV Potions from Pokémons.</speech>
            <speech>There is a catch though, the Pokémon has to be Ultra rare.</speech>
            <speech>Do you want me to make IV Potions for you in exchange of Ultra Rare Pokémon?</speech>
        </speeches>
        <speeches id="3">
            <speech>I see... You like collecting Ultra Rares.</speech>
        </speeches>
        <speeches id="4">
            <speech>**The machine is making scary noises**</speech>
            <speech>There you go. Enjoy the IV Potion.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>You see this machine here? It can be used to extract IV Potions from Pokémons.</speech>
            <speech>There is a catch though, the Pokémon has to be shiny.</speech>
            <speech>Come back to me if you want IV Potions and you are willing to trade away your shiny Pokémons.</speech>
        </speeches>
        <speeches id="2">
            <speech>You see this machine here? It can be used to extract IV Potions from Pokémons.</speech>
            <speech>There is a catch though, the Pokémon has to be shiny.</speech>
            <speech>Do you want me to make IV Potions for you in exchange of shiny Pokémon?</speech>
        </speeches>
        <speeches id="3">
            <speech>I see... You like collecting shiny.</speech>
        </speeches>
        <speeches id="4">
            <speech>**The machine is making scary noises**</speech>
            <speech>There you go. Enjoy the IV Potion.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>You see this machine here? It can be used to extract IV Potions from Pokémons.</speech>
            <speech>There is a catch though, the Pokémon has to be Legendary.</speech>
            <speech>Come back to me if you want IV Potions and you are willing to trade away your Legendary.</speech>
        </speeches>
        <speeches id="2">
            <speech>You see this machine here? It can be used to extract IV Potions from Pokémons.</speech>
            <speech>There is a catch though, the Pokémon has to be Legendary.</speech>
            <speech>Do you want me to make 3 IV Potions for you in exchange of Legendary Pokémon?</speech>
        </speeches>
        <speeches id="3">
            <speech>I see... You like collecting Legendaries.</speech>
        </speeches>
        <speeches id="4">
            <speech>**The machine is making scary noises**</speech>
            <speech>There you go. Enjoy the IV Potions.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Greetings, traveler! I specialize in the science of Technical Machines and Technical Records.</speech>
            <speech>If you have any TMs or TRs from previous generations, I can upgrade them to be compatible with the latest generation's technology.</speech>
        </speeches>
        <speeches id="2">
            <speech>Greetings, traveler! I specialize in the science of Technical Machines and Technical Records.</speech>
            <speech>If you have any TMs or TRs from previous generations, I can upgrade them to be compatible with the latest generation's technology.</speech>
            <speech>Ah, I see you've brought some TMs and TRs for upgrading.</speech>
            <speech>Excellent choice! Upgrading will allow your Pokémon to learn moves they couldn't before with the outdated versions.</speech>
            <speech>Are you ready to proceed? Once we start the upgrade process, we can't reverse it.</speech>
        </speeches>
        <speeches id="3">
            <speech>Understandable, it's a significant decision. Take your time to think it over.</speech>
            <speech>Whenever you decide, I'll be here, ready to assist with your technological needs.</speech>
        </speeches>
        <speeches id="4">
            <speech>Let's begin the upgrade then. Your faith in our lab's capabilities is appreciated.</speech>
            <speech>...And there we are. Your TMs and TRs are now fully upgraded and compatible with the latest generation's systems.</speech>
            <speech>Your Pokémon can now learn new moves to enhance their strength in battles.</speech>
            <speech>Our lab is always here to support trainers like you, pushing the boundaries of Pokémon training and compatibility.</speech>
            <speech>Should you find more TMs or TRs needing an upgrade, you know where to find me. Safe travels!</speech>
        </speeches>
        <speeches id="5">
            <speech>Thank you for entrusting your TMs and TRs to our lab. Your upgrades are complete. Use them well in your journey ahead.</speech>
        </speeches>
    </conversation>

    <conversation id="$id">
        <speeches id="1">
            <speech>That's not a problem. Come back later if you change your mind.</speech>
        </speeches>
        <speeches id="2">
            <speech>Hello young trainer.</speech>
            <speech>I see you have recently arrived in Sinnoh.</speech>
            <speech>The regional restrictions here can be quite a challenge, especially being unable to use Pokémon from other regions.</speech>
            <speech>But don't worry, I have a solution for you. I can convert any number of your Pokémon to be recognized as native to Sinnoh.</speech>
            <speech>This means you can use them freely without concern for regional bans.</speech>
            <speech>You can update any Pokémon that is below the max level cap, which is calculated by the formula (Total Badges * 10) + 5.</speech>
            <speech>In your case, you can update Pokémon up to level $LEVEL.</speech>
            <speech>Would you like to proceed with this update?</speech>
        </speeches>
        <speeches id="3">
            <speech>Hello young trainer.</speech>
            <speech>Welcome to Sinnoh!</speech>
            <speech>I understand the regional restrictions can be frustrating, especially the inability to use Pokémon from other regions.</speech>
            <speech>Luckily, I can help. I can convert your Pokémon to be recognized as native to Hoenn.</speech>
            <speech>This will allow you to use them freely, bypassing the regional bans.</speech>
            <speech>You can update any Pokémon below the max level cap, calculated as (Total Badges * 10) + 5.</speech>
            <speech>In your situation, you can update Pokémon up to level $LEVEL.</speech>
            <speech>Unfortunately, you don't have any eligible Pokémon in your party.</speech>
            <speech>I'm sorry, but it seems I can't assist you further at this moment.</speech>
        </speeches>
        <speeches id="4">
            <speech>There you go. Your companion is now recognized across Sinnoh as a local.</speech>
        </speeches>
    </conversation>
    <npc direction="RIGHT" id="1" name="Dawn's Father" sprite="8" x="4" y="14">
        <speech>I am Dawn's father.</speech>
        <speech>I'll be happy to assist you on your quest for the professor.</speech>
        <speech>Don't forget that some Pokémon evolve via special stones.</speech>
        <speech>They can be found all over the region.</speech>
        <speech>I'm sure we can count on you!</speech>
    </npc>
    <npc direction="LEFT" id="2" name="Lab Assistant Roseanne" sprite="7" x="15" y="13">
        <speech>Professor Rowan invented a new Pokedex while working alongside a professor from the Kanto region.</speech>
        <speech>Oh, my name is Roseanne.</speech>
        <speech>It's an honor to be an assistant to our professor!</speech>
        <speech>He makes sure we always have something to do..</speech>
        <speech>it's great knowing that the work we do makes such a difference though!</speech>
    </npc>
    <npc direction="RIGHT" hidden="false" id="3" name="Rowan's Wife" sprite="55" x="23" y="7">
        <speech>I wish that my husband didn't always work so hard!</speech>
        <speech>He really does love his research though...</speech>
    </npc>
</npcs>
