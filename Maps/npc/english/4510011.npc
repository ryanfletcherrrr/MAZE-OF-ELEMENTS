<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Hahaha!</speech>
            <speech>Suspicious person spotted!</speech>
        </speeches>
        <speeches id="2">
            <speech>Hunh? What do you mean I lost!
            </speech>
        </speeches>
        <speeches id="3">
            <speech>Hunh? What do you mean I lost!
            </speech>
        </speeches>
        <speeches id="4">
            <speech>Now don't come back.</speech>
        </speeches>
        <speeches id="5">
            <speech>Hahaha!</speech>
            <speech>Suspicious person spotted!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Yawn...</speech>
            <speech>Keeping watch over the hideout bores me, so I'll take you on.</speech>
        </speeches>
        <speeches id="2">
            <speech>Yawn... Oh I lost...</speech>
        </speeches>
        <speeches id="3">
            <speech>Yawn... Oh I lost...</speech>
        </speeches>
        <speeches id="4">
            <speech>Now don't come back.</speech>
        </speeches>
        <speeches id="5">
            <speech>Yawn...</speech>
            <speech>Keeping watch over the hideout bores me, so I'll take you on.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Sniff... Sniff...</speech>
            <speech>Today's smell check of our beds is done!</speech>
            <speech>They're fine. They smell good.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>I heard our leader Maxie and Team Aqua's leader Archie used to be in the same team.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Hey, you-no, no, no.</speech>
            <speech>This is Team Magma's library, where documents on our highly confidential plans are stored.</speech>
            <speech>No outsiders are allowed to enter.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>The project AZOTH.</speech>
            <speech>A stands for the beginning, Z stands for the end-that's what I think,</speech>
            <speech>but I don't know what O, T and H stand for.</speech>
        </speeches>
    </conversation>
    <npc direction="UP" hidden="false" id="1" name="Scientist Spenser" randomRotation="false" sprite="8" x="17" y="15">
        <speech>Oh!? So very interesting... oh? Who ar-?! You are not Team Magma!</speech>
        <speech>Guards!! Guards!!</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="2" name="Poochyena" randomRotation="false" sprite="289" x="43" y="26">
        <speech>Poochyena!</speech>
    </npc>
</npcs>
