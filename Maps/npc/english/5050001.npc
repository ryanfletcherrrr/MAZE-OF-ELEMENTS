<npcs>
    <npc direction="UP" hidden="false" id="1" name="Zoe" sprite="12" x="21" y="13">
        <speech>I plan to visit Jvaloh one day. They say the region is full of mysteries. I wonder what it holds.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="2" name="Julia" sprite="27" x="16" y="6">
        <speech>Aren't these plants aromatic?</speech>
    </npc>
    <movingNpc direction="LEFT" id="3" name="Raticate" shouldSleep="" speed="1" sprite="20" type="pokemon" x="5" y="12">
        <path>LEFTx2,RIGHTx2</path>
        <onCollisionSpeech gap="4">Ouch.. This Raticate is trying to bite me</onCollisionSpeech>
        <speech>Rati...Rati...!</speech>
    </movingNpc>
    <npc direction="UP" hidden="false" id="4" name="Alex" sprite="2" x="0" y="20">
        <speech>There is a Raticate on the 1st floor of this PokeCenter that was trying to bite me!</speech>
        <speech>I am hiding from it.</speech>
    </npc>
    <npc direction="UP" hidden="false" id="5" name="Eugene" sprite="24" x="20" y="20">
        <speech>I wonder if they have better bug Pokémon in Jvaloh than they have in Sinnoh?</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="6" name="Noriko" sprite="39" x="14" y="16">
        <speech>They recently revamped all the PokeCenters in Sinnoh.</speech>
        <speech>The wooden tiles are made from wood imported from Nuzbar Village of Jvaloh region.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="7" name="Sam" sprite="2" x="5" y="11">
        <speech>My brother is scared of rats whereas I love to play with them.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="8" name="Ronald" sprite="5" x="19" y="10">
        <speech>I like to come to the PokeCenter and relax. You want to join me?</speech>
    </npc>
    <npc direction="UP" hidden="false" id="9" name="Danny" sprite="5" x="11" y="4">
        <speech>Long ago in the Jvaloh region, many trainers used the Pokémon 'Cloyster' in their Gym Challenge...</speech>
        <speech>It had the unique advantage of using the Ability Skill Link which when paired with a good nature, allowed it to be a quick and heavy hitter...</speech>
        <speech>If you know, then you know...</speech>
		<speech>Oh! You like my Cloyster huh? Get your own!</speech>
		<speech>*grumbles audibly about kids and cloysters*</speech>
    </npc>
    <movingNpc direction="DOWN" id="10" name="Cloyster" shouldSleep="" speed="1" sprite="91" type="pokemon" x="12" y="3">
        <path>DOWNx1, UPx1</path>
        <onCollisionSpeech gap="4">*Cloyster winks at you*</onCollisionSpeech>
        <speech>Clooooyster!</speech>
    </movingNpc>

    <conversation id="8">
        <speeches id="1">
            <speech>So you want to exchange your Goodwill Tokens for items?</speech>
        </speeches>
        <speeches id="2">
            <speech>No problems. Come back again if you change your mind.</speech>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="9">
        <speeches id="1">
            <speech>{COLOR=YELLOW}Greetings, $PLAYER_NAME! The time has come to test your finest dragons!{ENDCOLOR}</speech>
            <speech>Present me {COLOR=CYAN}up to 5 self-caught Bagon, Cyclizar, or Dratini{ENDCOLOR}, and I shall judge their potential.</speech>
            <speech>The {COLOR=GOLD}strongest, most flawless{ENDCOLOR} among them will win!</speech>
            <speech>Do you have what it takes to claim the prize?</speech>
        </speeches>

        <speeches id="2">
            <speech>{COLOR=RED}The competition has concluded!{ENDCOLOR}</speech>
            <speech>All scores have been recorded, and the mightiest dragon has been crowned.</speech>
            <speech>Return next time to test your mettle once more!</speech>
        </speeches>

        <speeches id="3">
            <speech>{COLOR=YELLOW}A setback, $PLAYER_NAME!{ENDCOLOR}</speech>
            <speech>You do not have {COLOR=CYAN}enough self-caught Bagon, Cyclizar, or Dratini{ENDCOLOR} for me to judge.</speech>
            <speech>Seek out more, and return when you are ready.</speech>
        </speeches>

        <speeches id="4">
            <speech>{COLOR=GREEN}You've reached the maximum of 5 submissions!{ENDCOLOR}</speech>
            <speech>If you wish to change your entries, you may reset your selections.</speech>
        </speeches>

        <speeches id="5">
            <speech>{COLOR=RED}This one does not qualify!{ENDCOLOR}</speech>
            <speech>Your submission lacks the {COLOR=GOLD}flawless strength and potential{ENDCOLOR} we seek.</speech>
            <speech>Only the best shall be considered—bring me stronger ones!</speech>
        </speeches>

        <speeches id="6">
            <speech>{COLOR=CYAN}A worthy submission!{ENDCOLOR}</speech>
            <speech>The judges have acknowledged your Pokémon.</speech>
            <speech>You now stand a chance at claiming the {COLOR=RED}top spot!{ENDCOLOR}</speech>
        </speeches>

        <speeches id="7">
            <speech>{COLOR=PURPLE}Your previous submissions have been reset.{ENDCOLOR}</speech>
            <speech>The path is open for new contenders. Choose wisely this time!</speech>
        </speeches>

        <speeches id="8">
            <speech>{COLOR=YELLOW}Do you truly wish to reset your submissions, $PLAYER_NAME?{ENDCOLOR}</speech>
            <speech>This will erase all previous entries, allowing fresh contenders to be judged.</speech>
            <speech>But once done, it cannot be undone. Are you certain?</speech>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="10">
        <speeches id="1">
            <speech>{COLOR=YELLOW}Ah, $PLAYER_NAME! I seek the most... unfortunate dragons.{ENDCOLOR}</speech>
            <speech>Present me {COLOR=CYAN}up to 5 self-caught Bagon, Cyclizar, or Dratini{ENDCOLOR}, and I shall judge them in a most unconventional manner.</speech>
            <speech>The {COLOR=RED}least gifted, most lackluster{ENDCOLOR} among them shall earn their trainer a special reward!</speech>
            <speech>Do you dare to take part in this unusual contest?</speech>
        </speeches>

        <speeches id="2">
            <speech>{COLOR=RED}The competition has ended!{ENDCOLOR}</speech>
            <speech>The most... underwhelming dragon has been chosen, and the results are final.</speech>
            <speech>Return next time for another chance at victory.</speech>
        </speeches>

        <speeches id="3">
            <speech>{COLOR=YELLOW}Hmm, something is missing, $PLAYER_NAME.{ENDCOLOR}</speech>
            <speech>You do not yet have {COLOR=CYAN}enough self-caught Bagon, Cyclizar, or Dratini{ENDCOLOR} for me to judge.</speech>
            <speech>Venture out, and bring back more candidates.</speech>
        </speeches>

        <speeches id="4">
            <speech>{COLOR=GREEN}You've reached the maximum of 5 submissions!{ENDCOLOR}</speech>
            <speech>If you wish to reconsider your choices, you may reset your submissions.</speech>
            <speech>But remember, only the weakest will claim the prize!</speech>
        </speeches>

        <speeches id="5">
            <speech>{COLOR=RED}This one is far too impressive!{ENDCOLOR}</speech>
            <speech>Your Pokémon has {COLOR=GOLD}too much potential and skill!{ENDCOLOR}</speech>
            <speech>Only the {COLOR=YELLOW}most unfortunate{ENDCOLOR} specimens will be accepted here.</speech>
        </speeches>

        <speeches id="6">
            <speech>{COLOR=CYAN}Yes, yes... this will do!{ENDCOLOR}</speech>
            <speech>Your Pokémon has been deemed sufficiently lacking in talent.</speech>
            <speech>You are one step closer to becoming the master.</speech>
        </speeches>

        <speeches id="7">
            <speech>{COLOR=PURPLE}Your previous submissions have been erased.{ENDCOLOR}</speech>
            <speech>The stage is set for new hopefuls—or rather, the hopeless. Choose your entries wisely.</speech>
        </speeches>

        <speeches id="8">
            <speech>{COLOR=YELLOW}Are you certain you wish to reset your submissions, $PLAYER_NAME?{ENDCOLOR}</speech>
            <speech>This will clear all previous entries, allowing new contenders to be judged.</speech>
            <speech>Once done, it cannot be reversed. Proceed with caution.</speech>
        </speeches>
    </conversation>

</npcs>
