<npcs>
    <npc direction="DOWN" id="1000" name="Swimmer Kartik" sprite="93" x="46" y="46">
        <speech>I am waiting for my friend to arrive here so that we can go to swim towards Barfi Falls.</speech>
    </npc>
    <npc direction="DOWN" id="1001" name="Hiker Swami" sprite="48" x="54" y="30">
        <speech>I am collecting wood pieces to carry for my hiking trip. Don't disturb me please good sir.</speech>
    </npc>
    <npc direction="RIGHT" id="1002" name="Old Man Kooga" randomRotation="true" sprite="39" x="48" y="7">
        <speech>Giant rock.. I want to smash it into pieces with my jutsu. Step away or else you will be destroyed.</speech>
        <speech>What are these things? I see them all over Jvaloh but never understand what these actually are.</speech>
    </npc>
    <npc direction="RIGHT" id="1002" name="Old Man Kooga" randomRotation="true" sprite="39" x="40" y="8">
        <speech>Giant rock.. I want to smash it into pieces with my jutsu. Step away or else you will be destroyed.</speech>
        <speech>What are these things? I see them all over Jvaloh but never understand what these actually are.</speech>
    </npc>
    <npc direction="DOWN" id="1003" name="Rich Boy Mansu" randomRotation="true" sprite="75" x="22" y="18">
        <speech>I am plucking these flowers for my date. Do you have any tips?</speech>
        <speech>I mean you look like you have been dating for a long time.</speech>
        <speech>I was kidding, go away.</speech>
    </npc>
    <conversation id="1">
        <speeches id="1">
            <speech>Looks and age can be deceiving. Let me show you how.</speech>
        </speeches>
        <speeches id="2">
            <speech>Indeed. You looked young and weak, but you battled like someone with a lot of experience.</speech>
        </speeches>
        <speeches id="3">
            <speech>Indeed. You looked young and weak, but you battled like someone with a lot of experience.</speech>
        </speeches>
        <speeches id="4">
            <speech>I wonder how did you get this far.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Let me show you power of a true fisherman.!</speech>
        </speeches>
        <speeches id="2">
            <speech>Even though you won, I am sure I did much better than other fishermen.</speech>
        </speeches>
        <speeches id="3">
            <speech>Even though you won, I am sure I did much better than other fishermen. I am an elite.</speech>
        </speeches>
        <speeches id="4">
            <speech>You weren't bad. It's just that I am an elite.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>I am travelling to the nearby village for repairs. But let's have a battle.</speech>
        </speeches>
        <speeches id="2">
            <speech>I lost but it was fun. Thanks for the battle.</speech>
        </speeches>
        <speeches id="3">
            <speech>I wanted to be a Pokémon master as well, but I didn't have enough money to buy pokeballs.</speech>
        </speeches>
        <speeches id="4">
            <speech>Kid, do you want to be a Pokémon master? You sure?</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Who are we? Bug Catchers.</speech>
            <speech>What do we want? Bugs all over the planet.</speech>
            <speech>How do we plan to do it? By defeating trainers like you.</speech>
        </speeches>
        <speeches id="2">
            <speech>Who are we? Losers....</speech>
        </speeches>
        <speeches id="3">
            <speech>I mean what's wrong with bugs? Well anyway, I was here to find my friend's dad who is also a bug collector currently on his journey towards $GYM8_TOWN.</speech>
        </speeches>
        <speeches id="4">
            <speech>Another one bites the dust.</speech>
        </speeches>
    </conversation>
</npcs>
