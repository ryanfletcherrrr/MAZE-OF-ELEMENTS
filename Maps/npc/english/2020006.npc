<npcs>
    <conversation id="1">
        <!-- First Battle (Classic Giovanni Style) -->
        <speeches id="1">
            <speech>{COLOR=GRAY}Fwahahaha! Welcome to my hideout.{ENDCOLOR}</speech>
            <speech>You have come far, but your journey ends here.</speech>
            <speech>I am {COLOR=GRAY}Giovanni{ENDCOLOR}, Viridian Gym’s leader, master of {COLOR=BROWN}Ground-type Pokémon{ENDCOLOR}!</speech>
            <speech>Strength, discipline, and power—these are what rule the Pokémon world!</speech>
            <speech>Prepare yourself! Let me show you what true power feels like!</speech>
        </speeches>
        <speeches id="2">
            <speech>{COLOR=GRAY}...Ha! This cannot be!{ENDCOLOR}</speech>
            <speech>You have truly grown stronger than I expected.</speech>
            <speech>Very well. Here is your reward—the {COLOR=GOLD}Earth Badge{ENDCOLOR}!</speech>
            <speech>Take this as well—{COLOR=BROWN}TM26 Earthquake{ENDCOLOR}, a move powerful enough to shake the very foundations of battle!</speech>
            <speech>Use it to shape the future you seek. Perhaps your strength can surpass even mine.</speech>
            <speech>{COLOR=GRAY}But mark my words... our story is not yet over. Trouble brews in places far from here.{ENDCOLOR}</speech>
        </speeches>
        <speeches id="3">
            <speech>{COLOR=GRAY}Hmph. How disappointing.{ENDCOLOR}</speech>
            <speech>You lack strength. Return only after you've forged yourself into someone worthy of my respect.</speech>
        </speeches>
        <speeches id="4">
            <speech>{COLOR=GRAY}Backing down already? Perhaps you sense your limitations.{ENDCOLOR}</speech>
            <speech>Return when your courage matches your ambition.</speech>
        </speeches>
        <!-- Repeated Battle (More Intense & Thematic) -->
        <speeches id="5">
            <speech>{COLOR=GRAY}You return to challenge me again? Interesting.{ENDCOLOR}</speech>
            <speech>Power is an endless pursuit. Only the strong maintain their dominance.</speech>
            <speech>{COLOR=BROWN}The ground is steady, patient, and unyielding—like my resolve!{ENDCOLOR}</speech>
            <speech>Show me if your strength is absolute or merely temporary!</speech>
        </speeches>
        <speeches id="6">
            <speech>{COLOR=GRAY}Remarkable... You've bested me again.{ENDCOLOR}</speech>
            <speech>{COLOR=GOLD}$TOTAL_VICTORY{ENDCOLOR} total victories, and {COLOR=CYAN}$CONSECUTIVE{ENDCOLOR} consecutive wins?</speech>
            <speech>Your power is extraordinary. I await our next encounter eagerly.</speech>
        </speeches>
        <speeches id="7">
            <speech>{COLOR=GRAY}Ha! You see now—power without control is meaningless.{ENDCOLOR}</speech>
            <speech>Train harder, discipline yourself, and return when you’re truly prepared to challenge me again.</speech>
        </speeches>
        <speeches id="8">
            <speech>{COLOR=GRAY}Hesitation is weakness, challenger.{ENDCOLOR}</speech>
            <speech>Gather your strength, then return. I'll await your arrival.</speech>
        </speeches>
        <speeches id="9">
            <speech>{COLOR=GRAY}Even I must rest, challenger.{ENDCOLOR}</speech>
            <speech>Return after {COLOR=YELLOW}$DURATION{ENDCOLOR}. We'll see if your strength persists then.</speech>
        </speeches>
        <!-- Special Condition: Battle Requirement Not Met -->
        <speeches id="10">
            <speech>{COLOR=GRAY}You presume to face me unprepared?{ENDCOLOR}</speech>
            <speech>I only battle trainers possessing at least {COLOR=BROWN}3 Ground-type Pokémon{ENDCOLOR}.</speech>
            <speech>Return when your team demonstrates true mastery of the earth!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Giovanni's beasts bow to me! My Ground-types crush weaklings. Step up or get stomped!</speech>
        </speeches>
        <speeches id="2">
            <speech>Whipped flat! You've got guts. I'll tame tougher next time.</speech>
        </speeches>
        <speeches id="3">
            <speech>Whipped flat! You've got guts. I'll tame tougher next time.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ground rules here! Giovanni's proud. You're dirt under my heel!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>My fists and Ground-types hit like steel! Giovanni's dojo forged me. Ready to break?</speech>
        </speeches>
        <speeches id="2">
            <speech>Cracked my guard! You've got spine. I'll train harder.</speech>
        </speeches>
        <speeches id="3">
            <speech>Cracked my guard! You've got spine. I'll train harder.</speech>
        </speeches>
        <speeches id="4">
            <speech>Grounded you good! Giovanni's strength rules. You're dust!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>I fight hard like Giovanni demands! My Ground-types hit brutal. Ready to crack?</speech>
        </speeches>
        <speeches id="2">
            <speech>Shaken down! You're solid. I'll strike fiercer next round.</speech>
        </speeches>
        <speeches id="3">
            <speech>Shaken down! You're solid. I'll strike fiercer next round.</speech>
        </speeches>
        <speeches id="4">
            <speech>Quaked you good! Giovanni's power flows in me. Stay down!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Giovanni's strength is like a landslide..overwhelming and unstoppable. I'll show you what that power feels like!</speech>
        </speeches>
        <speeches id="2">
            <speech>Looks like I need to push my limits even further...</speech>
        </speeches>
        <speeches id="3">
            <speech>Looks like I need to push my limits even further...</speech>
        </speeches>
        <speeches id="4">
            <speech>You won't survive Giovanni's power if this is all you've got...</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Giovanni's strategies are unmatched... but I've studied his tactics. Let's see if you can outthink me!</speech>
        </speeches>
        <speeches id="2">
            <speech>You've got potential... but don't think Giovanni will be that easy.</speech>
        </speeches>
        <speeches id="3">
            <speech>You've got potential... but don't think Giovanni will be that easy.</speech>
        </speeches>
        <speeches id="4">
            <speech>See? Power's nothing without a plan. Maybe you should rethink your approach.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Strength is everything! Ground-types may be powerful, but my fists hit just as hard!</speech>
        </speeches>
        <speeches id="2">
            <speech>Your strength... it's real. Guess I'll need to train even harder...</speech>
        </speeches>
        <speeches id="3">
            <speech>Your strength... it's real. Guess I'll need to train even harder...</speech>
        </speeches>
        <speeches id="4">
            <speech>You can't bulldoze through pure discipline! Keep working on that form!</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>I'm Giovanni's elite! My Ground-types crush all. Think you can outmuscle me?</speech>
        </speeches>
        <speeches id="2">
            <speech>Outplayed! You're tougher than I thought. I'll bulk up.</speech>
        </speeches>
        <speeches id="3">
            <speech>Outplayed! You're tougher than I thought. I'll bulk up.</speech>
        </speeches>
        <speeches id="4">
            <speech>Victory's mine! Giovanni's power prevails. You're no threat!</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>Precision, control, and strategy..that's how you conquer even the toughest trainers. Are you ready to face my calculated moves?</speech>
        </speeches>
        <speeches id="2">
            <speech>Your instincts... they're sharper than I expected. Impressive.</speech>
        </speeches>
        <speeches id="3">
            <speech>Your instincts... they're sharper than I expected. Impressive.</speech>
        </speeches>
        <speeches id="4">
            <speech>Looks like you'll need more than brute strength to stand a chance against Giovanni.</speech>
        </speeches>
    </conversation>
</npcs>
