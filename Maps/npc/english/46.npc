<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Hey kid, what do you think you're doing by walking in here without any protection for your eyes?
            </speech>
            <speech>The sandstorm here is nasty, and even experienced travellers like myself can't stand here without
                covering our eyes.
            </speech>
            <speech>You'd best get some 'Go Goggles' before you try to cross the desert. I bet one of these Ruin Maniacs
                would have an extra pair for you. You might want to ask them about it.
            </speech>
            <speech>Trust me - crossing the desert without eye-care? BAD, BAD IDEA!</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>Mawaaaandi!! Mandiiiii..</speech>
        </speeches>
        <speeches id="2">
            <speech>Mawaaaandi!</speech>
        </speeches>
        <speeches id="3">
            <speech>*Mandibuzz appears to be gesturing you to leave for now, but return later*.</speech>
        </speeches>
        <speeches id="4">
            <speech>Mandi!!</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="11">
        <speeches id="1">
            <speech>Aren't you the one who has been meddling with our plans?</speech>
            <speech>What do you want? Huh? What Flashlight Stash?</speech>
            <speech>I will battle you and shut you down forever.</speech>
        </speeches>
        <speeches id="2">
            <speech>Hahaha, I ain't going to tell you where I hid the stash.</speech>
            <speech>Were you really expecting me to give away the stash so easy?</speech>
            <speech>I knew somebody was going to come after me, so I left it in one of my friend's house in Route 6 Highway without them knowing it.</speech>
        </speeches>
        <speeches id="3">
            <speech>You are such a disgrace. Stop following and bugging me.</speech>
        </speeches>
        <speeches id="4">
            <speech>You are such a disgrace. Now rot in PokeCenter.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <conversation id="12">
        <speeches id="1">
            <speech>My middle-age spread has given me as much gravitas as the mountains I hike!</speech>
        </speeches>
        <speeches id="2">
            <speech>At least I cannot lose when it comes to BMI!</speech>
        </speeches>
        <speeches id="3">
            <speech>At least I cannot lose when it comes to BMI!</speech>
        </speeches>
        <speeches id="4">
            <speech>Bwahaha! You'll win, too, if you just up your calorie intake a bit!</speech>
        </speeches>
    </conversation>
    <conversation id="13">
        <speeches id="1">
            <speech>I inherited this big-boned body from my parents... I'm like a living mountain range...</speech>
        </speeches>
        <speeches id="2">
            <speech>It's not enough... It's never enough. My bad cholesterol isn't high enough...</speech>
        </speeches>
        <speeches id="3">
            <speech>It's not enough... It's never enough. My bad cholesterol isn't high enough...</speech>
        </speeches>
        <speeches id="4">
            <speech>Ha ha! Now I can consume some more calories...</speech>
        </speeches>
    </conversation>
    <conversation id="14">
        <speeches id="1">
            <speech>Time for a battle haiku! This is really good. My opponent is a kid. I will win for sure.</speech>
        </speeches>
        <speeches id="2">
            <speech>Time for a battle haiku! I can't believe it. I can still continue on. I can still battle.</speech>
        </speeches>
        <speeches id="3">
            <speech>Time for a battle haiku! I can't believe it. I can still continue on. I can still battle.</speech>
        </speeches>
        <speeches id="4">
            <speech>Time for a battle haiku! I knew I would win. Yes, my Pokémon and I are really this strong.</speech>
        </speeches>
    </conversation>
    <npc direction="DOWN" hidden="false" id="1" name="Hiker Ivan" randomRotation="true" sprite="10" x="33" y="13">
        <speech>I am a hiker but I have a very weak back.</speech>
        <speech>You see that Pokeball there? I cannot pick it up due to my bad back.</speech>
    </npc>
    <movingNpc direction="DOWN" id="2" name="Sailor Raul" shouldSleep="" speed="1" sprite="11" type="npc" x="32" y="23">
        <path>DOWNx3,UPx3</path>
        <onCollisionSpeech gap="4">I need water!</onCollisionSpeech>
        <speech>I was looking for sea but I ended up in desert.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="3" name="Fearow" shouldSleep="" speed="1" sprite="22" type="pokemon" x="35" y="40">
        <path>DOWNx3,UPx3</path>
        <onCollisionSpeech gap="4">Fea!! FEAAA!!</onCollisionSpeech>
        <speech>**Fearow seems to be looking for food.**</speech>
    </movingNpc>
</npcs>
