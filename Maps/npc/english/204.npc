<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>I'm a Gardener, but I'm good at Pokémon battles, too.</speech>
        </speeches>
        <speeches id="2">
            <speech>I'm a Gardener, so my real job is gardening.</speech>
        </speeches>
        <speeches id="3">
            <speech>I'm a Gardener, so my real job is gardening.</speech>
        </speeches>
        <speeches id="4">
            <speech>I'm a Gardener, but maybe I'll try to become the Champion.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Viridian Forest is our turf! My bugs are ready to sting, bite, and bug you out!</speech>
        </speeches>
        <speeches id="2">
            <speech>Aw man guess I need to train em up before they evolve.</speech>
        </speeches>
        <speeches id="3">
            <speech>Aw man guess I need to train em up before they evolve.</speech>
        </speeches>
        <speeches id="4">
            <speech>See? Bugs may be small, but they'll swarm right over you!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Hey! If you're not considerate to your elders, you'll be pulled out by the roots!</speech>
        </speeches>
        <speeches id="2">
            <speech>The fruits of my victory... have already been harvested...</speech>
        </speeches>
        <speeches id="3">
            <speech>The fruits of my victory... have already been harvested...</speech>
        </speeches>
        <speeches id="4">
            <speech>I'll bet that turned your hair white!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Being called a Beauty doesn't excite me at all. It just seems like cheap flattery.</speech>
        </speeches>
        <speeches id="2">
            <speech>It's just plain creepy when someone uses compliments to win your attention. Ugh!</speech>
        </speeches>
        <speeches id="3">
            <speech>It's just plain creepy when someone uses compliments to win your attention. Ugh!</speech>
        </speeches>
        <speeches id="4">
            <speech>Certain types of people use sweet talk no matter what you look like. It's meaningless.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>I came here for my big brother, who always hides in his room.</speech>
        </speeches>
        <speeches id="2">
            <speech>I wish my big brother would come out of his room and play with me...</speech>
        </speeches>
        <speeches id="3">
            <speech>I wish my big brother would come out of his room and play with me...</speech>
        </speeches>
        <speeches id="4">
            <speech>My big brother, look outside for once! I won for you, so come out and play!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>All right! Here I come! I'll show you my power!</speech>
        </speeches>
        <speeches id="2">
            <speech>Whoa! You are incredible! I'm amazed and surprised!</speech>
        </speeches>
        <speeches id="3">
            <speech>Whoa! You are incredible! I'm amazed and surprised!</speech>
        </speeches>
        <speeches id="4">
            <speech>You amazed? You surprised? By the power of my Pokémon?!</speech>
        </speeches>
    </conversation>
    <!-- Buzzing Hide & Seek Quest Speeches -->
    <conversation id="7">
        <speeches id="1">
            <speech>Oh no! We were playing hide and seek, but now my brother hasn't come back!</speech>
            <speech>He said he was going to hide really deep in the forest... and then we heard buzzing.</speech>
            <speech>Loud buzzing. Please help me find him!</speech>
            <speech>He went out with two other friends of his so maybe they can help?</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>I saw him near a big hollow tree. He said it was the best hiding spot ever!</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>I heard buzzing near that part of the forest and ran back... I was scared.</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>Thanks for saving me... That Beedrill wasn't just angry.</speech>
            <speech>It was scared... and bigger than the others.</speech>
            <speech>I'm never hiding that deep in the forest again!</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>BZZZZZZT! The Beedrill swarm is agitated and ready to attack!</speech>
        </speeches>
        <speeches id="2">
            <speech>The Beedrill have fled back to their hive. The forest is safe again.</speech>
        </speeches>
        <speeches id="3">
            <speech>BZZZZZZT! The Beedrill swarm blocks your path!</speech>
        </speeches>
        <speeches id="4">
            <speech>The Beedrill have fled back to their hive. The forest is safe again.</speech>
        </speeches>
    </conversation>
    <conversation id="14">
        <speeches id="1">
            <speech>Hey there! I'm Ash Ketchum from Pallet Town!</speech>
            <speech>I'm on my way to become the very best Pokémon trainer - like no one ever was!</speech>
            <speech>You look like you've got what it takes to be a great trainer too!</speech>
            <speech>How about we have a battle? Pikachu and I are always ready for a challenge!</speech>
            <speech>Let's see what you and your Pokémon can do!</speech>
        </speeches>
        <speeches id="2">
            <speech>Wow! That was an amazing battle!</speech>
            <speech>You really know how to bring out the best in your Pokémon!</speech>
            <speech>Hey, I've got something special for you - a {COLOR=GOLD}gift Pokémon{ENDCOLOR} that I think would be perfect for your team!</speech>
            <speech>This little guy has a really unique skill that most trainers have never seen before!</speech>
            <speech>I know you'll take great care of it! Take good care of your new partner, okay?</speech>
            <speech>Maybe we'll battle again someday - I'll be even stronger next time!</speech>
        </speeches>
        <speeches id="3">
            <speech>Hey! Good to see you again!</speech>
            <speech>How's your Pokémon journey going? I bet you're getting stronger every day!</speech>
        </speeches>
        <speeches id="4">
            <speech>Alright! Pikachu and I make a pretty good team, don't we?</speech>
            <speech>But you were really tough! Keep training hard with your Pokémon!</speech>
            <speech>Here, take this {COLOR=GOLD}special Pokémon{ENDCOLOR} anyway - it's got some amazing abilities!</speech>
            <speech>I know you'll be a great trainer for it!</speech>
            <speech>Let's battle again sometime when we're both even stronger!</speech>
        </speeches>
        <speeches id="5">
            <speech>Oh no! Looks like your party is full and your PC boxes are too!</speech>
            <speech>You'll need to make some space before I can give you this special Pokémon!</speech>
            <speech>Come back when you've got room - I think you'll really like this little guy!</speech>
        </speeches>
    </conversation>
    <conversation id="15">
        <speeches id="1">
            <speech>Oh wow! You found me!</speech>
            <speech>I thought I picked the perfect hiding spot!</speech>
            <speech>You're really good at this hide and seek game!</speech>
            <speech>But now that you found me, we have to battle first - those are the rules!</speech>
            <speech>Let's see if you're as good at battling as you are at seeking!</speech>
        </speeches>
        <speeches id="2">
            <speech>That was such an awesome battle!</speech>
            <speech>You and your Pokémon work so well together!</speech>
            <speech>Okay, you win this round of hide and seek - I'll come out now!</speech>
            <speech>Keep looking for the other two! They're hiding somewhere else in the forest!</speech>
            <speech>Good luck finding them - they picked even trickier spots than mine!</speech>
        </speeches>
        <speeches id="3">
            <speech>Hey! Thanks for playing hide and seek with us!</speech>
            <speech>That was so much fun! We should play again tomorrow!</speech>
        </speeches>
        <speeches id="4">
            <speech>Hehe! I get to stay hidden a little longer!</speech>
            <speech>But you were really close to winning! Try again!</speech>
            <speech>I believe in you - you can definitely beat me if you keep trying!</speech>
        </speeches>
    </conversation>
    <conversation id="16">
        <speeches id="1">
            <speech>Whoa! You actually found me!</speech>
            <speech>I've been hiding here for ages! Most people never think to look carefully!</speech>
            <speech>You must have really sharp eyes to spot me!</speech>
            <speech>Since you found my hiding spot, let's have a Pokémon battle!</speech>
            <speech>I've been training my team while waiting - let's see what you've got!</speech>
        </speeches>
        <speeches id="2">
            <speech>Amazing battle! Your Pokémon are super strong!</speech>
            <speech>I guess I can't stay hidden anymore - you earned it!</speech>
            <speech>That's one down! You still need to find two more friends!</speech>
            <speech>They're probably watching us right now from their hiding spots!</speech>
            <speech>Keep searching - you're doing great at this game!</speech>
        </speeches>
        <speeches id="3">
            <speech>Hi again! Want to play hide and seek tomorrow?</speech>
            <speech>Maybe I'll find an even better hiding spot next time!</speech>
        </speeches>
        <speeches id="4">
            <speech>Aw man! I thought I could stay hidden longer!</speech>
            <speech>You almost had me beat though! Keep trying!</speech>
            <speech>I know you can win if you don't give up!</speech>
        </speeches>
    </conversation>
    <conversation id="17">
        <speeches id="1">
            <speech>No way! How did you find me?</speech>
            <speech>I was so sure no one would think to look around here!</speech>
            <speech>You're like a super detective or something!</speech>
            <speech>Well, since you found me fair and square, let's battle!</speech>
            <speech>My Pokémon have been getting restless just sitting here hiding!</speech>
        </speeches>
        <speeches id="2">
            <speech>Wow! That battle was incredible!</speech>
            <speech>You really know how to command your Pokémon in battle!</speech>
            <speech>Alright, alright, you got me! I'll come out of hiding!</speech>
            <speech>Two down, one more to go! The last friend is really well hidden!</speech>
            <speech>You'll need to be extra careful to find the last one!</speech>
        </speeches>
        <speeches id="3">
            <speech>Hey there! Ready for another round of hide and seek sometime?</speech>
            <speech>Next time I'm finding an even more secret spot!</speech>
        </speeches>
        <speeches id="4">
            <speech>Phew! I get to keep hiding for now!</speech>
            <speech>But that was a really close battle! You're getting stronger!</speech>
            <speech>Don't give up - I know you can beat me!</speech>
        </speeches>
    </conversation>
    <conversation id="18">
        <speeches id="1">
            <speech>Gasp! You found me!</speech>
            <speech>I thought for sure I was completely invisible!</speech>
            <speech>You must have amazing observation skills!</speech>
            <speech>Since the jig is up, how about we have a Pokémon battle?</speech>
            <speech>I've been practicing some new moves while hiding - prepare yourself!</speech>
        </speeches>
        <speeches id="2">
            <speech>That was such an exciting battle!</speech>
            <speech>You and your team really gave it your all!</speech>
            <speech>Fine, you win! I'll stop hiding now!</speech>
            <speech>You're so close to winning the whole game!</speech>
            <speech>Just one more friend to find and you'll have found us all!</speech>
        </speeches>
        <speeches id="3">
            <speech>Great job on the hide and seek game!</speech>
            <speech>We had so much fun! Let's play again soon!</speech>
        </speeches>
        <speeches id="4">
            <speech>Yes! I can stay hidden a bit longer!</speech>
            <speech>But you put up a really good fight! Keep it up!</speech>
            <speech>I have faith you'll beat me next time!</speech>
        </speeches>
    </conversation>
    <conversation id="19">
        <speeches id="1">
            <speech>Eek! You found me!</speech>
            <speech>I was being so quiet and still - how did you spot me?</speech>
            <speech>You're like a master hide and seek player!</speech>
            <speech>Now we have to battle since you found my hiding spot!</speech>
            <speech>My Pokémon are ready to show you what we've got!</speech>
        </speeches>
        <speeches id="2">
            <speech>What an amazing battle! You're so skilled!</speech>
            <speech>Your Pokémon really trust you - I can tell!</speech>
            <speech>Okay, you caught me fair and square!</speech>
            <speech>That's another one found! Keep going!</speech>
            <speech>The others are probably getting nervous that you're so good at this!</speech>
        </speeches>
        <speeches id="3">
            <speech>Thanks for playing with us! That was the best hide and seek ever!</speech>
            <speech>We'll have to think of even better spots next time!</speech>
        </speeches>
        <speeches id="4">
            <speech>Haha! My hiding spot is safe for now!</speech>
            <speech>But you almost won that battle! So close!</speech>
            <speech>Keep trying - I believe you can do it!</speech>
        </speeches>
    </conversation>
    <conversation id="20">
        <speeches id="1">
            <speech>Oh my gosh! You actually found me!</speech>
            <speech>I climbed to such a good spot thinking no one would look!</speech>
            <speech>You're definitely the best seeker we've ever played with!</speech>
            <speech>Since you worked so hard to find me, let's have an epic battle!</speech>
            <speech>My Pokémon and I have been waiting for a good challenge!</speech>
        </speeches>
        <speeches id="2">
            <speech>Incredible! That was one of the best battles I've ever had!</speech>
            <speech>You really brought out the best in both our teams!</speech>
            <speech>Alright, you got me! I surrender my hiding spot!</speech>
            <speech>You're almost done with the game now!</speech>
            <speech>Just one more friend left to find - good luck!</speech>
        </speeches>
        <speeches id="3">
            <speech>That was such a fun game! Thanks for playing with us!</speech>
            <speech>Same time tomorrow? We love hide and seek!</speech>
        </speeches>
        <speeches id="4">
            <speech>Whew! I get to keep my hiding spot secret a little longer!</speech>
            <speech>But wow, you're really strong! That was so close!</speech>
            <speech>Don't give up - you can totally beat me!</speech>
        </speeches>
    </conversation>
    <conversation id="21">
        <speeches id="1">
            <speech>Ahhh! You found me in my super secret hideout!</speech>
            <speech>This was supposed to be the ultimate hiding spot!</speech>
            <speech>You must be the greatest hide and seek player ever!</speech>
            <speech>Well, since you found me, we have to battle - that's the rule!</speech>
            <speech>Let me show you why I was picked as the final challenge!</speech>
        </speeches>
        <speeches id="2">
            <speech>WOW! That was the most amazing battle ever!</speech>
            <speech>You really are an incredible trainer!</speech>
            <speech>Congratulations! You found all of us and won every battle!</speech>
            <speech>You're officially the hide and seek champion!</speech>
            <speech>We all had so much fun playing with you today!</speech>
        </speeches>
        <speeches id="3">
            <speech>You were awesome at hide and seek! What a great game!</speech>
            <speech>We'll have to come up with even more challenging spots for next time!</speech>
        </speeches>
        <speeches id="4">
            <speech>Yes! The ultimate hiding spot remains undefeated!</speech>
            <speech>But that was such a close battle! You're incredibly strong!</speech>
            <speech>I know you'll get me next time - keep trying!</speech>
        </speeches>
    </conversation>
    <movingNpc direction="RIGHT" id="2" name="Butterfree" speed="1" sprite="12" type="pokemon" x="68" y="33">
        <path>RIGHTx5,DOWNx1,LEFTx5,UPx1</path>
        <onCollisionSpeech gap="4">Butterfreeeeeee</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="4" name="Jacob" speed="1" sprite="58" type="npc" x="30" y="77">
        <path>RIGHTx5,LEFTx5</path>
        <onCollisionSpeech gap="4"/>
        <speech>I once saw a Kakuna blink..</speech>
        <speech>Swear it!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="5" name="Beedrill" speed="1" sprite="15" type="pokemon" x="15" y="61">
        <path>DOWNx4,RIGHTx4,UPx4,LEFTx4</path>
        <onCollisionSpeech gap="4">Beeedrilll!</onCollisionSpeech>
    </movingNpc>
    <npc direction="LEFT" hidden="false" id="6" name="Adam" randomRotation="false" sprite="49" x="23" y="60">
        <speech>This forest is home to many Bug-type Pokémon and others that prefer the shade.</speech>
        <speech>You might even find a Pikachu!</speech>
    </npc>
    <movingNpc direction="DOWN" id="7" name="Pikachu" speed="1" sprite="25" type="pokemon" x="49" y="54">
        <path>DOWNx1,LEFTx4,RIGHTx4,UPx1</path>
        <onCollisionSpeech gap="4">Pikkkaa!</onCollisionSpeech>
    </movingNpc>
    <npc direction="UP" hidden="false" id="8" name="Markus" randomRotation="false" sprite="5" x="54" y="65">
        <speech>Hmmm.. I wonder if this statue has any significance in attracting Pokémon here.</speech>
        <speech>Heck where it came from in the first place.</speech>
    </npc>
    <movingNpc direction="RIGHT" id="9" name="Pinsir" speed="1" sprite="127" type="pokemon" x="56" y="48">
        <path>RIGHTx5,LEFTx5</path>
        <onCollisionSpeech gap="4">Pinnnsiiiir!</onCollisionSpeech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="10" name="Nathan" randomRotation="true" sprite="71" x="54" y="82">
        <speech>Some Pokémon hide during the day and only come out at night.</speech>
        <speech>So cool, right?!</speech>
    </npc>
    <movingNpc direction="DOWN" id="13" name="Wormadam" speed="1" sprite="413" type="pokemon" x="13" y="32">
        <path>DOWNx1,LEFTx3,RIGHTx3,UPx1</path>
        <onCollisionSpeech gap="4">Wormmaaaa!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="DOWN" id="14" name="Ashley" speed="1" sprite="82" type="npc" x="49" y="10">
        <path>DOWNx3,UPx3</path>
        <onCollisionSpeech gap="4"/>
        <speech>All I want is a Shuckle.. I even skipped school for this!</speech>
        <speech>I'm gonna get in trouble soon..</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="15" name="Shuckle" shouldSleep="" speed="1" sprite="213" type="pokemon" x="74" y="12">
        <path>DOWNx5,UPx5</path>
        <onCollisionSpeech gap="4">Shuuuckle?</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="DOWN" id="16" name="Heracross" speed="1" sprite="214" type="pokemon" x="76" y="77">
        <path>DOWNx1,LEFTx5,RIGHTx5,UPx1</path>
        <onCollisionSpeech gap="4">Herrraaa!</onCollisionSpeech>
    </movingNpc>
    <npc direction="UP" hidden="false" id="17" name="Simon" randomRotation="true" sprite="111" x="72" y="76">
        <speech>Supposedly, there are secrets hidden in Viridian Forest..</speech>
        <speech>I wonder what they could be?</speech>
    </npc>
    <movingNpc direction="RIGHT" id="18" name="Pikachu" shouldSleep="" speed="1" sprite="25" type="pokemon" x="55" y="95">
        <path>RIGHTx3,LEFTx3</path>
        <onCollisionSpeech gap="4">Pikaaaa!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="DOWN" id="1" name="Eliza" speed="1" sprite="68" type="npc" x="72" y="37">
        <path>DOWNx4,UPx4</path>
        <onCollisionSpeech gap="4"/>
        <speech>Mmm.. Butterfree.. Don't take my Pecha Berry.</speech>
    </movingNpc>
</npcs>
