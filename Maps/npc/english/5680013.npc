<npcs>
    <conversation id="5">
        <speeches id="1">
            <speech>...All right, challenger.</speech>
            <speech>It's not often, but some Trainers manage to come and challenge me.</speech>
            <speech>But they've all been boring battles. I didn't break a sweat beating them.</speech>
            <speech>...Sigh...</speech>
            <speech>I'm Volkner, the Gym Leader.</speech>
            <speech>They say I'm the top Gym Leader in Sinnoh, but... Anyway, I guess we'd better get this done.</speech>
            <speech>I hope you're the Trainer who'll make me remember how fun it is to battle!</speech>
        </speeches>
        <speeches id="2">
            <speech>...Hehehe. Hahahah!</speech>
            <speech>...That was the most fun I've had in a battle since...</speech>
            <speech>I don't know when! It's also made me excited to know you and your team will keep battling to greater heights!</speech>
            <speech>This is your eighth Gym Badge. You've earned this!</speech>
            <speech>That Beacon Badge lets you use the hidden move Waterfall even when you're not in a battle.</speech>
            <speech>Waterfall happens to be the key if you're going to the Pokémon League.</speech>
            <speech>Also, because you've collected all eight Badges, any Pokémon at any level will now obey you without fail.</speech>
            <speech>I want you to take this, too.</speech>
        </speeches>
        <speeches id="3">
            <speech>Your next step is the Pokémon League challenge.</speech>
            <speech>It's time for you to cross the sea and win your way through the gauntlet that is Victory Road.</speech>
            <speech>Demonstrate to the Pokémon League your mastery of your team.</speech>
            <speech>Against you, even the Elite Four will be pushed to fend off your challenge!</speech>
        </speeches>
        <speeches id="4">
            <speech>You've got me beat... Your desire and the noble way your Pokémon battled for you...</speech>
            <speech>I even felt thrilled during our match. That was a very good battle.</speech>
        </speeches>
    </conversation>
    <conversation id="1">
        <speeches id="1">
            <speech>No need to waste time saying hello. Bring it on whenever you're ready!</speech>
        </speeches>
        <speeches id="2">
            <speech>I won't lose next time! Let's battle again sometime!</speech>
        </speeches>
        <speeches id="3">
            <speech>I won't lose next time! Let's battle again sometime!</speech>
        </speeches>
        <speeches id="4">
            <speech>What a match! I'm quite satisfied with the result.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>I do not accept any Pokémon that I do not like.</speech>
        </speeches>
        <speeches id="2">
            <speech>Indeed, you and your Pokémon have strength to spare. I like you.</speech>
        </speeches>
        <speeches id="3">
            <speech>Indeed, you and your Pokémon have strength to spare. I like you.</speech>
        </speeches>
        <speeches id="4">
            <speech>The only factor in whether or not I like a Pokémon is its strength.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Ready for the big game? Got your cap on straight?</speech>
        </speeches>
        <speeches id="2">
            <speech>Hey, another out. So what? We'll come back! We always do!</speech>
        </speeches>
        <speeches id="3">
            <speech>Hey, another out. So what? We'll come back! We always do!</speech>
        </speeches>
        <speeches id="4">
            <speech>My oh my! My Pokémon knocked it out of the park!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Isn't that nice... You're still a kid... I wish I could go back...</speech>
        </speeches>
        <speeches id="2">
            <speech>I was so innocent back then... Where has that girl gone?</speech>
        </speeches>
        <speeches id="3">
            <speech>I was so innocent back then... Where has that girl gone?</speech>
        </speeches>
        <speeches id="4">
            <speech>I've become a cynical adult, so I even cheat during battles.</speech>
        </speeches>
    </conversation>
</npcs>
