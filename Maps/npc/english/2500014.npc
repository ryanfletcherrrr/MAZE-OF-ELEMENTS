<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>{COLOR=YELLOW}Please select a floor.{ENDCOLOR}</speech>
            <speech>The buttons await your input, ready to take you where you need.</speech>
        </speeches>
        <speeches id="2">
            <speech>{COLOR=GREEN}The lift console closes itself with a soft click.{ENDCOLOR}</speech>
            <speech>You'll need to activate it again if you wish to use it.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>{COLOR=RED}The door is locked. A special keycard might be needed.{ENDCOLOR}</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>{COLOR=RED}The door is locked. A special keycard might be needed.{ENDCOLOR}</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>{COLOR=RED}The door is locked. A special keycard might be needed.{ENDCOLOR}</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>{COLOR=RED}The door is locked. A special keycard might be needed.{ENDCOLOR}</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>{COLOR=RED}The door is locked. A special keycard might be needed.{ENDCOLOR}</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>{COLOR=RED}The door is locked. A special keycard might be needed.{ENDCOLOR}</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>{COLOR=RED}The door is locked. A special keycard might be needed.{ENDCOLOR}</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>{COLOR=RED}The door is locked. A special keycard might be needed.{ENDCOLOR}</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>Science is about results. If battling helps my research, then so be it!</speech>
        </speeches>
        <speeches id="2">
            <speech>Impossible! The data didn't predict this outcome!</speech>
        </speeches>
        <speeches id="3">
            <speech>Impossible! The data didn't predict this outcome!</speech>
        </speeches>
        <speeches id="4">
            <speech>Another victory to add to my calculations. You never stood a chance.</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>You're walking straight into trouble, kid!</speech>
        </speeches>
        <speeches id="2">
            <speech>Ugh... You got lucky this time.</speech>
        </speeches>
        <speeches id="3">
            <speech>Ugh... You got lucky this time.</speech>
        </speeches>
        <speeches id="4">
            <speech>Hah! Team Rocket always wins in the end!</speech>
        </speeches>
    </conversation>
    <conversation id="12">
        <speeches id="1">
            <speech>You wanna fight me? Hehe... You might regret that!</speech>
        </speeches>
        <speeches id="2">
            <speech>Agh! Ugh...Whatever. I wasn't really trying.</speech>
        </speeches>
        <speeches id="3">
            <speech>Agh! Ugh...Whatever. I wasn't really trying.</speech>
        </speeches>
        <speeches id="4">
            <speech>Hah! Too easy! Maybe I'll keep your wallet as a prize... Kidding!</speech>
        </speeches>
    </conversation>
    <conversation id="13">
        <speeches id="1">
            <speech>Ah, what a {COLOR=CYAN}delightful surprise{ENDCOLOR}! A trainer bold enough to challenge {COLOR=RED}Team Rocket's{ENDCOLOR} operations.</speech>
            <speech>I am {COLOR=PURPLE}James{ENDCOLOR}, and I must say, this {COLOR=GOLD}Project T.E.R.A.{ENDCOLOR} has been quite the {COLOR=CYAN}fascinating endeavor{ENDCOLOR}!</speech>
            <speech>The {COLOR=PURPLE}Tera Energy{ENDCOLOR} has given my Pokemon such {COLOR=GOLD}refined elegance{ENDCOLOR} in battle - it's truly {COLOR=CYAN}marvelous{ENDCOLOR}!</speech>
            <speech>I shall defeat you with the {COLOR=PURPLE}utmost sophistication{ENDCOLOR} and {COLOR=RED}villainous charm{ENDCOLOR}!</speech>
        </speeches>
        <speeches id="2">
            <speech>My, my... what an {COLOR=CYAN}unexpectedly skillful{ENDCOLOR} performance on your part!</speech>
            <speech>I must admit, your strategy was quite {COLOR=PURPLE}impressive{ENDCOLOR} - almost as refined as my own!</speech>
            <speech>This defeat stings, but I shall retreat with {COLOR=GOLD}dignity{ENDCOLOR} intact!</speech>
            <speech>{COLOR=RED}Team Rocket{ENDCOLOR} will remember this encounter... and we'll be {COLOR=PURPLE}better prepared{ENDCOLOR} next time!</speech>
        </speeches>
        <speeches id="3">
            <speech>A most {COLOR=CYAN}humbling experience{ENDCOLOR}, I must say... You fought with {COLOR=PURPLE}considerable skill{ENDCOLOR}.</speech>
            <speech>Perhaps {COLOR=GOLD}Project T.E.R.A.{ENDCOLOR} needed more {COLOR=RED}refinement{ENDCOLOR} before implementation...</speech>
            <speech>Until we meet again, trainer... I shall be {COLOR=PURPLE}studying{ENDCOLOR} your techniques with great interest!</speech>
        </speeches>
        <speeches id="4">
            <speech>Excellent! A {COLOR=PURPLE}perfectly executed{ENDCOLOR} victory, if I do say so myself!</speech>
            <speech>My {COLOR=GOLD}Tera-enhanced{ENDCOLOR} team performed with such {COLOR=CYAN}elegant precision{ENDCOLOR}!</speech>
            <speech>Now then, I believe it's time for you to make a {COLOR=RED}graceful exit{ENDCOLOR}!</speech>
        </speeches>
        <speeches id="5">
            <speech>Oh my, such {COLOR=RED}impatience{ENDCOLOR}! That's rather {COLOR=PURPLE}improper{ENDCOLOR}, don't you think?</speech>
            <speech>A {COLOR=CYAN}true gentleman{ENDCOLOR} handles matters in the correct order - clear the building first!</speech>
            <speech>I'll be waiting here, perhaps enjoying some {COLOR=GOLD}Earl Grey{ENDCOLOR} while you finish your {COLOR=RED}preliminary work{ENDCOLOR}!</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Dr. Terrance" shouldSleep="" speed="1" sprite="5" type="npc" x="22" y="6">
        <path>RIGHTx4,LEFTx4</path>
        <onCollisionSpeech gap="4"/>
        <speech>Teleportation pads, invisible walls, talking Slowkings...</speech>
        <speech>Honestly, Kanto peaked in weird decades ago and just kept going.</speech>
    </movingNpc>
</npcs>
