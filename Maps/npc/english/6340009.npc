<npcs>
    <conversation id="1">
        <speeches id="1">
            <!-- notFoundSpeech -->
            <speech>Hello, trainer. I am Aria, the guardian of the summer legends.</speech>
            <speech>My duty is to summon the legendary Latios in its Summer Form for worthy trainers.</speech>
            <speech>However, it seems you don't have enough Heat Shards or Pokémon in your Pokédex yet.</speech>
            <speech>To summon Latios, you need 1000 Heat Shards and 500 Pokémon in your Pokédex.</speech>
            <speech>Also, be aware that if you have a Latias roaming, summoning Latios will make Latias no longer roam for you.</speech>
            <speech>Come back when you've met the requirements.</speech>
        </speeches>
        <speeches id="2">
            <!-- foundSpeech -->
            <speech>Hello, trainer. I am Aria, the guardian of the summer legends.</speech>
            <speech>My duty is to summon the legendary Latios in its Summer Form for worthy trainers.</speech>
            <speech>Ah, I see you've gathered 1000 Heat Shards and have 500 Pokémon in your Pokédex.</speech>
            <speech>You are truly a dedicated trainer!</speech>
            <speech>As a reward, I will now summon Latios in its Summer Form for you.</speech>
            <speech>However, be aware that if you have a Latias roaming, it will no longer roam once Latios is summoned.</speech>
        </speeches>
        <speeches id="3">
            <!-- no -->
            <speech>Are you sure you want to decline this opportunity?</speech>
            <speech>This is a rare chance to encounter Latios in its Summer Form as a roaming form.</speech>
        </speeches>
        <speeches id="4">
            <!-- yes -->
            <speech>Excellent choice! Prepare yourself to witness the power of Latios in its Summer Form.</speech>
            <speech>Your dedication has truly paid off.</speech>
        </speeches>
        <speeches id="5">
            <!-- completion -->
            <speech>Congratulations on your encounter with Latios in its Summer Form!</speech>
            <speech>You've proven yourself as an extraordinary trainer.</speech>
            <speech>May this experience inspire you to continue your Pokémon journey.</speech>
        </speeches>
    </conversation>
    <npc direction="DOWN" hidden="false" id="1" name="Sophia" randomRotation="false" sprite="19" x="15" y="9">
        <speech>This hotel is almost perfect! If only they had room service for food and drinks, and an indoor pool, it would be the ultimate paradise.</speech>
        <speech>Imagine relaxing in your room and having everything brought to you!</speech>
    </npc>
    <movingNpc direction="DOWN" id="2" name="Rockruff" shouldSleep="" speed="1" sprite="744" type="pokemon" x="7" y="12">
        <path>RIGHTx2,LEFTx2</path>
        <onCollisionSpeech gap="4">Bark!</onCollisionSpeech>
        <speech>Bark!</speech>
    </movingNpc>
</npcs>
