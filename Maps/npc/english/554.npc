<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>You’re not getting away with this, Team Galactic!</speech>
        </speeches>
        <speeches id="2">
            <speech>... ... Yeah, that's right! I couldn't do anything against Team Galactic!</speech>
            <speech>That Pokémon called Uxie... It was suffering...</speech>
            <speech>I'm going to get tougher... It's not about winning or losing... That's not good enough...</speech>
            <speech>I have to be stronger... It's not enough to just want to be the most powerful Trainer ever...</speech>
            <speech>It takes honest effort... And a determined heart.</speech>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>Oh? Are you finished already? Your Pokémon aren't bad, but you're laughably weak.</speech>
            <speech>You honestly thought you could save the Pokémon of the lake? And become the Pokémon Champion?</speech>
            <speech>Dream on, little kid. But, eww, it's so cold here.</speech>
            <speech>Let's go back to the Veilstone HQ.</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh? Don't I know you? We met in Eterna City.</speech>
            <speech>Listen. Team Galactic is going to do something huge for everyone's sake.</speech>
            <speech>That's why you should keep out of Team Galactic's way.</speech>
            <speech>Don't come whining about poor Pokémon and other trivial junk like that.</speech>
            <speech>Don't waste your time coming to our HQ in Veilstone. Now if you'll excuse me.</speech>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>J'enchante ma vie, I bid you bonjour! Will you trade me your Clamperl for my [Trader Pokémon]? Drip, Drip, Drop.</speech>
        </speeches>
        <speeches id="2">
            <speech>qu'est-ce-que c'est que ces manieres! I'll be going now. Drip, Drip, Drop. I'll take the rain with me.</speech>
        </speeches>
        <speeches id="3">
            <speech>Merci pour mon Clamperl, je l'adore. Drip, Drip, Drop. I wish you the best with your Corpish.</speech>
        </speeches>
        <speeches id="4">
            <speech>Drip, Drip, Drop. Noelle is the rain woman. The rain is always with me, and what sort of person are you?</speech>
            <speech>Drip, Drip, Drop. My Corpish would make a great addition to your team, but today is not rainy enough to trade.</speech>
            <speech>Come back on the next 28th day of the month with a Clamperl, Lv.40 or higher, to trade for my Corpish!</speech>
            <speech>I'll only accept a Clamperl, and not acquired through a trade. So make sure the Clamperl is caught by you.</speech>
        </speeches>
        <speeches id="5">
            <speech>Drip, Drip, Drop. Noelle is the rain woman. The rain is always with me, and what sort of person are you?</speech>
            <speech>Drip, Drip, Drop. My Corpish would make a great addition to your team.</speech>
            <speech>Today is the 28th day of the month, rainy enough to trade, but there is another issue.</speech>
            <speech>Come back on the next 7th day of the month with a Clamperl, Lv.40 or higher, to trade for my Corpish!</speech>
        </speeches>
    </conversation>

    <conversation id="4">
        <speeches id="1">
            <speech>Lass Lass.. FROOSS</speech>
            <speech>*Froslass seems is pointing towards the Tentacruel in front of the cave.*</speech>
            <speech>*It looks like its trying to go to the cave with its friend Mismagius but is scared of the Tentacruel.*</speech>
        </speeches>

        <speeches id="2">
            <speech>Lasss :* :*</speech>
            <speech>*Froslass is inviting us to the cave.*</speech>
            <speech>*Do you want to accept the invitation.*</speech>
        </speeches>

        <speeches id="3">
            <speech>...</speech>
            <speech>*Froslass is sad because you rejected the invitation.*</speech>
        </speeches>

        <speeches id="4">
            <speech>Froslass!!! :) :)</speech>
            <speech>*Froslass seems to be happy and left for the cave.*</speech>
        </speeches>
    </conversation>

    <conversation id="5">
        <speeches id="1">
            <speech>TENTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!</speech>
        </speeches>
        <speeches id="2">
            <speech>TENTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</speech>
        </speeches>
        <speeches id="3">
            <speech>TENTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</speech>
        </speeches>
        <speeches id="4">
            <speech>TENTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</speech>
        </speeches>
        <speeches id="5">
            <speech>TENTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</speech>
        </speeches>
    </conversation>

    <conversation id="6">
        <speeches id="1">
            <speech>Your Pokémon look tired. Would you like me to Heal them?</speech>
        </speeches>
        <speeches id="2">
            <speech>There you go, all healthy and happy!</speech>
        </speeches>
        <speeches id="3">
            <speech>Aww, I'm sure they would have liked to rest.</speech>
        </speeches>
    </conversation>

    <conversation id="7" canSkip="false">
        <speeches id="1">
            <!-- Before Battle Speech -->
            <speech>Oh, it's you again? I've been hearing about your little streak. A 120-win streak at the Battle Tower, right?</speech>
            <speech>Impressive for a kid, but let's see how you do against a real challenge. I won't be holding back!</speech>
            <speech>Pick your battle level. Just remember, in Team Galactic, we don't do things halfway.</speech>
        </speeches>
        <speeches id="2">
            <!-- Victory Speech -->
            <speech>Defeated by you? This must be some kind of joke! Team Galactic Commanders don't lose to kids!</speech>
            <speech>This won't happen again. Next time, you'll witness the true might of Team Galactic. Just you wait!</speech>
        </speeches>
        <speeches id="3">
            <!-- Not Battling Speech -->
            <speech>Trying to challenge me now? You must be joking. I'm not ready for you yet.</speech>
            <speech>Come back after $DURATION. Use this time to think about what it means to oppose Team Galactic.</speech>
        </speeches>
        <speeches id="4">
            <!-- Loss Speech -->
            <speech>So, you managed to get a leg up this time. Don't think this makes you superior.</speech>
            <speech>You've got a long way to go before you can truly challenge Team Galactic. Next time won't be so easy.</speech>
        </speeches>
        <speeches id="5">
            <!-- Before Criteria Speech -->
            <speech>A [GOLD]Battle Tower win streak of 120[]? You haven't achieved that yet? Pathetic.</speech>
            <speech>Come back when you're more than just a nuisance. Team Galactic doesn't have time for weaklings.</speech>
        </speeches>
    </conversation>
</npcs>
