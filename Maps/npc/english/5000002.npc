<npcs>
    <conversation id="1" canSkip="false">
        <speeches id="1">
            <speech>$PLAYER_NAME ! Barry already left. I don't know what it was about, but he sure was in a hurry!
            </speech>
        </speeches>
        <speeches id="2">
            <speech>Oh, yes! $PLAYER_NAME! Don't go into the tall grass. Wild Pokémon might attack you.</speech>
            <speech>It would be OK if you had your own Pokémon, but you don't, so... Well, take care, sweetie!</speech>
        </speeches>
        <speeches id="3">
            <speech>You know how impatient Barry is. He took off before I could even ask what it was about.</speech>
        </speeches>
    </conversation>

    <conversation id="2" canSkip="false">
        <speeches id="1">
            <speech>What's the matter, dear?</speech>
            <speech>... Wow.</speech>
            <speech>That's what happened to you? You and Barry are lucky to have met Prof. Rowan.</speech>
            <speech>Imagine if you didn't... I wouldn't like to think what the wild Pokémon might have done to you two.</speech>
            <speech>$PLAYER_NAME, go see Prof. Rowan, and thank him properly for your Pokémon. </speech>
            <speech>His lab is in Sandgem Town, isn't it? Now that you have your own Pokémon, the tall grass won't be so threatening.</speech>
            <speech>Oh, I know! $PLAYER_NAME, put these on.</speech>
        </speeches>
        <speeches id="2">
            <speech>Going to Sandgem Town is like an adventure in itself, right?</speech>
            <speech>With those Running Shoes, you can get to faraway places much faster.</speech>
        </speeches>
        <speeches id="3">
            <speech>I'll read you the instructions for the Running Shoes...</speech>
            <speech>Open the bag, and click on Running Shoes, click on the use Button and dash about faster than ever before!</speech>
            <speech>Put on the Running Shoes and blaze new trails of adventure!" Well, isn't that just nifty!</speech>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>What's up, $PLAYER_NAME?</speech>
            <speech>...Wow.</speech>
            <speech>Professor Rowan asked you to do something that big.</speech>
            <speech>OK, dear, go for it! Your mom's got your back! Oh, I know!</speech>
            <speech>Bye-bye, $PLAYER_NAME Enjoy your adventure!</speech>
        </speeches>
        <speeches id="2">
            <speech>Bye-bye, $PLAYER_NAME Enjoy your adventure!</speech>
        </speeches>
    </conversation>

    <conversation id="4">
        <speeches id="1">
            <speech>Oh, my dear! Look at you, returning after such a long time. How have you been?</speech>
            <speech>How have your journeys shaped you? It's been so long. Tell me everything.</speech>
            <speech>Your adventures must have been vast. Sit, rest, and share with me the tales of the lands you've seen and the battles you've fought.</speech>
            <speech>Seeing you now, brimming with experiences and stories, fills my heart with so much pride and joy. Welcome home, my adventurer.</speech>
        </speeches>
        <speeches id="2">
            <speech>What? You... you met Horus?</speech>
            <speech>Our Horus? I can hardly believe it!</speech>
            <speech>After all this time... How was he? Tell me everything!</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh, sweetheart, Horus came by. He shared everything with me.</speech>
            <speech>He was concerned for our safety and suggested we move. It's been quite the revelation.</speech>
            <speech>Your father agrees. We're moving to Hoenn, to start anew. Can you believe it?</speech>
            <speech>Littleroot Town will be our new home. Your father's already there, setting everything up.</speech>
            <speech>And guess what? He's sent us tickets for the journey. We're expected in Hoenn soon.</speech>
        </speeches>
        <speeches id="4">
            <speech>Take these tickets. They're our passage to a new beginning.</speech>
            <speech>After you've wrapped up your matters here, join us in Littleroot. We're making it our permanent home.</speech>
            <speech>Use these tickets at Snowpoint Docks. They'll grant you passage on the ship leading us to our new life in Hoenn.</speech>
            <speech>I'm off to run some errands and do a bit of shopping.</speech>
            <speech>I'll see you later, alright?</speech>
        </speeches>
    </conversation>
</npcs>
