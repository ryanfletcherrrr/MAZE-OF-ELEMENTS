<npcs>
    <conversation id="1" canSkip="false">
        <speeches id="1">
            <!-- Before Battle Speech -->
            <speech>Greetings, seeker of power. I am a Hidden Power apprentice who has mastered the ancient arts of type manipulation.
            </speech>
            <speech>My training in the sacred chambers has taught me to harness the ever-changing essence. Face me, if you dare to test your
                mettle.
            </speech>
            <speech>Should your spirit prove strong enough, I shall grant you a shard of Hidden Power's might.</speech>
        </speeches>
        <speeches id="2">
            <!-- Victory Speech -->
            <speech>Your inner strength shines bright! You have proven worthy of this knowledge.</speech>
            <speech>Accept this shard of Hidden Power. May it awaken new potential within your Pokémon.</speech>
        </speeches>
        <speeches id="3">
            <!-- Not Battling Speech -->
            <speech>A power that surges too quickly will exhaust itself. Take time to gather your strength.</speech>
            <speech>Return in [GOLD]$DURATION[] when your spirit is ready to be tested.</speech>
        </speeches>
        <speeches id="4">
            <!-- Loss Speech -->
            <speech>Your power wavers, but has not yet grown strong enough.</speech>
            <speech>Strengthen your resolve and return when you've grown stronger. The power awaits.</speech>
        </speeches>
        <speeches id="5">
            <!-- Before Criteria Speech -->
            <speech>Your inner strength is too weak. Train until it grows stronger.</speech>
            <speech>Only those whose determination burns bright can harness the shards I protect.</speech>
        </speeches>
    </conversation>

    <conversation id="2" canSkip="false">
        <speeches id="1">
            <!-- Before Battle Speech -->
            <speech>Welcome to my sanctuary. I am a Hidden Power apprentice, keeper of the ancient wisdom.
            </speech>
            <speech>By meditating in solitude, I've learned to channel the ever-shifting energies. Let us see if you can match
                this mastery.
            </speech>
            <speech>Prove your dedication, and I shall share a fragment of Hidden Power's essence.</speech>
        </speeches>
        <speeches id="2">
            <!-- Victory Speech -->
            <speech>Like a master tactician, your potential knows no bounds! You have earned this gift.</speech>
            <speech>Take this shard of Hidden Power. May it help your Pokémon overcome any challenge.</speech>
        </speeches>
        <speeches id="3">
            <!-- Not Battling Speech -->
            <speech>Patience, like ancient wisdom, reflects true strength. Take time to find your center.</speech>
            <speech>Return in [GOLD]$DURATION[] when you're ready to test your resolve.</speech>
        </speeches>
        <speeches id="4">
            <!-- Loss Speech -->
            <speech>Your technique is still unrefined, unable to channel true power.</speech>
            <speech>Learn to focus and return when you've found your way. The secrets await.</speech>
        </speeches>
        <speeches id="5">
            <!-- Before Criteria Speech -->
            <speech>Your spirit is like scattered energy, unfocused and undisciplined.</speech>
            <speech>Only those who have found their focus can harness the shards I protect.</speech>
        </speeches>
    </conversation>

    <conversation id="3" canSkip="false">
        <speeches id="1">
            <!-- Before Battle Speech -->
            <speech>Welcome to my training ground. I am a Hidden Power apprentice, guardian of the mystical arts.
            </speech>
            <speech>Through endless practice, I've learned the secrets of transformation. Show me if your dedication runs deep enough.
            </speech>
            <speech>Demonstrate your commitment to growth, and I shall grant you ancient knowledge.</speech>
        </speeches>
        <speeches id="2">
            <!-- Victory Speech -->
            <speech>Like a true scholar, your understanding grows deep! You have proven worthy of this gift.</speech>
            <speech>Accept this shard of Hidden Power. May it help your Pokémon reach their true potential.
            </speech>
        </speeches>
        <speeches id="3">
            <!-- Not Battling Speech -->
            <speech>Even the greatest masters began as students. Take time to nurture your skills.</speech>
            <speech>Return in [GOLD]$DURATION[] when you're ready to test your progress.</speech>
        </speeches>
        <speeches id="4">
            <!-- Loss Speech -->
            <speech>Your connection to the ancient power remains weak.</speech>
            <speech>Deepen your training and return when you've grown stronger. True wisdom awaits.</speech>
        </speeches>
        <speeches id="5">
            <!-- Before Criteria Speech -->
            <speech>Your potential is like raw energy. Time and training are needed.</speech>
            <speech>Only those who understand true dedication can wield the shards I protect.</speech>
        </speeches>
    </conversation>

    <conversation id="4" canSkip="false">
        <speeches id="1">
            <!-- Before Battle Speech -->
            <speech>Greetings, seeker! I am a Hidden Power apprentice, master of the ever-changing arts.</speech>
            <speech>Amidst rigorous trials, I've captured the essence of transformation. Dare to face my trained power?</speech>
            <speech>Match my disciplined spirit, and I'll share a fragment of Hidden Power's mystery.</speech>
        </speeches>
        <speeches id="2">
            <!-- Victory Speech -->
            <speech>Your power surges with true potential! You've earned the right to wield this knowledge!</speech>
            <speech>Take this shard of Hidden Power. May it unlock new strength within your Pokémon!</speech>
        </speeches>
        <speeches id="3">
            <!-- Not Battling Speech -->
            <speech>Even great power must be carefully cultivated. Take time to build your energy.</speech>
            <speech>Return in [GOLD]$DURATION[] when you're ready to harness your potential.</speech>
        </speeches>
        <speeches id="4">
            <!-- Loss Speech -->
            <speech>Your abilities show promise, but lack the focus of true mastery.</speech>
            <speech>Strengthen your skills and return when you're ready. Greater power awaits.</speech>
        </speeches>
        <speeches id="5">
            <!-- Before Criteria Speech -->
            <speech>Your energy is but unfocused potential. You need more training to handle this power.</speech>
            <speech>Only those who can master themselves may claim the shards I protect.</speech>
        </speeches>
    </conversation>
</npcs>