<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>My friends and I are part of an event where we try to escape from here!</speech>
        </speeches>
        <speeches id="2">
            <speech>All right! Now I can make my escape!</speech>
        </speeches>
        <speeches id="3">
            <speech>Awesome! Come back in $DURATION, and we'll have another epic escape battle!</speech>
        </speeches>
        <speeches id="4">
            <speech>Huh? Did I win? Then we can't escape!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>I have a strict policy about my hairstyle. It's my whole life, so I get really fired up about it.</speech>
        </speeches>
        <speeches id="2">
            <speech>I'm having a bad hair day, so there's nothing I could've done.</speech>
        </speeches>
        <speeches id="3">
            <speech>Not my best hair day, huh? Come back in $DURATION and see my hairstyle's true power!</speech>
        </speeches>
        <speeches id="4">
            <speech>When my hairstyle is looking really sharp, it gets me really fired up!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Isn't that nice... You're still a kid... I wish I could go back...</speech>
        </speeches>
        <speeches id="2">
            <speech>I was so innocent back then... Where has that girl gone?</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh, those youthful days... Maybe in $DURATION, I'll reminisce again in our next battle!</speech>
        </speeches>
        <speeches id="4">
            <speech>I've become a cynical adult, so I even cheat during battles.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Heheh... I see it all clearly... You are a doctor from an evil planet, aren't you?</speech>
        </speeches>
        <speeches id="2">
            <speech>Eh...radio waves... There are radio waves coming from your nose...</speech>
        </speeches>
        <speeches id="3">
            <speech>Radio waves, you say? Well, in $DURATION, my powers might just decipher them. Return then!</speech>
        </speeches>
        <speeches id="4">
            <speech>Ugh... My powers... My powers are... I think I need a nurse...</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Sorry, pal. Nothing personal, but I'm abouts to go all kinds of crazy on your Pokémon!</speech>
        </speeches>
        <speeches id="2">
            <speech>Arghhh! You little! That HURTS. But, well, that's how it goes, yeah?</speech>
        </speeches>
        <speeches id="3">
            <speech>Whoa, tough one! Give me $DURATION, and I'll be ready for another wild round!</speech>
        </speeches>
        <speeches id="4">
            <speech>My bad, my bad! Little too much for ya, huh? But there's no pullin' punches in a fight, amirite?</speech>
        </speeches>
    </conversation>

    <conversation id="6">
        <speeches id="1">
            <speech>My name is Mike and I am the owner of this house.</speech>
            <speech>I love to see Pokémon battles.</speech>
            <speech>Show me some hot matches! I run the Seashore House for that reason alone!</speech>
        </speeches>
        <speeches id="2">
            <speech>Those were some intense battles!</speech>
            <speech>Please accept these as reward for showing me those hot matches.</speech>
        </speeches>
        <speeches id="3">
            <speech>Huh? You don't feel the heat?</speech>
        </speeches>
        <speeches id="4">
            <speech>There you go! Enjoy!</speech>
        </speeches>
        <speeches id="5">
            <speech>Come back tomorrow and I will reward you again for those blazing battles!</speech>
        </speeches>
    </conversation>
</npcs>
