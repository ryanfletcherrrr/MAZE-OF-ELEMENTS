<npcs>
    <npc direction="DOWN" hidden="false" id="1" name="Sandrine" randomRotation="true" sprite="28" x="7" y="10">
        <speech>Wow, take a look at this! Standing here on the glass floor, it's like peering into a hidden underwater world.</speech>
        <speech>It's like a living painting, constantly changing and evolving.</speech>
        <speech>You know, living in Pacifidlog Town, you never know what amazing sights you'll encounter right under your feet!</speech>
    </npc>
    <movingNpc direction="DOWN" id="2" name="Smeargle" shouldSleep="" speed="1" sprite="235" type="pokemon" x="3" y="6">
        <path>UPx2,DOWNx2</path>
        <onCollisionSpeech gap="4">Smeargle!</onCollisionSpeech>
        <speech>Smeargle!</speech>
    </movingNpc>

    <conversation id="1">
        <speeches id="1">
            <speech>Your assistance has been invaluable, $PLAYER_NAME.</speech>
            <speech>However, before we proceed further, I need some time to assess the next steps for Pacifidilog's restoration.</speech>
            <speech>Please, allow me a moment to gather information and prepare for our next endeavor.</speech>
            <speech>Return in $DURATION, and I will have more tasks that will contribute to our town's revival.</speech>
            <speech>I appreciate your patience and understanding. Your continued support is a beacon of hope for us all.</speech>
            <speech>See you soon, $PLAYER_NAME.</speech>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="2">
            <speech>Greetings, $PLAYER_NAME. I am the mayor of Pacifidlog Town, a community that prides itself on harmony with the sea.</speech>
            <speech>Unfortunately, we've encountered troubles that threaten our serene existence.</speech>
            <speech>I've heard of your deeds and believe you're the one who can assist us.</speech>
            <speech>Our first concern involves crew members who went missing during an underwater exploration.</speech>
            <speech>They are vital to understanding and resolving our current predicaments.</speech>
            <speech>Will you help us in this time of need by finding and safely returning our lost explorers?</speech>
        </speeches>
        <speeches id="3">
            <speech>I see. It's disheartening, but I respect your decision.</speech>
            <speech>Pacifidlog Town's doors remain open should you decide to assist us in the future.</speech>
        </speeches>
        <speeches id="4">
            <speech>Your agreement to help fills my heart with hope.</speech>
            <speech>Please embark on this mission to locate our missing crew members amidst the ruins beneath the waves.</speech>
            <speech>Their safe return is crucial for the welfare of our town.</speech>
            <speech>I trust in your abilities and await good news. Thank you, $PLAYER_NAME.</speech>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>Have you had any luck finding our lost crew members, $PLAYER_NAME? Their safety is crucial to us.</speech>
        </speeches>

        <speeches id="2">
            <speech>Ah, $PLAYER_NAME, you've found them! Pacifidilog Town is in your debt. Their return brings us immense relief.</speech>
            <speech>There are more tasks needing attention for our town's welfare. Would you consider continuing your aid?</speech>
        </speeches>

        <speeches id="3">
            <speech>It's disheartening to hear, but I understand. Pacifidilog's struggles are many, and any help is a beacon of hope.</speech>
            <speech>We're grateful for the help you've already provided. Should you ever wish to assist us further, we'd welcome it warmly.</speech>
        </speeches>

        <speeches id="4">
            <speech>Your dedication to our cause warms my heart, $PLAYER_NAME. Let me ponder on what the next step should be for our town's revival.</speech>
            <speech>Give me a moment to gather more information. We will surely find a way to restore Pacifidilog to its former glory, with your help.</speech>
            <speech>As a token of my gratitude for accepting my request, please accept these: 2500F and 1 Water Stone.</speech>
        </speeches>
    </conversation>

    <conversation id="4">
        <speeches id="2">
            <speech>Thank you for your help with the crew, $PLAYER_NAME. Your efforts have brought relief to many families here.</speech>
            <speech>Yet, another task lies ahead of us. The sea has also claimed several cargos essential for our town's survival.</speech>
            <speech>These supplies include food, medical equipment, and other critical resources lost to the depths.</speech>
            <speech>Can we count on you once more to recover these lost cargos? Your assistance would mean the world to us.</speech>
        </speeches>
        <speeches id="3">
            <speech>I understand your hesitance. Our town's needs are great, but so too are the demands on your time.</speech>
            <speech>Should you find a moment to aid us further, please return. Pacifidlog Town will always welcome your help.</speech>
        </speeches>
        <speeches id="4">
            <speech>Your willingness to continue assisting us brings light to these troubled times.</speech>
            <speech>The lost cargos are scattered across several underwater ships. Each one is crucial for Pacifidlog's recovery.</speech>
            <speech>Time is of the essence, but I have faith in your abilities. Safe travels, $PLAYER_NAME, and swift returns.</speech>
            <speech>Upon your success, please come back to me. I'll be eagerly awaiting your return with the recovered supplies.</speech>
        </speeches>
    </conversation>

    <conversation id="5">
        <speeches id="1">
            <speech>How goes the search for our lost cargo, $PLAYER_NAME? Those supplies are vital for our survival.</speech>
        </speeches>

        <speeches id="2">
            <speech>Marvellous, $PLAYER_NAME! The lost cargos are back safely. Pacifidilog owes you greatly for this.</speech>
            <speech>May I take the cargos off your hands, and shall I find another task for you?</speech>
        </speeches>

        <speeches id="3">
            <speech>Oh, turning down our request? But what will you do with the cargos then?</speech>
            <speech>We were hoping they could aid our town's recovery. Do think it over; we'd greatly appreciate your continued support.</speech>
        </speeches>

        <speeches id="4">
            <speech>Once again, your efforts light our way, $PLAYER_NAME. Your help is shaping the future of Pacifidilog.</speech>
            <speech>I need a moment to identify our next steps. Rest assured, we're closer to revitalization thanks to you.</speech>
            <speech>In appreciation of your continued support, here's a reward for your hard work: 5000F and a Star Piece.</speech>
        </speeches>
    </conversation>

    <conversation id="6">
        <speeches id="2">
            <speech>There's a matter weighing heavily on my heart, $PLAYER_NAME. It's a bit personal, but I must-share it.</speech>
            <speech>My daughter's husband, a brave soul who loved the sea, has vanished without a trace. We're left with questions and no answers.</speech>
            <speech>I hesitate to ask more of you, but could you investigate these disappearances? Perhaps start with the sunken ships.</speech>
            <speech>Look for any clue, but especially a 'Notebook' that might have been his. It could hold answers... or even lead to a reunion.</speech>
            <speech>Can you take up this task for me and my daughter...?</speech>
        </speeches>
        <speeches id="3">
            <speech>I understand, it's a very depressing matter. We appreciate your time, nonetheless.</speech>
        </speeches>
        <speeches id="4">
            <speech>Your readiness to dive into the unknown for our sake is a kindness we'll never forget.</speech>
            <speech>Search the depths and the remains of the ships. That notebook could change everything.</speech>
            <speech>We'll await your return with bated breath. May the seas be kind, and your journey fruitful.</speech>
        </speeches>
    </conversation>

    <conversation id="7">
        <speeches id="1">
            <speech>A personal matter weighs on me, $PLAYER_NAME. It involves my daughter's husband, lost at sea.</speech>
            <speech>We're left with questions, no answers. The uncertainty is hard for my daughter, for us all.</speech>
            <speech>I've asked much, but I seek your help again. Could you investigate the sunken ships for clues?</speech>
            <speech>Look for a 'Notebook' that might be his. It's a long shot but could offer closure or hope.</speech>
        </speeches>
        <speeches id="2">
            <speech>Understanding your decision to decline, $PLAYER_NAME. It's a heavy task, not asked lightly.</speech>
            <speech>If you reconsider, it would mean the world. A glimmer of hope for a grieving family.</speech>
        </speeches>
        <speeches id="3">
            <speech>Your willingness to help in this matter fills us with hope. Thank you, truly.</speech>
            <speech>Take care in your search. The notebook, if found, could be invaluable. We await anxiously.</speech>
        </speeches>
        <speeches id="4">
            <speech>Upon your return, $PLAYER_NAME, with or without findings, come see me immediately.</speech>
            <speech>For your efforts, accept 5000F and a Comet Shard. May they aid your journey.</speech>
        </speeches>
        <speeches id="5">
            <speech>Thank you for all you've done for Pacifidilog, $PLAYER_NAME. Your actions touched many hearts.</speech>
            <speech>You've brought us hope and shown true community spirit. You'll always be a cherished friend here.</speech>
            <speech>May your journey be as kind as you were to us. Pacifidilog will remember you fondly.</speech>
            <speech>Farewell, and may the seas guide you back to us, should you choose to return.</speech>
        </speeches>
    </conversation>
</npcs>
