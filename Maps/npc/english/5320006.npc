<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>The door is locked.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>The door is locked.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>...So you've come. You heard my speech, I take it. Snicker...</speech>
            <speech>A big lie, of course. It's true, insofar as my intention is to create a new world.</speech>
            <speech>But that world isn't for the likes of Team Galactic. I seek an entirely new world solely for myself.</speech>
            <speech>If not, it could never be the complete and perfect world.</speech>
            <speech>You've seen my minions of Team Galactic.</speech>
            <speech>You yourself must know that they are uniformly useless and incomplete.</speech>
            <speech>I know why you're here. I can sense it in you.</speech>
            <speech>It's about Uxie, Mesprit, and Azelf, correct? You want to save them...</speech>
            <speech>I no longer have any need for them. I am finished with them.</speech>
            <speech>If your heart aches to save them, go right ahead. I couldn't care less.</speech>
            <speech>It will save me the trouble of disposing them.</speech>
            <speech>But, I must say... You are a remarkable specimen.</speech>
            <speech>Those Pokémon have nothing to do with you, do they?</speech>
            <speech>But still you come to rescue them out of pity?</speech>
            <speech>Such pitifully useless emotions... It's illogical and irrational.</speech>
            <speech>Pity and compassion are products of the weak and faulty human heart.</speech>
            <speech>You were compelled to come here by such vacuous sentimentality!</speech>
            <speech>I will make you regret paying heed to your heart!</speech>
        </speeches>
        <speeches id="2">
            <speech>I see... You are indeed strong. And the basis of your power is your compassion towards Pokémon.</speech>
            <speech>...How wasteful... Such emotions are but mere illusions.</speech>
            <speech>And, like all illusions, they fade over time until death banishes them forever.</speech>
            <speech>That is why I have abandoned all emotions as useless as sentimentality.</speech>
            <speech>If you wish to save the Pokémon from the lakes, take the warp panel ahead.</speech>
            <speech>I am off to Mt. Coronet. I will ascend the mountain to its peak where destiny awaits me.</speech>
            <speech>It is there that I will create my new world...</speech>
        </speeches>
        <speeches id="3">
            <speech>I see... You are indeed strong. And the basis of your power is your compassion towards Pokémon.</speech>
            <speech>...How wasteful... Such emotions are but mere illusions.</speech>
            <speech>And, like all illusions, they fade over time until death banishes them forever.</speech>
            <speech>That is why I have abandoned all emotions as useless as sentimentality.</speech>
            <speech>If you wish to save the Pokémon from the lakes, take the warp panel ahead.</speech>
            <speech>I am off to Mt. Coronet. I will ascend the mountain to its peak where destiny awaits me.</speech>
            <speech>It is there that I will create my new world...</speech>
        </speeches>
        <speeches id="4">
            <speech>...</speech>
            <speech>Pathetic!</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <conversation id="4" canSkip="false">
        <speeches id="1">
            <!-- Before Battle Speech -->
            <speech>So, it's you, $PLAYER_NAME. I've observed your pursuit of shiny Pokémon</speech>
            <speech>A collection of 15, and one within your party. A curious endeavor indeed.</speech>
            <speech>These trivial fascinations with rarity, however, do not indicate true strength or understanding of the world.</speech>
            <speech>Let us see if you are truly prepared.</speech>
            <speech>Choose your difficulty. Be warned, my vision for a new world has no place for superficial achievements.</speech>
        </speeches>
        <speeches id="2">
            <!-- Victory Speech -->
            <speech>Defeated by a collector of mere curiosities? This is a setback I did not anticipate.</speech>
            <speech>Enjoy your momentary triumph. It is insignificant in the grand design.</speech>
            <speech>Next time, I will demonstrate the futility of your efforts.</speech>
        </speeches>
        <speeches id="3">
            <!-- Not Battling Speech -->
            <speech>You wish to challenge me now, distracted by such superficiality as shiny Pokémon? I am not prepared for such trivialities.</speech>
            <speech>Return after $DURATION. Reflect on the deeper meaning of power and the insignificance of your current pursuits.</speech>
        </speeches>
        <speeches id="4">
            <!-- Loss Speech -->
            <speech>You have bested me, yet this changes nothing.</speech>
            <speech>Your attachment to these shinies is a hollow victory in the vast universe.</speech>
            <speech>When you are ready to abandon such distractions and face the true reality, return. Then, we will talk of power and new worlds.</speech>
        </speeches>
        <speeches id="5">
            <!-- Before Criteria Speech -->
            <speech>[GOLD]A collection of 15 shiny Pokémon[] and [GOLD]one within your party[]? Yet you have not achieved even this simple task?</speech>
            <speech>Return when you have surpassed such mundane goals.</speech>
            <speech>In the world I envision, only those who transcend the ordinary will prevail.</speech>
        </speeches>
    </conversation>
</npcs>
