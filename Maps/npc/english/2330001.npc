<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Welcome to Kanto! I'm Professor Oak's research assistant studying Pokémon diversity in this region.
                Would you like to help our research?
            </speech>
            <speech>By showing me different Pokémon species each day, you'll earn special tokens for your contribution
                to science!
            </speech>
            <speech>What do you say - ready to help expand our Pokémon knowledge?</speech>
        </speeches>
        <speeches id="2">
            <speech>Ah, I don't see any new Pokémon with you at the moment. You know, Kanto is full of fascinating
                species!
            </speech>
            <speech>Try checking the tall grass, caves, or even fishing spots. There are so many Pokémon waiting to be
                discovered.
            </speech>
        </speeches>
        <speeches id="3">
            <speech>I've already documented this Pokémon in my research notes. I'm particularly interested in species I
                haven't recorded yet.
            </speech>
        </speeches>
        <speeches id="4">
            <speech>Wonderful! This will be a great addition to our Kanto Pokémon research database. Here are your
                well-earned tokens!
            </speech>
            <speech>The world of Pokémon is vast - I look forward to seeing what you'll bring tomorrow.</speech>
        </speeches>
        <speeches id="5">
            <speech>I see your enthusiasm, but I've already recorded a Pokémon from you today. Let's keep our research
                methodical.
            </speech>
            <speech>Professor Oak always says: 'Good research takes time!' See you tomorrow for more discoveries!
            </speech>
        </speeches>
        <speeches id="6">
            <speech>Outstanding work today! Return in $DURATION to continue helping with our Kanto research project.</speech>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>Hello there! Those Tokens you've collected look interesting. Would you like to see what special items you can get in exchange?</speech>
        </speeches>
        <speeches id="2">
            <speech>No problem at all! A good researcher knows when to take their time. The items will be here when you're ready.</speech>
            <speech>Keep bringing those new Pokémon findings - every contribution helps us understand Kanto's ecosystem better!</speech>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>Seeker of enhancements, your journey towards crafting the {COLOR=GOLD}Everstone Exp Share{ENDCOLOR} begins, yet your path
                remains untested.
            </speech>
            <speech>Required are: {COLOR=CYAN}an Exp. Share{ENDCOLOR}, {COLOR=CYAN}an Everstone{ENDCOLOR}, {COLOR=CYAN}a Binding Band{ENDCOLOR}, and the {COLOR=PURPLE}sacred Blueprint{ENDCOLOR}.</speech>
            <speech>Once united, these materials will forge a tool to {COLOR=RED}halt evolution{ENDCOLOR} while {COLOR=GREEN}sharing experience{ENDCOLOR}.</speech>
        </speeches>
        <speeches id="2">
            <speech>At last, all components have converged! The {COLOR=PURPLE}Blueprint{ENDCOLOR} and materials stand ready.</speech>
            <speech>Shall we commence crafting of the {COLOR=GOLD}Everstone Exp Share{ENDCOLOR}, merging these elements into a singular
                masterpiece?
            </speech>
        </speeches>
        <speeches id="3">
            <speech>Understood. The moment of creation is sacred and demands readiness. Return when you feel prepared.
            </speech>
        </speeches>
        <speeches id="4">
            <speech>Behold! The {COLOR=GOLD}Everstone Exp Share{ENDCOLOR} is now complete, infused with the power to {COLOR=GREEN}share experience{ENDCOLOR} while
                {COLOR=RED}preventing evolution{ENDCOLOR}.
            </speech>
            <speech>Use it wisely in your training. May it serve you well on your journey.</speech>
        </speeches>
    </conversation>

    <conversation id="4">
        <speeches id="1">
            <speech>Seeker of knowledge, you wish to craft the {COLOR=GOLD}Move-Block Exp Share{ENDCOLOR} - a tool of focused training.
            </speech>
            <speech>Required are: {COLOR=CYAN}an Exp. Share{ENDCOLOR}, {COLOR=CYAN}a Spell Tag{ENDCOLOR}, {COLOR=CYAN}a Broken TM Disk{ENDCOLOR}, and the {COLOR=PURPLE}guiding Blueprint{ENDCOLOR}.</speech>
            <speech>These materials combined will create an item to {COLOR=RED}prevent move learning{ENDCOLOR} while {COLOR=GREEN}sharing experience{ENDCOLOR}.
            </speech>
        </speeches>
        <speeches id="2">
            <speech>The materials have aligned! Your {COLOR=PURPLE}Blueprint{ENDCOLOR} and components await their transformation.</speech>
            <speech>Shall we begin forging the {COLOR=GOLD}Move-Block Exp Share{ENDCOLOR}, uniting these elements into something greater?
            </speech>
        </speeches>
        <speeches id="3">
            <speech>Very well. Creation cannot be rushed. Return when your resolve is certain.</speech>
        </speeches>
        <speeches id="4">
            <speech>It is done! The {COLOR=GOLD}Move-Block Exp Share{ENDCOLOR} now exists, ready to {COLOR=RED}preserve movesets{ENDCOLOR} while {COLOR=GREEN}sharing
                experience{ENDCOLOR}.
            </speech>
            <speech>Use its power thoughtfully. May it help perfect your team's abilities.</speech>
        </speeches>
    </conversation>

    <conversation id="5">
        <speeches id="1">
            <speech>Seeker of strength, you desire the {COLOR=GOLD}Macho Brace Exp Share{ENDCOLOR} - a tool of intensive training.</speech>
            <speech>Required are: {COLOR=CYAN}an Exp. Share{ENDCOLOR}, {COLOR=CYAN}a Lagging Tail{ENDCOLOR}, {COLOR=CYAN}a Macho Brace{ENDCOLOR}, and the {COLOR=PURPLE}masterful Blueprint{ENDCOLOR}.</speech>
            <speech>When combined, these will create an item to {COLOR=ORANGE}double EVs{ENDCOLOR} while {COLOR=GREEN}sharing experience{ENDCOLOR}.</speech>
        </speeches>
        <speeches id="2">
            <speech>The components have gathered! Your {COLOR=PURPLE}Blueprint{ENDCOLOR} and materials await their union.</speech>
            <speech>Shall we forge the {COLOR=GOLD}Macho Brace Exp Share{ENDCOLOR}, combining these elements into a tool of power?</speech>
        </speeches>
        <speeches id="3">
            <speech>As you wish. Return when you are prepared to undertake this creation.</speech>
        </speeches>
        <speeches id="4">
            <speech>Witness the completed {COLOR=GOLD}Macho Brace Exp Share{ENDCOLOR}, embodying both strength and wisdom!</speech>
            <speech>Train well with this powerful tool. May it enhance your Pokémon's {COLOR=ORANGE}true potential{ENDCOLOR}.</speech>
        </speeches>
    </conversation>

    <conversation id="6">
        <speeches id="1">
            <speech>Seeker of bonds, you pursue the {COLOR=GOLD}Soothe Share{ENDCOLOR} - a tool of fellowship and growth.</speech>
            <speech>Required are: {COLOR=CYAN}an Exp. Share{ENDCOLOR}, {COLOR=CYAN}ten Heart Scales{ENDCOLOR}, {COLOR=CYAN}a Soothe Bell{ENDCOLOR}, and the {COLOR=PURPLE}harmonious Blueprint{ENDCOLOR}.</speech>
            <speech>Together, these will forge an item to {COLOR=PINK}strengthen friendship{ENDCOLOR} while {COLOR=GREEN}sharing experience{ENDCOLOR}.</speech>
        </speeches>
        <speeches id="2">
            <speech>The elements of friendship have gathered! Your {COLOR=PURPLE}Blueprint{ENDCOLOR} and materials resonate together.</speech>
            <speech>Shall we create the {COLOR=GOLD}Soothe Share{ENDCOLOR}, binding these components into a tool of unity?</speech>
        </speeches>
        <speeches id="3">
            <speech>I understand. The bonds of friendship cannot be rushed. Return when you feel the time is right.
            </speech>
        </speeches>
        <speeches id="4">
            <speech>Behold the completed {COLOR=GOLD}Soothe Share{ENDCOLOR}, a symbol of the bonds between trainer and Pokémon!</speech>
            <speech>Let it {COLOR=PINK}strengthen the connections{ENDCOLOR} within your team. May your friendships flourish.</speech>
        </speeches>
    </conversation>

    <conversation id="8">
        <speeches id="1">
            <speech>Like a rose that blooms through careful tending, the bond between trainer and Pokémon flourishes with dedication and love.</speech>
            <speech>In my garden of nurturing, I've cultivated both beautiful blooms and powerful partnerships. Will you test the strength of your own cultivation?</speech>
        </speeches>

        <speeches id="2">
            <speech>Your victory shows the beautiful results of patience and care, much like a prized rose in full bloom.</speech>
            <speech>The petals of your success have unfolded gracefully. Your Pokémon reflect the tender attention you've given them.</speech>
        </speeches>

        <speeches id="3">
            <speech>Magnificent! Your bond with your Pokémon is as breathtaking as a perfect rose garden in spring.</speech>
            <speech>You've proven that with proper care and devotion, even the most delicate connections can become unbreakably strong.</speech>
            <speech>Like roses that need time to bloom, return in $DURATION to nurture our rivalry further.</speech>
        </speeches>

        <speeches id="4">
            <speech>Extraordinary! Your strength reminds me of a rose's thorns - beautiful yet formidable when protecting what matters most.</speech>
            <speech>Today's lesson will take root and grow into even greater achievements. May your journey continue to blossom with such grace.</speech>
        </speeches>

        <speeches id="5">
            <speech>Every season brings new growth; with each passing day, our bonds deepen like roots reaching toward nourishment.</speech>
            <speech>Return tomorrow when the morning dew kisses the petals, and we shall tend to our rivalry once more.</speech>
        </speeches>
    </conversation>
</npcs>
