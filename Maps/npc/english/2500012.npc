<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>{COLOR=YELLOW}Please select a floor.{ENDCOLOR}</speech>
            <speech>The buttons await your input, ready to take you where you need.</speech>
        </speeches>
        <speeches id="2">
            <speech>{COLOR=GREEN}The lift console closes itself with a soft click.{ENDCOLOR}</speech>
            <speech>You'll need to activate it again if you wish to use it.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>{COLOR=RED}The door is locked. A special keycard might be needed.{ENDCOLOR}</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>{COLOR=RED}The door is locked. A special keycard might be needed.{ENDCOLOR}</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>{COLOR=RED}The door is locked. A special keycard might be needed.{ENDCOLOR}</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>{COLOR=RED}The door is locked. A special keycard might be needed.{ENDCOLOR}</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>{COLOR=RED}The door is locked. A special keycard might be needed.{ENDCOLOR}</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>{COLOR=RED}The door is locked. A special keycard might be needed.{ENDCOLOR}</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="8">
        <speeches id="1">
            <speech>What kept you $PLAYER_NAME? Hahaha! I thought you'd turn up if I waited here! I guess Team Rocket slowed you down!</speech>
            <speech>Not that I care! I saw you in Saffron, so I decided to see if you got better!</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh-oh! So, you are ready for Boss Rocket!</speech>
            <speech>Well, $PLAYER_NAME! I'm moving on up and ahead!</speech>
            <speech>By checking my Pokédex, I'm starting to see what's strong and how they evolve!</speech>
            <speech>I'm going to the Pokémon League to boot out the Elite Four!</speech>
            <speech>I'll become the world's most powerful trainer! $PLAYER_NAME, well good luck to you! Don't sweat it! Smell ya!
            </speech>
        </speeches>
        <speeches id="3"/>
        <speeches id="4">
            <speech>How can I put this? You're not good enough to play with us big boys!</speech>
        </speeches>
        <speeches id="5"/>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>I just joined Team Rocket, and I'm already crushing intruders! You're next!</speech>
        </speeches>
        <speeches id="2">
            <speech>Wait, wait, that wasn't supposed to happen!</speech>
        </speeches>
        <speeches id="3">
            <speech>Wait, wait, that wasn't supposed to happen!</speech>
        </speeches>
        <speeches id="4">
            <speech>Hah! Maybe I should get a promotion already!</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>Battles are nothing more than equations. And I never solve for failure.</speech>
        </speeches>
        <speeches id="2">
            <speech>Recalculating... This variable was not accounted for.</speech>
        </speeches>
        <speeches id="3">
            <speech>Recalculating... This variable was not accounted for.</speech>
        </speeches>
        <speeches id="4">
            <speech>Expected outcome achieved. Now, leave.</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>Kid, I've been with Team Rocket longer than you've been a Trainer. You don't stand a chance!</speech>
        </speeches>
        <speeches id="2">
            <speech>Hmph... Maybe I am getting rusty..</speech>
        </speeches>
        <speeches id="3">
            <speech>Hmph... Maybe I am getting rusty..</speech>
        </speeches>
        <speeches id="4">
            <speech>Experience wins battles, not luck. Come back when you've learned something.</speech>
        </speeches>
    </conversation>
    <conversation id="12">
        <speeches id="1">
            <speech>...You should've turned back while you had the chance.</speech>
        </speeches>
        <speeches id="2">
            <speech>Tch... Whatever. It doesn't change a thing.</speech>
        </speeches>
        <speeches id="3">
            <speech>Tch... Whatever. It doesn't change a thing.</speech>
        </speeches>
        <speeches id="4">
            <speech>Stay down. You're just wasting your time.</speech>
        </speeches>
    </conversation>
    <conversation id="13">
        <speeches id="1">
            <speech>The world fears what it doesn't understand... and soon, they'll fear me!</speech>
        </speeches>
        <speeches id="2">
            <speech>No! My research... all ruined!</speech>
        </speeches>
        <speeches id="3">
            <speech>No! My research... all ruined!</speech>
        </speeches>
        <speeches id="4">
            <speech>Science marches forward, while you are left behind!</speech>
        </speeches>
    </conversation>
    <conversation id="14">
        <speeches id="1">
            <speech>Oh my! It appears your {COLOR=RED}party is full{ENDCOLOR} and your {COLOR=BLUE}PC boxes are completely packed{ENDCOLOR}!</speech>
            <speech>I'm Dr. Marina, {COLOR=CYAN}senior researcher{ENDCOLOR} in Silph Co.'s Aquatic Combat Division.</speech>
            <speech>I have a very special {COLOR=PURPLE}Basculegion{ENDCOLOR} that I'd love to give you - it's a rare {COLOR=GRAY}Ghost/Water{ENDCOLOR} type with incredible {COLOR=RED}battle potential{ENDCOLOR}!</speech>
            <speech>But you'll need to make some {COLOR=GREEN}space in your party or PC{ENDCOLOR} first!</speech>
            <speech>Please come back when you have room - this {COLOR=PURPLE}Basculegion{ENDCOLOR} is a {COLOR=GOLD}valuable corporate asset{ENDCOLOR}!</speech>
        </speeches>
        <speeches id="2">
            <speech>Perfect timing! I'm Dr. Marina, and I oversee {COLOR=CYAN}advanced aquatic weaponization{ENDCOLOR} here at Silph Co.!</speech>
            <speech>I've been developing combat applications for this {COLOR=PURPLE}Basculegion{ENDCOLOR} - a {COLOR=GRAY}Ghost/Water{ENDCOLOR} type with {COLOR=RED}devastating potential{ENDCOLOR}!</speech>
            <speech>This specimen evolved through {COLOR=RED}intense battle trauma{ENDCOLOR} - the fallen souls create {COLOR=PURPLE}supernatural power{ENDCOLOR}!</speech>
            <speech>The vengeful spirits grant it {COLOR=GRAY}phasing abilities{ENDCOLOR} and {COLOR=CYAN}hydrokinetic control{ENDCOLOR} over entire schools!</speech>
            <speech>Our board wants field data on its performance - would you accept this {COLOR=GOLD}corporate partnership{ENDCOLOR}?</speech>
        </speeches>
        <speeches id="3">
            <speech>Hesitation is understandable - {COLOR=PURPLE}Basculegion{ENDCOLOR} does carry the {COLOR=GRAY}souls of the defeated{ENDCOLOR}...</speech>
            <speech>But think of the {COLOR=GOLD}strategic advantage{ENDCOLOR}! This is corporate-grade power we're offering!</speech>
        </speeches>
        <speeches id="4">
            <speech>{COLOR=GOLD}Excellent decision!{ENDCOLOR} Silph Co. is entrusting you with our {COLOR=PURPLE}prototype battle unit{ENDCOLOR}!</speech>
            <speech>This {COLOR=PURPLE}Basculegion{ENDCOLOR} has been {COLOR=RED}enhanced{ENDCOLOR} through our corporate training protocols!</speech>
            <speech>Its {COLOR=GRAY}spectral phasing{ENDCOLOR} and {COLOR=CYAN}aquatic dominance{ENDCOLOR} make it a {COLOR=RED}formidable weapon{ENDCOLOR}!</speech>
            <speech>Use it wisely - Silph Co. expects {COLOR=GOLD}impressive results{ENDCOLOR} from our investment!</speech>
            <speech>Remember, Basculegion can infiltrate any water-based defense and command marine armies!</speech>
            <speech>Make our corporation proud with your new {COLOR=PURPLE}tactical asset{ENDCOLOR}!</speech>
        </speeches>
        <speeches id="5">
            <speech>I trust that {COLOR=PURPLE}Basculegion{ENDCOLOR} is proving its {COLOR=RED}corporate value{ENDCOLOR} in the field!</speech>
            <speech>That was our only field-ready prototype - Silph Co. is counting on your success!</speech>
        </speeches>
    </conversation>
    <conversation id="15">
        <speeches id="1">
            <speech>You've made it this far? {COLOR=RED}Remarkable{ENDCOLOR}... but also {COLOR=PURPLE}foolish{ENDCOLOR}.</speech>
            <speech>I'm {COLOR=RED}Elite Grunt Lex{ENDCOLOR} - specialist in {COLOR=PURPLE}dimensional manipulation{ENDCOLOR} and {COLOR=GOLD}overwhelming force{ENDCOLOR}!</speech>
            <speech>My {COLOR=PURPLE}Trick Room{ENDCOLOR} tactics will turn speed against you - the {COLOR=RED}slower{ENDCOLOR}, the {COLOR=GOLD}deadlier{ENDCOLOR}!</speech>
            <speech>With {COLOR=PURPLE}Tera Energy{ENDCOLOR} amplifying my sweepers, I'll crush you in a {COLOR=RED}single devastating turn{ENDCOLOR}!</speech>
        </speeches>
        <speeches id="2">
            <speech>Impossible! My {COLOR=PURPLE}Trick Room{ENDCOLOR} was perfectly calibrated...</speech>
            <speech>Even my {COLOR=RED}most powerful{ENDCOLOR} {COLOR=PURPLE}Tera-enhanced{ENDCOLOR} sweepers couldn't break through!</speech>
            <speech>You've disrupted our {COLOR=GOLD}dimensional research{ENDCOLOR}, but this is far from over!</speech>
            <speech>The {COLOR=RED}true mastermind{ENDCOLOR} of {COLOR=GOLD}Project T.E.R.A.{ENDCOLOR} awaits you above... Good luck surviving {COLOR=PURPLE}that{ENDCOLOR}!</speech>
        </speeches>
        <speeches id="3">
            <speech>My {COLOR=PURPLE}Trick Room generators{ENDCOLOR} are completely fried... The dimensional fields have collapsed.</speech>
            <speech>You've set back our {COLOR=GOLD}space-time manipulation research{ENDCOLOR} by months!</speech>
            <speech>But destroying our {COLOR=RED}lower operations{ENDCOLOR} means nothing... The {COLOR=PURPLE}final boss{ENDCOLOR} will show you {COLOR=GOLD}true power{ENDCOLOR}!</speech>
        </speeches>
        <speeches id="4">
            <speech>Perfect! My {COLOR=PURPLE}dimensional strategy{ENDCOLOR} worked flawlessly!</speech>
            <speech>When {COLOR=RED}raw power{ENDCOLOR} meets {COLOR=PURPLE}Tera Energy{ENDCOLOR}, even the strongest trainers fall!</speech>
            <speech>Your defeat will provide valuable data for our {COLOR=GOLD}offensive enhancement protocols{ENDCOLOR}!</speech>
        </speeches>
        <speeches id="5"/>
    </conversation>
</npcs>
