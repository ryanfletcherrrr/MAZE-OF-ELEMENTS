<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Ah, a Trainer sent by Steven, are you? You're searching for something rare... something powerful, I presume?</speech>
            <speech>The first fragment of Metagrossite, I've heard, dwells in the depths of Route 126 Underwater, carried by a rare sea dweller.</speech>
            <speech>In Meteor Falls, the second fragment lies within a Pokémon known for its unique bond, often hiding in the mouth of a larger ally.</speech>
            <speech>The last fragment is guarded by a rogue Tyrantrum, a fierce creature untamed by time. Brace yourself for a formidable challenge.</speech>
            <speech>These hints are what I can offer. Solving this cryptic puzzle rests in your capable hands. Good luck, brave Trainer.</speech>
        </speeches>
        <speeches id="2">
            <speech>The first fragment of Metagrossite, I've heard, dwells in the depths of Route 126 Underwater, carried by a rare sea dweller.</speech>
            <speech>In Meteor Falls, the second fragment lies within a Pokémon known for its unique bond, often hiding in the mouth of a larger ally.</speech>
            <speech>The last fragment is guarded by a rogue Tyrantrum, a fierce creature untamed by time. Brace yourself for a formidable challenge.</speech>
            <speech>These hints are what I can offer. Solving this cryptic puzzle rests in your capable hands. Good luck, brave Trainer.</speech>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>Remarkable! You've returned with all the fragments of the Metagrossite. I knew Steven saw potential in you for a reason.</speech>
            <speech>Each fragment you've brought back carries a story, a piece of Hoenn's rich and mystical history.</speech>
            <speech>Reassembling them will be a feat, but I have no doubt that Steven is the right person for the job.</speech>
            <speech>Your journey to collect these pieces wasn't just about rebuilding a Mega Stone. It was about connecting with the very soul of our land.</speech>
            <speech>You've done well, $PLAYER_NAME. Return to Steven in Mossdeep City. He will be waiting with the next steps for your Metagross.</speech>
        </speeches>
        <speeches id="2">
            <speech>Ah, you've returned! And with the Metagrossite fully restored, no less! That's quite the feat, $PLAYER_NAME.</speech>
            <speech>It's not every day you see such dedication to a task, especially one as challenging as this. You've done splendidly.</speech>
            <speech>Now, with the Metagrossite in hand, your Metagross can reach new heights of power through Mega Evolution.</speech>
        </speeches>
    </conversation>
</npcs>
