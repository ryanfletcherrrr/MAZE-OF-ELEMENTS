<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Battling is like picking the perfect outfit style and strategy matter! Let's see if your team is in season!</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh no! Looks like my team is so last season..</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh no! Looks like my team is so last season..</speech>
        </speeches>
        <speeches id="4">
            <speech>Flawless! Just like a perfectly planned outfit!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Ugh, Route 8 is so dusty. I guess a quick battle could make things more exciting!</speech>
        </speeches>
        <speeches id="2">
            <speech>Ugh! Losing is even more annoying than this heat!</speech>
        </speeches>
        <speeches id="3">
            <speech>Ugh! Losing is even more annoying than this heat!</speech>
        </speeches>
        <speeches id="4">
            <speech>Easy! You should probably freshen up your strategy, y'know?</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>My calculations predict a   99% chance of me winning this battle. Let's run the test and confirm the data!</speech>
        </speeches>
        <speeches id="2">
            <speech>Wait this wasn't in the equation! Did I miscalculate? Or is your strategy just that good?</speech>
        </speeches>
        <speeches id="3">
            <speech>Wait this wasn't in the equation! Did I miscalculate? Or is your strategy just that good?</speech>
        </speeches>
        <speeches id="4">
            <speech>Ah-ha! Just as my research predicted! Pokémon battles truly are a science!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>You got guts, walkin up to me like that. But guts ain't enough to win a battle let's see if you got the skills!</speech>
        </speeches>
        <speeches id="2">
            <speech>Tch Guess I wiped out this time. don't let it get to your head!</speech>
        </speeches>
        <speeches id="3">
            <speech>Tch Guess I wiped out this time. don't let it get to your head!</speech>
        </speeches>
        <speeches id="4">
            <speech>Ha! that's what happens when you mess with a real road warrior!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Ah youth. So full of energy and ambition. Let's see if you can keep up with experience.</speech>
        </speeches>
        <speeches id="2">
            <speech>Hoho Age may slow me down, but wisdom is always my greatest strength.</speech>
        </speeches>
        <speeches id="3">
            <speech>Hoho Age may slow me down, but wisdom is always my greatest strength.</speech>
        </speeches>
        <speeches id="4">
            <speech>See? A steady hand and patience will always lead to victory in the end.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Hey hey! Wanna battle? I promise it'll be super fun! Cmon, cmon!</speech>
        </speeches>
        <speeches id="2">
            <speech>Aww, no fair! But that was still so much fun!</speech>
        </speeches>
        <speeches id="3">
            <speech>Aww, no fair! But that was still so much fun!</speech>
        </speeches>
        <speeches id="4">
            <speech>Yay, yay, yay! Winning is the best feeling ever!</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>My Pokémon are so cute! But don't let their looks fool you They're tough too!</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh no, my poor Pokémon! We'll train harder next time!</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh no, my poor Pokémon! We'll train harder next time!</speech>
        </speeches>
        <speeches id="4">
            <speech>See? Cute Pokémon can be strong too!</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>Y-you wouldn't happen to be interested in Pokémon  trivia, would you? No? Well, then let's just battle!</speech>
        </speeches>
        <speeches id="2">
            <speech>Darn it! I was so focused on explaining Hidden Abilities that I forgot to strategize.</speech>
        </speeches>
        <speeches id="3">
            <speech>Darn it! I was so focused on explaining Hidden Abilities that I forgot to strategize.</speech>
        </speeches>
        <speeches id="4">
            <speech>Heh! Maybe I should give you a lecture on Pokémon type interactions. It's fascinating, really!</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Fearow" shouldSleep="" speed="1" sprite="22" type="pokemon" x="21" y="3">
        <path>RIGHTx10,LEFTx10</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Jiggly" shouldSleep="" speed="1" sprite="39" type="pokemon" x="48" y="10">
        <path>DOWNx3,RIGHTx1,UPx3</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="3" name="Nidoran" shouldSleep="" speed="1" sprite="29" type="pokemon" x="53" y="20">
        <path>LEFTx5,RIGHTx5</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
</npcs>
