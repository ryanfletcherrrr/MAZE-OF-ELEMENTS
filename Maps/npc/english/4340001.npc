<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Hello, $PLAYER_NAME. I'm the craftsman who forges Red Shards from the claws of Torchics.</speech>
            <speech>For the forging, we need a specific kind of Torchic:</speech>
            <speech>Self-caught in the Hoenn Safari, with no items held.</speech>
            <speech>It must have total IVs of 100 or more, and be Ultra Rare.</speech>
            <speech>Also, it should be at least level 1 and originally caught by you.</speech>
            <speech>Once you find a Torchic that meets these criteria, bring it to me.</speech>
        </speeches>
        <speeches id="2">
            <speech>Hello, $PLAYER_NAME. I'm the craftsman who forges Red Shards from the claws of Torchics.</speech>
            <speech>For the forging, we need a specific kind of Torchic:</speech>
            <speech>Self-caught in the Hoenn Safari, with no items held.</speech>
            <speech>It must have total IVs of 100 or more, and be Ultra Rare.</speech>
            <speech>Also, it should be at least level 1 and originally caught by you.</speech>
            <speech>Oh! you do have Torchic(s) that meets our needs. As a craftsman, I'll forge a Red Shard from its claws.</speech>
            <speech>This process is permanent, meaning the Torchic will be taken forever. Are you sure about your choice?</speech>
            <speech>Please select the Torchic you wish to use for the Red Shard. Choose carefully, as this cannot be undone and Torchic is taken under our care forever.</speech>
        </speeches>
        <speeches id="3">
            <speech>No problem, $PLAYER_NAME. Such decisions shouldn't be rushed. Return when you're ready.</speech>
        </speeches>
        <speeches id="4">
            <speech>I understand your decision. Let's proceed with the forging.</speech>
            <speech>...And it's done. Here is your Red Shard, crafted from your Torchic's claws.</speech>
            <speech>This Shard holds powerful properties. Use it wisely. Thank you for trusting me with your Torchic.</speech>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>Welcome, $PLAYER_NAME. Crafting the Red Flute requires 10 Red Shards, sourced from the rarest Torchics.</speech>
            <speech>These shards embody the essence of the wilds of Hoenn. If you're short, the adventure continues.</speech>
        </speeches>
        <speeches id="2">
            <speech>Marvelous, you've acquired 10 Red Shards! With these, I can forge the flute known to calm spirits.</speech>
            <speech>The Red Flute's creation is no small feat. Ready to proceed? Once I start, there's no turning back.</speech>
        </speeches>
        <speeches id="3">
            <speech>I understand your hesitation. It's a decision not to be taken lightly.</speech>
            <speech>Reflect on your choice. When certainty finds you, I'll be here.</speech>
        </speeches>
        <speeches id="4">
            <speech>Let us begin. Your trust in me won't go unrewarded.</speech>
            <speech>...And it's complete. Here, the Red Flute, imbued with the wild's harmony.</speech>
            <speech>Treat it with care. Its melodies are potent, able to soothe the tempest within.</speech>
            <speech>I must leave now to gather more resources. The wilds of Hoenn are vast, and their secrets many.</speech>
            <speech>When next we meet, I hope to hear tales of how the Red Flute aided you. Farewell, for now.</speech>
        </speeches>
        <speeches id="5">
            <speech>This flute marks a bond between us, $PLAYER_NAME. Yet, my journey for materials calls me away.</speech>
            <speech>I must leave now to gather more resources. The wilds of Hoenn are vast, and their secrets many.</speech>
            <speech>When next we meet, I hope to hear tales of how the Red Flute aided you. Farewell, for now.</speech>
        </speeches>
    </conversation>

</npcs>