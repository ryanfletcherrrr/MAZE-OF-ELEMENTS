<npcs>
    <conversation canSkip="false" id="1">
        <speeches id="1">
            <speech>Hunh? Oh, it's you, $PLAYER_NAME! You finally got here?</speech>
            <speech>You're slow like always. You're so slow, the Gym Leader's long gone now. He said he had to go...
            </speech>
            <speech>Uh…</speech>
            <speech>Oh, yeah, to Oreburgh Mine! I got my Badge already, so it's no big deal to me, but...</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="2">
        <speeches id="1">
            <speech>Thud!! Whoops!</speech>
            <speech>$PLAYER_NAME! You got the Gym Badge, huh?</speech>
            <speech>Eterna City is the next place with a Gym that gives away Badges, right?</speech>
            <speech>So, yeah, I went to Route 207, but I could not run without my Bicycle.</speech>
            <speech>I made my team battle and toughened them up, so it wasn't a waste.</speech>
            <speech>So, I'm going back to Jubilife City. Next stop, the Eterna Gym Badge!</speech>
            <speech>Ten seconds before I dash!</speech>
            <speech>Nine...</speech>
            <speech>Bah! Who's got time to count?!</speech>
        </speeches>
        <speeches id="2">
            <speech></speech>
        </speeches>
    </conversation>

    <conversation id="5" canSkip="false">
        <speeches id="1">
            <speech>Hey you! You're a trainer right? Please help me.</speech>
            <speech>There is an Onix stuck between rocks and is causing havoc in the mines.</speech>
            <speech>The Onix is mad and dangerous, can you please defeat the Onix and save the cave from destruction?
            </speech>
        </speeches>
    </conversation>

    <conversation id="6">
        <speeches id="1">
            <speech>Wow, you really defeated that Onix!</speech>
            <speech>You were amazing in there! The way you and your pokemon battled that Onix was amazing!</speech>
            <speech>Here, take this Moon Stone that I found in the mines.</speech>
        </speeches>
        <speeches id="2">
            <speech>Keep getting stronger, we will be following your journey!.</speech>
        </speeches>
    </conversation>

    <movingNpc direction="DOWN" id="1" name="Alan" shouldSleep="" speed="1" sprite="10" type="npc" x="54" y="27">
        <path>UPx2,LEFTx2,DOWNx3,RIGHTx2</path>
        <onCollisionSpeech gap="4"/>
        <speech>Up ahead there's a huge mountain that towers above everything.</speech>
        <speech>It divides Sinnoh into two distinct halves.</speech>
    </movingNpc>
    <movingNpc direction="LEFT" id="2" name="Kelly" shouldSleep="" speed="1" sprite="27" type="npc" x="37" y="25">
        <path>UPx2,DOWNx2</path>
        <onCollisionSpeech gap="4">I wasted my TMs!</onCollisionSpeech>
        <speech>TMs are single use only, but HMs can be used over and over.</speech>
        <speech>It's tricky trying to decide which Pokémon should learn what moves.</speech>
    </movingNpc>
    <movingNpc direction="LEFT" id="3" name="Fred" shouldSleep="" speed="1" sprite="32" type="npc" x="39" y="21">
        <path>RIGHTx3,LEFTx3</path>
        <onCollisionSpeech gap="4">Stop looking at me!</onCollisionSpeech>
        <speech>When I run around with my Running Shoes on, I'm the center of attention!</speech>
        <speech>...At least that's what it feels like. There's always someone looking at me.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="4" name="Mary" shouldSleep="" speed="1" sprite="17" type="npc" x="34" y="17">
        <path>UPx2,DOWNx2</path>
        <onCollisionSpeech gap="4"/>
        <speech>The Gym Leader is young, but he's the mine's safety supervisor.</speech>
        <speech>He's an expert in more than just one field!</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="5" name="Xavier" sprite="101" x="19" y="26">
        <speech>These vents exchange the hot air down below with the fresh air outside.</speech>
        <speech>Looking down them gives me the urge to start yelling into 'em! Hello!</speech>
    </npc>
    <movingNpc direction="DOWN" id="6" name="Jerry" shouldSleep="" speed="1" sprite="49" type="npc" x="25" y="14">
        <path>LEFTx2,RIGHTx2</path>
        <onCollisionSpeech gap="4"/>
        <speech>Have you seen the vents? They release steam from down below.</speech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="7" name="Machoke" shouldSleep="" speed="1" sprite="67" type="pokemon" x="42"
               y="56">
        <path>RIGHTx2, LEFTx2</path>
        <onCollisionSpeech gap="4">*The Machoke is carrying a boulder*</onCollisionSpeech>
        <speech>Machoke!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="8" name="Machop" shouldSleep="" speed="1" sprite="66" type="pokemon" x="66" y="43">
        <path>DOWNx1, UPx1</path>
        <onCollisionSpeech gap="4">*Machop seems to be moving stones onto the conveyor belt*</onCollisionSpeech>
        <speech>Chop Chop!!</speech>
    </movingNpc>
    <npc direction="UP" hidden="false" id="9" name="Foreman Tony" sprite="35" x="58" y="58">
        <speech>My Machoke and Machamp are helping out with construction while I take a break...</speech>
        <speech>In the Hoenn region, Machoke's have been known to be "Pokémon Movers"</speech>
        <speech>They help new residents move into their new homes!</speech>
        <speech>Pokémon aren't just for battles!</speech>
    </npc>

    <conversation id="7">
        <speeches id="2">
            <speech>Hi! I'm a PBO Tutorial campaign clown. Let's roll out my question!</speech>
            <speech>Can you create your own crew once you have 3 badges?</speech>
        </speeches>
        <speeches id="3">
            <speech>That's not the correct answer. Let's try again.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ding-ding!</speech>
            <speech>You're absolutely correct.</speech>
        </speeches>
        <speeches id="5">
            <speech>Here you go! Please accept these Potions!</speech>
            <speech>It restores the HP of a Pokémon by 20 points.</speech>
        </speeches>
    </conversation>

    <conversation id="9">
        <speeches id="1">
            <speech>Oh my god, you have Ranked Battle Tokens, don't you? Please trade them to me!! I'll give you great
                goodies in return!
            </speech>
        </speeches>
        <speeches id="2">
            <speech>But why?...</speech>
        </speeches>
    </conversation>

    <conversation id="10">
        <speeches id="1">
            <speech>Hunh? Oh, it's you, $PLAYER_NAME! You finally got here?</speech>
            <speech>You're slow like always. You're so slow, the Gym Leader's long gone now. He said he had to go...
            </speech>
            <speech>Uh…</speech>
            <speech>Oh, yeah, to Oreburgh Mine! I got my Badge already, so it's no big deal to me, but...</speech>
        </speeches>
    </conversation>
</npcs>
