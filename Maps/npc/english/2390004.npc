<npcs>

    <conversation id="2">
        <speeches id="1">
            <speech>{COLOR=ORANGE}*eyes light up with excitement*{ENDCOLOR}</speech>
            <speech>Wait, wait, WAIT! Is that the {COLOR=RED}legendary glow{ENDCOLOR} of Dynite ore I see?!</speech>
            <speech>Oh please oh please oh please! Trade with me! I've got {COLOR=GOLD}amazing treasures{ENDCOLOR} just waiting for the right person!</speech>
            <speech>What do you say? Ready to make a deal that'll knock your socks off?</speech>
        </speeches>
        <speeches id="2">
            <speech>{COLOR=CYAN}*deflates like a sad balloon*{ENDCOLOR}</speech>
            <speech>But... but why not? I promise my goodies are absolutely incredible!</speech>
            <speech>Maybe next time? I'll be here, dreaming of those {COLOR=RED}shiny Dynite ores{ENDCOLOR}...</speech>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>{COLOR=YELLOW}*practically vibrating with enthusiasm*{ENDCOLOR}</speech>
            <speech>Those {COLOR=RED}Blaze Coins{ENDCOLOR} are calling my name! I can hear them jingling in your bag!</speech>
            <speech>Trade with me, trade with me! I've got goodies so good they'll make your head spin!</speech>
            <speech>Come on, let's make some {COLOR=ORANGE}fiery{ENDCOLOR} magic happen!</speech>
        </speeches>
        <speeches id="2">
            <speech>{COLOR=GRAY}*wilts dramatically*{ENDCOLOR}</speech>
            <speech>Aww, really? But I had such {COLOR=RED}blazing{ENDCOLOR} deals prepared...</speech>
            <speech>Well, if you change your mind, I'll be here polishing my collection!</speech>
        </speeches>
    </conversation>

    <conversation id="4">
        <speeches id="1">
            <speech>{COLOR=PURPLE}*gasps and points excitedly*{ENDCOLOR}</speech>
            <speech>Crew Wars Tokens! The ultimate prize from the battlefield!</speech>
            <speech>Listen, I've got treasures that would make a {COLOR=GOLD}pirate captain{ENDCOLOR} weep with joy!</speech>
            <speech>Please, pretty please with a cherry on top?</speech>
        </speeches>
        <speeches id="2">
            <speech>{COLOR=BLUE}*sighs wistfully*{ENDCOLOR}</speech>
            <speech>Ah, the one that got away... those tokens would've completed my collection!</speech>
            <speech>Maybe the winds of war will bring you back to me someday...</speech>
        </speeches>
    </conversation>

    <conversation id="5">
        <speeches id="1">
            <speech>{COLOR=GREEN}*does a little victory dance*{ENDCOLOR}</speech>
            <speech>Ranked Battle Tokens! The {COLOR=RED}crown jewels{ENDCOLOR} of competitive glory!</speech>
            <speech>I'm practically bouncing off the walls here! My goodies are legendary-tier, I swear!</speech>
            <speech>What's it gonna be, champ? Ready to rank up your inventory?</speech>
        </speeches>
        <speeches id="2">
            <speech>{COLOR=RED}*clutches chest dramatically*{ENDCOLOR}</speech>
            <speech>My heart! You're breaking my poor collector's heart!</speech>
            <speech>Those tokens... they could've been mine! *sniffles* Maybe next battle...</speech>
        </speeches>
    </conversation>

    <conversation id="6">
        <speeches id="1">
            <speech>{COLOR=BLUE}*eyes glitter like rare gems*{ENDCOLOR}</speech>
            <speech>Are those... {COLOR=GOLD}Battle Tokens{ENDCOLOR} I spy? The sweet currency of champions!</speech>
            <speech>With those beauties, you could unlock wonders beyond your wildest dreams!</speech>
            <speech>Step right up, hero! I've got relics forged in the fires of victory itself!</speech>
        </speeches>
        <speeches id="2">
            <speech>{COLOR=GRAY}*slumps like a defeated knight*{ENDCOLOR}</speech>
            <speech>Alas... another day without the golden clink of Battle Tokens in my pouch...</speech>
            <speech>May your future battles be glorious, and may fate bring you—and your tokens—back to me!</speech>
        </speeches>
    </conversation>

</npcs>
