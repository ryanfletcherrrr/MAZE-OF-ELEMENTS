<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Hm? Well, if it isn't $PLAYER_NAME! So you're all finished moving in?</speech>
            <speech>I'm surprised that you managed to get here by yourself. Oh, I see. You're with your Pokémon.</speech>
            <speech>Hmm… Then I guess you're going to become a Trainer like me, $PLAYER_NAME. That's great news! I'll be looking forward to it!</speech>
            <speech>Yes, I heard about your heroics in Jvaloh and I felt very proud.</speech>
            <speech>Since you are here, I have a task for you. I gave a Pokeball and Pokémon to Wally.</speech>
            <speech>He left by himself towards route 102.</speech>
            <speech>Go find Wally and make sure that he safely catches a Pokémon.</speech>
            <speech>Come back and meet me once you help him out.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>So, did it work out?</speech>
            <speech>Now... $PLAYER_NAME, if you want to become a strong Trainer, here's my advice.</speech>
            <speech>Head for Rustboro City beyond this town. There, you should challenge the Gym Leader, Roxanne.</speech>
            <speech>After her, go on to other Pokémon Gyms and defeat their Leaders. Collect Badges from them, understood?</speech>
            <speech>Of course, I'm a Gym Leader, too. We'll battle one day. But that's only after you become stronger, $PLAYER_NAME.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>$GENDER_SON_DAUGHT, I will only battle you once you have defeated all the trainers in the dojo.</speech>
            <speech>Good Luck.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Hm... So you did get four Gym Badges.</speech>
            <speech>Then, as I promised, we will have a Pokémon battle.</speech>
            <speech>$PLAYER_NAME... It makes me happier than I can really describe.</speech>
            <speech>Being able to have a real battle with my own $GENDER_SON_DAUGHT like this.</speech>
            <speech>But a battle is a battle! I will do everything within my power as a Gym Leader to win!</speech>
            <speech>You'd better give it your best shot, too, $PLAYER_NAME!</speech>
        </speeches>
        <speeches id="2">
            <speech>...! Impossible…</speech>
            <speech>I can't believe it. I lost to $PLAYER_NAME?</speech>
            <speech>You've come this far...</speech>
            <speech>That's how it is, then! I will give you this..</speech>
            <speech>Having that Badge will ensure that Pokémon that know the HM move Surf will be able to travel over water in Hoenn.</speech>
            <speech>And this is my gift to you, $PLAYER_NAME. I'm sure you'll be able to use it well.</speech>
            <speech>Retaliate will allow you to take revenge for a fallen team member.</speech>
            <speech>Its power will be doubled if you have a Pokémon use it in the very next move right after an ally faints.</speech>
            <speech>I hope you and your Pokémon will be diligent enough to use it wisely</speech>
        </speeches>
        <speeches id="3">
            <speech> Sigh.</speech>
            <speech>As the Gym Leader, I can't express how frustrated I am.</speech>
            <speech>But, as a father, it makes me both happy and a little sad. It's odd.</speech>
            <speech>Come on, $PLAYER_NAME.</speech>
            <speech>I'll see you on your way. Let's get out of here.</speech>
        </speeches>
        <speeches id="4">
            <speech>This battle was too easy for me. Nevertheless, I am happy to give you another chance.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>The main character of this story... I'll tell you who it is!</speech>
        </speeches>
        <speeches id="2">
            <speech>You have to be strong inside when there aren't many people who are stronger than you on the outside...</speech>
        </speeches>
        <speeches id="3">
            <speech>You have to be strong inside when there aren't many people who are stronger than you on the outside...</speech>
        </speeches>
        <speeches id="4">
            <speech>Of course, you are the main character!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Your Pokémon... Show them to me...</speech>
        </speeches>
        <speeches id="2">
            <speech>Yes... You have good Pokémon... Pokémon must be happy to be raised by you...</speech>
        </speeches>
        <speeches id="3">
            <speech>Yes... You have good Pokémon... Pokémon must be happy to be raised by you...</speech>
        </speeches>
        <speeches id="4">
            <speech>All within my expectations... Nothing to be surprised about...</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>You seem quite confident. I'll sink you straightaway.</speech>
        </speeches>
        <speeches id="2">
            <speech>Yes... You have good Pokémon... Pokémon must be happy to be raised by you...</speech>
        </speeches>
        <speeches id="3">
            <speech>Yes... You have good Pokémon... Pokémon must be happy to be raised by you...</speech>
        </speeches>
        <speeches id="4">
            <speech>AAAH! I am sooo scared! I will never do it again... Sorry!</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>A person who wants to fight, fight, and fight forever. That's the way of the Ace.</speech>
        </speeches>
        <speeches id="2">
            <speech>You can't become an Ace Trainer battling like that.</speech>
        </speeches>
        <speeches id="3">
            <speech>You can't become an Ace Trainer battling like that.</speech>
        </speeches>
        <speeches id="4">
            <speech>Your fighting style suits you very well. You could be an Ace Trainer.</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>I'm gonna give you an experience so sweet that your eyes are gonna spin!</speech>
        </speeches>
        <speeches id="2">
            <speech>It's not like you really lose anything when you lose. As long as you enjoy it, that's enough.</speech>
        </speeches>
        <speeches id="3">
            <speech>It's not like you really lose anything when you lose. As long as you enjoy it, that's enough.</speech>
        </speeches>
        <speeches id="4">
            <speech>Phew... You are smoking hot! It's like a sweltering summer night in here!</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>A person who wants to fight, fight, and fight forever. That's the way of the Ace.</speech>
        </speeches>
        <speeches id="2">
            <speech>You can't become an Ace Trainer battling like that.</speech>
        </speeches>
        <speeches id="3">
            <speech>You can't become an Ace Trainer battling like that.</speech>
        </speeches>
        <speeches id="4">
            <speech>Your fighting style suits you very well. You could be an Ace Trainer.</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>To challenge me you must be a reckless, fearless person who doesn't know his/her place!</speech>
        </speeches>
        <speeches id="2">
            <speech>You're a smart Trainer, considering you don't know very much.</speech>
        </speeches>
        <speeches id="3">
            <speech>You're a smart Trainer, considering you don't know very much.</speech>
        </speeches>
        <speeches id="4">
            <speech>Hmmph... To challenge me must mean that even ignorance has its limit!</speech>
        </speeches>
    </conversation>
    <npc direction="DOWN" hidden="false" id="1" name="Gym Guide" randomRotation="false" sprite="5" x="26" y="81">
        <speech>Hey there, Champion in the making! Petalburg Gym's where it's at, and Norman's got a team of Normal-types ready to test your mettle.</speech>
        <speech>But don't worry! Fighting, Rock, or Steel Pokémon are your go-to pals for this challenge. Keep your focus sharp, stay determined, and you'll show Norman what you're made of!</speech>
    </npc>
</npcs>
