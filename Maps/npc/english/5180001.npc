<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>What?! No way! You have the key?</speech>
            <speech>Locking the door was meaningless! I am the loser in this after all!</speech>
            <speech>This is no time for self-pity! I've got to alert the Commander!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Oi! This is no fun and games! This is proper work, I tell you!</speech>
        </speeches>
        <speeches id="2">
            <speech>What....?! Some brat messed up my job...</speech>
        </speeches>
        <speeches id="3">
            <speech>What....?! Some brat messed up my job...</speech>
        </speeches>
        <speeches id="4">
            <speech>Go away brat!</speech>
        </speeches>
        <speeches id="5"/>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Collecting electricity from the Valley Windworks... That's our mission.</speech>
        </speeches>
        <speeches id="2">
            <speech>I really don't like kids who also happen to be tough Trainers...</speech>
        </speeches>
        <speeches id="3">
            <speech>I really don't like kids who also happen to be tough Trainers...</speech>
        </speeches>
        <speeches id="4">
            <speech>You don't have an inkling of what Team Galactic is trying to achieve!</speech>
        </speeches>
        <speeches id="5"/>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>I'm one of Team Galactic's three Commanders.</speech>
            <speech>...No, wait. That's one of four Commanders. My name is Mars!</speech>
            <speech>We've been trying to create a new world that's better than this one...</speech>
            <speech>But people have shown little understanding about what we do.</speech>
            <speech>You don't understand either, do you? It's a little saddening...</speech>
            <speech>So, let's have a battle to decide what we should do next.</speech>
            <speech>If I win, you leave.</speech>
            <speech>If you win, we, Team Galactic, will leave!</speech>
        </speeches>
        <speeches id="2">
            <speech>Oops! I messed that one up! That's all right, though. I quite enjoyed our battle.</speech>
        </speeches>
        <speeches id="3"/>
        <speeches id="4">
            <speech>You don't have an inkling of what Team Galactic is trying to achieve!</speech>
        </speeches>
        <speeches id="5"/>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>My Pokémon can't battle anymore.</speech>
            <speech>They're gonna take away my Pokémon for messing this one up...</speech>
            <speech>Humph! Just you wait! Our Commander will smoosh you!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>My, my. Lose to a child, will you? But, no matter. We've collected plenty of electricity.</speech>
            <speech>With the power we obtained, we can do something quite spectacular.</speech>
            <speech>It seems quite obvious to me, Charon, the genius even the boss recognizes. Now, Mars, we should be
                going.
            </speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Team Galactic...</speech>
            <speech>They were saying they had to gather Pokémon and energy no matter what.</speech>
            <speech>It was for creating a new universe, or so they claimed.</speech>
            <speech>Nothing they said made any sort of sense to me.</speech>
            <speech>I can’t tell you how grateful I am for saving me.</speech>
            <speech>I can finally see my little daughter again!</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh, sorry! Ahaha! They had me working nonstop!</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh, yes, a balloon Pokémon appears in front of the windworks.</speech>
            <speech>It’s always a certain day of the week, but I’m not sure which day.</speech>
            <speech>Could its appearance have something to do with this windworks fusing wind-generated energy?</speech>
            <speech>The Valley Windworks uses turbines to capture energy from winds driven from the mountains in this canyon.</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>Papa!</speech>
            <speech>Yuck! Papa, you’re stinky! Go shower now, stinky!</speech>
        </speeches>
        <speeches id="2">
            <speech>Thank you, Trainer! You made those bad people go away!</speech>
            <speech>I think the balloon Pokémon will come visiting again!</speech>
        </speeches>
    </conversation>
    <!--<npc direction="DOWN" hidden="false" id="1" name="Kaio" sprite="37" x="22" y="5">
        <speech>The Valley Windworks uses turbines to capture energy from winds driven from the mountains in this canyon.</speech>
        <speech>We produce energy from the power of nature itself. It's quite wonderful.</speech>
    </npc>
    <npc direction="LEFT" hidden="false" id="2" name="Marie" sprite="82" x="25" y="6">
        <speech>If the balloon Pokémon came, the wind would blow it away!</speech>
    </npc>-->
</npcs>
