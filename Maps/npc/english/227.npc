<npcs>
    <conversation id="8">
        <speeches id="1">
            <speech>A huge {COLOR=YELLOW}Snorlax{ENDCOLOR} is fast asleep, blocking the way!</speech>
            <speech>Its breathing is slow and deep… It doesn’t seem to wake up, no matter what you do.</speech>
            <speech>Maybe there's something that could wake it up...</speech>
        </speeches>
    </conversation>

    <conversation id="1">
        <speeches id="1">
            <speech>A huge {COLOR=YELLOW}Snorlax{ENDCOLOR} is fast asleep, blocking the way!</speech>
            <speech>Its breathing is slow and deep… It doesn’t seem to wake up, no matter what you do.</speech>
            <speech>Maybe there's something that could wake it up...</speech>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>A huge {COLOR=YELLOW}Snorlax{ENDCOLOR} is fast asleep, blocking the way!</speech>
            <speech>Its breathing is slow and deep… It doesn’t seem to wake up, no matter what you do.</speech>
            <speech>Maybe there's something that could wake it up...</speech>
        </speeches>

        <speeches id="2">
            <speech>The {COLOR=YELLOW}Snorlax{ENDCOLOR} stirs slightly as you approach.</speech>
            <speech>Do you want to play the {COLOR=CYAN}Poké Flute{ENDCOLOR} to try waking it up?</speech>
        </speeches>

        <speeches id="3">
            <speech>You decide not to play the {COLOR=CYAN}Poké Flute{ENDCOLOR}.</speech>
            <speech>The {COLOR=YELLOW}Snorlax{ENDCOLOR} remains sound asleep, blocking the path.</speech>
        </speeches>

        <speeches id="4">
            <speech>You play the {COLOR=CYAN}Poké Flute{ENDCOLOR}. A soothing melody fills the air...</speech>
            <speech>The {COLOR=YELLOW}Snorlax{ENDCOLOR} stirs, its eyes flicker open!</speech>
            <speech>It looks {COLOR=RED}annoyed{ENDCOLOR}! Snorlax attacks in a grumpy rage and runs away!</speech>
        </speeches>

        <completion id="5">
            <!-- This can remain empty as instructed -->
        </completion>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>You know what happens when you breathe in too much Muk gas? You start seeing double... and losing battles!</speech>
        </speeches>
        <speeches id="2">
            <speech>Urgh... feels like I just swallowed Weezing's fumes..</speech>
        </speeches>
        <speeches id="3">
            <speech>Urgh... feels like I just swallowed Weezing's fumes..</speech>
        </speeches>
        <speeches id="4">
            <speech>That sting? Yeah... that's poison settling in. Good luck walking straight!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>You're cruisin' for a bruisin'... or worse, a Venoshock!</speech>
        </speeches>
        <speeches id="2">
            <speech>Ugh... it's like I got tangled in my own chain...</speech>
        </speeches>
        <speeches id="3">
            <speech>Ugh... it's like I got tangled in my own chain...</speech>
        </speeches>
        <speeches id="4">
            <speech>Next time, bring antidotes. Unless you like feeling queasy!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Hope you brought extra socks... 'cause my Grimer's about to melt yours off!</speech>
        </speeches>
        <speeches id="2">
            <speech>Bah... maybe my Grimer's just too chill today.</speech>
        </speeches>
        <speeches id="3">
            <speech>Bah... maybe my Grimer's just too chill today.</speech>
        </speeches>
        <speeches id="4">
            <speech>Route 16? It's OURS. Don't come back unless you like losing!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Man, I taught my Koffing to roll like a tire... thing's faster than my bike now!</speech>
        </speeches>
        <speeches id="2">
            <speech>Guess Koffing's still workin' on those turns...</speech>
        </speeches>
        <speeches id="3">
            <speech>Guess Koffing's still workin' on those turns...</speech>
        </speeches>
        <speeches id="4">
            <speech>Yeah! We're a real toxic combo! Haha... get it? ...No? Whatever.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Battles are like riding...steady at first, then you hit 'em with full throttle!</speech>
        </speeches>
        <speeches id="2">
            <speech>Guess I took a wrong turn... straight into defeat.</speech>
        </speeches>
        <speeches id="3">
            <speech>Guess I took a wrong turn... straight into defeat.</speech>
        </speeches>
        <speeches id="4">
            <speech>Poison types play dirty... and I play even dirtier!</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>So, you wish to learn the art of flight, do you? Hmph.</speech>
            <speech>You've got the spirit, but not the wings - not yet.</speech>
            <speech>Bring me a Pidgeot. But not just any feathered flier.</speech>
            <speech>I'm talking about one that listens to the sky as much as it listens to you. A true partner.</speech>
            <speech>{COLOR=GOLD}Level 100{ENDCOLOR}, {COLOR=GOLD}shiny{ENDCOLOR}, and caught by your own hand - no trades, no gifts.</speech>
            <speech>It must have a nature that flows with the wind - {COLOR=GOLD}Timid{ENDCOLOR} or {COLOR=GOLD}Modest{ENDCOLOR}.</speech>
            <speech>Train it. Bond with it. Let the wind know your names.</speech>
            <speech>Then return to me. If your connection is real, the skies will respond.</speech>
        </speeches>
        <speeches id="2">
            <speech>...That look in its eye. That calm in your stance.</speech>
            <speech>You've done it. You haven't just raised a Pidgeot - you've {COLOR=SKY}soared{ENDCOLOR} with one.</speech>
            <speech>But before I hand over the Pidgeotite, there's one last updraft for you to ride:</speech>
            <speech>{COLOR=RED}You'll have to conquer me.{ENDCOLOR}</speech>
            <speech>Are you ready to face the Sky Commander's final test?</speech>
        </speeches>
        <speeches id="3">
            <speech>The winds can wait. When you're ready to claim the skies, you know where to find me.</speech>
        </speeches>
        <speeches id="4">
            <speech>Good. But this battle... it won't be like the others.</speech>
            <speech>When aerial masters clash, the very air trembles. Gale-force winds, pressure drops - it's dangerous for bystanders.</speech>
            <speech>Follow me to my dwelling. There, we can unleash our full power without fear.</speech>
            <speech>The final test of the Sky Commander awaits within those walls.</speech>
        </speeches>
    </conversation>
</npcs>
