<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>The ice whispers, you know... it remembers those who were lost in the storm. Wanna hear what it says about you?</speech>
        </speeches>
        <speeches id="2">
            <speech>You silenced the whispers... but they'll come back.</speech>
        </speeches>
        <speeches id="3">
            <speech>You silenced the whispers... but they'll come back.</speech>
        </speeches>
        <speeches id="4">
            <speech>The chill in your bones? That's the spirit world getting closer.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>The Seafoam air is crisp and clean perfect for sharpening instincts. Careful, I play to win.</speech>
        </speeches>
        <speeches id="2">
            <speech>Whew...okay, you caught me off guard. That doesn't happen often!</speech>
        </speeches>
        <speeches id="3">
            <speech>Whew...okay, you caught me off guard. That doesn't happen often!</speech>
        </speeches>
        <speeches id="4">
            <speech>You put up a good fight, but the cold didn't slow me down one bit</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>This cave isn't just a test of strength. It's a test of focus, endurance, and patience. Let's see if you pass.</speech>
        </speeches>
        <speeches id="2">
            <speech>Looks like you've got what it takes. Respect.</speech>
        </speeches>
        <speeches id="3">
            <speech>Looks like you've got what it takes. Respect.</speech>
        </speeches>
        <speeches id="4">
            <speech>There's always someone stronger. You'll get there if you keep pushing.</speech>
        </speeches>
    </conversation>
    <conversation id="6" >
        <speeches id="1">
            <speech>{COLOR=CYAN}Arrrrti...cuuuuuno...{ENDCOLOR}</speech>
        </speeches>
        <speeches id="2">
            <speech>{COLOR=CYAN}Cuuuuu-noooo!{ENDCOLOR}</speech>
        </speeches>
        <speeches id="3">
            <speech>*Articuno gracefully spreads its {COLOR=CYAN}crystalline wings{ENDCOLOR}, creating swirling {COLOR=WHITE}snowflakes{ENDCOLOR} in the air*</speech>
            <speech>*The majestic ice bird tilts its head and gestures toward the horizon with a gentle {COLOR=BLUE}icy breeze{ENDCOLOR}*</speech>
            <speech>*It seems to whisper that you should return when the {COLOR=CYAN}frost settles{ENDCOLOR} in {COLOR=YELLOW}$DURATION{ENDCOLOR}*</speech>
        </speeches>
        <speeches id="4">
            <speech>{COLOR=CYAN}Arti-cuno!{ENDCOLOR}</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Seel" shouldSleep="" speed="1" sprite="86" type="pokemon" x="9" y="21">
        <path>DOWNx4,RIGHTx2,LEFTx2,UPx4</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Golbat" shouldSleep="" speed="1" sprite="42" type="pokemon" x="30" y="21">
        <path>RIGHTx3,LEFTx3</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="3" name="Dewgong" shouldSleep="" speed="1" sprite="87" type="pokemon" x="40" y="28">
        <path>UPx4,RIGHTx5,DOWNx4,LEFTx5</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="4" name="Zubat" shouldSleep="" speed="1" sprite="41" type="pokemon" x="37" y="36">
        <path>DOWNx4,UPx4</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="5" name="Golbat" shouldSleep="" speed="1" sprite="42" type="pokemon" x="30" y="8">
        <path>RIGHTx5,LEFTx5</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
</npcs>
