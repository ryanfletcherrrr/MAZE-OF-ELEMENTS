<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>I need to be on a bike with acro tires in order to traverse this ledge.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Thanks for coming all this way! I'm sorry I don't have much to offer, but do make yourself comfortable.</speech>
        </speeches>
        <speeches id="2">
            <speech>Sorry I couldn't be more accommodating. Have a safe trip home.</speech>
        </speeches>
        <speeches id="3">
            <speech>Sorry I couldn't be more accommodating. Have a safe trip home.</speech>
        </speeches>
        <speeches id="4">
            <speech>Leaving already? I had just made some tea, though.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>I inherited this big-boned body from my parents... I'm like a living mountain range...</speech>
        </speeches>
        <speeches id="2">
            <speech>It's not enough... It's never enough. My bad cholesterol isn't high enough...</speech>
        </speeches>
        <speeches id="3">
            <speech>It's not enough... It's never enough. My bad cholesterol isn't high enough...</speech>
        </speeches>
        <speeches id="4">
            <speech>Ha ha! Now I can consume some more calories...</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>We would like to hold a Pokémon battle against the strongest foe.</speech>
        </speeches>
        <speeches id="2">
            <speech>I wonder if we could have been friends if we had met in a world with no battles...</speech>
        </speeches>
        <speeches id="3">
            <speech>I wonder if we could have been friends if we had met in a world with no battles...</speech>
        </speeches>
        <speeches id="4">
            <speech>Ho ho ho! That was to our liking! We find ourselves quite satisfied!</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>For the sake of your future, think about how you interact with your elders.</speech>
        </speeches>
        <speeches id="2">
            <speech>You don't know anything about the world. I think you'll struggle in the future.</speech>
        </speeches>
        <speeches id="3">
            <speech>You don't know anything about the world. I think you'll struggle in the future.</speech>
        </speeches>
        <speeches id="4">
            <speech>You know how to make your way in the world. I think you'll succeed in the future.</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>I've never done anything wrong in my whole life. Why do you judge me based on my looks?</speech>
        </speeches>
        <speeches id="2">
            <speech>You're awful... Everyone is awful... Why won't people judge me by what's inside?</speech>
        </speeches>
        <speeches id="3">
            <speech>You're awful... Everyone is awful... Why won't people judge me by what's inside?</speech>
        </speeches>
        <speeches id="4">
            <speech>This outfit is a hand-me-down from my mother that she wore when she was young.</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>All Mom and Dad do is fiddle with their tablets! They never play with me! I'm bored!</speech>
        </speeches>
        <speeches id="2">
            <speech>Maybe I'm not really their kid... Maybe their tablets are...</speech>
        </speeches>
        <speeches id="3">
            <speech>Maybe I'm not really their kid... Maybe their tablets are...</speech>
        </speeches>
        <speeches id="4">
            <speech>I don't like Mom or Dad or their silly tablets! All I need are Pokémon!</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Machop" shouldSleep="" speed="1" sprite="66" type="pokemon" x="10" y="57">
        <path>RIGHTx4,LEFTx4</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Numel" shouldSleep="" speed="1" sprite="322" type="pokemon" x="37" y="53">
        <path>UPx2,DOWNx2</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="3" name="Geodude" shouldSleep="" speed="1" sprite="74" type="pokemon" x="31" y="55">
        <path>UPx1,RIGHTx1,LEFTx1,DOWNx1</path>
        <onCollisionSpeech gap="4">Geodude!</onCollisionSpeech>
        <speech>Geodude!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="4" name="Grimer" speed="1" sprite="88" type="pokemon" x="5" y="49">
        <path>RIGHTx1,DOWNx1,UPx1,LEFTx1</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="5" name="Machop" shouldSleep="" speed="1" sprite="66" type="pokemon" x="1" y="42">
        <path>UPx4,DOWNx4</path>
        <onCollisionSpeech gap="4">Machop!</onCollisionSpeech>
        <speech>Machop!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="6" name="Slugma" shouldSleep="" speed="1" sprite="218" type="pokemon" x="24" y="33">
        <path>UPx2,DOWNx2</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="7" name="Slugma" shouldSleep="" speed="1" sprite="218" type="pokemon" x="27" y="48">
        <path>DOWNx2,UPx2</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="8" name="Skarmory" speed="1" sprite="227" type="pokemon" x="3" y="33">
        <path>UPx10,RIGHTx8,DOWNx10,LEFTx8</path>
        <onCollisionSpeech gap="4">Skarmory!</onCollisionSpeech>
        <speech>Skarmory!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="9" name="Magcargo" shouldSleep="" speed="1" sprite="219" type="pokemon" x="2" y="9">
        <path>DOWNx2,RIGHTx2,DOWNx2,UPx2,LEFTx2,UPx2</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="10" name="Magcargo" shouldSleep="" speed="1" sprite="219" type="pokemon" x="15" y="16">
        <path>RIGHTx2,DOWNx1,LEFTx2,UPx1</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="11" name="Magcargo" shouldSleep="" speed="1" sprite="219" type="pokemon" x="7" y="18">
        <path>LEFTx4,RIGHTx4</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="12" name="Skarmory" speed="1" sprite="227" type="pokemon" x="26" y="2">
        <path>DOWNx11,RIGHTx7,UPx11,LEFTx7</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="13" name="Spoink" speed="1" sprite="325" type="pokemon" x="33" y="26">
        <path>LEFTx5,RIGHTx5</path>
        <onCollisionSpeech gap="4">Spoink!</onCollisionSpeech>
        <speech>Spoink!</speech>
    </movingNpc>
</npcs>
