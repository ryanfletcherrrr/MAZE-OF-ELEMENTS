<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>My Heracross and I are an unstoppable duo! Think you can handle us?</speech>
        </speeches>
        <speeches id="2">
            <speech>Guess Heracross and I need to train harder...</speech>
        </speeches>
        <speeches id="3">
            <speech>Guess Heracross and I need to train harder...</speech>
        </speeches>
        <speeches id="4">
            <speech>Told you! Heracross always leads the charge!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>A good catch takes patience, but reeling in a victory? That's all skill!</speech>
        </speeches>
        <speeches id="2">
            <speech>Guess I let that one slip through the net. Better luck next time!</speech>
        </speeches>
        <speeches id="3">
            <speech>Guess I let that one slip through the net. Better luck next time!</speech>
        </speeches>
        <speeches id="4">
            <speech>Ha! Just like fishing, wait long enough, and the big wins come to you!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>True strength isn't just about power. It's about control, strategy, and precision.</speech>
        </speeches>
        <speeches id="2">
            <speech>Hmph... I miscalculated. But trust me, this won't happen again.</speech>
        </speeches>
        <speeches id="3">
            <speech>Hmph... I miscalculated. But trust me, this won't happen again.</speech>
        </speeches>
        <speeches id="4">
            <speech>Grace, skill, and power. That's what separates an ace from the rest. Keep training; you'll get there someday!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Strength, strategy, and skill only trainers who have all three can call themselves elite. Let's see if you measure up!</speech>
        </speeches>
        <speeches id="2">
            <speech>Hmph..I won't make the same mistake twice. Next time, you won't be so lucky!</speech>
        </speeches>
        <speeches id="3">
            <speech>Hmph..I won't make the same mistake twice. Next time, you won't be so lucky!</speech>
        </speeches>
        <speeches id="4">
            <speech>As expected. Experience and training make all the difference You've still got a long way to go.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Route 6 might not be as wild as the forest, but my bugs are still ready to crawl all over you!</speech>
        </speeches>
        <speeches id="2">
            <speech>Well, that didn't go as planned... I'll just have to catch even stronger bugs!</speech>
        </speeches>
        <speeches id="3">
            <speech>Well, that didn't go as planned... I'll just have to catch even stronger bugs!</speech>
        </speeches>
        <speeches id="4">
            <speech>Haha! Looks like my bugs are the ones crawling their way to victory today!</speech>
        </speeches>
    </conversation>
    <movingNpc direction="LEFT" id="1" name="Oddish" shouldSleep="" speed="1" sprite="43" type="pokemon" x="15" y="49">
        <path>LEFTx5,RIGHTx5</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <npc direction="LEFT" hidden="false" id="2" name="Betty" randomRotation="false" sprite="6" x="25" y="24">
        <speech>I swear, Route 6 has the juiciest berries! If only my basket weren't so tiny...</speech>
    </npc>
    <movingNpc direction="DOWN" id="3" name="Pidgey" shouldSleep="" speed="1" sprite="16" type="pokemon" x="11" y="12">
        <path>DOWNx3,RIGHTx5,UPx3,LEFTx5</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="4" name="Timmy" randomRotation="true" sprite="2" x="23" y="11">
        <speech>One day I'll battle. Today is not that day.</speech>
    </npc>
    <movingNpc direction="DOWN" id="5" name="Meowth" shouldSleep="" speed="1" sprite="52" type="pokemon" x="31" y="10">
        <path>DOWNx6,RIGHTx2,LEFTx2,UPx6</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
</npcs>
