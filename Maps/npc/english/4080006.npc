<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Hello. You must be a new challenger.</speech>
            <speech>I am Roxanne, the Rustboro City Pokémon Gym Leader.</speech>
            <speech>I became a Gym Leader so that I may apply in battle all that I've learned at the Pokémon Trainers'
                School.
            </speech>
            <speech>If you defeat me in a Pokémon battle, I'll present you with a Gym Badge as proof of your strength as
                a Trainer.
            </speech>
            <speech>Let's put our strength to test.</speech>
        </speeches>
        <speeches id="2">
            <speech>So...</speech>
            <speech>I lost...</speech>
            <speech>It seems that I still have much more to learn...</speech>
            <speech>I understand. The Pokémon League's rules state that Trainer receives this if they defeat a Gym
                Leader.
            </speech>
            <speech>Please accept the official Pokémon League Stone Badge.</speech>
            <speech>The Stone Badge enables Pokémon to use the HM move Cut outside battle.</speech>
            <speech>And... Please take this with you, too.</speech>
            <speech>The move Rock Tomb not only inflicts damage by dropping rocks, it also lowers the target's Speed.</speech>
            <speech>If you use a TM, it instantly teaches the move to a Pokémon.</speech>
            <speech>You can use a TM only once, so please use it carefully!</speech>
        </speeches>
        <speeches id="3">
            <speech>Since you are so strong, you should challenge other Gym Leaders, too. By battling many Trainers, you'll likely learn many things.</speech>
            <speech>I should warn you — they're a lot tougher than I am!</speech>
        </speeches>
        <speeches id="4">
            <speech>This battle was too easy for me. Nevertheless, I am happy to give you another chance.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>I've raised my Pokémon with great care. You're not allowed to hurt them!</speech>
        </speeches>
        <speeches id="2">
            <speech>Your Pokémon are more amazing! Trade with me!</speech>
        </speeches>
        <speeches id="3">
            <speech>Your Pokémon are more amazing! Trade with me!</speech>
        </speeches>
        <speeches id="4">
            <speech>Yay! Yay! I won! My Pokémon and I are amazing, huh?!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Don't let your guard down, or you may be crying when a kid beats you.</speech>
        </speeches>
        <speeches id="2">
            <speech>Sheesh! Can't you see that I'm just a kid! It wasn't fair of you to go all out like that!</speech>
        </speeches>
        <speeches id="3">
            <speech>Sheesh! Can't you see that I'm just a kid! It wasn't fair of you to go all out like that!</speech>
        </speeches>
        <speeches id="4">
            <speech>I may be young, but that doesn't mean I'll lose even to a grown-up.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Wha? You wanna battle with me? I suppose we could arrange something...</speech>
        </speeches>
        <speeches id="2">
            <speech>This battle was a valuable experience. I still need to gain more experience!</speech>
        </speeches>
        <speeches id="3">
            <speech>This battle was a valuable experience. I still need to gain more experience!</speech>
        </speeches>
        <speeches id="4">
            <speech>Oh, wh-whoa. You're no match for me. Your Pokémon are useless.</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Professor Amber" shouldSleep="" speed="1" sprite="8" type="npc" x="6" y="34">
        <path>DOWNx4,RIGHTx2,UPx2,DOWNx2,LEFTx2,UPx4</path>
        <onCollisionSpeech gap="4">Please, don't touch the showcase.</onCollisionSpeech>
        <speech>Greetings, Trainer! I'm Professor Amber, the fossil expert here.</speech>
        <speech>Managing fossils like Anorith and Lileep is like handling rare treasures.</speech>
        <speech>Ensuring they stay pristine requires a careful touch. Enjoy your fossil journey in the museum!</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="2" name="Professor Terra" randomRotation="true" sprite="7" x="8" y="32">
        <speech>May I help you?</speech>
    </npc>
    <movingNpc direction="DOWN" id="3" name="Lileep" shouldSleep="" speed="1" sprite="345" type="pokemon" x="23" y="35">
        <path>RIGHTx4,LEFTx4</path>
        <onCollisionSpeech gap="4">Lileep?</onCollisionSpeech>
        <speech>Incredible! It is alive!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="4" name="Anorith" shouldSleep="" speed="1" sprite="347" type="pokemon" x="25" y="29">
        <path>DOWNx4,UPx4</path>
        <onCollisionSpeech gap="4">Anorith!</onCollisionSpeech>
        <speech>Incredible! It is alive!</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="5" name="Gym Guide" randomRotation="false" sprite="5" x="14" y="39">
        <speech>Hey there, Champion in the making! Ready to rock this gym challenge?</speech>
        <speech>Roxanne's got some tough cookies waiting for ya, but with a well-rounded team, you'll have the advantage.</speech>
        <speech>Bring along some Water, Grass, or Fighting Pokémon to shake things up. Stay strong, stay focused, and you'll crack those rocks in no time!</speech>
    </npc>
</npcs>
