<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>I'll show you the ropes of how to really use Pokémon!</speech>
        </speeches>
        <speeches id="2">
            <speech>You actually taught me a lesson! You're pretty amazing!</speech>
        </speeches>
        <speeches id="3">
            <speech>You actually taught me a lesson! You're pretty amazing!</speech>
        </speeches>
        <speeches id="4">
            <speech>I guess we can stop training for today. You learned some new things, right?</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>All right, then. I'll watch you. Let your passions run wild!</speech>
        </speeches>
        <speeches id="2">
            <speech>Can you trust your own eyes? Do you know what's important to you?</speech>
        </speeches>
        <speeches id="3">
            <speech>Can you trust your own eyes? Do you know what's important to you?</speech>
        </speeches>
        <speeches id="4">
            <speech>Heheheh... Are you sure? Don't you think you could keep going?</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Victory will never come to those who aren't prepared to face defeat.</speech>
        </speeches>
        <speeches id="2">
            <speech>Keep winning for me, too. Become the number-one Trainer here.</speech>
        </speeches>
        <speeches id="3">
            <speech>Keep winning for me, too. Become the number-one Trainer here.</speech>
        </speeches>
        <speeches id="4">
            <speech>I'm not prepared to lose, but I won easily anyway.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>The web of life is delicate... but the strongest silk can withstand any storm!</speech>
        </speeches>
        <speeches id="2">
            <speech>Guess my team needs to molt and grow stronger...</speech>
        </speeches>
        <speeches id="3">
            <speech>Guess my team needs to molt and grow stronger...</speech>
        </speeches>
        <speeches id="4">
            <speech>Nature always finds a way. Bugs, trainers... we all adapt or get left behind!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Hey, hey! You think you're tough? My teams been training non-stop!</speech>
        </speeches>
        <speeches id="2">
            <speech>Whoa maybe I should've trained a little more, huh?</speech>
        </speeches>
        <speeches id="3">
            <speech>Whoa maybe I should've trained a little more, huh?</speech>
        </speeches>
        <speeches id="4">
            <speech>Haha! Told ya! My Pokémon are way too cool to lose!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Mountains, roads, or battles no matter the challenge, I keep on trekking!</speech>
        </speeches>
        <speeches id="2">
            <speech>Guess I took a wrong step But every stumble makes you stronger!</speech>
        </speeches>
        <speeches id="3">
            <speech>Guess I took a wrong step But every stumble makes you stronger!</speech>
        </speeches>
        <speeches id="4">
            <speech>Ha! Like a boulder rolling downhill, once I get going, theres no stopping me!</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>I used to hike up just to see the Clefairy dance in the moonlight... pure magic, it was.</speech>
            <speech>But ever since those Team Rocket thugs came around, everything changed.</speech>
            <speech>The dancing stopped. Maybe someone like you could find out what really happened?</speech>
        </speeches>
        <speeches id="2">
            <speech>I used to hike up just to see the Clefairy dance in the moonlight... pure magic, it was.</speech>
            <speech>But ever since those Team Rocket thugs came around, everything changed.</speech>
            <speech>The dancing stopped. Maybe someone like you could find out what really happened?</speech>
        </speeches>
    </conversation>
    <movingNpc direction="UP" id="1" name="Machop" speed="1" sprite="66" type="pokemon" x="19" y="32">
        <path>UPx3,DOWNx3</path>
        <onCollisionSpeech gap="4">Maaachop!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="LEFT" id="2" name="Tauros" speed="1" sprite="128" type="pokemon" x="27" y="37">
        <path>LEFTx2,RIGHTx2</path>
        <onCollisionSpeech gap="4">Tauuros!</onCollisionSpeech>
    </movingNpc>
    <npc direction="RIGHT" hidden="false" id="3" name="Alex" randomRotation="true" sprite="130" x="29" y="20">
        <speech>Apparently there is a different regional form of Tauros found here.</speech>
        <speech>Have you found one yet?</speech>
    </npc>
    <movingNpc direction="LEFT" id="4" name="Makuhita" speed="1" sprite="296" type="pokemon" x="58" y="32">
        <path>LEFTx2,RIGHTx2</path>
        <onCollisionSpeech gap="4">Ma-kuh-HII-TAH</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="UP" id="5" name="Clefairy" speed="1" sprite="35" type="pokemon" x="55" y="9">
        <path>UPx2,DOWNx2</path>
        <onCollisionSpeech gap="4">Cleeffaaairy!</onCollisionSpeech>
    </movingNpc>
    <npc direction="LEFT" hidden="false" id="6" name="John" randomRotation="true" sprite="25" x="67" y="29">
        <speech>5 Pokeballs... 2 Potions...</speech>
        <speech>Okay, I'm ready to catch Paras.</speech>
        <speech>Then I'll give it a TM to reduce all Pokémon to 1 HP!</speech>
    </npc>
</npcs>
