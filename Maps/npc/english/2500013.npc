<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>{COLOR=YELLOW}Please select a floor.{ENDCOLOR}</speech>
            <speech>The buttons await your input, ready to take you where you need.</speech>
        </speeches>
        <speeches id="2">
            <speech>{COLOR=GREEN}The lift console closes itself with a soft click.{ENDCOLOR}</speech>
            <speech>You'll need to activate it again if you wish to use it.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>{COLOR=RED}The door is locked. A special keycard might be needed.{ENDCOLOR}</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>{COLOR=RED}The door is locked. A special keycard might be needed.{ENDCOLOR}</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>{COLOR=RED}The door is locked. A special keycard might be needed.{ENDCOLOR}</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>{COLOR=RED}The door is locked. A special keycard might be needed.{ENDCOLOR}</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>{COLOR=RED}The door is locked. A special keycard might be needed.{ENDCOLOR}</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>{COLOR=RED}The door is locked. A special keycard might be needed.{ENDCOLOR}</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>{COLOR=RED}The door is locked. A special keycard might be needed.{ENDCOLOR}</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>You look lost, kid. Maybe I can persuade you to turn around before things get messy.</speech>
        </speeches>
        <speeches id="2">
            <speech>Alright, alright! No need to rub it in!</speech>
        </speeches>
        <speeches id="3">
            <speech>Alright, alright! No need to rub it in!</speech>
        </speeches>
        <speeches id="4">
            <speech>See? I told you this wasn't your fight.</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>You think you can just walk in here? Hah! I love taking down cocky trainers like you!</speech>
        </speeches>
        <speeches id="2">
            <speech>Ugh, I hate losing more than anything!</speech>
        </speeches>
        <speeches id="3">
            <speech>Ugh, I hate losing more than anything!</speech>
        </speeches>
        <speeches id="4">
            <speech>Tch, weaklings like you don't belong here!</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>Morality? Ethics? Bah! Progress demands sacrifices!</speech>
        </speeches>
        <speeches id="2">
            <speech>No... My research was flawless! How could this happen?</speech>
        </speeches>
        <speeches id="3">
            <speech>No... My research was flawless! How could this happen?</speech>
        </speeches>
        <speeches id="4">
            <speech>You can't stop innovation. My work will continue, no matter what!</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Glitchbert" shouldSleep="" speed="1" sprite="8" type="npc" x="7" y="9">
        <path>DOWNx3,UPx3</path>
        <onCollisionSpeech gap="4"/>
        <speech>Honestly, surprised you're even allowed up here without Surf and a bike glitch.</speech>
    </movingNpc>
    <conversation id="12">
        <speeches id="1">
            <speech>So... you're the {COLOR=RED}persistent pest{ENDCOLOR} who's been dismantling our operations floor by floor.</speech>
            <speech>I am {COLOR=PURPLE}Admin Archer{ENDCOLOR} of {COLOR=RED}Team Rocket{ENDCOLOR} - architect of {COLOR=GOLD}Project T.E.R.A.'s{ENDCOLOR} weaponization protocols.</speech>
            <speech>You've shown {COLOR=CYAN}remarkable skill{ENDCOLOR} against my subordinates, but I operate on a different level entirely.</speech>
            <speech>My specialty is {COLOR=RED}precision strikes{ENDCOLOR} and {COLOR=PURPLE}overwhelming overkill{ENDCOLOR} - I don't leave anything to chance!</speech>
            <speech>This {COLOR=GOLD}Tera Energy{ENDCOLOR} technology will revolutionize Pokemon warfare, and you won't stop that vision!</speech>
        </speeches>
        <speeches id="2">
            <speech>Calculated... yet unexpected. Your tactical approach exceeded my {COLOR=CYAN}statistical projections{ENDCOLOR}.</speech>
            <speech>My {COLOR=RED}precision strikes{ENDCOLOR} should have eliminated you with {COLOR=PURPLE}mathematical certainty{ENDCOLOR}...</speech>
            <speech>This is merely a {COLOR=GOLD}tactical withdrawal{ENDCOLOR}. {COLOR=RED}Team Rocket{ENDCOLOR} will analyze this data and return stronger!</speech>
            <speech>{COLOR=GOLD}Project T.E.R.A.{ENDCOLOR} is bigger than any single operation - you've only delayed the inevitable!</speech>
            <speech>Remember this victory, trainer... it may be your last against {COLOR=RED}Team Rocket{ENDCOLOR}.</speech>
        </speeches>
        <speeches id="3">
            <speech>My {COLOR=PURPLE}combat algorithms{ENDCOLOR} are being recalibrated after our encounter...</speech>
            <speech>You've forced me to reassess the {COLOR=GOLD}Tera Energy{ENDCOLOR} enhancement protocols entirely.</speech>
            <speech>This facility may be lost, but {COLOR=RED}Team Rocket's{ENDCOLOR} research continues at {COLOR=CYAN}multiple locations{ENDCOLOR}.</speech>
            <speech>{COLOR=GOLD}Project T.E.R.A.{ENDCOLOR} will rise again - more {COLOR=RED}precise{ENDCOLOR} and more {COLOR=PURPLE}devastating{ENDCOLOR} than before!</speech>
        </speeches>
        <speeches id="4">
            <speech>Flawless execution. My {COLOR=RED}precision calculations{ENDCOLOR} predicted this outcome with {COLOR=GOLD}99.7% accuracy{ENDCOLOR}.</speech>
            <speech>Your defeat demonstrates the true potential of {COLOR=PURPLE}Tera-enhanced{ENDCOLOR} strategic warfare!</speech>
            <speech>{COLOR=GOLD}Project T.E.R.A.{ENDCOLOR} will now proceed to its final phase - {COLOR=RED}global implementation{ENDCOLOR}!</speech>
            <speech>You should feel honored to have contributed to {COLOR=CYAN}scientific advancement{ENDCOLOR}... even in failure.</speech>
        </speeches>
        <speeches id="5">
            <speech>Hold. You haven't cleared the building of my {COLOR=CYAN}operational units{ENDCOLOR} yet.</speech>
            <speech>I don't waste time on {COLOR=RED}incomplete objectives{ENDCOLOR} - eliminate my {COLOR=PURPLE}Elite Grunts{ENDCOLOR} first.</speech>
            <speech>Only when you've proven capable of handling my {COLOR=GOLD}subordinates{ENDCOLOR} will I consider you worthy of my attention.</speech>
            <speech>Return when you've demonstrated {COLOR=RED}tactical competence{ENDCOLOR} against proper {COLOR=PURPLE}Elite-level{ENDCOLOR} opposition.</speech>
        </speeches>
    </conversation>
</npcs>
