<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Were you surprised to see me $PLAYER_NAME?</speech>
            <speech>I got bored so I came out to Hearthome for a little vacation.</speech>
            <speech>I am just as surprised to see you here, my dear!</speech>
        </speeches>
        <speeches id="2">
            <speech>Put this little glamour.</speech>
            <speech>I am sure it will look good on you. After all, I chose it.</speech>
            <speech>Bye for now.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Yes? I beg your pardon?</speech>
            <speech>Ah, oui, Contests you are here for? Currently, contests are not happening because of Covid.</speech>
            <speech>Incidentally, Fantina, the Gym Leader of Hearthome, also used to be a Contestant.</speech>
            <speech>She is, how do you say, très fantastique! Fantina being myself, of course!</speech>
            <speech>Mmm, let me see... You also seem to be très strong. Enfin, so it shall be. I wait for you at the Gym!</speech>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="6">
        <speeches id="1">
            <speech>{COLOR=YELLOW}Ah, a collector of rare flames, $PLAYER_NAME!{ENDCOLOR} Bring me Fire-type Pokémon from specific regions, and I shall award points based on their rarity.</speech>
            <speech>The trainer with the highest score shall claim the ultimate prize—{COLOR=RED}Charizardite X!{ENDCOLOR}</speech>
            <speech>These are the Pokémon I seek: {COLOR=CYAN}Slugma{ENDCOLOR} ({COLOR=GOLD}Ravaged Path{ENDCOLOR}), {COLOR=CYAN}Torkoal{ENDCOLOR} ({COLOR=GOLD}Mt. Coronet 1F1{ENDCOLOR}),</speech>
            <speech> {COLOR=CYAN}Houndour{ENDCOLOR} ({COLOR=GOLD}Wayward Cave 1F{ENDCOLOR}), {COLOR=CYAN}Vulpix{ENDCOLOR} ({COLOR=GOLD}Iron Island B1F{ENDCOLOR}),</speech>
            <speech>{COLOR=CYAN}Fletchling{ENDCOLOR} ({COLOR=GOLD}Stark Mountain{ENDCOLOR}).</speech>
            <speech>Each Pokémon's rarity determines its point value—do you have what it takes to win?</speech>
        </speeches>

        <speeches id="2">
            <speech>{COLOR=RED}The competition has ended!{ENDCOLOR}</speech>
            <speech>All scores have been recorded, and the top trainer has been declared.</speech>
            <speech>Return next time to test your luck once more!</speech>
        </speeches>

        <speeches id="3">
            <speech>{COLOR=YELLOW}Hmm, $PLAYER_NAME, you lack the necessary Pokémon!{ENDCOLOR}</speech>
            <speech>You must bring Pokémon from the correct locations to earn points.</speech>
            <speech>Hunt carefully, and return when you're ready.</speech>
        </speeches>

        <speeches id="4">
            <speech>{COLOR=GREEN}You have reached the maximum of 5 submissions!{ENDCOLOR}</speech>
            <speech>If you wish to change your entries, you may reset your selections.</speech>
        </speeches>

        <speeches id="5">
            <speech>{COLOR=RED}This one does not qualify!{ENDCOLOR}</speech>
            <speech>Your Pokémon is not from one of the accepted locations.</speech>
            <speech>Only those found in the correct habitats will be considered.</speech>
        </speeches>

        <speeches id="6">
            <speech>{COLOR=CYAN}A worthy submission!{ENDCOLOR}</speech>
            <speech>The judges have acknowledged your Pokémon and awarded points accordingly.</speech>
            <speech>You now stand a chance at claiming the {COLOR=RED}Charizardite X!{ENDCOLOR}</speech>
        </speeches>

        <speeches id="7">
            <speech>{COLOR=PURPLE}Your previous submissions have been reset.{ENDCOLOR}</speech>
            <speech>The path is open for new entries. Choose wisely this time!</speech>
        </speeches>

        <speeches id="8">
            <speech>{COLOR=YELLOW}Do you truly wish to reset your submissions, $PLAYER_NAME?{ENDCOLOR}</speech>
            <speech>This will erase all previous entries, allowing fresh Pokémon to be judged.</speech>
            <speech>Once done, it cannot be undone. Are you certain?</speech>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="7">
        <speeches id="1">
            <speech>{COLOR=YELLOW}Greetings, $PLAYER_NAME! The time has come to test your finest Numel!{ENDCOLOR}</speech>
            <speech>Present me {COLOR=CYAN}up to 5 self-caught Numel{ENDCOLOR}, captured only in {COLOR=RED}Mt. Coronet 1F1{ENDCOLOR}, and I shall judge their potential.</speech>
            <speech>The {COLOR=GOLD}strongest, most flawless{ENDCOLOR} Numel will earn its trainer the coveted {COLOR=RED}Charizardite X Mega Stone!{ENDCOLOR}</speech>
            <speech>Do you have what it takes to claim the prize?</speech>
        </speeches>

        <speeches id="2">
            <speech>{COLOR=RED}The competition has concluded!{ENDCOLOR}</speech>
            <speech>All scores have been recorded, and the strongest Numel has been crowned.</speech>
            <speech>Return next time to test your mettle once more!</speech>
        </speeches>

        <speeches id="3">
            <speech>{COLOR=YELLOW}A setback, $PLAYER_NAME!{ENDCOLOR}</speech>
            <speech>You do not have {COLOR=CYAN}enough self-caught Numel from Mt. Coronet 1F1{ENDCOLOR} for me to judge.</speech>
            <speech>Seek out more, and return when you are ready.</speech>
        </speeches>

        <speeches id="4">
            <speech>{COLOR=GREEN}You've reached the maximum of 5 submissions!{ENDCOLOR}</speech>
            <speech>If you wish to change your entries, you may reset your selections.</speech>
        </speeches>

        <speeches id="5">
            <speech>{COLOR=RED}This one does not qualify!{ENDCOLOR}</speech>
            <speech>Your Numel lacks the {COLOR=GOLD}flawless strength and potential{ENDCOLOR} we seek.</speech>
            <speech>Only the best shall be considered—bring me stronger ones!</speech>
        </speeches>

        <speeches id="6">
            <speech>{COLOR=CYAN}A worthy submission!{ENDCOLOR}</speech>
            <speech>The judges have acknowledged your Numel.</speech>
            <speech>You now stand a chance at claiming the {COLOR=RED}Charizardite X!{ENDCOLOR}</speech>
        </speeches>

        <speeches id="7">
            <speech>{COLOR=PURPLE}Your previous submissions have been reset.{ENDCOLOR}</speech>
            <speech>The path is open for new contenders. Choose wisely this time!</speech>
        </speeches>

        <speeches id="8">
            <speech>{COLOR=YELLOW}Do you truly wish to reset your submissions, $PLAYER_NAME?{ENDCOLOR}</speech>
            <speech>This will erase all previous entries, allowing fresh contenders to be judged.</speech>
            <speech>But once done, it cannot be undone. Are you certain?</speech>
        </speeches>
    </conversation>
</npcs>