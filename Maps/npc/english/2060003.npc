<npcs>
    <conversation id="1">
        <!-- First Battle (Uses Original Game Dialogues) -->
        <speeches id="1">
            <speech>{COLOR=YELLOW}You're here to challenge me?{ENDCOLOR} Heh, you’ve got guts!</speech>
            <speech>Trainers who want to succeed need [CYAN]rock-solid determination[].</speech>
            <speech>My Pokémon are tough as boulders, and my battle strategy? Just as unshakable.</speech>
            <speech>Let’s see if your team has what it takes to break through the defense of [GOLD]Rock-type Pokémon!{ENDCOLOR}</speech>
        </speeches>
        <speeches id="2">
            <speech>{COLOR=GREEN}Whoa! You actually cracked my defenses!{ENDCOLOR}</speech>
            <speech>Alright, you’ve earned this—take the [GOLD]Boulder Badge!{ENDCOLOR}</speech>
            <speech>Oh, and here’s [CYAN]TM076—Rock Blast[]. It’s a move that hurls rocks in quick succession!</speech>
            <speech>Use it wisely, and maybe one day, your defense will be as solid as mine!</speech>
        </speeches>
        <speeches id="3">
            <speech>{COLOR=RED}Ha! Looks like you weren’t ready to withstand the pressure!{ENDCOLOR}</speech>
            <speech>Come back when you’ve trained harder—only then will you stand a chance against me!</speech>
        </speeches>
        <speeches id="4">
            <speech>{COLOR=YELLOW}Not ready yet? That’s fine.{ENDCOLOR}</speech>
            <speech>The mountains have stood for millions of years—they’re not going anywhere, and neither am I.</speech>
            <speech>Come back when you're ready to test your strength again.</speech>
        </speeches>
        <!-- Repeated Battle (Tougher, More Competitive) -->
        <speeches id="5">
            <speech>{COLOR=GOLD}Back for more?{ENDCOLOR} Good! True strength isn’t just about winning once—it’s about endurance!</speech>
            <speech>[CYAN]Rock doesn’t move unless forced[], and I don’t plan on budging easily.</speech>
            <speech>If you want to beat me again, you’d better hit harder than last time!</speech>
        </speeches>
        <speeches id="6">
            <speech>{COLOR=GREEN}Impressive! You’ve chipped away at my defenses once again!{ENDCOLOR}</speech>
            <speech>[GOLD]$TOTAL_VICTORY[] wins against me... and [CYAN]$CONSECUTIVE[] in a row?!</speech>
            <speech>You’re like a rockslide, unstoppable once you build momentum!</speech>
        </speeches>
        <speeches id="7">
            <speech>{COLOR=RED}Hah! You thought you had me beat?!{ENDCOLOR}</speech>
            <speech>A mountain doesn’t crumble from a single hit—it stands strong against the elements!</speech>
            <speech>Train harder, and come back when you’re ready for the real challenge!</speech>
        </speeches>
        <speeches id="8">
            <speech>{COLOR=YELLOW}What, no battle?{ENDCOLOR} Feeling a little shaky?</speech>
            <speech>That’s fine, but don’t wait too long—the longer you delay, the tougher my strategy gets!</speech>
        </speeches>
        <speeches id="9">
            <speech>{COLOR=GOLD}Another rematch already? Heh, patience is key!{ENDCOLOR}</speech>
            <speech>Even the strongest boulder needs time to weather the storm.</speech>
            <speech>Come back in [CYAN]$DURATION[], and I’ll be ready to face you again!</speech>
        </speeches>
        <!-- Special Condition: Battle Requirement Not Met -->
        <speeches id="10">
            <speech>{COLOR=RED}Whoa, slow down! You’re not even properly prepared.{ENDCOLOR}</speech>
            <speech>I only battle Trainers who have [CYAN]at least 3 Rock-type Pokémon[] in their team.</speech>
            <speech>Come back when your team is as sturdy as the mountains!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>This Gym's built like a fortress just like Brock's defense!</speech>
        </speeches>
        <speeches id="2">
            <speech>Guess even solid rock can crack under pressure...</speech>
        </speeches>
        <speeches id="3">
            <speech>Guess even solid rock can crack under pressure...</speech>
        </speeches>
        <speeches id="4">
            <speech>See? A strong foundation is everything whether in battle or construction!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>I've climbed mountains tougher than this Gym. Think you can handle me?</speech>
        </speeches>
        <speeches id="2">
            <speech>Guess I slipped on some loose gravel...better watch your footing too!</speech>
        </speeches>
        <speeches id="3">
            <speech>Guess I slipped on some loose gravel...better watch your footing too!</speech>
        </speeches>
        <speeches id="4">
            <speech>Solid as a boulder! That's how you stand your ground!</speech>
        </speeches>
    </conversation>
</npcs>
