<npcs>
    <conversation id="4">
        <!-- First Battle (Uses Original Game Dialogues) -->
        <speeches id="1">
            <speech>Hello... Lovely weather, isn't it? It's so pleasant...</speech>
            <speech>...Oh, dear... I must have dozed off. Welcome to the {COLOR=GREEN}Celadon Gym!{ENDCOLOR}</speech>
            <speech>My name is {COLOR=GREEN}Erika{ENDCOLOR}, and I am the leader of this Gym.</speech>
            <speech>I am a student of the art of {COLOR=GREEN}flower arranging{ENDCOLOR}, and my Pokémon are of the {COLOR=GREEN}Grass-type{ENDCOLOR}.</speech>
            <speech>Oh? I’m sorry, I had no idea that you wished to challenge me.</speech>
            <speech>Very well, but I shall not lose!</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh! I concede defeat! You are remarkably strong...</speech>
            <speech>In recognition of your skill, I confer upon you the {COLOR=GOLD}Rainbow Badge!{ENDCOLOR}</speech>
            <speech>The Rainbow Badge will make Pokémon up to {COLOR=CYAN}Level 50{ENDCOLOR} obey you!</speech>
            <speech>Please, also take this TM. It contains {COLOR=GREEN}Giga Drain{ENDCOLOR}. Use it wisely.</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh my... It seems your journey has just begun.</speech>
            <speech>The beauty of battle is not in winning, but in growth. Come back when your roots are stronger.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ah, I see... You wish to challenge me, but perhaps another time?</speech>
            <speech>Like flowers, battles bloom best when the moment is just right.</speech>
        </speeches>
        <!-- Repeated Battle (More Lore-Intensive & Tougher) -->
        <speeches id="5">
            <speech>Ah, so you return... How many petals must fall before you are satisfied?</speech>
            <speech>{COLOR=GREEN}The forest does not fear the storm; it simply endures.{ENDCOLOR}</speech>
            <speech>Let us see if your strength has grown, or if you will wither before me!</speech>
        </speeches>
        <speeches id="6">
            <speech>Incredible... You have cut through my vines yet again.</speech>
            <speech>This marks your {COLOR=GOLD}$TOTAL_VICTORY{ENDCOLOR} victory against me, and {COLOR=CYAN}$CONSECUTIVE{ENDCOLOR} in a row.</speech>
            <speech>You are a true force of nature, bending even the strongest roots in your path.</speech>
        </speeches>
        <speeches id="7">
            <speech>Even the mightiest tree falls when it forgets its roots.</speech>
            <speech>You have lost, but do not despair. The seasons turn, and with them, growth returns.</speech>
            <speech>Next time, come prepared... lest you be buried beneath the vines once more.</speech>
        </speeches>
        <speeches id="8">
            <speech>Not yet, I see? Very well... Like a garden left untended, I shall wait.</speech>
            <speech>Return when you are ready, and I shall be here to test your resolve.</speech>
        </speeches>
        <speeches id="9">
            <speech>Oh? I see that you have already battled me recently. You must allow time for the roots to settle.</speech>
            <speech>Come back in {COLOR=YELLOW}$DURATION{ENDCOLOR}—then, we shall see if your strength has truly blossomed.</speech>
        </speeches>
        <!-- Special Condition: Battle Requirement Not Met -->
        <speeches id="10">
            <speech>Oh dear, it seems you lack the harmony of nature.</speech>
            <speech>To challenge me again, you must have {COLOR=GREEN}at least 3 Grass-type Pokémon{ENDCOLOR} in your team.</speech>
            <speech>Return when your heart aligns with the forest, and I shall grant you battle.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>I love flowers! They're pretty... and dangerous too!</speech>
        </speeches>
        <speeches id="2">
            <speech>Aww... my petals got plucked..</speech>
        </speeches>
        <speeches id="3">
            <speech>Aww... my petals got plucked..</speech>
        </speeches>
        <speeches id="4">
            <speech>See? Even little buds like me can bloom into champions!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Every rose has its thorns... and I know how to use mine!</speech>
        </speeches>
        <speeches id="2">
            <speech>I guess my petals wilted this time...</speech>
        </speeches>
        <speeches id="3">
            <speech>I guess my petals wilted this time...</speech>
        </speeches>
        <speeches id="4">
            <speech>Beautiful and powerful that's what Grass Pokémon are all about!</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Grass Pokémon are calm and gentle... until they aren't!</speech>
        </speeches>
        <speeches id="2">
            <speech>I guess I was a little too relaxed...</speech>
        </speeches>
        <speeches id="3">
            <speech>I guess I was a little too relaxed...</speech>
        </speeches>
        <speeches id="4">
            <speech>Nature's balance... always in our favor!</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>Flowers may look delicate, but underestimate them and you'll get tangled up!</speech>
        </speeches>
        <speeches id="2">
            <speech>Looks like I need to prune my strategy...</speech>
        </speeches>
        <speeches id="3">
            <speech>Looks like I need to prune my strategy...</speech>
        </speeches>
        <speeches id="4">
            <speech>A flawless victory like a garden in full bloom!</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>Erika's Pokémon are like her garden beautiful, calm, and full of surprises!</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh no! I forgot to water my team... metaphorically speaking.</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh no! I forgot to water my team... metaphorically speaking.</speech>
        </speeches>
        <speeches id="4">
            <speech>Just like plants, Grass Pokémon thrive when you care for them properly. I think Erika taught me that most of all.</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>Erika's Pokémon don't just battle...they thrive. She's taught me that patience turns growth into strength.</speech>
        </speeches>
        <speeches id="2">
            <speech>Looks like I'm still just a seedling...</speech>
        </speeches>
        <speeches id="3">
            <speech>Looks like I'm still just a seedling...</speech>
        </speeches>
        <speeches id="4">
            <speech>Erika's strength isn't just her Pokémon it's her bond with them. That's what I aim to achieve too.</speech>
        </speeches>
    </conversation>
</npcs>
