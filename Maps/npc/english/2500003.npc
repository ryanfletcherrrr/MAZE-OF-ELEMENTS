<npcs>
    <conversation id="1">
        <!-- First Battle (Classic Sabrina Style) -->
        <speeches id="1">
            <speech>{COLOR=PINK}I knew you would come...{ENDCOLOR}</speech>
            <speech>Foresight is a gift... or a curse. I have seen every possibility, yet I must test them all.</speech>
            <speech>My name is {COLOR=PINK}Sabrina{ENDCOLOR}, the leader of Saffron Gym.</speech>
            <speech>My {COLOR=CYAN}Psychic-type Pokémon{ENDCOLOR} see what you cannot, strike before you move, and control the battlefield itself.</speech>
            <speech>Let us see if your mind is strong enough to withstand the unseen!</speech>
        </speeches>
        <speeches id="2">
            <speech>...Fascinating.</speech>
            <speech>You have overcome my visions and altered destiny itself.</speech>
            <speech>Take this—the {COLOR=GOLD}Marsh Badge{ENDCOLOR}. With it, Pokémon up to {COLOR=CYAN}Level 70{ENDCOLOR} shall obey you.</speech>
            <speech>And this TM… {COLOR=CYAN}Expanding Force{ENDCOLOR}. A move that grows stronger when the mind dominates the battlefield.</speech>
            <speech>Perhaps you, too, are capable of reaching a higher state of being.</speech>
        </speeches>
        <speeches id="3">
            <speech>Fate has spoken, and you were not yet ready.</speech>
            <speech>Train your mind, sharpen your awareness, and return when the outcome changes.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ah... You hesitate. Doubt clouds your mind.</speech>
            <speech>Return when your spirit is clear, and I shall test your strength once more.</speech>
        </speeches>
        <!-- Repeated Battle (More Intense & Thematic) -->
        <speeches id="5">
            <speech>So you return, seeking to rewrite fate once more?</speech>
            <speech>Very well… {COLOR=CYAN}The mind is limitless, evolving beyond what we can comprehend.{ENDCOLOR}</speech>
            <speech>Show me if your thoughts have surpassed their previous limits.</speech>
        </speeches>
        <speeches id="6">
            <speech>Curious... Your power continues to grow.</speech>
            <speech>{COLOR=GOLD}$TOTAL_VICTORY{ENDCOLOR} victories... and {COLOR=CYAN}$CONSECUTIVE{ENDCOLOR} in succession.</speech>
            <speech>Your presence bends probability itself. I must continue to study your potential.</speech>
        </speeches>
        <speeches id="7">
            <speech>Even the strongest minds face defeat.</speech>
            <speech>Do not despair—failure is but another vision of the future, one that can still be changed.</speech>
            <speech>Return when your resolve has strengthened.</speech>
        </speeches>
        <speeches id="8">
            <speech>You are not yet ready? I see…</speech>
            <speech>When the moment is right, step forward. I will be waiting.</speech>
        </speeches>
        <speeches id="9">
            <speech>The mind must rest to sharpen its senses.</speech>
            <speech>Return in {COLOR=YELLOW}$DURATION{ENDCOLOR}, and we shall see if your will has strengthened.</speech>
        </speeches>
        <!-- Special Condition: Battle Requirement Not Met -->
        <speeches id="10">
            <speech>Ah… You seek another battle, yet your mind is unfocused.</speech>
            <speech>To face me again, you must have {COLOR=CYAN}at least 3 Psychic-type Pokémon{ENDCOLOR} in your team.</speech>
            <speech>When you are ready to challenge destiny itself, return to me.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Shadows whisper in this gym. My Psychic-types echo their chants. Can you face the void?</speech>
        </speeches>
        <speeches id="2">
            <speech>The darkness recoiled! Your mind pierced mine. I'll call it back.</speech>
        </speeches>
        <speeches id="3">
            <speech>The darkness recoiled! Your mind pierced mine. I'll call it back.</speech>
        </speeches>
        <speeches id="4">
            <speech>Sabrina's gloom lifts me! The abyss claims you. My curse holds strong!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Your thoughts ripple too loud. My Psychic-types sense every flaw. Can you shield your mind?</speech>
        </speeches>
        <speeches id="2">
            <speech>My vision blurred! You've clouded my focus. I'll meditate deeper.</speech>
        </speeches>
        <speeches id="3">
            <speech>My vision blurred! You've clouded my focus. I'll meditate deeper.</speech>
        </speeches>
        <speeches id="4">
            <speech>Your fate's sealed! Sabrina taught me well. My mind outshines yours!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>I see your next move. My Pokémon bend reality. Ready to lose yourself?</speech>
        </speeches>
        <speeches id="2">
            <speech>A blind spot! Your will broke mine. I'll realign my aura.</speech>
        </speeches>
        <speeches id="3">
            <speech>A blind spot! Your will broke mine. I'll realign my aura.</speech>
        </speeches>
        <speeches id="4">
            <speech>Clarity reigns! Sabrina's power flows in me. Your future dims!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>I've honed my mind and team. Sabrina's best pupil stands here. Ready to be outclassed?</speech>
        </speeches>
        <speeches id="2">
            <speech>Strategy failed! You've got skill. I'll sharpen my edge.</speech>
        </speeches>
        <speeches id="3">
            <speech>Strategy failed! You've got skill. I'll sharpen my edge.</speech>
        </speeches>
        <speeches id="4">
            <speech>Perfection prevails! Sabrina's training shines. You're no match</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>My Psychic-types are flawless. I've mastered Sabrina's art. Can you keep up?</speech>
        </speeches>
        <speeches id="2">
            <speech>Outmaneuvered! You're sharper than I thought. I'll adapt.</speech>
        </speeches>
        <speeches id="3">
            <speech>Outmaneuvered! You're sharper than I thought. I'll adapt.</speech>
        </speeches>
        <speeches id="4">
            <speech>Victory's mine! Sabrina's lessons rule. You're a step behind!</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Your fears pulse too clear. My Psychic-types prey on doubt. Can you resist?</speech>
        </speeches>
        <speeches id="2">
            <speech>My focus shattered! You've masked your mind. I'll pierce it next time.</speech>
        </speeches>
        <speeches id="3">
            <speech>My focus shattered! You've masked your mind. I'll pierce it next time.</speech>
        </speeches>
        <speeches id="4">
            <speech>Sabrina's will flows through me! Your thoughts bend. I've won!</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>Spirits drift through these walls. My Pokémon weave their dread. Feel their stare yet?</speech>
        </speeches>
        <speeches id="2">
            <speech>A flicker broke my trance!   You've stirred the unseen. I'll bind it tighter.</speech>
        </speeches>
        <speeches id="3">
            <speech>A flicker broke my trance!   You've stirred the unseen. I'll bind it tighter.</speech>
        </speeches>
        <speeches id="4">
            <speech>The ether bows to me! Sabrina's power feeds my hex. You're marked now!</speech>
        </speeches>
    </conversation>
</npcs>
