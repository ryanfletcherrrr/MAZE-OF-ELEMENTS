<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Congratulations! You beat our five contest trainers! You just earned a fabulous prize! A battle with me!</speech>
            <speech>By the way, how would you like to join Team Rocket? We're a group of professional criminals specializing in Pokémon!</speech>
            <speech>Want to join? Are you sure?</speech>
            <speech>Come on, join us!</speech>
            <speech>I'm telling you to join! OK, you need convincing! I'll make you an offer you can't refuse!</speech>
        </speeches>
        <speeches id="2">
            <speech>You... Thank you... Now my journey can come to an end...</speech>
        </speeches>
        <speeches id="3">
            <speech>You... Thank you... Now my journey can come to an end...</speech>
        </speeches>
        <speeches id="4">
            <speech>I won again... My journey still isn't over...</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>It's not like I'm calling to the mountains. It's the mountains that are calling to me!</speech>
        </speeches>
        <speeches id="2">
            <speech>I can hear a sobbing voice... The mountains are weeping...</speech>
        </speeches>
        <speeches id="3">
            <speech>I can hear a sobbing voice... The mountains are weeping...</speech>
        </speeches>
        <speeches id="4">
            <speech>A man who is loved by the mountains... Guilty as charged...</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Battling is like fashion. You need style, grace, and perfect execution!</speech>
        </speeches>
        <speeches id="2">
            <speech>What?! That wasn't supposed to happen... Maybe I need a battle makeover</speech>
        </speeches>
        <speeches id="3">
            <speech>What?! That wasn't supposed to happen... Maybe I need a battle makeover</speech>
        </speeches>
        <speeches id="4">
            <speech>Flawless, as expected! Beauty and strength make a perfect combination!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>I may be young, but my Pokémon are tough! Get ready to lose!</speech>
        </speeches>
        <speeches id="2">
            <speech>Wait but I totally thought I had that one!</speech>
        </speeches>
        <speeches id="3">
            <speech>Wait but I totally thought I had that one!</speech>
        </speeches>
        <speeches id="4">
            <speech>Ha! Told ya! Maybe when you're older, you'll be as good as me!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Nothing beats a good hike and a good battle! Let's see if you can handle the climb!</speech>
        </speeches>
        <speeches id="2">
            <speech>Looks like I've hit a rocky road but that's just part of the journey!</speech>
        </speeches>
        <speeches id="3">
            <speech>Looks like I've hit a rocky road but that's just part of the journey!</speech>
        </speeches>
        <speeches id="4">
            <speech>Ha! A strong foundation makes all the difference both in hiking and battling!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>My Pokémon are super-duper strong! you're gonna lose for sure!</speech>
        </speeches>
        <speeches id="2">
            <speech>Waaah! No fair! you're just a big meanie!</speech>
        </speeches>
        <speeches id="3">
            <speech>Waaah! No fair! you're just a big meanie!</speech>
        </speeches>
        <speeches id="4">
            <speech>Yay, yay! I won! I'm the bestest trainer ever!</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Don't let my sweet smile fool you. I'm a fierce competitor!</speech>
        </speeches>
        <speeches id="2">
            <speech>Oops! I guess I wasn't as prepared as I thought, but that's okay, I'll try again!</speech>
        </speeches>
        <speeches id="3">
            <speech>Oops! I guess I wasn't as prepared as I thought, but that's okay, I'll try again!</speech>
        </speeches>
        <speeches id="4">
            <speech>Hehe, I told you I was tough! Cute and strong that's the best combo!</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>I've climbed mountains and crossed valleys this'll be a piece of cake!</speech>
        </speeches>
        <speeches id="2">
            <speech>Hah! Well, looks like I still have a ways to go... even the toughest hikers stumble sometimes.</speech>
        </speeches>
        <speeches id="3">
            <speech>Hah! Well, looks like I still have a ways to go... even the toughest hikers stumble sometimes.</speech>
        </speeches>
        <speeches id="4">
            <speech>Just like the path to the summit steady and strong, I made it to the top!</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Trapinch" speed="1" sprite="328" type="pokemon" x="3" y="7">
        <path>DOWNx2,UPx2</path>
        <onCollisionSpeech gap="4">Traaa!</onCollisionSpeech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="2" name="Emma" randomRotation="true" sprite="82" x="15" y="11">
        <speech>Have you seen any Trapinch around lately?</speech>
        <speech>Trying to catch one because Flygon is the best Dragon-type Pokémon!</speech>
    </npc>
    <movingNpc direction="RIGHT" id="3" name="Cacnea" speed="1" sprite="331" type="pokemon" x="37" y="23">
        <path>RIGHTx4,LEFTx4</path>
        <onCollisionSpeech gap="4">Caacneaaaa!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="4" name="Joltik" speed="1" sprite="595" type="pokemon" x="23" y="6">
        <path>RIGHTx2,LEFTx2</path>
        <onCollisionSpeech gap="4">Jooolt!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="DOWN" id="5" name="Liam" speed="1" sprite="21" type="npc" x="61" y="28">
        <path>LEFTx6,RIGHTx6</path>
        <onCollisionSpeech gap="4"/>
        <speech>Sorry, kid.</speech>
        <speech>Gotta get these laps in if I wanna impress Misty and earn my shot at the Cerulean Gym!</speech>
    </movingNpc>
    <npc direction="RIGHT" hidden="false" id="6" name="Rafiki" randomRotation="false" sprite="20" x="97" y="14">
        <speech>Oh yes, the past can hurt.</speech>
        <speech>But the way I see it, you can either run from it or learn from it.</speech>
    </npc>
</npcs>
