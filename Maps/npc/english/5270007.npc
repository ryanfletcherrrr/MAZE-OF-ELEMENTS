<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Well haylo there! My name's Anton, and I have a very rare gift - the ability to teach Pokémon moves that they cannot learn by simply levelling up.</speech>
            <speech>I believe in sharing, so I'm willing to help your Pokémon learn some of those moves too.</speech>
            <speech>That being said, I need something in return too. Fair trade and all, you know.</speech>
            <speech>So, here's my offer - Tutor Move Voucher for one move. Speak to me again, if you'd like to make the trade.</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh ho ho! I see you're in possession of a Tutor Move Voucher. Would you like to trade them for my skills?</speech>
        </speeches>
        <speeches id="3">
            <speech>That's a crying shame. I thought we could've come to some mutually-benficial agreement.</speech>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>Hey there. My name's Saito, and I've got the rare talent of helping Pokémon learn moves they would only have learnt via breeding.</speech>
            <speech>I'm willing to help your Pokémon learn their 'egg' moves too, if you want.</speech>
            <speech>But, my help comes at a price. I want a Egg Move Voucher every time you want a Pokémon to learn an egg move.</speech>
            <speech>Man's gotta do something to fulfill his desires, you know.</speech>
            <speech>Come back to me when you've got two Egg Move Voucher, and I'll help your Pokémon learn egg moves.</speech>
        </speeches>
        <speeches id="2">
            <speech>Ooh, so you have a Egg Move Voucher. Say, you want one of your Pokémon to learn an 'egg move'?</speech>
        </speeches>
        <speeches id="3">
            <speech>Alrighty, no worries. Come back whenever you need my help.</speech>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>Hey there. My name's Kaito, and I've got the rare talent of helping Pokémon relearn moves that they have forgotten.</speech>
            <speech>I'm willing to help your Pokémon relearn moves too, if you want.</speech>
            <speech>But, my help comes at a price. I want one Heart Scale every time you want a Pokémon to relearn a move.</speech>
            <speech>Man's gotta do something to fulfill his desires, you know.</speech>
            <speech>Come back to me when you've got a Heart Scale, and I'll help your Pokémon relearn their moves.</speech>
        </speeches>
        <speeches id="2">
            <speech>Ooh, so you have a Heart Scale. Say, you want one of your Pokémon to relearn a move they've forgotten?</speech>
        </speeches>
        <speeches id="3">
            <speech>Alrighty, no worries. Come back whenever you need my help.</speech>
        </speeches>
    </conversation>
</npcs>
