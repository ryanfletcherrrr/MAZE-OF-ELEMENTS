<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>{COLOR=YELLOW}Please select a floor.{ENDCOLOR}</speech>
        </speeches>
        <speeches id="2">
            <speech>{COLOR=GREEN}The lift console closes itself with a soft click.{ENDCOLOR}</speech>
            <speech>You'll need to activate it again if you wish to use it.</speech>
        </speeches>
        <speeches id="3">
            <speech>{COLOR=RED}The lift refuses to budge—it seems to require a special key.{ENDCOLOR}</speech>
            <speech>Perhaps a Rocket Grunt nearby has what you need...</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Hah! A little rat sneaking around our hideout?</speech>
            <speech>Guess I'll have to put you in your place!</speech>
        </speeches>
        <speeches id="2">
            <speech>Ugh... You got lucky this time...</speech>
            <speech>Wait... Oh no! The key—!</speech>
        </speeches>
        <speeches id="3">
            <speech>Urgh... My head hurts... What was I saying?</speech>
            <speech>Forget it, just get out of my sight!</speech>
        </speeches>
        <speeches id="4">
            <speech>Ha! You really thought you could beat me?</speech>
            <speech>Face it, kid. You’ll never reach the boss!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>I live for battles like this!</speech>
        </speeches>
        <speeches id="2">
            <speech>Tch... I need to train more.</speech>
        </speeches>
        <speeches id="3">
            <speech>Tch... I need to train more.</speech>
        </speeches>
        <speeches id="4">
            <speech>Guess I'll be taking your Pokémon now!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>I don't need a reason to take you down!</speech>
        </speeches>
        <speeches id="2">
            <speech>Ugh... I really hate losing.</speech>
        </speeches>
        <speeches id="3">
            <speech>Ugh... I really hate losing.</speech>
        </speeches>
        <speeches id="4">
            <speech>Too slow, too weak! Team Rocket is unstoppable!</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>You must face off against my super-powered-up Pokémon!</speech>
        </speeches>
        <speeches id="2">
            <speech>Th-this isn't beyond the anticipated results! This is still a predictable result!</speech>
        </speeches>
        <speeches id="3">
            <speech>Th-this isn't beyond the anticipated results! This is still a predictable result!</speech>
        </speeches>
        <speeches id="4">
            <speech>Your Pokémon have a strength beyond the power of science.</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>So… You’ve managed to find your way here.</speech>
            <speech>I must say, I admire your persistence.</speech>
            <speech>But persistence alone is not strength.</speech>
            <speech>You are meddling in matters far beyond your understanding.</speech>
            <speech>Very well. If you insist on standing in Team Rocket’s way… I shall show you the true meaning of power.</speech>
        </speeches>
        <speeches id="2">
            <speech>Hmph… So, you have some skill after all.</speech>
            <speech>Perhaps I underestimated you.</speech>
            <speech>No matter… This is but a minor setback.</speech>
            <speech>Team Rocket will continue to grow, and soon, no one will dare to oppose us.</speech>
            <speech>We shall meet again.</speech>
        </speeches>
        <speeches id="3">
            <speech>Foolish child… You never stood a chance.</speech>
            <speech>Power is not something you simply acquire. It is earned through domination.</speech>
            <speech>Know your place, and stay out of Team Rocket’s way.</speech>
        </speeches>
        <speeches id="4">
            <speech>You again? Hmph. I have no time for meaningless chatter.</speech>
            <speech>Team Rocket’s ambitions will not be stopped by a mere child.</speech>
            <speech>Take your insignificant victory and leave.</speech>
        </speeches>
    </conversation>
    <npc direction="LEFT" hidden="false" id="1" name="Donatello" randomRotation="true" sprite="58" x="14" y="38">
        <speech>Me and my brothers? We're planning our escape.</speech>
        <speech>You'd better bail too, dude.</speech>
        <speech>Things are about to get messy.</speech>
    </npc>
    <npc direction="RIGHT" hidden="false" id="2" name="Leonardo" randomRotation="false" sprite="58" x="11" y="39">
        <speech>Alright, brothers, the elevators our ticket out I got us a copy of the key card!</speech>
        <speech>Whoa, you're gonna take on the boss? Bold move, dude.</speech>
        <speech>We'll slip out while he's busy with you. appreciate the assist!</speech>
    </npc>
    <npc direction="UP" hidden="false" id="3" name="Raphael" randomRotation="true" sprite="58" x="13" y="40">
        <speech>I'm rolling with this guy.</speech>
        <speech>He's going after the boss, and I'm all in! Let me at him!</speech>
    </npc>
    <movingNpc direction="RIGHT" id="4" name="Michelangelo" speed="1" sprite="58" type="npc" x="11" y="36">
        <path>RIGHTx4,LEFTx4</path>
        <onCollisionSpeech gap="4"/>
        <speech>Yo, what's up, dude?</speech>
        <speech>Craving some pizza?</speech>
        <speech>Tag along we're partying all night long!</speech>
    </movingNpc>
</npcs>
