<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Just...what...is this...</speech>
            <speech>D-d-did Leader Maxie know that it would happen like this?!.</speech>
            <speech>Oh, shut it!</speech>
            <speech>Just what is going on around here?!</speech>
            <speech>Ahyahya! Even I, Tabitha, am I feeling all discombobulated. Leader Maxie!</speech>
            <speech>What are you trying to do?! ...To the world. ...To us.</speech>
            <speech>...To Team Magma. This can never, ever be forgiven!</speech>
            <speech>Ahya. Are you one of my fans? You're that same kid who's always popping up!</speech>
            <speech>I can't believe you're even following me around in my private life.</speech>
            <speech>Ahyahya! Well, that's all right!</speech>
            <speech>Maybe I'll just clear up this intensely unpleasant feeling I have welling up inside of me...</speech>
            <speech>By beating you to a pulp!</speech>
        </speeches>
        <speeches id="2">
            <speech>Hah... Hah... Ahya... Ahya... Good grief...</speech>
            <speech>Today has been absolutely nothing but stress! I can't take it... It's so unpleasant!</speech>
            <speech>You better listen, you stress-inducing child. When Leader Maxie's plan has been executed, twilight will fall upon the world.</speech>
            <speech>The Primordial Sea will be changed to Desolate Land. In other words, all life... Child!</speech>
            <speech>What do you think you can do in the face of that which is to come?</speech>
            <speech>I'm looking forward to seeing you rush into action! Ahya! Ahyahyahyahya!</speech>
            <speech>The Leader should be headed for Mt. Pyre... Which means I...</speech>
        </speeches>
        <speeches id="3">
            <speech>Hah... Hah... Ahya... Ahya... Good grief...</speech>
            <speech>Today has been absolutely nothing but stress! I can't take it... It's so unpleasant!</speech>
            <speech>You better listen, you stress-inducing child. When Leader Maxie's plan has been executed, twilight will fall upon the world.</speech>
            <speech>The Primordial Sea will be changed to Desolate Land. In other words, all life... Child!</speech>
            <speech>What do you think you can do in the face of that which is to come?</speech>
            <speech>I'm looking forward to seeing you rush into action! Ahya! Ahyahyahyahya!</speech>
            <speech>The Leader should be headed for Mt. Pyre... Which means I...</speech>
        </speeches>
        <speeches id="4">
            <speech>Now go away!</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>We are Team Magma.</speech>
            <speech>We appear wherever anything rare is found.</speech>
        </speeches>
        <speeches id="2">
            <speech>But... But you are just a kid...</speech>
        </speeches>
        <speeches id="3">
            <speech>But... But you are just a kid...</speech>
        </speeches>
        <speeches id="4">
            <speech>Now go away!</speech>
        </speeches>
        <speeches id="5">
            <speech>But... But you are just a kid...</speech>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>Huh? What's a kid doing here?</speech>
        </speeches>
        <speeches id="2">
            <speech>But... But you are just a kid...</speech>
        </speeches>
        <speeches id="3">
            <speech>But... But you are just a kid...</speech>
        </speeches>
        <speeches id="4">
            <speech>Now go away!</speech>
        </speeches>
        <speeches id="5">
            <speech>But... But you are just a kid...</speech>
        </speeches>
    </conversation>

    <conversation id="4">
        <speeches id="1">
            <speech>Thank you, young one. You helped save us from quite a pinch!</speech>
            <speech>Those thieves what could they gain by investigating weather patters from thousands of years ago?</speech>
            <speech>But as for the data those ruffians were seeking...</speech>
            <speech>They wanted to know about the extreme weather conditions that rules thousands of years ago.</speech>
            <speech>Because of those two super-ancient Pokémon.</speech>
            <speech>One of that pair was the legendary Pokémon we know as Mighty Groudon.</speech>
            <speech>By absorbing the energy that abounds in the natural world, Groundon transformed itself-or so its said.</speech>
            <speech>The transformed Groudon caused so much disturbance to the weather patterns that the world grew barren.</speech>
            <speech>The heat it created dried up the oceans, and the parched land covered more and more of the planet.</speech>
            <speech>We refer to this transformation as Primal Reversion...</speech>
            <speech>The result of this terror we call Primal Groudon</speech>
            <speech>Primal Reversion is a possible form of Evolution like and yet not like Mega Evolution...</speech>
            <speech>Or so it has been theorized. But it has never been achieved by any Pokémon other than the super-ancient legendary Pokémon,</speech>
            <speech>and so it has been largely forgotten as a method of evolution.</speech>
            <speech>Oh, but I am forgetting myself! First I must thank you properly for your help.</speech>
            <speech>Come downstairs and meet me and I will reward you something.</speech>
        </speeches>
    </conversation>

    <conversation id="5">
        <speeches id="1">
            <speech>I will be heading downstairs now, but talk to us when you have a moment.</speech>
            <speech>We want to thank you as well.</speech>
        </speeches>
    </conversation>

    <conversation id="6">
        <speeches id="1">
            <speech>Hello, $PLAYER_NAME. I'm Professor Cedric Greenwood. Our current crisis requires the unique properties of Treecko Scales.</speech>
            <speech>We've discovered that scales from certain Treeckos can be used to create a device that might calm the rampaging Mega Sceptile.</speech>
            <speech>The Treeckos we need must be:</speech>
            <speech>- Self-caught in the Hoenn Safari, carrying no items.</speech>
            <speech>- Possessing total IVs of 100 or more and of Ultra Rare quality.</speech>
            <speech>- At least level 1 and originally caught by you, ensuring their affinity with you aids in the scale's potency.</speech>
            <speech>Can you bring such a Treecko to me? We'll extract its scales carefully, ensuring no harm comes to your Treecko.</speech>
        </speeches>
        <speeches id="2">
            <speech>It's good to see you again, $PLAYER_NAME. Do you have a Treecko that meets our criteria for the scale extraction?</speech>
            <speech>The criteria for the Treecko are as follows:</speech>
            <speech>- Caught by you in the Hoenn Safari, with no held items.</speech>
            <speech>- Total IVs of 100 or more, of Ultra Rare status.</speech>
            <speech>- And at least level 1, ensuring its strong connection with you.</speech>
            <speech>Wonderful, you've brought a suitable Treecko! With your permission, we'll extract the scales now. This process is gentle and your Treecko will be fine afterward. Shall we proceed?</speech>
        </speeches>
        <speeches id="3">
            <speech>I understand, $PLAYER_NAME. Decisions like these take time. Your Treecko's well-being is our top priority. Come back when you're ready, and we'll be here to assist you.</speech>
        </speeches>
        <speeches id="4">
            <speech>Thank you for your trust, $PLAYER_NAME. Let's begin the scale extraction process.</speech>
            <speech>...The process is complete. Your Treecko is safe and healthy, and here are the scales we've collected. They're precisely what we need for the lightning condenser.</speech>
            <speech>With these scales, we're one step closer to resolving the crisis with Mega Sceptile. Your help has been crucial to our efforts.</speech>
        </speeches>
    </conversation>

    <conversation id="7">
        <speeches id="1">
            <speech>Welcome back, $PLAYER_NAME. The creation of the lightning condenser is a critical step in our effort to stabilize the weather and soothe Mega Sceptile.</speech>
            <speech>Treecko Scales are essential for their unique ability to harness and distribute electrical energy harmoniously.</speech>
        </speeches>
        <speeches id="2">
            <speech>Impressive, you've managed to gather all the necessary Treecko Scales! With these, we can commence crafting the lightning condenser.</speech>
            <speech>This task requires precision and understanding of the natural balance. Are you prepared to see this through to the end?</speech>
        </speeches>
        <speeches id="3">
            <speech>It's understandable to take a moment to consider. The balance of nature is in our hands, after all.</speech>
            <speech>Take the time you need. The urgency of our task does not outweigh the necessity of thoughtful action. I'll be here when you're ready.</speech>
        </speeches>
        <speeches id="4">
            <speech>Then let's proceed with the utmost care and respect for the forces we're working with.</speech>
            <speech>...The condenser is complete. Its design is inspired by the very essence of Hoenn's natural wonders and the Treecko Scales you've provided.</speech>
            <speech>This device represents a hope not just for calming Mega Sceptile, but for future harmony between technology and nature.</speech>
            <speech>I must now continue my research and explore further applications of this technology. The path ahead is long and full of discovery.</speech>
            <speech>Thank you, $PLAYER_NAME. Your contribution has been invaluable, and I look forward to the day we meet again.</speech>
        </speeches>
        <speeches id="5">
            <speech>With the condenser now in your capable hands, my own journey into the mysteries of Hoenn's climate continues.</speech>
            <speech>The wilds call to me, with promises of undiscovered secrets and new challenges to face.</speech>
            <speech>May our paths cross again, $PLAYER_NAME. Until then, let the winds guide you and the storms never deter your spirit.</speech>
        </speeches>
    </conversation>

</npcs>
