<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>I keep this ship running smooth, from the engine room to the dining hall! But don't think that means I don't have time for a battle!</speech>
        </speeches>
        <speeches id="2">
            <speech>Guess I need to fine-tune my strategy like I fine-tune these engines...</speech>
        </speeches>
        <speeches id="3">
            <speech>Guess I need to fine-tune my strategy like I fine-tune these engines...</speech>
        </speeches>
        <speeches id="4">
            <speech>Hard work and discipline pay off, whether it's fixing a ship or winning a battle!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>The sea calls to me, but so does a good battle! Let's see if you can handle a sailor's strength!</speech>
        </speeches>
        <speeches id="2">
            <speech>Even the strongest waves crash sometimes... You got me good!</speech>
        </speeches>
        <speeches id="3">
            <speech>Even the strongest waves crash sometimes... You got me good!</speech>
        </speeches>
        <speeches id="4">
            <speech>Hah! You fight well, but the sea's strength is endless! Come back when you've toughened up!</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="3">
        <speeches id="1">
            <speech>Bonjour, $PLAYER_NAME! Surprised to see me here?</speech>
            <speech>I’ve already sailed through half these cabins—battled trainers, snagged some solid Pokémon.</speech>
            <speech>What about you? Still poking around for weaklings?</speech>
            <speech>Let’s see what your team’s made of now!</speech>
        </speeches>
        <speeches id="2">
            <speech>Phew... Not bad. You actually put up a decent fight for once.</speech>
            <speech>Oh, by the way—I met the captain earlier. Poor guy was seasick out of his mind.</speech>
            <speech>But I got him talking, and he showed me a nifty move—real classy stuff.</speech>
            <speech>Word is, he’s got something useful for rookies like you too.</speech>
            <speech>Maybe it'll help you keep up with me for a change.</speech>
            <speech>Anyway, I’ve got places to be. Enjoy the ship, $PLAYER_NAME. Smell ya later!</speech>
        </speeches>
        <speeches id="3"/>
        <speeches id="4">
            <speech>Ha! Don’t tell me that’s all you’ve got!</speech>
            <speech>You’ll need more than seasick tactics if you want to beat me!</speech>
            <speech>Later, loser.</speech>
        </speeches>
        <speeches id="5"/>
    </conversation>
    <movingNpc direction="LEFT" id="1" name="Machamp" speed="1" sprite="68" type="pokemon" x="32" y="13">
        <path>LEFTx5,RIGHTx5</path>
        <onCollisionSpeech gap="4">Machamppp!</onCollisionSpeech>
    </movingNpc>
</npcs>
