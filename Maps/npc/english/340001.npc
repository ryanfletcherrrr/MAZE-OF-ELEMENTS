<npcs>
    <npc direction="DOWN" id="1000" name="Guide Hari" sprite="23" x="13" y="27">
        <speech>Greetings, challenger! Aurelia uses normal-type Pokémon.</speech>
        <speech>Although they have no resistances except a ghost-type immunity, normal-type Pokémon have fantastic
            type-coverage and only one weakness.
        </speech>
        <speech>Also, since Aurelia is the teacher at this Pokémon School, she uses a variety of tactics in her
            battles, so you might want to be prepared.
        </speech>
        <speech>I would recommend carrying Pokémon of multiple different types to ensure that you're not at a
            disadvantage.
        </speech>
        <speech>Good luck, $PLAYER_NAME! Godspeed!</speech>
    </npc>
    <conversation id="1">
        <speeches id="1">
            <speech>We heard that a challenger is coming, so all of us prepared ourselves. But, are you prepared?</speech>
        </speeches>
        <speeches id="2">
            <speech>So you are prepared, that's good.</speech>
        </speeches>
        <speeches id="3">
            <speech>So you are prepared, that's good.</speech>
        </speeches>
        <speeches id="4">
            <speech>So you're not prepared.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>I learnt that a balanced Pokémon team should contain both physical and special attackers. Time to
                put that to the test.
            </speech>
        </speeches>
        <speeches id="2">
            <speech>That didn't work ...</speech>
        </speeches>
        <speeches id="3">
            <speech>I think I should consider training some defensive Pokémon as well.</speech>
        </speeches>
        <speeches id="4">
            <speech>The theory works!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>It looks like you can handle raw offense, but can you deal with bulky Pokémon as well?</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh, wow!</speech>
        </speeches>
        <speeches id="3">
            <speech>Obviously, your team can handle both offensive and balanced teams. But we're not nearly as good as
                our teacher, so there is that ...
            </speech>
        </speeches>
        <speeches id="4">
            <speech>Did my bulky Pokémon overwhelm you?</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Grayroot Town Pokémon Gym</speech>
            <speech>Certified trainers: Ayaan, Sai</speech>
        </speeches>
        <speeches id="2">
            <speech>Grayroot Town Pokémon Gym</speech>
            <speech>Certified trainers: Ayaan, Sai, $PLAYER_NAME</speech>
        </speeches>
    </conversation>
</npcs>
