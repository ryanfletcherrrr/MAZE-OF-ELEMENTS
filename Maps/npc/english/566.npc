<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Our boss is about to do something spectacular!</speech>
            <speech>Of course you will, won't you?</speech>
        </speeches>
        <speeches id="2">
            <speech>I am not capable of stopping you, I will let you pass so that my brother can pulverize you.</speech>
        </speeches>
        <speeches id="3">
            <speech>I am not capable of stopping you, I will let you pass so that my brother can pulverize you.</speech>
        </speeches>
        <speeches id="4">
            <speech>Nobody can stop Team Galactic.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>You don't like to be stopped, do you?</speech>
        </speeches>
        <speeches id="2">
            <speech>I am not capable of stopping you, I will let you pass so that my boss can pulverize you.</speech>
        </speeches>
        <speeches id="3">
            <speech>I am not capable of stopping you, I will let you pass so that my boss can pulverize you.</speech>
        </speeches>
        <speeches id="4">
            <speech>Nobody can stop Team Galactic.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>Where do you think you're going? I won't let you disturb our boss.</speech>
            <speech>If you're not going to listen, you'll have to go through me first.</speech>
            <speech>After all, you've made me look bad more times than I care to remember!</speech>
        </speeches>
        <speeches id="2">
            <speech>Sheesh... I should have done the fighting myself.</speech>
            <speech>M-Master Cyrus?! Where did he go?!</speech>
        </speeches>
        <speeches id="3">
            <speech>How did you manage to get this far?</speech>
        </speeches>
    </conversation>

    <conversation id="4">
        <speeches id="1">
            <speech>..Heh. My Pokémon are tough, right? I can get even tougher!</speech>
            <speech>...But, you know, that's it for us. We've hit the wall... $PLAYER_NAME, I'll help you with this!
            </speech>
            <speech>Hey, $PLAYER_NAME! This is it! It's your show now!</speech>
        </speeches>
    </conversation>

    <conversation id="6">
        <speeches id="1">
            <speech>... ...</speech>
            <speech>Everything is ready for the creation of a new world.</speech>
            <speech>Now, all will end. And everything will begin. With this, the Red Chain made from the crystals of the
                three lake Pokémon.
            </speech>
            <speech>And this, the Red Chain I replicated with technological means...</speech>
            <speech>With these Red Chains I will pry open the portal to another dimension.</speech>
            <speech>I command that you unleash your power for me..</speech>
        </speeches>
        <speeches id="2">
            <speech>Dialga, the mythical Pokémon, and the master of time!</speech>
            <speech>...And the other. Palkia, the mythical Pokémon, and the master of space and dimensions!</speech>
        </speeches>
        <speeches id="3">
            <speech>I've waited so long for this moment, Dialga and Palkia.</speech>
            <speech>Shaping this world is a double spiral of time and space.</speech>
            <speech>Yes, the very things that you have the ability to control!</speech>
            <speech>You will do my bidding! I will have your abilities as mine!</speech>
            <speech>With the power I wield, I will create an entirely new world!</speech>
            <speech>The incomplete and ugly world we have now can disappear.</speech>
            <speech>I am resetting everything to zero. Nothing can remain. It is all for making the ultimate world.
            </speech>
            <speech>A world of complete perfection. Nothing so vague and incomplete as spirit can remain.</speech>
        </speeches>
        <speeches id="4">
            <speech>...I should have expected as much.</speech>
            <speech>Uxie, "The Being of Knowledge."</speech>
            <speech>Azelf, "The Being of Willpower."</speech>
            <speech>And Mesprit, "The Being of Emotion"...</speech>
            <speech>The Pokémon have come to protect Sinnoh? Pathetic and worthless.</speech>
            <speech>It takes the three of them, the three lake Pokémon that symbolize spirit, to balance either the
                Pokémon of time or space.
            </speech>
            <speech>But they can't maintain balance against the two. Not when both Dialga and Palkia are here.</speech>
            <speech>Their coming here is in vain. So much meaningless drama. Now, $PLAYER_NAME.</speech>
            <speech>You've constantly interfered with my plans, but you will be forgiven.</speech>
            <speech>After all, there will remain no spirit for all time when I am done. All spirit will disappear.
            </speech>
            <speech>It will be ripped away... From you! From your Pokémon!</speech>
            <speech>From those precious to you...!</speech>
            <speech>It is time! My dream will be my reality!</speech>
            <speech>What is this pressure I feel...? Something...is enraged?</speech>
        </speeches>
        <speeches id="5">
            <speech>Interesting. So, there is a Pokémon that can only appear as a shadow.</speech>
            <speech>Regardless, the effort is rash and foolish. I have harnessed the powers of Dialga and Palkia...
            </speech>
            <speech>I, Cyrus, won't have any more interferererererere...!</speech>
        </speeches>
    </conversation>

    <conversation id="10">
        <speeches id="1">
            <speech>No...! I'm so sorry I took so long. I think I finally found the answer from studying the myths.</speech>
            <speech>When this world was made, Dialga and Palkia appeared.</speech>
            <speech>Apparently, there was one more Pokémon that appeared at the same time.</speech>
            <speech>A Pokémon with as much power as Dialga and Palkia...</speech>
            <speech>But also one whose name was never to be spoken--Giratina!</speech>
            <speech>It's said to lurk in another world... A world on the opposite side of ours...</speech>
            <speech>That's what the shadow was. It must have been Giratina.</speech>
            <speech>The pillars are distorting... It's because of that portal.</speech>
            <speech>It's joined us to the other world.</speech>
            <speech>If it's not closed, the distortion will spread to Sinnoh and beyond...</speech>
            <speech>Our world will be destroyed...</speech>
        </speeches>
    </conversation>

    <conversation id="11">
        <speeches id="1">
            <speech>Are you ready? We have to chase Cyrus!</speech>
        </speeches>
    </conversation>

    <conversation id="12">
        <speeches id="1">
            <speech>Your Pokémon look tired. Would you like me to Heal them?</speech>
        </speeches>
        <speeches id="2">
            <speech>There you go, all healthy and happy!</speech>
        </speeches>
        <speeches id="3">
            <speech>Aww, I'm sure they would have liked to rest.</speech>
        </speeches>
    </conversation>

    <conversation id="13" canSkip="false">
        <speeches id="1">
            <!-- Before Battle Speech -->
            <speech>*Giratina emerges, eyes piercing. It senses your Pokémon encounters.*</speech>
            <speech>*Air grows colder. Giratina recognizes your 250 Pokémon milestone.*</speech>
            <speech>*With a haunting wail, it challenges you. 'Ready for this test?'*</speech>
        </speeches>
        <speeches id="2">
            <!-- Victory Speech -->
            <speech>*Giratina roars triumphantly, acknowledging victory.*</speech>
            <speech>*It shows respect for your Trainer skills.*</speech>
            <speech>*Vanishing, it promises future encounters.*</speech>
        </speeches>
        <speeches id="3">
            <!-- Not Battling Speech -->
            <speech>*Giratina fades, sensing your choice to not battle.*</speech>
            <speech>*Shadows whisper of growth, promising a deeper encounter.*</speech>
            <speech>*'Meet again after $DURATION?' it suggests, giving prep time.*</speech>
        </speeches>
        <speeches id="4">
            <!-- Loss Speech -->
            <speech>*Giratina retreats, echoing your defeat.*</speech>
            <speech>*It respects your effort despite the loss.*</speech>
            <speech>*The chill lingers, hinting at a future rematch.*</speech>
        </speeches>
        <speeches id="5">
            <!-- Before Criteria Speech -->
            <speech>*Giratina pauses, sensing something missing.*</speech>
            <speech>*'[GOLD]Caught 250 Pokémon?'[] it seems to ask.*</speech>
        </speeches>
    </conversation>

</npcs>
