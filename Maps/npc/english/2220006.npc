<npcs>
    <conversation id="1">
        <!-- First Battle (Classic Blaine Style) -->
        <speeches id="1">
            <speech>{COLOR=RED}Hah! Welcome, challenger!{ENDCOLOR}</speech>
            <speech>You look like you can handle the heat, but can you withstand my flames?</speech>
            <speech>I am {COLOR=ORANGE}Blaine{ENDCOLOR}, the Fire-type master of Cinnabar Gym!</speech>
            <speech>My Pokémon burn with unmatched intensity, and my battle strategy is as explosive as an erupting volcano!</speech>
            <speech>If you think you can douse my flames, then step forward! Let’s turn up the heat!</speech>
        </speeches>
        <speeches id="2">
            <speech>Hah! You burned right through my defenses!</speech>
            <speech>Here, take this—the {COLOR=GOLD}Volcano Badge{ENDCOLOR}—proof that you tamed the inferno!</speech>
            <speech>And this, too—{COLOR=RED}TM50 Overheat{ENDCOLOR}.</speech>
            <speech>A devastating move that ignites with unmatched power, but be warned—too much fire can burn out even the strongest flames.</speech>
            <speech>Use it wisely, and remember—the stronger the fire, the brighter it burns!</speech>
        </speeches>
        <speeches id="3">
            <speech>Hah! Looks like you couldn’t handle the heat!</speech>
            <speech>Go train, build your fire, and return when you’re ready to take on the inferno once more!</speech>
        </speeches>
        <speeches id="4">
            <speech>What? Second thoughts? Afraid of getting burned?</speech>
            <speech>That’s fine, but when you’re ready to feel the heat, you know where to find me.</speech>
        </speeches>
        <!-- Repeated Battle (More Intense & Thematic) -->
        <speeches id="5">
            <speech>Ah-ha! Back for more? You must love playing with fire!</speech>
            <speech>{COLOR=RED}Flames never stay still—they grow, they spread, they consume!{ENDCOLOR}</speech>
            <speech>Let’s see if you can handle an even hotter challenge!</speech>
        </speeches>
        <speeches id="6">
            <speech>Impressive! You’ve braved the flames once more!</speech>
            <speech>{COLOR=GOLD}$TOTAL_VICTORY{ENDCOLOR} victories against me… and {COLOR=CYAN}$CONSECUTIVE{ENDCOLOR} in a row?</speech>
            <speech>Your fire burns bright, but will it keep burning forever?</speech>
        </speeches>
        <speeches id="7">
            <speech>Hah! You thought you had me figured out?</speech>
            <speech>Fire is unpredictable, wild, untamed—you can never fully control it!</speech>
            <speech>Come back when your flames burn hotter!</speech>
        </speeches>
        <speeches id="8">
            <speech>Backing out now? I see…</speech>
            <speech>Well, fire waits for no one! When you're ready to test your limits, I’ll be here!</speech>
        </speeches>
        <speeches id="9">
            <speech>Whoa there! Even the hottest flames need time to rekindle!</speech>
            <speech>Return in {COLOR=YELLOW}$DURATION{ENDCOLOR}, and I’ll see if you can take the heat once more!</speech>
        </speeches>
        <!-- Special Condition: Battle Requirement Not Met -->
        <speeches id="10">
            <speech>Hold it! You want to challenge me, but your team doesn’t match the fire within!</speech>
            <speech>To battle me again, you must have {COLOR=RED}at least 3 Fire-type Pokémon{ENDCOLOR} in your team.</speech>
            <speech>Return when your flames burn strong enough to take me on!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Fire is fierce and wild... just like my battling style! Can you handle the heat?</speech>
        </speeches>
        <speeches id="2">
            <speech>Guess my flames fizzled out... Gotta stoke the fire stronger next time!</speech>
        </speeches>
        <speeches id="3">
            <speech>Guess my flames fizzled out... Gotta stoke the fire stronger next time!</speech>
        </speeches>
        <speeches id="4">
            <speech>Burned out already? You've gotta learn to embrace the flames, not fear them!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>You're about to face the full force of combustion, the raw heat of a chemical reaction!</speech>
        </speeches>
        <speeches id="2">
            <speech>I underestimated the variables! Fire is chaotic... and so was your strategy. I'll need to adjust my equations.</speech>
        </speeches>
        <speeches id="3">
            <speech>I underestimated the variables! Fire is chaotic... and so was your strategy. I'll need to adjust my equations.</speech>
        </speeches>
        <speeches id="4">
            <speech>Excellent. When strategy meets controlled combustion, victory is inevitable. Science prevails!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Welcome to Cinnabar Gym! I've studied every Fire-type in the Pokedex. My team's optimized for maximum heat output. Let's test your strategy!</speech>
        </speeches>
        <speeches id="2">
            <speech>Critical failure! My calculations were off. I'll tweak my team's stats and challenge you again!</speech>
        </speeches>
        <speeches id="3">
            <speech>Critical failure! My calculations were off. I'll tweak my team's stats and challenge you again!</speech>
        </speeches>
        <speeches id="4">
            <speech>Victory confirmed! My Fire-types burned bright today. Stick around. I've got trivia on Cinnabar Volcano you won't find in any book!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>I raise Fire-types with care, but they're fierce fighters. Ready to feel the heat?</speech>
        </speeches>
        <speeches id="2">
            <speech>My team wasn't ready this time. We'll rest up and come back stronger!</speech>
        </speeches>
        <speeches id="3">
            <speech>My team wasn't ready this time. We'll rest up and come back stronger!</speech>
        </speeches>
        <speeches id="4">
            <speech>Nice work, team! You've got fire, but we'll train harder for next time!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>I've dissected Fire-type volatility for years. My battle data's flawless. Think you can outsmart my blazing equations?</speech>
        </speeches>
        <speeches id="2">
            <speech>Impossible! You scrambled my formulas. I'll recalibrate my goggles and torch your strategy next time.</speech>
        </speeches>
        <speeches id="3">
            <speech>Impossible! You scrambled my formulas. I'll recalibrate my goggles and torch your strategy next time.</speech>
        </speeches>
        <speeches id="4">
            <speech>Hypothesis confirmed! My fiery brilliance prevails. Study harder, trainer. My lab notes outburn you still!</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Blaine taught me everything! His fire's legendary, and my Pokémon spit flames just as hot. You're toast!</speech>
        </speeches>
        <speeches id="2">
            <speech>Ouch! You snuffed my spark. Blaine's still the real fire king. I'll train harder!</speech>
        </speeches>
        <speeches id="3">
            <speech>Ouch! You snuffed my spark. Blaine's still the real fire king. I'll train harder!</speech>
        </speeches>
        <speeches id="4">
            <speech>Feel that heat? Blaine's genius runs through my veins. You'll need more to face the master!</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>Hey, think you can take the heat? My fire Pokémon are super cool. Ready to get burned?</speech>
        </speeches>
        <speeches id="2">
            <speech>Whoa, you turned up the heat! I'll cool off and try again.</speech>
        </speeches>
        <speeches id="3">
            <speech>Whoa, you turned up the heat! I'll cool off and try again.</speech>
        </speeches>
        <speeches id="4">
            <speech>See? My Pokémon rock! Rethink your plan before facing Blaine. The fire's just starting!</speech>
        </speeches>
    </conversation>
</npcs>
