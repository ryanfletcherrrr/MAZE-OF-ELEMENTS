<npcs>
    <movingNpc direction="DOWN" id="1" name="Delcatty" shouldSleep="" speed="1" sprite="301" type="pokemon" x="4" y="13">
        <path>LEFTx2,RIGHTx2</path>
        <onCollisionSpeech gap="4">:3</onCollisionSpeech>
        <speech>mewmew? :3</speech>
    </movingNpc>
    <npc direction="LEFT" hidden="false" id="2" name="Leo" randomRotation="false" sprite="5" x="11" y="5">
        <speech>I really like the redesign that the Pokémon Center building has undergone over the years.</speech>
        <speech>Best one I have ever seen in my life so far.</speech>
        <speech>Living a long life can have its rewards.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="3" name="Randy" randomRotation="true" sprite="26" x="2" y="9">
        <speech>Feel free to use this PC, it's for everyone!</speech>
    </npc>

    <conversation id="7">
        <speeches id="1">
            <speech>Ah, the thrill of Pokémon collecting, nothing quite matches it, right?</speech>
            <speech>As someone accustomed to the finer things, I find choosing the next Pokémon for my prestigious collection quite the ordeal.</speech>
            <speech>Would you be so kind as to grant me a brief respite? I need to mull over which rare specimen to marvel at next.</speech>
            <speech>Come back in $DURATION, and I'm sure to have a tantalizing task for us.</speech>
            <speech>My collection is vast, but there's always room for more.</speech>
        </speeches>
    </conversation>

    <conversation id="8">
        <speeches id="2">
            <speech>Oh, hello there! I don't believe we've met. You can call me the Pokémon Enthusiast.</speech>
            <speech>I've been rather bored lately, lounging around with all the luxuries one could dream of... except for some genuine excitement.</speech>
            <speech>Here's a thought: I've developed a sudden fascination with Poochyena.</speech>
            <speech>Such a feisty little Pokémon, isn't it?</speech>
            <speech>Show me a Level 10 Poochyena, won't you?</speech>
            <speech>I'd be thrilled to see one up close, and I'm willing to make it worth your while.</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh, you're not interested? How dreadfully disappointing.</speech>
            <speech>But, I suppose not everyone shares my passion for Pokémon.</speech>
            <speech>Well, if you change your mind, do let me know!</speech>
        </speeches>
        <speeches id="4">
            <speech>Fantastic! I knew I saw a fellow aficionado of the finer things in you.</speech>
            <speech>Bring me a Level 10 Poochyena, and I promise you, the reward will be most generous.</speech>
            <speech>I always keep my word, especially when it comes to my whims.</speech>
        </speeches>
    </conversation>

    <conversation id="9">
        <speeches id="1">
            <speech>Have you managed to catch a glimpse of that Level 10 Poochyena yet? My curiosity is absolutely piqued!</speech>
        </speeches>

        <speeches id="2">
            <speech>Ah, so you've encountered a Level 10 Poochyena? Marvelous! May I have a look? It's not every day you see such a specimen.</speech>
            <speech>Seeing such creatures fuels my passion for Pokémon even more. Care to show me what you've found?</speech>
        </speeches>

        <speeches id="3">
            <speech>Not feeling up to the task? That's a bit disappointing, but I understand.</speech>
            <speech>Not everyone has a knack for catering to whimsical requests.</speech>
            <speech>Nonetheless, your contributions thus far are appreciated.</speech>
            <speech>If the spirit of adventure strikes again, feel free to return.</speech>
        </speeches>

        <speeches id="4">
            <speech>Your effort to satisfy my curiosity is truly commendable.</speech>
            <speech>I'm already thinking about which Pokémon I'd like to meet next.</speech>
            <speech>Allow me a moment to decide on our next Pokémon adventure. Your assistance has been both entertaining and enlightening.</speech>
            <speech>Thank you for your dedication. As a token of my gratitude, here's a little something for your troubles.</speech>
            <speech>I assure you, it's quite generous.</speech>
        </speeches>
    </conversation>

    <conversation id="10">
        <speeches id="2">
            <speech>Back again, I see! Your last find was truly a sight to behold. What an exhilarating experience!</speech>
            <speech>You know, my interest has shifted to something rather... electric. Ever heard of the Hisuian Voltorb?</speech>
            <speech>It's not your ordinary Voltorb, mind you. It's from the Hisui region, brimming with history and mystique!</speech>
            <speech>Would you be up for the task of showing me a Hisuian Voltorb? I hear they're quite the spectacle.</speech>
            <speech>And yes, I'll ensure the reward is, as always, very appealing.</speech>
        </speeches>
        <speeches id="3">
            <speech>Not tempted by the allure of Hisuian Voltorb? That's quite the surprise, coming from an adventurer like you.</speech>
            <speech>Nevertheless, I respect your choice. Remember, my offer stands should curiosity ever get the better of you.</speech>
        </speeches>
        <speeches id="4">
            <speech>Marvelous decision! I can hardly wait to see a Hisuian Voltorb with my own eyes.</speech>
            <speech>Do bring one to me at Level 12, and I assure you, the reward will reflect my immense appreciation for your efforts.</speech>
        </speeches>
    </conversation>

    <conversation id="11">
        <speeches id="1">
            <speech>Have you encountered a Level 12 Hisuian Voltorb yet? My anticipation is through the roof!</speech>
        </speeches>
        <speeches id="2">
            <speech>A Hisuian Voltorb at Level 12? Splendid! Could I trouble you for a peek? Such rarities are a sight to behold.</speech>
            <speech>Every new Pokémon you show me broadens my horizons. Would you mind sharing this discovery?</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh, decided against it? A bit of a letdown, but I get it.</speech>
            <speech>Chasing after specific Pokémon isn't everyone's cup of tea.</speech>
            <speech>Your efforts up to now haven't gone unnoticed, though.</speech>
            <speech>If you ever wish to rekindle the thrill of the hunt, my door's always open.</speech>
        </speeches>
        <speeches id="4">
            <speech>Marvelous! Your persistence in indulging my whims never ceases to amaze.</speech>
            <speech>I'll need a moment to ponder which Pokémon will catch my fancy next...</speech>
            <speech>Your adventures bring such vibrant stories to my otherwise dull days.</speech>
            <speech>Accept this token of my appreciation for your hard work and dedication.</speech>
            <speech>Rest assured, it's quite the sumptuous reward.</speech>
        </speeches>
    </conversation>

    <conversation id="12">
        <speeches id="2">
            <speech>Our last discovery has truly set a new benchmark. Your dedication is commendable!</speech>
            <speech>This time, I've set my sights on something quite electrifying. Have you encountered Tynamo?</speech>
            <speech>A level 10 Tynamo, to be precise. It's a creature that pulsates with electric vigor and charm!</speech>
            <speech>I'm itching to see one in person. How about it? Will you bring a level 10 Tynamo to dazzle me?</speech>
            <speech>And worry not, the reward will surely electrify you in return.</speech>
        </speeches>
        <speeches id="3">
            <speech>Choosing to bypass the quest for Tynamo? I must admit, I'm a tad disappointed.</speech>
            <speech>Yet, the door remains open, should the spark of curiosity ignite once more within you.</speech>
        </speeches>
        <speeches id="4">
            <speech>Your willingness to dive into this challenge electrifies me! A level 10 Tynamo will surely be a sight to behold.</speech>
            <speech>I await its arrival with bated breath. Bring it forth, and let's illuminate the excitement together!</speech>
        </speeches>
    </conversation>

    <conversation id="13">
        <speeches id="1">
            <speech>Is a level 10 Tynamo lighting up your journey yet? My excitement is positively charged!</speech>
        </speeches>
        <speeches id="2">
            <speech>Beholding a level 10 Tynamo? Now, that's an energizing thought! May I indulge in its brilliance?</speech>
            <speech>Your adventures continue to spark fascination. Please, do share your electrifying find with me.</speech>
        </speeches>
        <speeches id="3">
            <speech>Hesitant to pursue the Tynamo trail? I'm all ears for the reason but do remember, the offer remains on the table.</speech>
            <speech>Should the currents guide you back, know that an eager audience awaits.</speech>
        </speeches>
        <speeches id="4">
            <speech>Incredible! The current of your determination flows as strongly as ever.</speech>
            <speech>While I ponder on the next marvel to chase, take this as a token of my gratitude for the electric display of commitment.</speech>
        </speeches>
    </conversation>

</npcs>
