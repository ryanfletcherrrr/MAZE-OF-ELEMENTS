<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Welcome, challenger. I am {COLOR=ORANGE}Sister Hiyori{ENDCOLOR}, keeper of the {COLOR=GREEN}Earth's ancient rhythm{ENDCOLOR}.</speech>
            <speech>I sense you have proven yourself against the {COLOR=GOLD}Elite Four{ENDCOLOR} - impressive, but our trials demand more.</speech>
            <speech>The true way of the fist teaches {COLOR=BLUE}patience{ENDCOLOR} - like the mountain that weathers every storm.</speech>
            <speech>Before you can face our {COLOR=GOLD}sacred Kubfu{ENDCOLOR}, you must prove your fighting spirit can endure.</speech>
            <speech>Show me that your {COLOR=RED}Fighting-types{ENDCOLOR} possess the resilience to overcome any trial!</speech>
        </speeches>
        <speeches id="2">
            <speech>Your persistence mirrors the mountain's endurance. You have learned the {COLOR=BLUE}first lesson{ENDCOLOR} well.</speech>
            <speech>The path ahead grows steeper, but your foundation is strong. Continue to the next trial.</speech>
        </speeches>
        <speeches id="3">
            <speech>The earth trembles with your defeat, but do not despair - even mountains must erode to grow stronger.</speech>
            <speech>Return in {COLOR=PURPLE}$DURATION{ENDCOLOR}, when the {COLOR=GOLD}sacred day{ENDCOLOR} comes again. Meditate on endurance until then.</speech>
        </speeches>
        <speeches id="4">
            <speech>You have mastered the lesson of persistence. The {COLOR=GREEN}Pulse of the Earth{ENDCOLOR} acknowledges your strength.</speech>
            <speech>Proceed deeper into our sanctuary, where greater challenges await your fighting spirit.</speech>
        </speeches>
        <speeches id="5">
            <speech>Our dojo's sacred trials are reserved for those who have conquered the {COLOR=GOLD}Elite Four{ENDCOLOR} and proven their mastery.</speech>
            <speech>The doors open only on {COLOR=GOLD}Wednesday{ENDCOLOR}, when the sacred energies align with our training.</speech>
            <speech>Return when the proper day arrives, and bring only {COLOR=RED}Fighting-type companions{ENDCOLOR} to honor our ways.</speech>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>I am {COLOR=CYAN}Blade-Sister Yuna{ENDCOLOR}, swift as the mountain wind that cuts through stone.</speech>
            <speech>So, another {COLOR=GOLD}Elite Four champion{ENDCOLOR} seeks to test their mettle against our ancient ways.</speech>
            <speech>{COLOR=CYAN}Speed and precision{ENDCOLOR} - these are the pillars upon which true martial mastery stands.</speech>
            <speech>Your {COLOR=RED}Fighting-types{ENDCOLOR} must learn to strike like lightning, then fade like mist.</speech>
            <speech>Can you match the tempo of the {COLOR=CYAN}Wind Cutter's blade{ENDCOLOR}?</speech>
        </speeches>
        <speeches id="2">
            <speech>Swift as the wind you are, and twice as sharp. Your {COLOR=RED}Fighting-types{ENDCOLOR} dance with true grace.</speech>
            <speech>You have earned passage to the next trial. May your speed serve you well ahead.</speech>
        </speeches>
        <speeches id="3">
            <speech>The wind shifts against you today, but even storms must rest before they rage again.</speech>
            <speech>Gather your strength for {COLOR=PURPLE}$DURATION{ENDCOLOR}. When {COLOR=GOLD}Wednesday{ENDCOLOR} returns, so too shall your chance.</speech>
        </speeches>
        <speeches id="4">
            <speech>Like the wind that never truly stops, your determination cuts through all obstacles.</speech>
            <speech>The {COLOR=CYAN}Wind Cutter{ENDCOLOR} acknowledges your swiftness. Press onward to face greater trials.</speech>
        </speeches>
        <speeches id="5">
            <speech>Only those who have bested the {COLOR=GOLD}Elite Four{ENDCOLOR} may witness our sacred techniques.</speech>
            <speech>The winds of wisdom blow only on {COLOR=GOLD}Wednesday{ENDCOLOR}, when our dojo opens its sacred halls.</speech>
            <speech>Return with your {COLOR=RED}Fighting-type allies{ENDCOLOR} when the proper day dawns once more.</speech>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>{COLOR=YELLOW}Disciple Hiro{ENDCOLOR} stands before you! Feel the electric surge of pure fighting spirit!</speech>
            <speech>An {COLOR=GOLD}Elite Four champion{ENDCOLOR}! Perfect - you'll need that experience for what comes next!</speech>
            <speech>In martial arts, sometimes victory demands {COLOR=RED}everything in a single, decisive moment{ENDCOLOR}!</speech>
            <speech>Your {COLOR=RED}Fighting-types{ENDCOLOR} must learn when to unleash their {COLOR=YELLOW}Lightning Fang{ENDCOLOR} - all power, no hesitation!</speech>
            <speech>Show me the {COLOR=RED}explosive force{ENDCOLOR} that burns within your team!</speech>
        </speeches>
        <speeches id="2">
            <speech>{COLOR=YELLOW}Incredible!{ENDCOLOR} Your {COLOR=RED}Fighting-types{ENDCOLOR} struck with the fury of a thunderstorm!</speech>
            <speech>You understand the lightning's lesson - sometimes {COLOR=RED}raw power{ENDCOLOR} is the only answer. Continue ahead!</speech>
        </speeches>
        <speeches id="3">
            <speech>The lightning fades, but storms always return with greater fury than before!</speech>
            <speech>Train your {COLOR=RED}Fighting-types{ENDCOLOR} well during the {COLOR=PURPLE}$DURATION{ENDCOLOR} wait. When {COLOR=GOLD}Wednesday{ENDCOLOR} comes, strike harder!</speech>
        </speeches>
        <speeches id="4">
            <speech>Your power crackles like true lightning! The {COLOR=YELLOW}Lightning Fang{ENDCOLOR} recognizes your strength!</speech>
            <speech>Only one more trial stands between you and our honored Sensei. Give it everything!</speech>
        </speeches>
        <speeches id="5">
            <speech>These sacred trials demand the strength of an {COLOR=GOLD}Elite Four conqueror{ENDCOLOR}!</speech>
            <speech>The {COLOR=YELLOW}Lightning Fang{ENDCOLOR} strikes only on {COLOR=GOLD}Wednesday{ENDCOLOR}, when our sacred training day arrives!</speech>
            <speech>Bring your finest {COLOR=RED}Fighting-types{ENDCOLOR} when you return - they'll need every spark of power!</speech>
        </speeches>
    </conversation>

    <conversation id="4">
        <speeches id="1">
            <speech>I am {COLOR=PURPLE}Sensei Ayaka{ENDCOLOR}, master of {COLOR=PURPLE}Perfect Tempo{ENDCOLOR} - the rhythm that guides all true combat.</speech>
            <speech>Your victory over the {COLOR=GOLD}Elite Four{ENDCOLOR} shows promise, but can you find our sacred rhythm?</speech>
            <speech>Every strike has its moment, every defense its beat. To fight without rhythm is to fight without soul.</speech>
            <speech>Your {COLOR=RED}Fighting-types{ENDCOLOR} must prove they can find the {COLOR=PURPLE}Perfect Tempo{ENDCOLOR} that flows through all martial arts.</speech>
            <speech>Are you ready to dance the eternal battle-rhythm with me?</speech>
        </speeches>
        <speeches id="2">
            <speech>Your {COLOR=RED}Fighting-types{ENDCOLOR} move in {COLOR=PURPLE}perfect harmony{ENDCOLOR} - you have found the true tempo of combat.</speech>
            <speech>You are worthy to face our master. Proceed to the final trial with my blessing.</speech>
        </speeches>
        <speeches id="3">
            <speech>The rhythm breaks, but like all music, it can be learned again with practice and patience.</speech>
            <speech>Return in {COLOR=PURPLE}$DURATION{ENDCOLOR} when {COLOR=GOLD}Wednesday's sacred tempo{ENDCOLOR} returns. Find your perfect rhythm then.</speech>
        </speeches>
        <speeches id="4">
            <speech>{COLOR=PURPLE}Perfect!{ENDCOLOR} Your tempo matches the ancient rhythm that pulses through our dojo's heart.</speech>
            <speech>The {COLOR=GOLD}Karate Master{ENDCOLOR} awaits. Show him the {COLOR=PURPLE}Perfect Tempo{ENDCOLOR} you have mastered here.</speech>
        </speeches>
        <speeches id="5">
            <speech>Our ancient rhythms reveal themselves only to {COLOR=GOLD}Elite Four champions{ENDCOLOR} who understand true strength.</speech>
            <speech>The {COLOR=PURPLE}Perfect Tempo{ENDCOLOR} can only be achieved on {COLOR=GOLD}Wednesday{ENDCOLOR}, our day of sacred practice.</speech>
            <speech>Return with your {COLOR=RED}Fighting-type team{ENDCOLOR} when the proper rhythm of the week aligns once more.</speech>
        </speeches>
    </conversation>

    <conversation id="5">
        <speeches id="1">
            <speech>So... you have overcome all four trials and reached the heart of our sanctuary.</speech>
            <speech>I am the {COLOR=GOLD}Karate Master{ENDCOLOR}, keeper of the ancient ways, guardian of the {COLOR=GOLD}sacred Kubfu{ENDCOLOR}.</speech>
            <speech>Your triumph over the {COLOR=GOLD}Elite Four{ENDCOLOR} brought you here, but our trials test something deeper.</speech>
            <speech>Long ago, we were cast aside, deemed obsolete by those who feared our true strength.</speech>
            <speech>But here, in these hidden halls, we preserved the {COLOR=RED}pure essence of Fighting-type mastery{ENDCOLOR}.</speech>
            <speech>If you would earn the right to meet our sacred companion, you must prove your fists burn with {COLOR=RED}unbreakable will{ENDCOLOR}!</speech>
            <speech>Show me the culmination of everything you have learned!</speech>
        </speeches>
        <speeches id="2">
            <speech>{COLOR=GOLD}Incredible...{ENDCOLOR} your {COLOR=RED}Fighting-types{ENDCOLOR} embody the true spirit we have protected all these years.</speech>
            <speech>You fight not for glory or conquest, but with the {COLOR=BLUE}humble strength{ENDCOLOR} that comes from genuine bond.</speech>
            <speech>Such dedication... such {COLOR=RED}pure martial spirit{ENDCOLOR}... Yes, you are worthy.</speech>
            <speech>The {COLOR=GOLD}sacred Kubfu{ENDCOLOR} will be honored to train alongside a fighter of your caliber.</speech>
        </speeches>
        <speeches id="3">
            <speech>Your spirit burns bright, but today the flame was not yet hot enough to illuminate our deepest secrets.</speech>
            <speech>Continue your training, young fighter. In {COLOR=PURPLE}$DURATION{ENDCOLOR}, when {COLOR=GOLD}Wednesday{ENDCOLOR} returns, so too will your opportunity.</speech>
            <speech>The path of the fist is long and arduous - let this setback forge you into something stronger.</speech>
        </speeches>
        <speeches id="4">
            <speech>You have proven yourself a {COLOR=GOLD}master of the fighting arts{ENDCOLOR}, worthy of our ancient traditions.</speech>
            <speech>The {COLOR=GOLD}sacred Kubfu{ENDCOLOR} senses your pure heart. Such encounters are the stuff of legend.</speech>
            <speech>Remember this moment - you have touched something eternal within these hidden halls.</speech>
        </speeches>
        <speeches id="5">
            <speech>Our deepest secrets are reserved only for those who have conquered the {COLOR=GOLD}Elite Four{ENDCOLOR} and walk the path of the fist.</speech>
            <speech>The sacred trials can only commence on {COLOR=GOLD}Wednesday{ENDCOLOR}, when the ancient spirits of combat stir.</speech>
            <speech>Return with your {COLOR=RED}Fighting-type companions{ENDCOLOR} when the proper day arrives. We shall be waiting.</speech>
        </speeches>
    </conversation>
</npcs>