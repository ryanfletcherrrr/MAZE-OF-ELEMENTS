<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Both my mom and my dad are Ace Trainers. I'm probably an Ace, too!</speech>
        </speeches>
        <speeches id="2">
            <speech>Waaah! I should have superior genes and be able to ride on my parents coattails...</speech>
        </speeches>
        <speeches id="3">
            <speech>Waaah! I should have superior genes and be able to ride on my parents coattails...</speech>
        </speeches>
        <speeches id="4">
            <speech>I want to be a real Ace like my mom and dad.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Im not good at battling, but this is one of the duties of a Poké Fan.</speech>
        </speeches>
        <speeches id="2">
            <speech>Cheers, all you Poké Fans out there! May the Poké Fan last forever!</speech>
        </speeches>
        <speeches id="3">
            <speech>Cheers, all you Poké Fans out there! May the Poké Fan last forever!</speech>
        </speeches>
        <speeches id="4">
            <speech>Ive kept the honor of the Poké Fan alive. Hahaha!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>All Mom and Dad do is fiddle with their tablets! They never play with me! Im bored!</speech>
        </speeches>
        <speeches id="2">
            <speech>I don't like Mom or Dad or their silly tablets! All I need are Pokémon!</speech>
        </speeches>
        <speeches id="3">
            <speech>I don't like Mom or Dad or their silly tablets! All I need are Pokémon!</speech>
        </speeches>
        <speeches id="4">
            <speech>Maybe Im not really their kid... Maybe their tablets are...</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Despite my appearance, I was born a city boy. I yearned for country life.</speech>
        </speeches>
        <speeches id="2">
            <speech>Despite my appearance, I was born a country boy. So I yearned for city life.</speech>
        </speeches>
        <speeches id="3">
            <speech>Despite my appearance, I was born a country boy. So I yearned for city life.</speech>
        </speeches>
        <speeches id="4">
            <speech>Do you have a nice small hometown? If so, you should go back and visit there.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Go, my precious Pokémon! To battle! Rush the enemy!</speech>
        </speeches>
        <speeches id="2">
            <speech>I wont cry... I wont. Someday, I will win.</speech>
        </speeches>
        <speeches id="3">
            <speech>I wont cry... I wont. Someday, I will win.</speech>
        </speeches>
        <speeches id="4">
            <speech>My Pokémon are the mightiest! I shall carve my name in history!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>You'd best not send out any weak Pokémon! Your opponent is my partner in construction!</speech>
        </speeches>
        <speeches id="2">
            <speech>Ahh... My partner broke down. What am I gonna do at the site tomorrow?</speech>
        </speeches>
        <speeches id="3">
            <speech>Ahh... My partner broke down. What am I gonna do at the site tomorrow?</speech>
        </speeches>
        <speeches id="4">
            <speech>Gwahahaha! How about that?! Didja see that?! My partners rough and tough!</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Wha? You wanna battle with me? I suppose we could arrange something...</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh, wh-whoa. I’m no match for you. Your Pokémon are somethin’ else.</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh, wh-whoa. I’m no match for you. Your Pokémon are somethin’ else.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ah, I shoulda known. Hey, don't blame me.</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>Hello, my name's Cheryl. And you are...? OK, so your name is $PLAYER_NAME.</speech>
            <speech>I'm sincerely glad to meet you. $PLAYER_NAME, may I ask a big favor of you?</speech>
            <speech>I want to get through this forest, but I'm afraid of doing it alone.</speech>
            <speech>I've heard that there is a sinister group of people called Team Galactic about. I think there'd be
                safety in numbers.
            </speech>
            <speech>Please, can I follow you till the end?</speech>
            <speech>I will be back with my Pokèmon. You can continue through the forest till then. I will see you
                soon.
            </speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>Hey $PLAYER_NAME, good to see you. I haven't seen any team Galactic Grunt around. Looks like it's
                safe to continue.
            </speech>
            <speech>I will try and take the charge now. See you at the exit $PLAYER_NAME.</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>Oh! There's the exit! I'm so relieved... I got lost in the middle.</speech>
            <speech>It wasn't the brightest of ideas to take the lead.</speech>
            <speech>Anyway, I saw you and followed you. I would've never been able to get through this by myself.
            </speech>
            <speech>Thank you so much, $PLAYER_NAME!</speech>
        </speeches>
        <speeches id="2">
            <speech>This is my token of appreciation. Please accept it! I'm sure we'll meet again somewhere! Bye for
                now!
            </speech>
        </speeches>
    </conversation>

    <conversation canSkip="true" id="13">
        <speeches id="1">
            <speech>Me and my dog were walking through Eterna Forest, looking for rare Pokémon</speech>
            <speech>All of a sudden a Gengar appeared out of nowhere and snatched my dog.</speech>
            <speech>He went into that Old Chateau, can you help me get him back?</speech>
        </speeches>
        <speeches id="2">
            <speech>Thank you so much, my dog came running back as soon as you defeated that ghost.</speech>
            <speech>My dog seems to really trust you, I think he wants to go with you on your journey.</speech>
            <speech>Please take good care of him</speech>
        </speeches>
        <speeches id="3">
            <speech>I do understand. You don't like cleaning dog poo.</speech>
            <speech>Come back later if you change your mind.</speech>
        </speeches>
        <speeches id="4">
            <speech>Here, please take good care of him.{EVENT=mood-12-3-20}</speech>
        </speeches>
        <speeches id="5">
            <speech />
        </speeches>
    </conversation>

    <conversation id="15">
        <speeches id="1">
            <speech>Your Pokémon look tired. Would you like me to Heal them?</speech>
        </speeches>
        <speeches id="2">
            <speech>There you go, all healthy and happy!</speech>
        </speeches>
        <speeches id="3">
            <speech>Aww, I'm sure they would have liked to rest.</speech>
        </speeches>
    </conversation>
    <conversation id="16">
        <speeches id="1">
            <speech>I am here trying to collect Dustox, but I don't have time.</speech>
            <speech>If you can get me 3 Dustox I will reward you with something useful.</speech>
            <speech>Remember to have an additional Pokémon in your party.</speech>
            <speech>I will take away the Dustox(s), and you might be left with no Pokémon to traverse this Forest.</speech>
        </speeches>
        <speeches id="2">
            <speech>Moths! Beautiful Moths!</speech>
            <speech>Three Moths!</speech>
            <speech>Do you want to hand them over to me in exchange for an Experience Share?</speech>
        </speeches>
        <speeches id="3">
            <speech>That's your own loss mate!</speech>
        </speeches>
        <speeches id="4">
            <speech>Thanks for Dustox(s).</speech>
            <speech>Equip this item to any Pokémon in your party, and they will gain experience without even battling.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <conversation id="17">
        <speeches id="1">
            <speech>Please come back later as I currently do not have anything to sell.</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh hello there, it's 26th of the month, and you are here with my favourite Roselia.</speech>
            <speech>Here is my vault of special items, tell me what do you want to buy.</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh hello there, it's 26th of the month, I am Trader, and I am here to sell exclusive items.</speech>
            <speech>However I would like you to show me my favourite Pokémon Roselia before I show you my vault of items.</speech>
        </speeches>
    </conversation>
    <movingNpc direction="RIGHT" id="1" name="Silcoon" shouldSleep="" speed="1" sprite="266" type="pokemon" x="9"
               y="81">
        <path>RIGHTx1, DOWNx1, LEFTx1, UPx1</path>
        <onCollisionSpeech gap="4">Ssssssss!</onCollisionSpeech>
        <speech>Sccccccccc!!!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Buneary" shouldSleep="" speed="1" sprite="427" type="pokemon" x="43"
               y="84">
        <path>RIGHTx1, LEFTx1</path>
        <onCollisionSpeech gap="4">Bun! Bun! Bun!</onCollisionSpeech>
        <speech>*Buneary hugs you*</speech>
    </movingNpc>
    <movingNpc direction="LEFT" id="3" name="" shouldSleep="" speed="1" sprite="200" type="pokemon" x="16" y="50">
        <path>LEFTx2, DOWNx2, RIGHTx2, UPx2</path>
        <onCollisionSpeech gap="4">Mis! Mis!</onCollisionSpeech>
        <speech>The Misdreavus is eyeing you with a sinister look...</speech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="4" name="Cascoon" shouldSleep="" speed="1" sprite="268" type="pokemon" x="11"
               y="55">
        <path>RIGHTx1, LEFTx1</path>
        <onCollisionSpeech gap="4">Csssssss!</onCollisionSpeech>
        <speech>Cssssss!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="5" name="Murkrow" shouldSleep="" speed="1" sprite="198" type="pokemon" x="25"
               y="49">
        <path>DOWNx1, UPx1</path>
        <onCollisionSpeech gap="4">Murkrow!</onCollisionSpeech>
        <speech>*Murkrow uses Feint on you!*</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="6" name="" shouldSleep="" speed="1" sprite="163" type="pokemon" x="26" y="70">
        <path>DOWNx1, UPx1</path>
        <onCollisionSpeech gap="4">Hoot! Hoot!</onCollisionSpeech>
        <speech>Hoothoot hoots at you and tilts it's head</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="7" name="" shouldSleep="" speed="1" sprite="92" type="pokemon" x="41" y="69">
        <path>DOWNx1, UPx1</path>
        <onCollisionSpeech gap="4">Gast! Gastly!</onCollisionSpeech>
        <speech>The Gastly cackles at you and sticks out it's tongue!</speech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="8" name="Dustox" shouldSleep="" speed="1" sprite="269" type="pokemon" x="47"
               y="67">
        <path>RIGHTx2, DOWNx2, LEFTx2, UPx2</path>
        <onCollisionSpeech gap="4">Dus! Dustox! Dustox!</onCollisionSpeech>
        <speech>*Dustox used Confuse Ray on $PLAYER_NAME*</speech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="9" name="Louis" shouldSleep="" speed="1" sprite="25" type="npc" x="52" y="90">
        <path>RIGHTx2, UPx2, DOWNx2, LEFTx2</path>
        <onCollisionSpeech gap="4">Hey! Let me pass!</onCollisionSpeech>
        <speech>I'm so excited about Eterna Forest.</speech>
        <speech>I wonder if I'll catch anything interesting.</speech>
    </movingNpc>
    <movingNpc direction="LEFT" id="10" name="Russell" shouldSleep="" speed="1" sprite="24" type="npc" x="65" y="75">
        <path>LEFTx6, RIGHTx6</path>
        <onCollisionSpeech gap="4">Aaaaaaaah!!!!!</onCollisionSpeech>
        <speech>Aaaaaaaaaaah!</speech>
        <speech>I'm so afraid!!!!!</speech>
    </movingNpc>
    <movingNpc direction="UP" id="11" name="Wurmple" shouldSleep="" speed="1" sprite="265" type="pokemon" x="70" y="68">
        <path>UPx2, RIGHTx2, LEFTx2, DOWNx2</path>
        <onCollisionSpeech gap="4">Wurm! Wurm!</onCollisionSpeech>
        <speech>*Wurmple used String Shot on $PLAYER_NAME!*</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="12" name="Bradley" shouldSleep="" speed="1" sprite="48" type="npc" x="82" y="78">
        <path>DOWNx4, UPx4</path>
        <onCollisionSpeech gap="4">Excuse me.</onCollisionSpeech>
        <speech>The Eterna Forest is home to many Bug and Grass-type Pokémon, and is the only known place in the Sinnoh
            region to find and catch Buneary.
        </speech>
        <speech>I will find one, for sure.</speech>
    </movingNpc>
    <movingNpc direction="LEFT" id="13" name="Slakoth" shouldSleep="" speed="1" sprite="287" type="pokemon" x="89"
               y="88">
        <path>LEFTx1, RIGHTx1</path>
        <onCollisionSpeech gap="4">Sla! Sla!</onCollisionSpeech>
        <speech>*Slakoth yawns at you*</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="14" name="Roy" shouldSleep="" speed="1" sprite="24" type="npc" x="106" y="88">
        <path>DOWNx1, UPx1</path>
        <onCollisionSpeech gap="4">Hey!</onCollisionSpeech>
        <speech>This forest reminds me of Viridian Forest...</speech>
        <speech>But it's so much bigger!</speech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="15" name="" shouldSleep="" speed="1" sprite="406" type="pokemon" x="105" y="64">
        <path>RIGHTx1,UPx1, LEFTx1, DOWNx1</path>
        <onCollisionSpeech gap="4">Bu! Bu! Budew!</onCollisionSpeech>
        <speech>This lovely Budew likes you.</speech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="16" name="Lawrence" shouldSleep="" speed="1" sprite="23" type="npc" x="91" y="62">
        <path>RIGHTx1, LEFTx1</path>
        <onCollisionSpeech gap="4">Hey, you!</onCollisionSpeech>
        <speech>The Eterna Forest is a long and complex structure of trees that make it a natural maze, of where a lot
            of people get lost.
        </speech>
    </movingNpc>
    <movingNpc direction="LEFT" id="17" name="Pineco" shouldSleep="" speed="1" sprite="204" type="pokemon" x="82"
               y="54">
        <path>LEFTx2, RIGHTx2</path>
        <onCollisionSpeech gap="4">Pi! Pine! Pineco!</onCollisionSpeech>
        <speech>*Pineco uses Protect*</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="18" name="Nathan" shouldSleep="" speed="1" sprite="75" type="npc" x="71" y="55">
        <path>DOWNx1, RIGHTx1, DOWNx1, RIGHTx1, LEFTx1, UPx1, LEFTx1, UPx1</path>
        <onCollisionSpeech gap="4">You are in the way!</onCollisionSpeech>
        <speech>I'm so tempted to go into the Old Chateau...</speech>
        <speech>I heard there are quite scary 'mons over there.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="19" name="" speed="1" sprite="429" type="pokemon" x="58" y="37">
        <path>DOWNx1, RIGHTx1, UPx1, LEFTx1</path>
        <onCollisionSpeech gap="4">Mis! Mismagius! Mis!</onCollisionSpeech>
        <speech>The Mismagius disappears and reappears behind you!</speech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="20" name="" speed="1" sprite="94" type="pokemon" x="75" y="18">
        <path>RIGHTx10, LEFTx10</path>
        <onCollisionSpeech gap="4">Gengar!</onCollisionSpeech>
        <speech>The Gengar licks you as you pass by it and cackles gleefully.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="21" name="Helen" speed="1" sprite="18" type="npc" x="79" y="30">
        <path>DOWNx2, UPx2</path>
        <onCollisionSpeech gap="4">Help! Help!</onCollisionSpeech>
        <speech>There's a spooky Pokémon in there!!!! I'm so scared...!!!</speech>
        <speech>Only brave trainers can go in there, I guess...</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="22" name="" shouldSleep="" speed="1" sprite="355" type="pokemon" x="90" y="17">
        <path>DOWNx3, UPx3</path>
        <onCollisionSpeech gap="4">Dusc! Dusc!</onCollisionSpeech>
        <speech>You think the Dusclops may use Curse on you if you pester it!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="23" name="" shouldSleep="" speed="1" sprite="265" type="pokemon" x="73" y="16">
        <path>DOWNx2, RIGHTx1, LEFTx1, UPx2</path>
        <onCollisionSpeech gap="4">Wrumple!</onCollisionSpeech>
        <speech>.......</speech>
    </movingNpc>
</npcs>
