<npcs>
    <!-- Option Display Dialogue -->
    <conversation canSkip="false" id="1">
        <speeches id="1">
            <speech>Welcome, $PLAYER_NAME, to the sun-kissed shores of the Summer Islands!</speech>
            <speech>Showcase your discoveries by presenting up to $MAX_SUBMISSIONS self-caught Fish and Surf-caught Pokémon from our vibrant waters.</speech>
            <speech>Less is acceptable, but each must be a testament to your skill as an angler and trainer.</speech>
            <speech>Strive for the title of Summer Champion and earn the coveted Heat Shard and Summer Chests!</speech>
            <speech>Remember, points are awarded based on the weight of the fish and the rarity of the Pokémon, which is randomly generated. Good luck!</speech>
            <speech>This challenge concludes in $CONCLUDES_IN_DURATION. Make every moment count!</speech>
            <speech>What adventure calls you to these tropical waters today?</speech>
        </speeches>
        <!-- Concluded Dialogue -->
        <speeches id="2">
            <speech>The Summer Event now quiets as the sun dips below the horizon, marking the end of this year's festivities.</speech>
            <speech>Champions are named, stories forged into the annals of the Summer Islands. We bid farewell for now, $PLAYER_NAME, until next season's call beckons.</speech>
        </speeches>
        <!-- No Eligible Submission Dialogue -->
        <speeches id="3">
            <speech>Ah, $PLAYER_NAME, your collection seems to lack the sparkle of impressive fish and Pokémon.</speech>
            <speech>The Summer Islands are vast and filled with hidden coves where the most impressive catches lurk.</speech>
            <speech>Seek them out and return when you've captured some remarkable specimens. Remember, weight and rarity are key!</speech>
        </speeches>
        <!-- Max Submissions Dialogue -->
        <speeches id="4">
            <speech>Impressive, $PLAYER_NAME! You've reached the pinnacle of submissions with your current collection.</speech>
            <speech>Remember, you can submit fewer than $MAX_SUBMISSIONS if you believe your chosen catches best reflect your skills.</speech>
            <speech>Should you wish to adjust your entries, the option to reset is available to you.</speech>
        </speeches>
        <!-- Invalid Submission Dialogue -->
        <speeches id="5">
            <speech>Hold, $PLAYER_NAME! Your submission seems to wander from the path of the impressive catches.</speech>
            <speech>Ensure that each fish and Pokémon you present is a true jewel of the Summer Islands, capturing the essence of these vibrant waters.</speech>
        </speeches>
        <!-- Successful Submission Dialogue -->
        <speeches id="6">
            <speech>Well done, $PLAYER_NAME! Your offerings resonate with the spirit of the Summer Islands.</speech>
            <speech>You stand among the elite contenders for the Summer Champion title.</speech>
            <speech>May your name climb high on the leaderboard of legends!</speech>
        </speeches>
        <!-- Successful Reset Dialogue -->
        <speeches id="7">
            <speech>Your collection has been scattered to the winds, $PLAYER_NAME, a fresh slate granted to you.</speech>
            <speech>The Summer Islands await your renewed endeavor. Embark again with eyes wide to the wonders it holds.</speech>
        </speeches>
        <!-- Reset Confirmation Dialogue -->
        <speeches id="8">
            <speech>You're poised to reset your journey, $PLAYER_NAME.</speech>
            <speech>This choice will clear your current ledger of discoveries, allowing you to seek new catches within our bounds.</speech>
            <speech>Such a step is irreversible. Proceed only if your heart is set on curating a new collection that better captures the essence of the Summer Islands.</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Rockruff" shouldSleep="" speed="1" sprite="744" type="pokemon" x="4" y="8">
        <path>RIGHTx2,LEFTx2</path>
        <onCollisionSpeech gap="4">Bark!</onCollisionSpeech>
        <speech>Bark!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Pikachu" shouldSleep="" speed="1" sprite="25" type="pokemon" x="18" y="14">
        <path>LEFTx4,RIGHTx4</path>
        <onCollisionSpeech gap="4">Pika! Pika!</onCollisionSpeech>
        <speech>Pika! Pika!</speech>
    </movingNpc>
</npcs>
