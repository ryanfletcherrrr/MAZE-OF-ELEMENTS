<npcs>
    <conversation canSkip="false" id="1">
        <speeches id="1">
            <speech>Hi, $PLAYER_NAME!</speech>
            <speech>Are you catching Pokémon?</speech>
            <speech>...Um...</speech>
            <speech>I think you'd feel a lot safer if you were to catch some more.</speech>
            <speech>You know, like when you need to travel to faraway places.</speech>
            <speech>You've already got quite a few Pokémon with you!</speech>
            <speech>At that pace, your Pokédex should be full in no time at all!</speech>
            <speech>Oh, I know!</speech>
            <speech>Don't you think it's better to know more about Pokémon?</speech>
            <speech>Sure it is!</speech>
            <speech>I know just the place. Come on! Don't be shy. Follow me!</speech>
        </speeches>
        <speeches id="2">
            <speech>That man... What is he doing? Um...</speech>
        </speeches>
        <speeches id="3">
            <speech>Huh? What I beg your pardon? I was just making conversation...</speech>
        </speeches>
        <speeches id="4">
            <speech>...Working for the International Police must be hard.</speech>
        </speeches>
        <speeches id="5">
            <speech>$PLAYER_NAME, here it is. It's the Trainers' School.</speech>
            <speech>The name says it all!</speech>
        </speeches>
        <speeches id="6">
            <speech>I saw your friend Barry go in earlier. He could still be in there studying.</speech>
            <speech>OK, bye now!</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="2">
        <speeches id="1">
            <speech>WHAAAT?! ...</speech>
            <speech>How did you know? How did you unmask me as a member of the International Police?!</speech>
        </speeches>
        <speeches id="2">
            <speech>...Heh. You claim you were only making conversation, do you?</speech>
            <speech>But, I know better not to believe that. No, no, no. You recognized right away that I was someone extraordinary.</speech>
            <speech>That is why you spoke to me, is it not?</speech>
            <speech>Your power of observation is fearsome!</speech>
            <speech>Quite admirable, you are! Now that my cover has been blown, let me introduce myself.</speech>
            <speech>I am a globe-trotting elite of the International Police.</speech>
            <speech>My name... Ah, no. I shall inform you only of my code name.</speech>
            <speech>My code name, it is Looker. It is what they all call me.</speech>
            <speech>In Sinnoh, there are criminals stealing the Pokémon of others.</speech>
            <speech>I have, therefore, been on the lookout for characters arousing my suspicion.</speech>
            <speech>Also, I have a request. If you were to see me again, I ask that you not talk to me, for I am on duty.</speech>
            <speech>...Actually, yes, yes, you may speak to me. You must. Not because I am lonely, no, no!</speech>
            <speech>You must inform me of bad guys! You must inform me of any happenings!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>I should speak with Dawn before I check the city out.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Oh, oh, oh? You call yourself a Pokémon Trainer? And yet you have no Fishing Rod?</speech>
            <speech>Oh my, you are a rare case indeed! Alas, this simply will not do!</speech>
            <speech>You cannot embark upon a journey without knowing the joy of fishing!</speech>
            <speech>Luckily for you, this is where I - the Fishing Expert - come in.</speech>
            <speech>All you have to do is find three clowns in Jubilife City.</speech>
            <speech>If you can find them... I will gift you with a special Fishing Rod!</speech>
            <speech>The three clowns will each ask you a skill-testing question.</speech>
            <speech>The questions will all have to do with Pokémon. After all, a Fishing Rod is essential to any serious Pokémon Trainer.</speech>
            <speech>Collect a Coupon from each clown, then come see me, OK?</speech>
        </speeches>
        <speeches id="2">
            <speech>OK, let me count your Coupons! I'll use my fancy Pokétch here...</speech>
            <speech>One, two, three! Bravo! I say, bravo!</speech>
            <speech>In return for these Coupons, I present you this brand new, high-tech Fishing Rod!</speech>
            <speech>Do you want it?</speech>
        </speeches>
        <speeches id="3">
            <speech>You are a rare case indeed!</speech>
        </speeches>
        <speeches id="4">
            <speech>If you have any questions regarding those, you can visit the Pokétch Tower.</speech>
            <speech>Our President usually goes on promotional campaigns, but he was busy today so I came instead. How lucky for you!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="2">
            <speech>Hi! I'm a Pokètch campaign clown. Let's roll out my question!</speech>
            <speech>Does a Pokèmon grow by defeating others and gaining Exp. Points?</speech>
        </speeches>
        <speeches id="3">
            <speech>That's not the correct answer. Let's try again.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ding-ding!</speech>
            <speech>You're absolutely correct.</speech>
        </speeches>
        <speeches id="5">
            <speech>Here you go! Your Pokètch coupon!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="2">
            <speech>Hi! I'm a Pokètch campaign clown. Let's roll out my question!</speech>
            <speech>Can a Pokèmon hold items?</speech>
        </speeches>
        <speeches id="3">
            <speech>That's not the correct answer. Let's try again.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ding-ding!</speech>
            <speech>You're absolutely correct.</speech>
        </speeches>
        <speeches id="5">
            <speech>Here you go! Your Pokètch coupon!</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1"/>
        <speeches id="2">
            <speech>Hi! I'm a Pokètch campaign clown. Let's roll out my question!</speech>
            <speech>Just like Pokèmon types, the moves of Pokèmon also have types?</speech>
        </speeches>
        <speeches id="3">
            <speech>That's not the correct answer. Let's try again.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ding-ding!</speech>
            <speech>You're absolutely correct.</speech>
        </speeches>
        <speeches id="5">
            <speech>Here you go! Your Pokètch coupon!</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>I should collect the Fishing Rod before they close down their Campaign.</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>I should visit the Trainer School before I leave this town.</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>There appears to be no one shady in this Jubilife City.</speech>
            <speech>I shall therefore take my investigation elsewhere. But, my friend, I suggest you remain vigilant for shady grown-ups!</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="11">
        <speeches id="1">
            <speech>Ah, $PLAYER_NAME. Well? How is the Pokédex progressing?</speech>
        </speeches>
        <speeches id="2">
            <speech>Hm! That’s Oreburgh’s Gym Badge, I see. But hadn’t I given you your first Pokémon only recently...?</speech>
            <speech>Perhaps being a Trainer is like second nature to you.</speech>
        </speeches>
        <speeches id="3">
            <speech>Quiet, you lot! Why must you be such a nuisance? Let me list some lessons you still need to learn.</speech>
            <speech>#1: Don’t loiter about for no good reason.</speech>
            <speech>#2: Don’t interrupt others while they are attempting to converse.</speech>
            <speech>#3: If you don’t get your way, don’t raise your voice to be intimidating.</speech>
            <speech>#4: Don’t think you’ve grown strong just because you’re in a group.</speech>
            <speech>#5: What is with those outlandish outfits you have on? My goodness... You call yourselves adults?</speech>
            <speech>You kids, don’t grow up to be like these sorry specimens.</speech>
        </speeches>
        <speeches id="4">
            <speech>$PLAYER_NAME, give these thugs a lesson in civility, please.</speech>
        </speeches>
        <speeches id="5">
            <speech>That lot... They called themselves Team Galactic.</speech>
            <speech>When Pokémon evolve, they seem to release some type of energy...</speech>
            <speech>However, I believe that it’s a mystic power far beyond our control.</speech>
            <speech>But Team Galactic seems to be studying that power’s potential.</speech>
            <speech>They want to know if it can be used as energy for something...</speech>
        </speeches>
        <speeches id="6">
            <speech>It’s all over, so you can relax now. Still, thanks to you two, nothing came of that situation.</speech>
            <speech>I appreciate that. Incidentally, $PLAYER_NAME.</speech>
            <speech>Kudos to you for your battling skill. It got me thinking.</speech>
            <speech>Why don’t you collect all the Gym Badges of Sinnoh?</speech>
            <speech>Doing so, you will be sure to encounter lots of Pokémon.</speech>
            <speech>That, of course, means your Pokédex pages will continuously fill up.</speech>
            <speech>In other words, it will be of great help to my research.</speech>
            <speech>That said, I’ve given you your first Pokémon and Pokédex as yours to keep.</speech>
            <speech>You’re free to do with them as you wish. Take care now.</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="12">
        <speeches id="1">
            <speech>Now, now, now, now, now! Professor Rowan, you must comply.</speech>
            <speech>Hand over all your research findings. For free, naturally.</speech>
            <speech>Failure to comply will result in a painful time for your assistant.</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh, man professor of Pokémon, must you be so difficult.</speech>
            <speech>We are speaking to you on business. Because this is work for us.</speech>
            <speech>What we're saying is--we demand your comply with our demands. </speech>
        </speeches>
        <speeches id="3">
            <speech>Eeeeeeh! You had to make this personal!</speech>
            <speech>You have forced our hand into making a show of force!</speech>
            <speech>We will make you regret insulting Team Galactic!</speech>
        </speeches>
        <speeches id="4">
            <speech>You leave us no option. We will retreat for now.</speech>
            <speech>We shall do so because Team Galactic is benevolent to all.</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="13">
        <speeches id="1">
            <speech>$PLAYER_NAME, did you know? The professor studies the evolution of Pokémon, too.</speech>
            <speech>According to his research, 90% of all Pokémon are somehow tied to evolution!</speech>
            <speech>Well, maybe that's the reason those people tried to take the professor's research data by force.</speech>
            <speech>That's really unforgivable!</speech>
        </speeches>
    </conversation>
    <npc direction="UP" hidden="false" id="1" name="Tony" sprite="72" x="65" y="46">
        <speech>I'm trading Pokémon with my buddy!</speech>
    </npc>
    <npc direction="UP" hidden="false" id="2" name="Tim" sprite="37" x="67" y="46">
        <speech>I made my Pokémon hold an item before trading it.</speech>
        <speech>That will make the other Trainer doubly happy!</speech>
    </npc>
    <movingNpc direction="DOWN" id="3" name="Jordan" shouldSleep="1" speed="1" sprite="37" x="63" y="33">
        <path>UPx3, DOWNx3</path>
        <onCollisionSpeech gap="4">Please give me space.</onCollisionSpeech>
        <speech>OK, I've got six pokeballs on my belt...</speech>
        <speech>Yeah, that'll do it. At most, you can have six Pokémon with you.</speech>
        <speech>Make sure you've got them in the order you want them in!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="4" name="Oldman Harold" shouldSleep="1" speed="1" sprite="48" x="49" y="30">
        <path>UPx2, RIGHTx3, DOWNx2, LEFTx3</path>
        <onCollisionSpeech gap="4">I'm walking here!</onCollisionSpeech>
        <speech>Hello! Let me ask you, have you paid a visit to the TV station?</speech>
        <speech>If you've never been, you owe it to yourself to make the trip.</speech>
        <speech>And, if you've been there before, it never hurts to visit again.</speech>
        <speech>After all, you can be a star! Or at least dream of being one!</speech>
    </movingNpc>
    <movingNpc direction="LEFT" id="5" name="Ashley" shouldSleep="1" speed="1" sprite="33" x="61" y="20">
        <path>LEFTx3, UPx3, RIGHTx3, DOWNx3</path>
        <onCollisionSpeech gap="4">Uhh..What happened? Don't tell me you are lost.</onCollisionSpeech>
        <speech>Hiya, where'd you come from?</speech>
        <speech>...</speech>
        <speech>Twinleaf Town, huh...It's a nice place. Quiet and all.</speech>
        <speech>Jubilife City is a big place, so it might be a bit of shock to you.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="6" name="Emma" shouldSleep="1" speed="1" sprite="12" x="44" y="17">
        <path>LEFTx4, UPx2, RIGHTx4, DOWNx2</path>
        <onCollisionSpeech gap="4">Go watch the TV!</onCollisionSpeech>
        <speech>Did you see me on TV? I was in an interview!</speech>
    </movingNpc>
    <movingNpc direction="UP" id="7" name="Ava" shouldSleep="1" speed="1" sprite="6" x="23" y="21">
        <path>LEFTx3, RIGHTx3</path>
        <onCollisionSpeech gap="4">Please give me space!</onCollisionSpeech>
        <speech>When you walk with your Pokémon, they gradually grow friendlier.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="32" name="Trevor" shouldSleep="1" speed="1" sprite="25" x="33" y="41">
        <path>LEFTx6, DOWNx3, RIGHTx6, UPx3</path>
        <onCollisionSpeech gap="4">Can I help you?</onCollisionSpeech>
        <speech>Local traders often visit the Global Terminal in search of a trade.</speech>
        <speech>There is a scientist inside that is looking for a Heracross...</speech>
        <speech>Perhaps he will give something good in return?</speech>
    </movingNpc>
    <npc direction="UP" hidden="false" id="9" name="Robert" sprite="5" x="50" y="22">
        <speech>You know what? Nature is the world around us. We, as human beings depend on nature in many different ways.</speech>
        <speech>At least there's a small park in the city...</speech>
    </npc>
    <npc direction="LEFT" hidden="false" id="10" name="Cop Lucas" sprite="126" x="27" y="53">
        <speech>Hello Trainer, I'm keeping my eyes on those bicycles, Don't try to steal one!</speech>
        <speech>I'm watching you...</speech>
    </npc>
    <npc direction="RIGHT" hidden="false" id="11" name="Thief" sprite="35" x="13" y="49">
        <speech>Can you see if there are any cops near those bicycles for me?</speech>
        <speech>...</speech>
        <speech>Uhh, why he is still there...</speech>
        <speech>I can't make my lucky break if he doesn't leave...</speech>
    </npc>
</npcs>
