<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Were you able to find Pikachu? I've been so worried ever since it ran away!</speech>
        </speeches>
        <speeches id="2">
            <speech>Thank you so much for finding my friend! You're a lifesaver! I can't thank you enough. I was so scared I wouldn't see Pikachu again.</speech>
            <speech>Here, please accept this as a token of my gratitude.</speech>  </speeches>
        <speeches id="3">
            <speech>Oh no, why would you decline the reward? It's the least I can do.</speech>  </speeches>
        <speeches id="4">
            <speech>That's so kind of you! I found this Starpiece at the beach and these Heat Shards in my dad's room.</speech>
            <speech>They're nothing special, but...</speech>
            <speech>Anyway, now that Pikachu's back, I can have some battles with it! It loves to test its skills against new trainers.</speech>
            <speech>I'll grab my other Pokémon from the Pokémon Center and be back here soon.</speech>
            <speech>You can come back here and challenge me anytime you'd like!</speech>
        </speeches>
        <speeches id="5">
            <speech>Anyway, now that Pikachu's back, I can have some battles with it! It loves to test its skills against new trainers.</speech>
            <speech>I'll grab my other Pokémon from the Pokémon Center and be back here soon.</speech>
            <speech>You can come back here and challenge me anytime you'd like!</speech>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>Welcome back, $PLAYER_NAME!</speech>
            <speech>Are you up for a real challenge? I'd love to have a tough Pokémon battle with you.</speech>
            <speech>Let's get started!</speech>
        </speeches>
        <speeches id="2">
            <speech>Wow, that was impressive! Here's a reward for your amazing skills: 30 Heat Shards.</speech>
        </speeches>
        <speeches id="3">
            <speech>I need a short break to recharge. Come back in $DURATION, and I'll be ready for an even tougher battle!</speech>
        </speeches>
        <speeches id="4">
            <speech>I warned you, this wouldn't be a walk in the park!</speech>
        </speeches>
        <speeches id="5">
            <speech>I enjoy a good challenge, so I'll only battle you if you have a self-caught Pikachu minimum level 80 in its summer form in your party.</speech>
            <speech>It's a one-on-three battle, so you can only bring one Pokémon.</speech>
        </speeches>
    </conversation>

    <conversation id="4">
        <speeches id="1">
            <speech>Were you able to find Pikachu? I've been deeply concerned ever since it was taken.</speech>
        </speeches>
        <speeches id="2">
            <speech>Thank you so much for rescuing Pikachu. Your bravery is commendable.</speech>
            <speech>I can't express how relieved and grateful I am.</speech>
            <speech>As a token of my appreciation, please accept this Summer Thunder Stone and these Squirtle Squad Shades.</speech>
            <speech>These items hold special significance for us.</speech>
        </speeches>
        <speeches id="3">
            <speech>Please, don't decline the reward. It's the least I can do for your help.</speech>
        </speeches>
        <speeches id="4">
            <speech>I'm glad you understand. These items mean a lot to us.</speech>
            <speech>Additionally, I have good news.</speech>
            <speech>Sylvaris has learned his lesson and now vows to protect the jungles.</speech>
            <speech>He was impressed by your battle and is eager to face new challenges.</speech>
            <speech>Feel free to challenge Sylvaris in the forests anytime you'd like.</speech>
        </speeches>
        <speeches id="5">
            <speech>Did you get time to challenge Sylvaris again?</speech>
        </speeches>
    </conversation>


</npcs>
