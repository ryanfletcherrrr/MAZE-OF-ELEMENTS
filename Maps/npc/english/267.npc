<npcs>
    <!-- Scientist Arya - Initial Quest Trigger -->
    <conversation id="1">
        <speeches id="1">
            <speech>Fascinating... these ruins are unlike anything we've documented before.</speech>
            <speech>The inscriptions seem to reference some kind of elemental gathering ritual.</speech>
            <speech>There's talk of a wise sage on Route 120 who might know more about these ancient patterns.</speech>
            <speech>You look like a capable trainer. Perhaps you could seek out this Sage Eron?</speech>
        </speeches>
        <speeches id="2">
            <speech>The ruins continue to puzzle us. Have you spoken with Sage Eron on Route 120 yet?</speech>
            <speech>His knowledge of ancient Hoenn lore could be the key to understanding this place.</speech>
        </speeches>
    </conversation>
    <!-- Archeologist Marcus - Supporting Lore -->
    <conversation id="2">
        <speeches id="1">
            <speech>These stone carvings depict strange letter-like symbols... almost like Pokémon shapes.</speech>
            <speech>My research suggests this site is connected to the legendary Regi Pokémon somehow.</speech>
            <speech>But we need more information. Perhaps that old sage on Route 120 knows something?</speech>
            <speech>The patterns here... they seem to require specific elemental offerings.</speech>
        </speeches>
        <speeches id="2">
            <speech>The stone patterns keep shifting when we're not looking directly at them.</speech>
            <speech>Something ancient slumbers beneath Fennel Valley, I'm certain of it.</speech>
        </speeches>
    </conversation>
    <!-- Miner Kellan - Practical Observations -->
    <conversation id="3">
        <speeches id="1">
            <speech>Been digging around these parts for years, but these ruins... they're different.</speech>
            <speech>The ground vibrates strangely near the inscriptions, like something's stirring below.</speech>
            <speech>Word is there's a sage fellow on Route 120 who studies this old mystical stuff.</speech>
            <speech>If anyone can make sense of these carvings, it'd be him.</speech>
        </speeches>
        <speeches id="2">
            <speech>Still hearing those strange vibrations from deep underground.</speech>
            <speech>Whatever's down there, it's been waiting a very long time.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Hold there, traveler. I sense you approach these depths without proper understanding.</speech>
            <speech>The passages beyond are treacherous - ancient traps and guardians await those who enter unprepared.</speech>
            <speech>You lack the knowledge to navigate what lies below. The labyrinth would consume you whole.</speech>
            <speech>Seek out the wisdom keepers first. Only when you truly understand the {COLOR=GOLD}Hidden Labyrinth{ENDCOLOR} may you pass safely.</speech>
            <speech>Return when the ancient knowledge flows through you, and I shall grant you passage.</speech>
        </speeches>
    </conversation>
    <npc direction="LEFT" hidden="false" id="1" name="Lior the Wanderer" randomRotation="false" sprite="10" x="24" y="26">
        <speech>I've traveled across Kanto, but this valley... it has a quiet strength.</speech>
        <speech>The kind of place you stumble into when you're ready to find it.</speech>
    </npc>
    <movingNpc direction="DOWN" id="3" name="Combee" shouldSleep="" speed="1" sprite="415" type="pokemon" x="32" y="24">
        <path>DOWNx3,UPx3</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="4" name="Goldeen" shouldSleep="" speed="1" sprite="118" type="pokemon" x="24" y="29">
        <path>RIGHTx4,LEFTx4</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="5" name="Lost Tourist Bina" shouldSleep="" speed="1" sprite="17" type="npc" x="9" y="7">
        <path>DOWNx3,LEFTx3,RIGHTx3,UPx3</path>
        <onCollisionSpeech gap="4"/>
        <speech>Funny thing is I was aiming for Fuchsia City and somehow ended up here.</speech>
        <speech>Best wrong turn I've ever made!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Camp Leader Fuego" shouldSleep="" speed="1" sprite="20" type="npc" x="15" y="8">
        <path>DOWNx3,RIGHTx5,UPx3,DOWNx3,LEFTx5,UPx3</path>
        <onCollisionSpeech gap="4"/>
        <speech>This is a good place to rest.</speech>
        <speech>I tell my campers: don't just race through life... sit, watch the clouds, listen to the Onix pass by.</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="6" name="Camper Lino" randomRotation="true" sprite="2" x="20" y="14">
        <speech>Camp Leader Fuego says I need to slow down and enjoy the view, but I just want to catch all the Combee before they buzz off!</speech>
    </npc>
    <movingNpc direction="DOWN" id="7" name="Poliwag" shouldSleep="" speed="1" sprite="60" type="pokemon" x="28" y="1">
        <path>DOWNx3,UPx3</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="8" name="Combee" shouldSleep="" speed="1" sprite="415" type="pokemon" x="7" y="15">
        <path>RIGHTx2,UPx2,DOWNx2,LEFTx2</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="9" name="Pidgeotto" shouldSleep="" speed="1" sprite="17" type="pokemon" x="19" y="2">
        <path>RIGHTx4,LEFTx4</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="10" name="Magikarp" shouldSleep="" speed="1" sprite="129" type="pokemon" x="20" y="5">
        <path>RIGHTx1,LEFTx1</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
</npcs>
