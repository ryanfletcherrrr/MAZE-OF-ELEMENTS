<npcs>
    <conversation id="1">
        <!-- First Battle (Uses Original Game Dialogues) -->
        <speeches id="1">
            <speech>Hi! You're a new face!</speech>
            <speech>Only Trainers with a {COLOR=BLUE}strong mindset{ENDCOLOR} can master Pokémon battling!</speech>
            <speech>What's your approach when you catch and train Pokémon?</speech>
            <speech>My policy is an all-out offensive with {COLOR=CYAN}Water-type Pokémon{ENDCOLOR}!</speech>
            <speech>Let's see if you can handle the waves!</speech>
        </speeches>
        <speeches id="2">
            <speech>Wow! You're really something!</speech>
            <speech>Here, take this as proof of your victory—you've earned it!</speech>
            <speech>Oh, and here's {COLOR=BLUE}TM03{ENDCOLOR}—it contains {COLOR=CYAN}Water Pulse{ENDCOLOR}! Its power can overwhelm opponents like an unrelenting tide!</speech>
        </speeches>
        <speeches id="3">
            <speech>Hah! You weren't ready to ride this current yet!</speech>
            <speech>Go train, and when you stop sinking, try again!</speech>
        </speeches>
        <speeches id="4">
            <speech>Oh? Not ready yet? That's fine.</speech>
            <speech>The tides always return, and so do challengers. I'll be waiting.</speech>
        </speeches>
        <!-- Repeated Battle (Tougher, More Competitive) -->
        <speeches id="5">
            <speech>Oh, back for more? Think you can tame the storm?</speech>
            <speech>{COLOR=CYAN}Water is relentless{ENDCOLOR}. It crashes, it erodes, and it never stops moving.</speech>
            <speech>If you can't keep up, you'll get swept away—let's see if you can handle the pressure!</speech>
        </speeches>
        <speeches id="6">
            <speech>Whoa... You've really sharpened your skills!</speech>
            <speech>{COLOR=GOLD}$TOTAL_VICTORY{ENDCOLOR} wins against me... and {COLOR=CYAN}$CONSECUTIVE{ENDCOLOR} in a row?!</speech>
            <speech>Looks like you're not just floating anymore—you're commanding the tides yourself!</speech>
        </speeches>
        <speeches id="7">
            <speech>Ha! You thought you had me figured out?</speech>
            <speech>The ocean doesn't care how many times you've battled—it only rewards those who can survive it!</speech>
            <speech>Come back when you've trained harder... or learn to swim!</speech>
        </speeches>
        <speeches id="8">
            <speech>What? No battle? Afraid of the deep end?</speech>
            <speech>That's fine, but don't keep me waiting forever—I love watching trainers struggle to stay afloat!</speech>
        </speeches>
        <speeches id="9">
            <speech>Another rematch already? Heh, slow down there!</speech>
            <speech>The ocean doesn't rush its waves, and neither do I. Come back in {COLOR=BLUE}$DURATION{ENDCOLOR}.</speech>
            <speech>Then we'll see if you're still ready to make a splash!</speech>
        </speeches>
        <!-- Special Condition: Battle Requirement Not Met -->
        <speeches id="10">
            <speech>Whoa, hold up! You're not even properly prepared.</speech>
            <speech>I only battle Trainers who have {COLOR=CYAN}at least 3 Water-type Pokémon{ENDCOLOR} in their team.</speech>
            <speech>Come back when your team flows like the ocean itself!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Water flows wherever it wants... and right now, it's flowing right over you!</speech>
        </speeches>
        <speeches id="2">
            <speech>Guess I was caught in the undertow...</speech>
        </speeches>
        <speeches id="3">
            <speech>Guess I was caught in the undertow...</speech>
        </speeches>
        <speeches id="4">
            <speech>See? Going with the flow always works!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Did you know Misty's been swimming since she was a kid? She's a real inspiration!</speech>
        </speeches>
        <speeches id="2">
            <speech>Looks like I swam a little too hard...</speech>
        </speeches>
        <speeches id="3">
            <speech>Looks like I swam a little too hard...</speech>
        </speeches>
        <speeches id="4">
            <speech>Endurance wins the race! That's what Misty taught me!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Water-types are strong because they adapt to any challenge. Can you?</speech>
        </speeches>
        <speeches id="2">
            <speech>Looks like I need to fine-tune my strategy...</speech>
        </speeches>
        <speeches id="3">
            <speech>Looks like I need to fine-tune my strategy...</speech>
        </speeches>
        <speeches id="4">
            <speech>You're not bad, but you've still got a lot to learn!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>I'm training for a triathlon, and swimming's my strongest event! Think you can keep up?</speech>
        </speeches>
        <speeches id="2">
            <speech>Guess I should've paced myself better...</speech>
        </speeches>
        <speeches id="3">
            <speech>Guess I should've paced myself better...</speech>
        </speeches>
        <speeches id="4">
            <speech>Speed and stamina! That's how you win race...and battles!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Misty says battling is all about endurance. I train the same way!</speech>
        </speeches>
        <speeches id="2">
            <speech>Aww... I sank like a rock...</speech>
        </speeches>
        <speeches id="3">
            <speech>Aww... I sank like a rock...</speech>
        </speeches>
        <speeches id="4">
            <speech>See? I'm like a wave...unstoppable!</speech>
        </speeches>
    </conversation>
    <movingNpc direction="RIGHT" id="1" name="Golduck" speed="1" sprite="55" type="pokemon" x="10" y="24">
        <path>RIGHTx2,LEFTx2</path>
        <onCollisionSpeech gap="4">Golduuuck!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="LEFT" id="2" name="Tatsugiri" speed="1" sprite="1458" type="pokemon" x="9" y="13">
        <path>LEFTx3,RIGHTx3</path>
        <onCollisionSpeech gap="4">Tatsuuu!</onCollisionSpeech>
    </movingNpc>
</npcs>
