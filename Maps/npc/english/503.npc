<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>What's going on...?</speech>
        </speeches>
        <speeches id="2">
            <speech>What was that about?</speech>
            <speech>Weird guy..</speech>
            <speech>OK $PLAYER_NAME! Let's catch that legendary Pokémon!</speech>
        </speeches>
        <speeches id="3">
            <speech>!Did you hear that, $PLAYER_NAME?!</speech>
            <speech>That was the legendary Pokémon crying!</speech>
            <speech>That had to be it! OK! This is our chance!</speech>
            <speech>Let’s catch it!</speech>
            <speech>...Wait! What...?!</speech>
            <speech>We don’t have anything on us!</speech>
            <speech>You know, Poké Balls! P-O-K-accent-E Balls!</speech>
            <speech>If we don't have those, we can't catch Pokémon or take them around with us!</speech>
            <speech>...Do you think Prof. Rowan'd give us some if we asked him?</speech>
            <speech>You know, you remember what he said, don't you?</speech>
            <speech>He said to visit him at his lab if we needed anything. OK, $PLAYER_NAME! I'll race you!</speech>
            <speech>First one to the professor's lab in Sandgem Town rules!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>...The flowing time...</speech>
            <speech>The expanding space...</speech>
            <speech>I will make it all mine one day...</speech>
            <speech>Cyrus is my name. Remember it...</speech>
            <speech>Until then, sleep while you can, legendary Pokémon of the lake bed....</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>That face...! It brings back bad memories! I'm talking about the windworks!</speech>
            <speech>I caught a whole lot of trouble for that little incident. What's with that look on your face?
            </speech>
            <speech>You do remember me, don't you? Fine, whatever. I'll tell you who I am again!</speech>
            <speech>I'm Mars, one of Team Galactic's Commanders. So, what is it?</speech>
            <speech>Are you some lovey-dovey couple to the rescue?</speech>
            <speech>Not a chance! Not even a teeny one! You're all going down!</speech>
        </speeches>
        <speeches id="2">
            <speech>I lost again...</speech>
            <speech>So, first the windworks, and now Lake Verity that I owe you for!</speech>
            <speech>This shouldn't be happening to Team Galactic's Commander...</speech>
            <speech>...Calm down, Mars... I've done my part in all of this... My mission was to transport the lake's
                Pokémon to our HQ...
            </speech>
            <speech>...That's right! I accomplished my mission without a problem! Team! We're pulling out! The boss is
                waiting at the HQ!
            </speech>
            <speech>The Pokémon of the three lakes are connected somehow. Thanks to Saturn's grandstanding at Lake
                Valor, a cavern appeared here.
            </speech>
            <speech>It was the cavern where the Pokémon Mesprit slept. Mesprit appeared, too, probably
                to go help its friends.
            </speech>
            <speech>That worked out well for us. It was super easy to catch.</speech>
            <speech>So, now we've got them all</speech>
            <speech>Mesprit, the Being of Emotion.</speech>
            <speech>Azelf, the Being of Willpower.</speech>
            <speech>Uxie, the Being of Intelligence.</speech>
            <speech>Now that we have them all... You can look forward to what plans Team Galactic has for them!</speech>
        </speeches>
        <speeches id="3">
            <speech>How did you manage to get this far?</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Ah, $PLAYER_NAME! What timing!</speech>
            <speech>Those Team Galactic scoundrels are after the legendary Pokémon!</speech>
            <speech>You've got to help Dawn!</speech>
        </speeches>
        <speeches id="2">
            <speech>How dare you! You misguided thugs! $PLAYER_NAME! Dawn needs your help!</speech>
        </speeches>
        <speeches id="3">
            <speech>I see... This also occurred at Lake Valor...</speech>
            <speech>Another legendary Pokémon was taken away by Team Galactic...</speech>
            <speech>Both of you went up against full-fledged criminals...</speech>
            <speech>The fact that you're unharmed is reason enough to celebrate. ...But what about Barry?</speech>
            <speech>What is happening at Lake Acuity? Is Barry safe?</speech>
            <speech>I need you to go to Lake Acuity right away. I'm worried about Barry.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Ow! Ouch! What's with the old timer?</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="6">
        <speeches id="1">
            <speech>It is our mission to stall you. Sorry but we gotta do our job.</speech>
        </speeches>
        <speeches id="2">
            <speech>Losing was a part of my job, too. ...I feel better by saying that.</speech>
        </speeches>
        <speeches id="3">
            <speech>Losing was a part of my job, too. ...I feel better by saying that.</speech>
        </speeches>
        <speeches id="4">
            <speech>Don't come back here again.</speech>
        </speeches>
        <speeches id="5"/>
    </conversation>
    <conversation canSkip="false" id="7">
        <speeches id="1">
            <speech>I'll knock all your Pokémon into Orbit!</speech>
        </speeches>
        <speeches id="2">
            <speech>My mind is going orbital.</speech>
        </speeches>
        <speeches id="3">
            <speech>My mind is going orbital.</speech>
        </speeches>
        <speeches id="4">
            <speech>Don't come back here again.</speech>
        </speeches>
        <speeches id="5"/>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>$PLAYER_NAME! It's T-Team Galactic! Oh no! The Pokémon of the lake...?</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>*Lapras wants to carry you somewhere*</speech>
            <speech>Do you want to travel with the Lapras?</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>*The little Penguin is trying to take you somewhere*</speech>
            <speech>Do you want to travel with the little Penguin?</speech>
        </speeches>
    </conversation>
    <conversation id="12" canSkip="false">
        <speeches id="1">
            <!-- Before Battle Speech -->
            <speech>You again? I've heard about your little achievement. One million in Dynamax damage, was it?</speech>
            <speech>Not bad, but let's see if you're any good in a real battle. I'm not going easy on you!</speech>
            <speech>Choose your level of difficulty. I hope you’re ready for what's coming.</speech>
        </speeches>
        <speeches id="2">
            <!-- Victory Speech -->
            <speech>What? You beat me? This doesn’t happen... to a Team Galactic Commander!</speech>
            <speech>Enjoy your victory, it won't last. I'll come back stronger than ever!</speech>
        </speeches>
        <speeches id="3">
            <!-- Not Battling Speech -->
            <speech>Running away? I expected more from you. Very well, we'll meet again.</speech>
            <speech>Let's say, after $DURATION? Use the time wisely. Next time, no running.</speech>
        </speeches>
        <speeches id="4">
            <!-- Loss Speech -->
            <speech>Ha! Just as I thought. You're not ready to face someone like me.</speech>
            <speech>Come back when you've toughened up. I'll be waiting for a real challenge.</speech>
        </speeches>
        <speeches id="5">
            <!-- Before Criteria Speech -->
            <speech>Wait, you haven't dealt [GOLD]1 million Dynamax damage[] yet? That's disappointing.</speech>
            <speech>Come back when you're not just talk. I'll be waiting to test your true strength.</speech>
        </speeches>
    </conversation>

    <movingNpc direction="DOWN" id="1" name="Tentacool" shouldSleep="" speed="1" sprite="72" type="pokemon" x="17" y="30">
        <path>LEFTx3, RIGHTx3, DOWNx2, UPx2</path>
        <onCollisionSpeech gap="4">*The Tentacool slaps you with a tentacle as you pass by*</onCollisionSpeech>
        <speech>Tenta!</speech>
    </movingNpc>
    <movingNpc direction="LEFT" id="2" name="Lapras" shouldSleep="" speed="1" sprite="131" type="pokemon" x="40" y="20">
        <path>LEFTx2, RIGHTx2, UPx2, DOWNx2</path>
        <onCollisionSpeech gap="4">*The Lapras stares at you with a serene gaze*</onCollisionSpeech>
        <speech>Laaaaaaaapras!!</speech>
    </movingNpc>
    <movingNpc direction="LEFT" id="3" name="Gyarados" shouldSleep="" speed="1" sprite="130" type="pokemon" x="22" y="10">
        <path>LEFTx3, RIGHTx3</path>
        <onCollisionSpeech gap="4">*The Gyarados roars at you and glares!*</onCollisionSpeech>
        <speech>GYARA!!!!</speech>
    </movingNpc>
</npcs>
