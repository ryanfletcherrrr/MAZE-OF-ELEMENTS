<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Greetings trainer. Are you interested in a battle?</speech>
            <speech>Let's do it now!</speech>
        </speeches>
        <speeches id="2">
            <speech>Thank's. I wasn't very confident.</speech>
        </speeches>
        <speeches id="3">
            <speech>I gotta build my confidence.</speech>
        </speeches>
        <speeches id="4">
            <speech>Thank you, I feel better now.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Changing the world means changing yourself first!</speech>
            <speech>Do you agree?!</speech>
        </speeches>
        <speeches id="2">
            <speech>I need some changes.</speech>
        </speeches>
        <speeches id="3">
            <speech>Elite 4 needs a change, me on their spot!</speech>
        </speeches>
        <speeches id="4">
            <speech>You can't change the taste of defeat you just had.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>I don't want to fight you.</speech>
            <speech>I want to DESTROY you!</speech>
        </speeches>
        <speeches id="2">
            <speech>What just happened?</speech>
        </speeches>
        <speeches id="3">
            <speech>You destroyed me.</speech>
        </speeches>
        <speeches id="4">
            <speech>Been there, done that.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>I have friends around Jvaloh. Pokémon battles unite people.</speech>
            <speech>Do you wanna be my friend?</speech>
        </speeches>
        <speeches id="2">
            <speech>We are forever friends now!</speech>
        </speeches>
        <speeches id="3">
            <speech>Good luck my friend!</speech>
        </speeches>
        <speeches id="4">
            <speech>Go back, friend.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Why is it Elite 4 and not Elite 5?</speech>
            <speech>See how strong I am!</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh, never mind.</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh, never mind.</speech>
        </speeches>
        <speeches id="4">
            <speech>See?!</speech>
        </speeches>
    </conversation>
</npcs>
