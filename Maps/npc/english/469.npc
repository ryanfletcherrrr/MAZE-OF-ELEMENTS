<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>... Who are you?</speech>
            <speech>Yes. For the time being...get away from me.</speech>
            <speech>The Pokémon behind me... Its Mega Stone... No more...no less.</speech>
            <speech>That is what... That's what we of Team Magma seek.</speech>
            <speech>How about it? Will you get away from me... or not?</speech>
            <speech>What are you trying to do?! ...To the world. ...To us.</speech>
            <speech>...To Team Magma. This can never, ever be forgiven!</speech>
            <speech>... Well then..</speech>
            <speech>Deleting...</speech>
        </speeches>
        <speeches id="2">
            <speech>... Slurp. </speech>
            <speech>As anticipated. Unanticipated. You. Target lock...completed. Commencing...experiment. You. Forever. Aha...</speech>
            <speech>Returning home.</speech>
        </speeches>
        <speeches id="3">
            <speech>... Slurp. </speech>
            <speech>As anticipated. Unanticipated. You. Target lock...completed. Commencing...experiment. You. Forever. Aha...</speech>
            <speech>Returning home.</speech>
        </speeches>
        <speeches id="4">
            <speech>Now go away!</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>Latios...</speech>
            <speech>...It's beautiful...</speech>
            <speech>If I were to describe such beauty in terms of a stone, it would be a Sun Stone...</speech>
            <speech>No... It goes beyond that... Isn't it?</speech>
            <speech>Hm? Team Magma</speech>
            <speech>So Latios noticed their coming, and that is why it called on us.</speech>
            <speech>Let's protect Latios from these Beasts.</speech>
            <speech>We cannot allow Latios or even a Mega Stone to fall into the hands of such villains!</speech>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>So Latios noticed their coming, and that is why it called on us.</speech>
            <speech>Let's protect Latios from these Beasts.</speech>
            <speech>We cannot allow Latios or even a Mega Stone to fall into the hands of such villains!</speech>
        </speeches>

        <speeches id="2">
            <speech>Hah...</speech>
            <speech>Good work, $PLAYER_NAME.</speech>
            <speech>You performed spectacularly. We were able to protect both this wondrous Pokémon and its Mega Stone, thanks to you.</speech>
            <speech>And it looks as though Latios may have also recognized you.</speech>
            <speech>Look. It's looking at you continuously. It looks like you have earned its respect, maybe one day it will come back for you.</speech>
            <speech>Anyway, you should take this from me.</speech>
            <speech>Please accept this Mega Bracelet.</speech>
        </speeches>

        <speeches id="3">
            <speech>If you don't accept the Mega Bracelet, you will fall far behind others...</speech>
            <speech>But that's your wish, I am here only if you decide to change your mind.</speech>
        </speeches>

        <speeches id="4">
            <speech>With the Mega Bracelet that I just gave you and the Mega Stones that a Pokémon may hold,</speech>
            <speech>your Pokémon will be able to achieve a powerful boost, quite unlike any usual form of Evolution.</speech>
            <speech>but only if you are bound by great affection. You will be able to achieve Mega Evolution.</speech>
            <speech>Mega Evolution is a phenomenon that has long been shrouded in mystery.</speech>
            <speech>What is a Mega Stone? What is a Key Stone? The process by which bonds between Pokémon and people manifest in tangible power.</speech>
            <speech>How do we explain that?</speech>
            <speech>I hope that the Mega Bracelet I just gave you might bring us one step closer to finding the answer to these questions.</speech>
            <speech>If that settles that.</speech>
            <speech>Should we be heading back? Meet me at the entrance and I will take you back.</speech>
        </speeches>

        <speeches id="5">
            <speech>With the Mega Bracelet that I just gave you and the Mega Stones that a Pokémon may hold,</speech>
            <speech>your Pokémon will be able to achieve a powerful boost, quite unlike any usual form of Evolution.</speech>
            <speech>but only if you are bound by great affection. You will be able to achieve Mega Evolution.</speech>
            <speech>Mega Evolution is a phenomenon that has long been shrouded in mystery.</speech>
            <speech>What is a Mega Stone? What is a Key Stone? The process by which bonds between Pokémon and people manifest in tangible power.</speech>
            <speech>How do we explain that?</speech>
            <speech>I hope that the Mega Bracelet I just gave you might bring us one step closer to finding the answer to these questions.</speech>
            <speech>If that settles that.</speech>
            <speech>Should we be heading back? Meet me at the entrance and I will take you back.</speech>
        </speeches>
    </conversation>
</npcs>