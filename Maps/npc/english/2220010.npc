<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>This mansion holds secrets beyond imagination..and I intend to uncover them all! But first, let's test your intellect in battle!</speech>
        </speeches>
        <speeches id="2">
            <speech>Fascinating...your strategy outperformed my calculations. I'll need to reassess my approach.</speech>
        </speeches>
        <speeches id="3">
            <speech>Fascinating...your strategy outperformed my calculations. I'll need to reassess my approach.</speech>
        </speeches>
        <speeches id="4">
            <speech>As expected! Knowledge and preparation are the cornerstones of success. You should take notes.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Even among ruins, a true warrior never falters. I train my fists and my mind in places of history and strength. Show me what you've got!</speech>
        </speeches>
        <speeches id="2">
            <speech>Impressive..Your technique is strong. I must refine my own further.</speech>
        </speeches>
        <speeches id="3">
            <speech>Impressive..Your technique is strong. I must refine my own further.</speech>
        </speeches>
        <speeches id="4">
            <speech>Your strikes lack discipline! Train harder, and perhaps    we'll meet again!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>This place has a wicked vibe! The echoes, the history..it's like a song waiting to be played. Let's see if you can keep up with my rhythm!</speech>
        </speeches>
        <speeches id="2">
            <speech>Whoa, you totally threw me off my beat! Gotta fine-tune my skills.</speech>
        </speeches>
        <speeches id="3">
            <speech>Whoa, you totally threw me off my beat! Gotta fine-tune my skills.</speech>
        </speeches>
        <speeches id="4">
            <speech>That was like a killer solo flawless and electrifying!</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="2" name="lampert" speed="1" sprite="608" type="pokemon" x="45" y="6">
        <path>DOWNx3,LEFTx2,RIGHTx2,UPx3</path>
        <onCollisionSpeech gap="4">Laaamp!</onCollisionSpeech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="3" name="Alfred" randomRotation="true" sprite="112" x="36" y="9">
        <speech>I don't mind if Lampent overcooks my food.</speech>
        <speech>It's made with love, and to me, that's the finest ingredient of all.</speech>
    </npc>
    <movingNpc direction="DOWN" id="4" name="Numel" speed="1" sprite="322" type="pokemon" x="33" y="23">
        <path>DOWNx3,UPx3</path>
        <onCollisionSpeech gap="4">Nuuu?</onCollisionSpeech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="5" name="Nicholas" randomRotation="true" sprite="75" x="2" y="20">
        <speech>Came all this way to offer a hefty sum to buy the mansion and uncover its secrets.</speech>
        <speech>But apparently, it's a protected property.</speech>
        <speech>Tsk... I guess some things just can't be bought.</speech>
    </npc>
    <movingNpc direction="RIGHT" id="6" name="Maxwell" speed="1" sprite="29" type="npc" x="41" y="23">
        <path>RIGHTx4,LEFTx4</path>
        <onCollisionSpeech gap="4"/>
        <speech>I can barely paint without falling through the floor..</speech>
        <speech>And yet, it's just so beautiful here.</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="7" name="" randomRotation="false" sprite="162" x="16" y="21">
        <speech>- fragment from a scorched field notebook, edges singed -</speech>
        <speech>..odd how it always begins in white. One room, one choice, one path untouched. The labs light - sterile, still.</speech>
        <speech>Then comes blue. Two beings. Two rivals. The split.</speech>
        <speech>White holds potential. Blue, consequence.</speech>
        <speech>Perhaps all of Kanto unfolds from that first -</speech>
        <speech>(the rest of the page is missing)</speech>
    </npc>
</npcs>
