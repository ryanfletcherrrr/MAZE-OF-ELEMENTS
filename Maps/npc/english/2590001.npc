<npcs>
    <npc direction="LEFT" hidden="false" id="1" name="Mark" randomRotation="false" sprite="16" x="22" y="15">
        <speech>I strongly recommend grabbing some Max Revives or Full Restores if you're heading to the Elite Four.</speech>
        <speech>They wiped out my Mega Gyarados like it was nothing!</speech>
    </npc>
    <movingNpc direction="RIGHT" id="2" name="Popeye" speed="1" sprite="11" type="npc" x="26" y="20">
        <path>RIGHTx4,LEFTx4</path>
        <onCollisionSpeech gap="4"/>
        <speech>Ahoy!</speech>
        <speech>I'm strong to the finish 'cause I eats my Spinach</speech>
    </movingNpc>
    <npc direction="UP" hidden="false" id="3" name="Robert" randomRotation="true" sprite="5" x="33" y="10">
        <speech>There's no shame in training a bit more, child.</speech>
        <speech>If you're not ready to be Champion just yet, that's perfectly fine.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="5" name="Lisa" randomRotation="false" sprite="31" x="12" y="2">
        <speech>I always do the sidequests.</speech>
        <speech>You never know one reward might be an even better sidequest!</speech>
        <speech>It's like treasure hunting, really.</speech>
    </npc>
    <movingNpc direction="UP" id="4" name="Linda" speed="1" sprite="68" type="npc" x="1" y="19">
        <path>UPx5,DOWNx5</path>
        <onCollisionSpeech gap="4"/>
        <speech>I've heard that using Pokémon with the ability Moxie can be really helpful against the Elite Four.</speech>
    </movingNpc>

    <conversation id="6" canSkip="false">
        <speeches id="1">
            <speech>Hey there, $PLAYER_NAME! Great to see you again!</speech>
            <speech>Man, it feels like just yesterday I was that kid from Pallet Town with big dreams and zero experience!</speech>
            <speech>Now look at me - Kanto Champion! Still can't quite believe it sometimes!</speech>
            <speech>But you know what? The best part isn't the title or the fame - it's all the amazing Pokémon I've met and the friends I've made along the way.</speech>
            <speech>Pikachu and I have been through so much together, and every battle just makes our bond stronger!</speech>
            <speech>So, what level of challenge are you looking for today? I promise Pikachu and I will give you everything we've got!</speech>
        </speeches>
        <speeches id="2">
            <speech>Wow! That was an absolutely incredible battle, $PLAYER_NAME!</speech>
            <speech>You and your Pokémon fought with such heart - I could really feel the trust between you!</speech>
            <speech>That's what I love most about being Champion - getting to battle trainers who truly understand what it means to be partners with their Pokémon!</speech>
            <speech>Keep training hard and never forget that the strongest power comes from believing in each other!</speech>
        </speeches>
        <speeches id="3">
            <speech>Alright! You got me this time, but that just means I need to train even harder!</speech>
            <speech>Pikachu and I never back down from a challenge - that's how we made it this far!</speech>
            <speech>Give us $DURATION to get back out there and work on some new strategies with the whole team.</speech>
            <speech>Thanks for the awesome battle, $PLAYER_NAME! Defeats like this just fuel our determination to become even stronger!</speech>
        </speeches>
        <speeches id="4">
            <speech>That battle was everything I love about being a Pokémon trainer!</speech>
            <speech>Win or lose, every battle teaches us something new about ourselves and our Pokémon!</speech>
            <speech>You've got real talent, $PLAYER_NAME, and I can tell your Pokémon absolutely trust you!</speech>
            <speech>I'll be here whenever you want to battle again - Pikachu and I are always ready for the next adventure!</speech>
        </speeches>
        <speeches id="5">
            <speech>Alright, before we get started, I gotta ask - are you and your team ready for this?</speech>
            <speech>Being Kanto Champion means I can't hold back, even though I still love having fun in battle!</speech>
            <speech>Pikachu and all my Pokémon have been training super hard, and we're fired up to show you what we can do!</speech>
            <speech>This is gonna be the kind of battle that gets your heart racing - I can already feel the excitement!</speech>
        </speeches>
    </conversation>
    
    <conversation id="7">
        <speeches id="1">
            <speech>Aloha! I'm Naia, a botanist from the {COLOR=CYAN}Alola region{ENDCOLOR} studying tropical growth patterns.</speech>
            <speech>In Alola, our Exeggutor are magnificent - they're {COLOR=GREEN}Grass/Dragon{ENDCOLOR} types that grow incredibly tall!</speech>
            <speech>The abundant sunlight in Alola allows Exeggutor to grow to their true potential, unlocking their dragon heritage.</speech>
            <speech>Their incredible height and dragon typing represent their true form when exposed to optimal tropical conditions.</speech>
            <speech>If you have a {COLOR=GREEN}Kanto Exeggutor{ENDCOLOR} that you caught yourself, I'd love to trade you an {COLOR=CYAN}Alolan Exeggutor{ENDCOLOR}!</speech>
            <speech>I'm collecting specimens to study how optimal sunlight conditions affect growth and typing changes.</speech>
        </speeches>

        <speeches id="2">
            <speech>Excellent! You have a {COLOR=GREEN}Kanto Exeggutor{ENDCOLOR} that you caught yourself!</speech>
            <speech>Would you like to trade your {COLOR=GREEN}Kanto Exeggutor{ENDCOLOR} for my {COLOR=CYAN}Alolan Exeggutor{ENDCOLOR}?</speech>
            <speech>The Alolan ones reach their {COLOR=GREEN}true dragon potential{ENDCOLOR} and grow incredibly tall!</speech>
        </speeches>

        <speeches id="3">
            <speech>I understand - Exeggutor are quite impressive Pokémon as they are.</speech>
            <speech>I'll be here studying tropical growth patterns whenever you're ready!</speech>
        </speeches>

        <speeches id="4">
            <speech>{COLOR=GOLD}Fantastic!{ENDCOLOR} Another specimen for my growth research!</speech>
            <speech>Let me take your {COLOR=GREEN}Kanto Exeggutor{ENDCOLOR} and give you this towering {COLOR=CYAN}Alolan Exeggutor{ENDCOLOR}.</speech>
            <speech>This Alolan Exeggutor has unlocked its {COLOR=GREEN}dragon heritage{ENDCOLOR} through optimal tropical sunlight exposure!</speech>
            <speech>You'll be amazed at how tall and majestic it can grow!</speech>
            <speech>I'm studying how sunlight affects Pokémon growth potential, so if you find more {COLOR=GREEN}Kanto Exeggutor{ENDCOLOR}, please bring them!</speech>
            <speech>Each trade helps my {COLOR=BLUE}botanical research{ENDCOLOR} and gives you another magnificent {COLOR=CYAN}Alolan Exeggutor{ENDCOLOR}!</speech>
        </speeches>
    </conversation>
</npcs>
