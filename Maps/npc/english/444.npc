<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Hello. We met in Granite Cave, didn't we?</speech>
            <speech>No, I remember it. It's $PLAYER_NAME... Right?</speech>
            <speech>It's good to see that your journey is going well.</speech>
            <speech>I was returning to Southern Island to help a mysterious Pokémon who just appeared crying for help.</speech>
            <speech>Now that you are here $PLAYER_NAME. Come with me.</speech>
            <speech>I can use a hand there. Will you join me?</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>I should help Steven before I leave this map.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>There's a certain etiquette to battles with glamorous, elegant ladies.</speech>
        </speeches>
        <speeches id="2">
            <speech>Such an immodest way of battling! I just can't be around it!</speech>
        </speeches>
        <speeches id="3">
            <speech>Such an immodest way of battling! I just can't be around it!</speech>
        </speeches>
        <speeches id="4">
            <speech>Fool! Oh no, there I go again...</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>I can really cut loose in Pokémon battles without getting scolded.</speech>
        </speeches>
        <speeches id="2">
            <speech>You like a big fight, don't ya? You're my new pal!</speech>
        </speeches>
        <speeches id="3">
            <speech>You like a big fight, don't ya? You're my new pal!</speech>
        </speeches>
        <speeches id="4">
            <speech>Nobody scolds me. That's why Pokémon battles are the best!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Here I go! I battle for the honor of the branch office!</speech>
        </speeches>
        <speeches id="2">
            <speech>Urk! F-farewell for now! I'll remember this, child!</speech>
        </speeches>
        <speeches id="3">
            <speech>Urk! F-farewell for now! I'll remember this, child!</speech>
        </speeches>
        <speeches id="4">
            <speech>I am a branch manager of the Pokémon Fan Cluband I won!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Hey there! I'm a Gardener! My scissors are my only real friends.</speech>
        </speeches>
        <speeches id="2">
            <speech>I knew I hated humans! All I need is scissors!</speech>
        </speeches>
        <speeches id="3">
            <speech>I knew I hated humans! All I need is scissors!</speech>
        </speeches>
        <speeches id="4">
            <speech>My specialty and my hobby are both cutting things! My favorite move with scissors is Guillotine!</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>You'll be swimming in defeat when my water Pokémon wash over you!</speech>
        </speeches>
        <speeches id="2">
            <speech>I'm the one who's buoyant... You've sunk my hopes of winning.</speech>
        </speeches>
        <speeches id="3">
            <speech>I'm the one who's buoyant... You've sunk my hopes of winning.</speech>
        </speeches>
        <speeches id="4">
            <speech>You're drowning in my wave of victory!</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>Let's make this a whirlpool of a battle! My Pokémon will suck you into defeat!</speech>
        </speeches>
        <speeches id="2">
            <speech>I'm the one who's drained... You've escaped my whirlpool.</speech>
        </speeches>
        <speeches id="3">
            <speech>I'm the one who's drained... You've escaped my whirlpool.</speech>
        </speeches>
        <speeches id="4">
            <speech>You got sucked into my whirlpool! Better luck next time.</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>Let's dive into battle! My water Pokémon  are unbeatable!</speech>
        </speeches>
        <speeches id="2">
            <speech>I need a lifebuoy</speech>
        </speeches>
        <speeches id="3">
            <speech>I need a lifebuoy</speech>
        </speeches>
        <speeches id="4">
            <speech>You're in over your head! Maybe you should stick to the kiddie pool.</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>Breathe deeply of my perfume before you go. Get a whiff of a real Beauty's aroma!</speech>
        </speeches>
        <speeches id="2">
            <speech>All right! Now I can make my escape!</speech>
        </speeches>
        <speeches id="3">
            <speech>All right! Now I can make my escape!</speech>
        </speeches>
        <speeches id="4">
            <speech>The truth is that my perfume is nothing more than the scent of my cheap fabric softener.</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Tentacool" shouldSleep="" speed="1" sprite="72" type="pokemon" x="57" y="28">
        <path>RIGHTx7,LEFTx7</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Tentacool" shouldSleep="" speed="1" sprite="72" type="pokemon" x="16" y="23">
        <path>DOWNx5,UPx5</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="3" name="Wingull" speed="1" sprite="278" type="pokemon" x="34" y="0">
        <path>RIGHTx9,DOWNx4,LEFTx9,UPx4</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="4" name="Carvanha" speed="1" sprite="318" type="pokemon" x="36" y="28">
        <path>RIGHTx9,LEFTx9</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="5" name="Enrique" randomRotation="true" sprite="34" x="43" y="15">
        <speech>Route 118's ever-changing terrain is a test of adaptability.</speech>
        <speech>From rugged cliffs to sandy shores, trainers must navigate diverse landscapes to succeed. It's a challenge, but one that hones both trainer and Pokémon alike.</speech>
    </npc>
    <movingNpc direction="DOWN" id="6" name="Altaria" speed="1" sprite="334" type="pokemon" x="73" y="1">
        <path>RIGHTx8,DOWNx1,LEFTx8,UPx1</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="7" name="Linoone" shouldSleep="" speed="1" sprite="264" type="pokemon" x="79" y="11">
        <path>LEFTx4,RIGHTx4</path>
        <onCollisionSpeech gap="4">Linoone!</onCollisionSpeech>
        <speech>Linoone!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="8" name="Torkoal" shouldSleep="" speed="1" sprite="324" type="pokemon" x="103" y="3">
        <path>RIGHTx3,LEFTx3</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="9" name="Liv" randomRotation="false" sprite="6" x="96" y="14">
        <speech>What? you thought I wanted to battle?</speech>
        <speech>Not my cup of tea.</speech>
    </npc>
</npcs>
