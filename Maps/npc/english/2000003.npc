<npcs>
    <conversation id="1">
        <!-- Initial meeting where Professor Oak introduces the choice of starter Pokémon -->
        <speeches id="1">
            <speech>Welcome, $PLAYER_NAME. The balance of Kanto is disturbed, and we need capable trainers.</speech>
            <speech>Strange phenomena are occurring—Pokémon migrations are erratic, and some species are behaving unusually aggressive.</speech>
            <speech>Choose one of these Pokémon on the table. They're ready to face whatever challenges lie ahead.</speech>
            <speech>Your help is crucial. We must understand these disruptions to restore harmony to Kanto.</speech>
        </speeches>

        <!-- Player has picked a Pokémon, Oak asks for help -->
        <speeches id="2">
            <speech>Excellent choice! Now that you have your Pokémon, I have a task for you. Could you assist me with it?</speech>
        </speeches>

        <!-- If the player declines to help Oak -->
        <speeches id="3">
            <speech>I understand. Not everyone is ready to take on additional responsibilities. Reflect on your choice.</speech>
            <speech>If you decide to assist, come back and see me. I'll be waiting here in the lab.</speech>
        </speeches>

        <!-- Player agrees to help -->
        <speeches id="4">
            <speech>Thank you! I need you to pick up a parcel for me from the Poké Mart in Viridian City.</speech>
            <speech>It contains some vital research equipment. Once you have it, please bring it back here to the lab.</speech>
            <speech>I'll be waiting for your return. Good luck, and take care on your journey!</speech>
        </speeches>

        <!-- Completion placeholder, can remain empty -->
        <speeches id="5">
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>Wait!</speech>
        </speeches>
        <speeches id="2">
            <speech>I want one Pokémon too.</speech>
        </speeches>
        <speeches id="3">
            <speech>I'll take this one, then!</speech>
        </speeches>
        <speeches id="4">
            <speech> My Pokémon looks a lot tougher than yours.</speech>
        </speeches>
    </conversation>

    <conversation id="4">
        <speeches id="1">
            <speech>Welcome back, $PLAYER_NAME. Do you have the parcel I requested from Viridian City?</speech>
        </speeches>

        <speeches id="2">
            <speech>Wonderful! Do you want to hand over the parcel now?</speech>
        </speeches>

        <speeches id="3">
            <speech>No worries, I understand you might have other tasks to attend to first.</speech>
            <speech>Whenever you're ready to hand it over, I'll be here waiting. We really need that parcel to continue our work.</speech>
        </speeches>

        <speeches id="4">
            <speech>Thank you so much for this. The equipment in this parcel is essential for our research.</speech>
            <speech>Your assistance is invaluable, and as a token of my gratitude, here are 5 pokemon storage boxes.</speech>
            <speech>These will be quite useful for organizing your pokemon during your journey.</speech>
            <speech>Now, there's another matter I'd like you to handle. Have you met Daisy yet?</speech>
            <speech>She holds a rare relic of our region—a detailed Kanto world map. It's vital for any trainer.</speech>
        </speeches>

        <speeches id="5">
            <speech>Please go see Daisy. She’s eager to meet someone of your caliber, and the map could be invaluable to your journey.</speech>
        </speeches>
    </conversation>

    <conversation id="5">
        <!-- Existing lines -->
        <speeches id="1">
            <speech>I’m relieved you came. Things have been... unsettled in Kanto lately. Odd weather patterns, Pokémon showing signs of agitation, and sudden</speech>
            <speech>changes in local habitats—something big is happening, and I can’t handle it alone.</speech>
            <speech>In times like these, we need capable trainers ready to stand against any threat.</speech>
            <speech>Take one of these Pokémon. They will help you on your journey.</speech>
        </speeches>
    </conversation>

    <conversation id="7">
        <!-- Initial meeting where Professor Oak introduces the choice of starter Pokémon -->
        <speeches id="1">
            <speech>Hey there, $PLAYER_NAME! How’s the journey treating you?</speech>
            <speech>Is your Pokédex starting to fill up nicely?</speech>
            <speech>Kanto's full of surprises—there’s always something new around the corner!</speech>
        </speeches>

        <!-- Player has picked a Pokémon, Oak asks for help
        <speeches id="2">
            <speech>Excellent choice! Now that you have your Pokémon, I have a task for you. Could you assist me with it?</speech>
        </speeches>

        &lt;!&ndash; If the player declines to help Oak &ndash;&gt;
        <speeches id="3">
            <speech>I understand. Not everyone is ready to take on additional responsibilities. Reflect on your choice.</speech>
            <speech>If you decide to assist, come back and see me. I'll be waiting here in the lab.</speech>
        </speeches>

        &lt;!&ndash; Player agrees to help &ndash;&gt;
        <speeches id="4">
            <speech>Thank you! I need you to pick up a parcel for me from the Poké Mart in Viridian City.</speech>
            <speech>It contains some vital research equipment. Once you have it, please bring it back here to the lab.</speech>
            <speech>I'll be waiting for your return. Good luck, and take care on your journey!</speech>
        </speeches>-->

        <!-- Completion placeholder, can remain empty -->
        <speeches id="5">
        </speeches>
    </conversation>
</npcs> 
