<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Haw haw haw... I'll show you how hawesome my Pokémon are!</speech>
        </speeches>
        <speeches id="2">
            <speech>Could it be... How... My Pokémon and I are the strongest, though...</speech>
        </speeches>
        <speeches id="3">
            <speech>Could it be... How... My Pokémon and I are the strongest, though...</speech>
        </speeches>
        <speeches id="4">
            <speech>What do you think?! Hawesome, huh? My Pokémon and I are the strongest!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Ho there! You are a mountain standing in my way, arent ya?</speech>
        </speeches>
        <speeches id="2">
            <speech>Grrr... My victory has disappeared down into some dark crevasse...</speech>
        </speeches>
        <speeches id="3">
            <speech>Grrr... My victory has disappeared down into some dark crevasse...</speech>
        </speeches>
        <speeches id="4">
            <speech>Yahoo! Yahooooo!! Hear my cry of triumph!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Come on, lets get on with it already! No need to worry about particulars!</speech>
        </speeches>
        <speeches id="2">
            <speech>Even if I try to forget, I cant remember... That's probably all I need to know, isn't it?</speech>
        </speeches>
        <speeches id="3">
            <speech>Even if I try to forget, I cant remember... That's probably all I need to know, isn't it?</speech>
        </speeches>
        <speeches id="4">
            <speech>Regrets from the past, worries about the future forget all that! All that matters is here and now!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Its not like I'm calling to the mountains. Its the mountains that are calling to me!</speech>
        </speeches>
        <speeches id="2">
            <speech>I can hear a sobbing voice... The mountains are weeping...</speech>
        </speeches>
        <speeches id="3">
            <speech>I can hear a sobbing voice... The mountains are weeping...</speech>
        </speeches>
        <speeches id="4">
            <speech>A man who is loved by the mountains... Guilty as charged...</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>I sure would like to do the fighting instead of my Pokémon, if I could.</speech>
        </speeches>
        <speeches id="2">
            <speech>Heh...</speech>
        </speeches>
        <speeches id="3">
            <speech>Heh...</speech>
        </speeches>
        <speeches id="4">
            <speech>Ah, I tingle with excitement. I sure would like to fight...</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Pokémon battles and study sessions are much the same. Let's be efficient!</speech>
        </speeches>
        <speeches id="2">
            <speech>If you slacked off on your studies, you've got no chance. Capable girls like me are capable.</speech>
        </speeches>
        <speeches id="3">
            <speech>If you slacked off on your studies, you've got no chance. Capable girls like me are capable.</speech>
        </speeches>
        <speeches id="4">
            <speech>You are too inefficient. You need to be more quick and responsive.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Go away kid! We have captured this area.</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>Help, Help, Trainer! Please, I want to see my papa.</speech>
            <speech>My papa and I lived at the Valley Windworks.</speech>
            <speech>But then a bunch of people dressed like spaceman came...</speech>
            <speech>They kicked me out, and they're making my papa do something.</speech>
            <speech>Please, Trainer! I miss my papa!</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Whiscash" shouldSleep="" speed="1" sprite="340" type="pokemon" x="7" y="58">
        <path>DOWNx4, UPx4</path>
        <onCollisionSpeech gap="4">Whiscash</onCollisionSpeech>
        <speech>Whiscash</speech>
    </movingNpc>
    <movingNpc direction="LEFT" id="2" name="Gyarados" shouldSleep="" speed="1" sprite="130" type="pokemon" x="20" y="84">
        <path>LEFTx4, RIGHTx4</path>
        <onCollisionSpeech gap="4">Raaaawr!</onCollisionSpeech>
        <speech>Gyaradossssss!</speech>
    </movingNpc>
    <movingNpc direction="LEFT" id="3" name="Gastrodon" shouldSleep="" speed="1" sprite="422" type="pokemon" x="30" y="72">
        <path>LEFTx1, RIGHTx1</path>
        <onCollisionSpeech gap="4">She! Shellos!</onCollisionSpeech>
        <speech>*Shellos uses Mud-Slap!!!!*</speech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="4" name="Beautifly" shouldSleep="" speed="1" sprite="267" type="pokemon" x="25" y="64">
        <path>RIGHTx3, LEFTx3</path>
        <onCollisionSpeech gap="4">Fly! Fly! Fly!</onCollisionSpeech>
        <speech>Isn't she lovely?</speech>
    </movingNpc>
    <movingNpc direction="LEFT" id="5" name="Buizel" shouldSleep="" speed="1" sprite="418" type="pokemon" x="24" y="77">
        <path>LEFTx2, RIGHTx2</path>
        <onCollisionSpeech gap="4">Bui! Bui! Bui!</onCollisionSpeech>
        <speech>*Buizel Growls*</speech>
    </movingNpc>
</npcs>
