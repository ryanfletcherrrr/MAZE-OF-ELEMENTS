<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>So, $PLAYER_NAME. I've heard so much about you from your father. I've heard that you don't have your own Hoenn Pokémon yet.</speech>
            <speech>I guess you have your father's blood in your veins after all!</speech>
            <speech>Oh, yes. As thanks for rescuing me, I'd like you to have the Pokémon you used earlier.</speech>
            <speech>My kid, May is out on Route 103 studying Pokémon. It might not be a bad idea for you to go see May. What do you think.</speech>
            <speech>Before you go, have this map of Hoenn. It will help you navigate Hoenn region.</speech>
        </speeches>
        <speeches id="2">
            <speech>May should be on Route 103 somewhere. If you or your Pokémon get tired, get some rest at home.</speech>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>Ah, $PLAYER_NAME! I've been eagerly awaiting your arrival. Your achievements are remarkable!</speech>
            <speech>With over 500 Pokémon in your Pokédex, you're the ideal Trainer for a special research task I have.</speech>
            <speech>My assistant in Route 126 reported a rare sighting of Eon Duo ([BLUE]Latios[] and [RED]Latias[]).</speech>
            <speech>This is a golden opportunity for research!</speech>
            <speech>I need your expertise to gather more information. Would you be willing to investigate this sighting in Lilycove?</speech>
            <speech>If you find any clues about the duo around Route 126, please report back to me. Good luck, and be careful!</speech>
        </speeches>
        <speeches id="2">
            <speech>If you find any clues about the duo around Route 126, please report back to me. Good luck, and be careful!</speech>
        </speeches>
    </conversation>

    <conversation id="4">
        <speeches id="1">
            <speech>Ah, $PLAYER_NAME! Your work with the Eon Duo was extraordinary.</speech>
            <speech>Your courage and skill reflect your father's legacy and then some.</speech>
            <speech>You've shown remarkable ability in handling such a delicate situation.</speech>
            <speech>Interestingly, my assistant found this Eon Flute dropped nearby. It's quite mysterious.</speech>
            <speech>I have a strong hunch it's connected to Latios and Latias. It might be very useful to you.</speech>
            <speech>Here, take this Eon Flute. With it, you might have a chance to interact with them again.</speech>
        </speeches>
        <speeches id="2">
            <speech>The Eon Flute could be the key to finding Latios and Latias. Keep it with you during your journey.</speech>
            <speech>Who knows? You might be able to summon them or even soar with them across Hoenn!</speech>
        </speeches>
    </conversation>

    <conversation id="5">
        <speeches id="1">
            <speech>Welcome, $PLAYER_NAME. To enhance our research capabilities, I require 3 Zigzagoon, each level 15 or above.</speech>
            <speech>These creatures are key to our studies on Pokémon behavior and habitat adaptation.</speech>
            <speech>Should you find yourself short, the pursuit of knowledge awaits.</speech>
        </speeches>
        <speeches id="2">
            <speech>Remarkable, you've brought the 3 Zigzagoon! These specimens are invaluable to our research efforts.</speech>
            <speech>As a token of our appreciation, I'll provide you with 5 additional Storage Boxes.</speech>
            <speech>Are you ready to proceed? Once we finalize this exchange, there's no reverting.</speech>
        </speeches>
        <speeches id="3">
            <speech>I sense your hesitation. A scientific endeavor often requires careful deliberation.</speech>
            <speech>Take your time to consider. My lab and I will be here when you're ready to contribute to science.</speech>
        </speeches>
        <speeches id="4">
            <speech>Let's proceed with the exchange. Your contribution to our research is greatly appreciated.</speech>
            <speech>Here are your 5 Storage Boxes, designed with the latest technology for maximum efficiency in Pokémon storage.</speech>
            <speech>Handle them wisely. They represent a significant leap in our understanding and care of Pokémon.</speech>
            <speech>Thank you for aiding our research. The path to discovery is long, but with contributions like yours, we can achieve remarkable breakthroughs.</speech>
        </speeches>
        <speeches id="5">
            <speech>Thank you for bringing me the Zigzagoon. Your help is a substantial boon to our ongoing research.</speech>
        </speeches>
    </conversation>


    <conversation id="6">
        <speeches id="1">
            <speech>That's not a problem. Come back later if you change your mind.</speech>
        </speeches>
        <speeches id="2">
            <speech>Hello young trainer.</speech>
            <speech>I see you have recently arrived in Hoenn.</speech>
            <speech>The regional restrictions here can be quite a challenge, especially being unable to use Pokémon from other regions.</speech>
            <speech>But don't worry, I have a solution for you. I can convert up to 5 of your Pokémon to be recognized as native to Hoenn.</speech>
            <speech>This means you can use them freely without concern for regional bans.</speech>
            <speech>You can update any Pokémon that is below the max level cap, which is calculated by the formula (Total Badges * 10) + 5.</speech>
            <speech>In your case, you can update Pokémon up to level $LEVEL.</speech>
            <speech>You currently have $REGION_CHANGE_POKES_LEFT Pokémon you can get updated.</speech>
            <speech>Would you like to proceed with this update?</speech>
        </speeches>
        <speeches id="3">
            <speech>Hello young trainer.</speech>
            <speech>Welcome to Hoenn!</speech>
            <speech>I understand the regional restrictions can be frustrating, especially the inability to use Pokémon from previous regions like Sinnoh or Jvaloh.</speech>
            <speech>Luckily, I can help. I can convert up to 5 of your Pokémon to be recognized as native to Hoenn.</speech>
            <speech>This will allow you to use them freely, bypassing the regional bans.</speech>
            <speech>You can update any Pokémon below the max level cap, calculated as (Total Badges * 10) + 5.</speech>
            <speech>In your situation, you can update Pokémon up to level $LEVEL and a total of $REGION_CHANGE_POKES_LEFT Pokémon.</speech>
            <speech>Unfortunately, you either don't have any eligible Pokémon in your party, or you have reached your maximum limit.</speech>
            <speech>I'm sorry, but it seems I can't assist you further at this moment.</speech>
        </speeches>
        <speeches id="4">
            <speech>There you go. Your companion is now recognized across Hoenn as a local.</speech>
        </speeches>
    </conversation>

    <conversation id="7">
        <speeches id="1">
            <speech>Greetings, traveler! I specialize in the science of Technical Machines and Technical Records.</speech>
            <speech>If you have any TMs or TRs from previous generations, I can upgrade them to be compatible with the latest generation's technology.</speech>
        </speeches>
        <speeches id="2">
            <speech>Greetings, traveler! I specialize in the science of Technical Machines and Technical Records.</speech>
            <speech>If you have any TMs or TRs from previous generations, I can upgrade them to be compatible with the latest generation's technology.</speech>
            <speech>Ah, I see you've brought some TMs and TRs for upgrading.</speech>
            <speech>Excellent choice! Upgrading will allow your Pokémon to learn moves they couldn't before with the outdated versions.</speech>
            <speech>Are you ready to proceed? Once we start the upgrade process, we can't reverse it.</speech>
        </speeches>
        <speeches id="3">
            <speech>Understandable, it's a significant decision. Take your time to think it over.</speech>
            <speech>Whenever you decide, I'll be here, ready to assist with your technological needs.</speech>
        </speeches>
        <speeches id="4">
            <speech>Let's begin the upgrade then. Your faith in our lab's capabilities is appreciated.</speech>
            <speech>...And there we are. Your TMs and TRs are now fully upgraded and compatible with the latest generation's systems.</speech>
            <speech>Your Pokémon can now learn new moves to enhance their strength in battles.</speech>
            <speech>Our lab is always here to support trainers like you, pushing the boundaries of Pokémon training and compatibility.</speech>
            <speech>Should you find more TMs or TRs needing an upgrade, you know where to find me. Safe travels!</speech>
        </speeches>
        <speeches id="5">
            <speech>Thank you for entrusting your TMs and TRs to our lab. Your upgrades are complete. Use them well in your journey ahead.</speech>
        </speeches>
    </conversation>



    <movingNpc direction="DOWN" id="1" name="Assistant Gilroy" shouldSleep="" speed="1" sprite="8" type="npc" x="4" y="13">
        <path>DOWNx2,UPx2</path>
        <onCollisionSpeech gap="4">move aside I'm busy</onCollisionSpeech>
        <speech>Professor Birch is studying the habitat and distribution of Pokémon.</speech>
        <speech>He enjoys May's help, too.</speech>
        <speech>There's a lot of love there.</speech>
        <speech>I think it's kind of cute.</speech>
    </movingNpc>
    <npc direction="RIGHT" hidden="false" id="2" name="Assistant Tina" randomRotation="false" sprite="7" x="9" y="11">
        <speech>The world of Pokémon is vast and interesting.</speech>
        <speech>It is a privilege to be able to be part of it with someone as dedicated to its studies as Professor Birch.</speech>
        <speech>So many adventures and discoveries awaits.</speech>
  </npc>
</npcs> 
