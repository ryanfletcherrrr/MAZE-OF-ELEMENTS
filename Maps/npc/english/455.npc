<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Greetings! I am the legendary guardian of the perilous Shoal Caves.</speech>
            <speech>Only trainers with a collection of 400+ unique Pokémon are granted entry. It's a measure of experience and skill.</speech>
            <speech>Impressive! Your Pokédex shows you've caught over 400 Pokémon. That's quite an achievement!</speech>
            <speech>Would you like me to escort you into the caves?</speech>
        </speeches>
        <speeches id="2">
            <speech>Welcome to the Shoal Caves, a place of mystery and danger.</speech>
            <speech>Entry is reserved for those who have caught 400+ unique Pokémon, as a testament to their expertise.</speech>
            <speech>It seems you haven't reached that mark yet. Come back when you've expanded your Pokédex further.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Ah, traveler! If you're looking to make a Shell Bell, I'll need 4 Shoal Salts and 4 Shoal Shells from Shoal Cave.</speech>
            <speech>These treasures are carried by the tides. If you haven't got enough, the shifting tides of Shoal Cave might reveal more.</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh, you've done it!</speech>
            <speech>You've gathered 4 Shoal Salts and 4 Shoal Shells. With these, I can craft you a Shell Bell, a fine item that heals your Pokémon as they fight.</speech>
            <speech>Are we ready to proceed? This isn't something I can undo, so make sure you're certain.</speech>
        </speeches>
        <speeches id="3">
            <speech>It's alright to take a moment to think it over. It's not every day you get a Shell Bell, after all.</speech>
            <speech>Take your time. I'll be here when you're ready to make the exchange.</speech>
        </speeches>
        <speeches id="4">
            <speech>Excellent choice. Let's get to work then.</speech>
            <speech>...There we have it. Your very own Shell Bell. When your Pokémon holds this, they'll heal a little every time they land a hit.</speech>
            <speech>Use it wisely. Such items are rare and hold the power of the sea within them.</speech>
            <speech>I'll be around, scouring the cave for more treasures. If you find more materials, you know where to find me.</speech>
        </speeches>
        <speeches id="5">
            <speech>Thanks for fetching those for me. The Shell Bell is yours to keep. Use it well.</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Milotic" speed="1" sprite="350" type="pokemon" x="34" y="57">
        <path>LEFTx9,RIGHTx9</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Kingdra" speed="1" sprite="230" type="pokemon" x="50" y="57">
        <path>RIGHTx6,UPx3,RIGHTx6,LEFTx6,DOWNx3,LEFTx6</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="3" name="Seadra" speed="1" sprite="117" type="pokemon" x="62" y="35">
        <path>UPx8,DOWNx8</path>
        <onCollisionSpeech gap="4">Seadra!</onCollisionSpeech>
        <speech>Seadra!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="4" name="Horsea" speed="1" sprite="116" type="pokemon" x="31" y="17">
        <path>DOWNx6,LEFTx5,RIGHTx5,UPx6</path>
        <onCollisionSpeech gap="4">Horsea!</onCollisionSpeech>
        <speech>Horsea!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="5" name="Whiscash" shouldSleep="" speed="1" sprite="340" type="pokemon" x="16" y="34">
        <path>DOWNx5,UPx5</path>
        <onCollisionSpeech gap="4">Whiscash!</onCollisionSpeech>
        <speech>Whiscash!</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="6" name="Liam" randomRotation="true" sprite="108" x="35" y="44">
        <speech>Hello there, fellow traveler! Route 125 is a fascinating place, filled with all sorts of Pokémon wonders.</speech>
        <speech>I once came across a beautiful Milotic gracefully swimming through the waves.</speech>
        <speech>Just a word of caution though  those ocean currents can be quite strong, so it's best to stay alert!</speech>
    </npc>
    <movingNpc direction="DOWN" id="7" name="Tentacool" shouldSleep="" speed="1" sprite="72" type="pokemon" x="79" y="35">
        <path>LEFTx8,RIGHTx8</path>
        <onCollisionSpeech gap="4">Tentacool!</onCollisionSpeech>
        <speech>Tentacool!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="8" name="Sharpedo" speed="1" sprite="319" type="pokemon" x="60" y="14">
        <path>RIGHTx9,LEFTx9</path>
        <onCollisionSpeech gap="4">Sharpedo!</onCollisionSpeech>
        <speech>Sharpedo!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="9" name="Tentacool" shouldSleep="" speed="1" sprite="72" type="pokemon" x="69" y="37">
        <path>UPx3,RIGHTx3,LEFTx3,DOWNx3</path>
        <onCollisionSpeech gap="4">Tentacool!</onCollisionSpeech>
        <speech>Tentacool!</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="10" name="Kai" randomRotation="true" sprite="11" x="72" y="27">
        <speech>Hey, adventurers! Kai here. Did you know that Tentacool gather in massive swarms during certain times of the year? It's quite a sight to see.</speech>
        <speech>Just be wary of Sharpedo  they're always lurking around.</speech>
    </npc>
    <movingNpc direction="DOWN" id="11" name="Pelipper" speed="1" sprite="279" type="pokemon" x="40" y="7">
        <path>DOWNx7,RIGHTx14,UPx7,LEFTx14</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="12" name="Pelipper" speed="1" sprite="279" type="pokemon" x="42" y="21">
        <path>DOWNx4,RIGHTx7,UPx4,DOWNx4,LEFTx7,UPx4</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="13" name="Sharpedo" speed="1" sprite="319" type="pokemon" x="11" y="8">
        <path>RIGHTx13,LEFTx13</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="14" name="Owen" randomRotation="true" sprite="26" x="22" y="27">
        <speech>Greetings, trainer! As a seasoned explorer of Route 125, I've had my fair share of Pokémon encounters.</speech>
        <speech>My trusty Pelipper and I once rescued a stranded Corsola tangled in seaweed.</speech>
        <speech>Remember, always keep an eye out for hidden underwater caves  you never know what secrets they might hold!</speech>
    </npc>
    <movingNpc direction="DOWN" id="15" name="Corsola" speed="1" sprite="222" type="pokemon" x="4" y="18">
        <path>RIGHTx7,LEFTx7</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="16" name="Wailord" speed="1" sprite="321" type="pokemon" x="100" y="4">
        <path>DOWNx35,UPx35</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
</npcs>
