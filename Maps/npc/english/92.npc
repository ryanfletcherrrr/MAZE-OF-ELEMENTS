<npcs>

    <npc id="1000" x="48" y="18" direction="DOWN" name="Youngster Borris" sprite="4">
        <speech>Oyi stranger, are you also a member of Sutta Gang?</speech>
        <speech>That's good to know, they have made our lives difficult.</speech>
    </npc>

    <npc id="1001" x="47" y="46" direction="UP" name="Dragon Tamer Ren" sprite="173">
        <speech>I want to be the best dragon tamer is the world.</speech>
        <speech>Is it too much to ask for? I don't think its very tough to control dragons. All you need is a fairy to
            keep them in check hwehehehe.
        </speech>
    </npc>

    <npc id="1002" x="51" y="34" direction="DOWN" name="Priest Samurai" sprite="167">
        <speech>You see this bell? It is said that the bell starts to chime when the dragon legend gives us a visit.
        </speech>
        <speech>I haven't heard it chime even once but I believe in what my ancestors told me. In the end this bell must
            exist for a reason.
        </speech>
    </npc>

    <npc id="1003" x="43" y="46" direction="UP" name="Fisherman Chu" sprite="16">
        <speech>I am trying to find a Dratini here. I wonder if they even live here or migrated somewhere else?</speech>
        <speech>Who knows.. I will just keep trying.</speech>
    </npc>

    <npc id="1004" x="27" y="22" direction="RIGHT" name="Weird Guy Tim" sprite="48">
        <speech>What?</speech>
        <speech>Stop looking at me as if I am a thief.</speech>
    </npc>

    <npc id="1005" x="64" y="15" direction="LEFT" name="Dragon Tamer Paul" sprite="174">
        <speech>I come here to meditate every day. It is quite peaceful here. I come here after training with my
            Bagon.
        </speech>
        <speech>Its one of the most peaceful place in Jvaloh in my opinion.</speech>
    </npc>

    <npc id="1006" x="11" y="20" direction="LEFT" name="Random Interviewer" sprite="51">
        <speech>Have you visited to Dragon Tower yet? Would you like to share your experience with us?</speech>
    </npc>

    <npc id="1007" x="10" y="60" direction="RIGHT" name="Cute Girl Disha" sprite="77">
        <speech>I love to walk around this area. I love the terrain, the bridges, the lakes and the dragons.</speech>
        <speech>I once saw a green coloured snake flying around but nobody wants to believe me because the bell didn't
            chime :(
        </speech>
    </npc>

    <npc id="1008" x="33" y="53" direction="RIGHT" name="Pokémon Trainer Cena" sprite="77">
        <speech>It has come to a point now where "Gotta Catch'em all" shouldn't exist.</speech>
        <speech>I mean like around 700+ pokemon. Come on... I can't keep up anymore.</speech>
        <speech>I have lost all my motivation. I wonder what keeps you going.</speech>
    </npc>

    <npc id="1008" x="54" y="47" direction="DOWN" name="Psychic Boy Laksh" sprite="72">
        <speech>I sit here all day waiting for something to happen. I don't know what that something is but I have got
            nothing better to do.
        </speech>
    </npc>

    <conversation id="1">
        <speeches id="1">
            <speech>Greetings! Welcome to Skynet Travel Technologies!</speech>
            <speech>Would you like to travel somewhere?</speech>
        </speeches>
        <speeches id="2">
            <speech>That's unfortunate. Please come back whenever you wish to travel elsewhere.</speech>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>Greetings! Welcome to the Bank of Jvaloh's ATM system!</speech>
            <speech>Would you like to withdraw or deposit money?</speech>
        </speeches>
        <speeches id="2">
            <speech>Please return whenever you wish to make a transaction.</speech>
        </speeches>
        <speeches id="3">
            <speech>This feature is available only to people with a 'bank membership'.</speech>
            <speech>For all non-members, our bank's main branch in Bijli City is available for use.</speech>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>Hey $PLAYER_NAME, Charil is not at the gym at the moment.</speech>
            <speech>One of her Pokémon is really I'll, and she left to Jannat Village for treatment.</speech>
            <speech>Maybe you can go and check on her?</speech>
        </speeches>
    </conversation>

    <conversation id="4">
        <speeches id="1">
            <speech>Are you a challenger? What's your name?</speech>
            <speech>Hey $PLAYER_NAME, Charil is not at the gym at the moment.</speech>
            <speech>She left to Jannat Village in rush, none of us know when will she return.</speech>
        </speeches>
    </conversation>

    <conversation id="5" canSkip="false">
        <speeches id="1">
            <speech>So you have finally got your 8th Badge!</speech>
            <speech>Your win over $GYM8_LEADER shows that you've gotten stronger, so that's good - because I've gotten a
                lot stronger too!
            </speech>
            <speech>And, as is the custom, it's time to find out which one us is the better trainer right now.</speech>
            <speech>No time to waste, then! Let's put this show on the road.</speech>
        </speeches>
        <speeches id="2">
            <speech>Wow. You never fail to amaze me.</speech>
            <speech>All this time I have been training so hard to get stronger than
                ever before, but I still stand no chance in front of you.
            </speech>
            <speech>You are just awesome $PLAYER_NAME. I am lucky to have you as my rival.</speech>
            <speech>Before you leave this place and head towards Dragon Tower and Rayquaza Statue.</speech>
            <speech>Legends say that the red lines on Rayquaza's body belong to Osiris wife’s blood running through its
                body.
            </speech>
            <speech>Let's check it out.</speech>
        </speeches>
        <speeches id="3">
            <speech>Wow. You never fail to amaze me.</speech>
            <speech>All this time I have been training so hard to get stronger than
                ever before, but I still stand no chance in front of you.
            </speech>
            <speech>You are just awesome $PLAYER_NAME. I am lucky to have you as my rival.</speech>
            <speech>Before you leave this place and head towards Dragon Tower and Rayquaza Statue.</speech>
            <speech>Legends say that the red lines on Rayquaza's body belong to his wife’s blood running through its
                body.
            </speech>
            <speech>Let's check it out.</speech>
        </speeches>
        <speeches id="4">
            <speech>Was your victory over $GYM8_LEADER a fluke or have I grown too strong to a point that you are no
                more my rival.
            </speech>
        </speeches>
        <speeches id="5">
            <speech></speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Hey $PLAYER_NAME, I have more information on Osiris.</speech>
            <speech>Osiris was a peaceful priest who was obsessed over his wife.</speech>
            <speech>His wife was an arrogant lady who managed to travel to Hoenn and capture a Rayquaza.</speech>
            <speech>The Rayquaza was tortured by her. She used to think she is taking good care of the Rayquaza, but she
                wasn't.
            </speech>
            <speech>One day Rayquaza got too tired of being harassed by her and consumed her completely.</speech>
            <speech>There was an explosion after that and Rayqyuaza was never seen again.</speech>
            <speech>Nobody knows what happened to Rayquaza but legend says that it was Rayquaza who exploded due to the
                selfishness and arrogance of its owner.
            </speech>
            <speech>Osiris went crazy since that day. At first, he tried to summon Rayquaza by building his statue.
            </speech>
            <speech>Then he tried to hunt Rayquaza down in the Hoenn region but that didn't work out either.</speech>
            <speech>Finally he decided to summon Ho-Oh and to use its powers to bring her wife back to life.</speech>
            <speech>I think this is the reason he has been capturing the legendary dogs.</speech>
            <speech>The locals say that summoning Ho-Oh to bring his wife back might also bring back Rayqyaza.</speech>
            <speech>And that Rayquaza won't be happy... The locals think that it will take its mega form and burn down
                entire Jvaloh.
            </speech>
            <speech>We have to stop him before its too late.</speech>
            <speech>Oh another thing. I won my 8th gym badge few days ago. I have become way too strong now.</speech>
            <speech>I want to test myself against you but before that I want you to win the 8th badge as well.</speech>
            <speech>I will wait for you at the south of Goldburn City to battle. See you later.</speech>
            <speech>FERALIGATR!!!</speech>
        </speeches>
    </conversation>
</npcs>