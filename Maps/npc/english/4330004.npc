<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Y-you see... Professor Cozmo... He got abducted by some weird guys calling themselves Team Something or Other...</speech>
            <speech>$PLAYER_NAME, please... You've got to help me save him! They can't be planning to do anything good with Professor Cozmo's research.</speech>
            <speech>We have to do something! I...I'm going to head after them right away! Let's meet up at Meteor Falls! I'm counting on you, $PLAYER_NAME!</speech>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>The professor is just too gullible.</speech>
            <speech>If you show the least bit of interest in his research, he would happily go anywhere without any questions.</speech>
        </speeches>

        <speeches id="2">
            <speech>The professor is just too gullible.</speech>
            <speech>If you show the least bit of interest in his research, he would happily go anywhere without any questions.</speech>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>Hah...haha... Thanks to these children, I have somehow returned.</speech>
            <speech>But I need to thank you, as well. You truly saved me from disaster.</speech>
            <speech>I hope you'll take this TM as some small form of repayment.</speech>
        </speeches>

        <speeches id="2">
            <speech>Those crooks who took my Meteorite... What will they do next at Mt. Chimney?</speech>
            <speech>I need to find out! I need to go! I will see you later $PLAYER_NAME</speech>
        </speeches>
    </conversation>

    <conversation id="4">
        <speeches id="1">
            <speech>I am glad that the Professor is back!</speech>
            <speech>I hope this incident has knocked some sense into him.</speech>
        </speeches>
        <speeches id="2">
            <speech>I am glad that the Professor is back!</speech>
            <speech>I hope this incident has knocked some sense into him.</speech>
        </speeches>
    </conversation>

    <conversation id="5" canSkip="false">
        <speeches id="1">
            <speech>Oh, $PLAYER_NAME! It's a pleasure to see you again after our remarkable achievement with Mega Sceptile.</speech>
            <speech>Your actions have not only aided in pacifying a crisis but also revitalized my passion for the field.</speech>
            <speech>Observing your courage and resourcefulness has inspired me to venture beyond my usual academic pursuits.</speech>
            <speech>Indeed, it has reignited a flame within me, a desire to engage directly with the mysteries of the world... through battle.</speech>
            <speech>It's been ages since I've tested my own hypotheses in such a practical manner.</speech>
            <speech>What level of challenge do you seek, $PLAYER_NAME? I assure you, I will endeavor to match it!</speech>
        </speeches>
        <speeches id="2">
            <speech>What an exhilarating contest! Your strategic acumen is truly commendable, $PLAYER_NAME.</speech>
            <speech>This duel has provided me with ample data and, more importantly, a renewed sense of purpose.</speech>
            <speech>This encounter is but a prelude to the boundless potential of our collaborative exploration.</speech>
            <speech>Rest assured, our next rendezvous will be even more challenging. I will ensure that my Pokémon and I are prepared.</speech>
        </speeches>
        <speeches id="3">
            <speech>It seems my theoretical preparations were insufficient for the reality of your prowess.</speech>
            <speech>We must recalibrate our strategy.</speech>
            <speech>Please, allow us $DURATION to refine our approach. I'm eager for the opportunity to test our hypotheses once more.</speech>
            <speech>Your patience is greatly appreciated, $PLAYER_NAME.</speech>
        </speeches>
        <speeches id="4">
            <speech>Your victory today underscores the vast expanse of knowledge yet to be explored.</speech>
            <speech>Your skills are indeed remarkable, $PLAYER_NAME.</speech>
            <speech>However, let this not be the conclusion of our inquiry.</speech>
            <speech>I'll be here, advancing my research and training, awaiting our next engagement with anticipation.</speech>
        </speeches>
        <speeches id="5">
            <speech>Before we proceed, a moment of verification if I may.</speech>
            <speech>Are you fully prepared for what lies ahead? My Pokémon and I have been rigorously preparing for this moment, eager to engage with an opponent of your caliber.</speech>
            <speech>Ensure your team is ready for a substantial challenge.</speech>
            <speech>It's not every day we get to apply our theories against a trainer of your renown!</speech>
        </speeches>
    </conversation>

    <conversation id="6">
        <speeches id="1">
            <speech>Ever since you showed up, my dear Cozmo has been a bit... battle-happy, shall we say?</speech>
            <speech>He's now challenging everyone in sight to battles, even me! Can you believe it?</speech>
            <speech>Me, whose most effective critical hit involves a perfectly timed joke, not a Poké Ball.</speech>
            <speech>We used to spar over his endless lab clutter or who gets the last piece of cake, not battles.</speech>
            <speech>But I suppose, in the spirit of good fun, I've got something for a champion like you. Not a battle, mind you, but a gift.</speech>
        </speeches>
        <speeches id="2">
            <speech>So, you've bested Cozmo, eh? That's quite the achievement. Seems like you've turned him into a real battler!</speech>
            <speech>As a token of my amusement—and to clear out a bit of space around here—take this Tail Fin Slice.</speech>
            <speech>It's been underfoot for far too long, and you look like you could make use of it.</speech>
            <speech>Consider it a small reminder of your victory. And who knows, it might just be the key to your next adventure!</speech>
        </speeches>
        <speeches id="3">
            <speech>Turning down my generous offer? Oh, you do have a sense of humor, $PLAYER_NAME!</speech>
            <speech>Well, the offer stands if you change your mind. This peculiar item isn't going anywhere.</speech>
        </speeches>
        <speeches id="4">
            <speech>Brilliant! I knew you had the makings of a true adventurer. This Tail Fin Slice will be far more useful with you than collecting dust here.</speech>
            <speech>May it add an interesting chapter to your journey. And do tell Cozmo to challenge me to a bake-off next time; I dare say I'll win!</speech>
        </speeches>
        <speeches id="5">
            <speech>Curious about the Tail Fin Slice? It's rumored to be part of a legendary Pokémon, or so Cozmo tells me between his battle challenges.</speech>
            <speech>Personally, I think it's just a rather unique looking rock.</speech>
            <speech>But for someone of your calibre, who knows what mysteries it might unlock?</speech>
        </speeches>
    </conversation>
</npcs>