<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Battling isn't just about strength..it's about knowing your opponent before they even make a move. Let's see if you can keep up with my strategy.</speech>
        </speeches>
        <speeches id="2">
            <speech>You saw through my tactics? Impressive. You're no ordinary trainer.</speech>
        </speeches>
        <speeches id="3">
            <speech>You saw through my tactics? Impressive. You're no ordinary trainer.</speech>
        </speeches>
        <speeches id="4">
            <speech>You've got talent, but without strategy, even the strongest will fall at the Pokémon League.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Every move, every second, every breath..I've trained for this moment. Let's see if your skills are as polished as mine.</speech>
        </speeches>
        <speeches id="2">
            <speech>Tch...so I wasn't perfect after all. I'll train harder!</speech>
        </speeches>
        <speeches id="3">
            <speech>Tch...so I wasn't perfect after all. I'll train harder!</speech>
        </speeches>
        <speeches id="4">
            <speech>You're skilled, but discipline is what separates the great from the greatest</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>I've battled my way through regions, faced Champions, and trained with the best. If you think Victory Road is tough, just wait until you face me!</speech>
        </speeches>
        <speeches id="2">
            <speech>Hah...you've got the heart of a Champion. Maybe I'll see you at the top one day.</speech>
        </speeches>
        <speeches id="3">
            <speech>Hah...you've got the heart of a Champion. Maybe I'll see you at the top one day.</speech>
        </speeches>
        <speeches id="4">
            <speech>You're strong, but the League demands perfection. Train harder if you want to stand a chance.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>The Pokémon League is waiting for its next Champion. I plan to take that title for myself, unless you can prove you want it more!</speech>
        </speeches>
        <speeches id="2">
            <speech>No way...You're really that strong? Maybe you're the one destined for the title...</speech>
        </speeches>
        <speeches id="3">
            <speech>No way...You're really that strong? Maybe you're the one destined for the title...</speech>
        </speeches>
        <speeches id="4">
            <speech>If you can't beat me, you're not ready for the League. Go train, and come back stronger!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Ancient Pokémon once ruled this world, and I intend to bring their legacy to life! Let's see if your modern creatures can withstand prehistoric might!</speech>
        </speeches>
        <speeches id="2">
            <speech>Impossible! How could the power of the past fall to the present?!</speech>
        </speeches>
        <speeches id="3">
            <speech>Impossible! How could the power of the past fall to the present?!</speech>
        </speeches>
        <speeches id="4">
            <speech>See? Ancient Pokémon never lost their dominance! You should study history before facing me again.</speech>
        </speeches>
    </conversation>
    <movingNpc direction="LEFT" id="1" name="Gible" speed="1" sprite="443" type="pokemon" x="19" y="13">
        <path>LEFTx2,RIGHTx2</path>
        <onCollisionSpeech gap="4">GIIIIB!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Gible" speed="1" sprite="443" type="pokemon" x="37" y="27">
        <path>DOWNx1,RIGHTx1,DOWNx2,UPx2,LEFTx1,UPx1</path>
        <onCollisionSpeech gap="4">GIIIB!</onCollisionSpeech>
        <speech>GIIB!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="3" name="Emily" speed="1" sprite="27" type="npc" x="51" y="11">
        <path>DOWNx1,LEFTx1,DOWNx2,UPx2,RIGHTx1,UPx1</path>
        <onCollisionSpeech gap="4"/>
        <speech>Be careful around those holes in the ground.</speech>
        <speech>Falling into one means climbing through all of Victory Road again!</speech>
        <speech>Rest here as long as you need.</speech>
        <speech>Even the strongest trainers need a moment to breathe.</speech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="4" name="Machoke" speed="1" sprite="67" type="pokemon" x="38" y="7">
        <path>RIGHTx3,LEFTx3</path>
        <onCollisionSpeech gap="4">Machoooke!</onCollisionSpeech>
        <speech>Machoooke!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="5" name="Golbat" speed="1" sprite="42" type="pokemon" x="5" y="23">
        <path>DOWNx3,LEFTx1,DOWNx2,UPx2,RIGHTx1,UPx3</path>
        <onCollisionSpeech gap="4">Goollbaaat!</onCollisionSpeech>
    </movingNpc>
    <npc direction="UP" hidden="false" id="6" name="Jaxon" randomRotation="false" sprite="8" x="26" y="18">
        <speech>What am I doing, you ask?</speech>
        <speech>I'm setting up a machine to scan the area and automatically locate Pokémon so I don't have to search for them myself!</speech>
        <speech>I'm hiding here so I don't get caught..</speech>
    </npc>
    <npc direction="RIGHT" hidden="false" id="7" name="Sebastian" randomRotation="true" sprite="102" x="32" y="19">
        <speech>Victory Road is quite the challenge, isn't it?</speech>
        <speech>Every trainer aiming to be the best must pass through here to prove themselves.</speech>
        <speech>You might even face your toughest battle yet, strength alone won't carry you through.</speech>
    </npc>
</npcs>
