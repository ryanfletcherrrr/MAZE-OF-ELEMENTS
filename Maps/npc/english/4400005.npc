<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Welcome!</speech>
            <speech>No, wait. I mean… Puny Trainer, you've done well to make it this far! Let's see. I'm, uh, honored to be serving as the Gym Leader of...</speech>
            <speech>No, I mean… I'm Flannery, and I'm in charge here!</speech>
            <speech>Uh... You'd better not underestimate me just 'cause I've only been Leader a short time!</speech>
            <speech>With the skills inherited from my grandfather, I'm gonna, uh, demonstrate the hot moves we've honed in this land!</speech>
            <speech>Haiyaaaaaaaaaaaaa!</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh… I guess I was trying too hard…</speech>
            <speech>I…I've only recently become a Gym Leader. I guess I was trying too hard to be someone I'm not.</speech>
            <speech>When I don't act like myself, no wonder Pokémon that battle at my side get confused.</speech>
            <speech>Thank you for teaching me that. You deserve this.</speech>
            <speech>If you have a Heat Badge, it lets Pokémon use the HM move Strength outside of battle.</speech>
            <speech>This is a token of my appreciation. Don't be shy about taking it!</speech>
            <speech>Overheat is a Fire-type move that inflicts serious damage on the target.</speech>
            <speech>But it also sharply cuts the Sp. Atk of the Pokémon using it. It might not be suitable for longer battles.</speech>
        </speeches>
        <speeches id="3">
            <speech>Your power reminds me of someone… Oh! I know! You battle like Norman, the Gym Leader of Petalburg.</speech>
        </speeches>
        <speeches id="4">
            <speech>This battle was too easy for me. Nevertheless, I am happy to give you another chance.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Do not mistake the means for the goal. That is what my master once taught me.</speech>
        </speeches>
        <speeches id="2">
            <speech>No way... Maybe I was taking you too lightly.</speech>
        </speeches>
        <speeches id="3">
            <speech>No way... Maybe I was taking you too lightly.</speech>
        </speeches>
        <speeches id="4">
            <speech>For you to defeat me like this... What is the goal you strive for?</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>The pretty-suited Pokémon soldier who sprinkles love on the world appears!</speech>
        </speeches>
        <speeches id="2">
            <speech>Maybe I lose because I'm paying more attention to praying than to battling.</speech>
        </speeches>
        <speeches id="3">
            <speech>Maybe I lose because I'm paying more attention to praying than to battling.</speech>
        </speeches>
        <speeches id="4">
            <speech>I can't be defeated yet... I still have to protect all that is pretty in the world...</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>I've already got most of the Pokémon and more money than I know what to do with.</speech>
        </speeches>
        <speeches id="2">
            <speech>I'm so well off that life has become tedious. Even experiences like this are fun for me.</speech>
        </speeches>
        <speeches id="3">
            <speech>I'm so well off that life has become tedious. Even experiences like this are fun for me.</speech>
        </speeches>
        <speeches id="4">
            <speech>I just win all my Pokémon battles, too. I feel like my life is already over.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Maintaining one's composure no matter the situation is what being a Trainer is all about.</speech>
        </speeches>
        <speeches id="2">
            <speech>Even in defeat, my heart operates normally without rotting or becoming sad.</speech>
        </speeches>
        <speeches id="3">
            <speech>Even in defeat, my heart operates normally without rotting or becoming sad.</speech>
        </speeches>
        <speeches id="4">
            <speech>Even in victory, it is auspicious to remain nonchalant, humble, and subdued.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Pokémon never betray you. They return all the love you give them.</speech>
        </speeches>
        <speeches id="2">
            <speech>I am happy! Happy, I tell you! Don't look at me like that!</speech>
        </speeches>
        <speeches id="3">
            <speech>I am happy! Happy, I tell you! Don't look at me like that!</speech>
        </speeches>
        <speeches id="4">
            <speech>It's about time for me to give a human my affection, though.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>I'm drowning in Pokémon. It might be too late for me.</speech>
        </speeches>
        <speeches id="2">
            <speech>Even my own family disowned me. As long as I have Pokémon, that's OK, though.</speech>
        </speeches>
        <speeches id="3">
            <speech>Even my own family disowned me. As long as I have Pokémon, that's OK, though.</speech>
        </speeches>
        <speeches id="4">
            <speech>I think life's OK as long as you get back more than you lose.</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>Let's have a fun battle! No hard feelings, no matter if we win or lose! </speech>
        </speeches>
        <speeches id="2">
            <speech>Heh...</speech>
        </speeches>
        <speeches id="3">
            <speech>Heh...</speech>
        </speeches>
        <speeches id="4">
            <speech>Don't look so down!  I just happened to get lucky! </speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>My sister and I like to play hide and seek.</speech>
        </speeches>
        <speeches id="2">
            <speech>uhhhhhhhh, you ruined my fun...</speech>
        </speeches>
        <speeches id="3">
            <speech>uhhhhhhhh, you ruined my fun...</speech>
        </speeches>
        <speeches id="4">
            <speech>Woooooooosh!</speech>
        </speeches>
    </conversation>
    <npc direction="DOWN" hidden="false" id="1" name="Gym Guide" randomRotation="false" sprite="5" x="21" y="38">
        <speech>Hey, hey, hey, Champion in the making!</speech>
        <speech>Lavaridge Gym's heatin' up with Flannery's fiery crew, but you've got what it takes to cool 'em down.</speech>
        <speech>Water, Ground, or Rock Pokémon are your best pals in this scorching heat.</speech>
        <speech>Keep your cool, keep your head up, and blaze your way to victory!</speech>
    </npc>
</npcs>
