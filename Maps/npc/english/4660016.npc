<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Hello, $PLAYER_NAME. I'm Dr. Elara Fennel. We're currently researching a method to calm Mega Swampert using the special properties found in Mudkip gills.</speech>
            <speech>We need Mudkips that are:</speech>
            <speech>- Caught by you in Hoenn's waters, without any held items.</speech>
            <speech>- With total IVs of 100 or more, showcasing their strength and rarity.</speech>
            <speech>- At least level 1, ensuring they've bonded with you, which is crucial for our process.</speech>
            <speech>If you have Mudkips meeting these criteria, could you bring them here? We promise a careful extraction that won't harm your Mudkip.</speech>
        </speeches>
        <speeches id="2">
            <speech>It's wonderful to see you've found suitable Mudkips! Ready to proceed with the gill extraction? Your Mudkip will be perfectly safe.</speech>
        </speeches>
        <speeches id="3">
            <speech>Take your time, $PLAYER_NAME. We understand the importance of this decision. We're here when you're ready.</speech>
        </speeches>
        <speeches id="4">
            <speech>Thank you for trusting us. We'll now carefully extract the gills. ...And it's done.</speech>
            <speech>Here are the gills, and your Mudkip is as healthy as ever. These gills are vital for our next step in Sootopolis.</speech>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>I'm Professor Iris Greenwood. With the gills you've provided, we're ready to craft the Mystic Potion, a key to soothing Mega Swampert's unrest.</speech>
            <speech>Do you have 10 star-shaped gills? They're essential for the potion.</speech>
        </speeches>
        <speeches id="2">
            <speech>Marvelous! With these gills, we can begin. The creation of the Mystic Potion is a delicate process, but with your help, we're confident. Shall we?</speech>
        </speeches>
        <speeches id="3">
            <speech>There's no rush. This step is as crucial as it is delicate. Return when you and your Mudkips are ready.</speech>
        </speeches>
        <speeches id="4">
            <speech>Let's start the potion crafting. ...The Mystic Potion is now ready, thanks to your effort and the Mudkip gills.</speech>
            <speech>This is a significant achievement towards pacifying Mega Swampert.</speech>
            <speech>I shall now leave to continue my research on Mega-Evolutions and their untamed aggression.</speech>
        </speeches>
    </conversation>

</npcs>