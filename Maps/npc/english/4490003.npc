<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>I was born in a graveyard and raised in a cemetery. Leave all your curses and grudges to me!</speech>
        </speeches>
        <speeches id="2">
            <speech>Defeating me is amazing! You must be kinda cursed, too!</speech>
        </speeches>
        <speeches id="3">
            <speech>Defeating me is amazing! You must be kinda cursed, too!</speech>
        </speeches>
        <speeches id="4">
            <speech>Terrible! You aren't holding enough grudges! If you want to win, put more into your curses!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Heheh... I see it all clearly... You are a doctor from an evil planet, aren't you?</speech>
        </speeches>
        <speeches id="2">
            <speech>Eh...radio waves... There are radio waves coming from your nose...</speech>
        </speeches>
        <speeches id="3">
            <speech>Eh...radio waves... There are radio waves coming from your nose...</speech>
        </speeches>
        <speeches id="4">
            <speech>Ugh... My powers... My powers are... I think I need a nurse...</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>A globe-trotting young adventurer. That's me!</speech>
        </speeches>
        <speeches id="2">
            <speech>Adventure is calling me. Farewell! See you again!</speech>
        </speeches>
        <speeches id="3">
            <speech>Adventure is calling me. Farewell! See you again!</speech>
        </speeches>
        <speeches id="4">
            <speech>Seeing Pokémon from all over the world is the purpose of my journey.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Whispers of ancient power echo through the night. Do you dare to heed their call?</speech>
            <speech>Under the watchful gaze of the moon, our covenant assembles. The challenge of the ages awaits your courage.</speech>
        </speeches>

        <speeches id="2">
            <speech>Though you triumph, the eternal darkness weaves its patience. Our resolve remains unshaken, undimmed.</speech>
            <speech>The shadows part, revealing a path to our enigmatic leader. A reward for the brave, the strong, the victorious.</speech>
        </speeches>

        <speeches id="3">
            <speech>Incredible! Your strength pierces the veil of night, rivaling the ancient powers we command.</speech>
            <speech>Veiled in secrecy, our leader awaits. Your victory has earned you an audience in the heart of shadows.</speech>
            <speech>Our rituals, bound to the celestial dance, find no favor at this hour. The right moment eludes us still.</speech>
            <speech>Return when the moon reigns supreme over the night, in $DURATION. Only then shall the veil lift.</speech>
        </speeches>

        <speeches id="4">
            <speech>Incredible! Your strength pierces the veil of night, rivaling the ancient powers we command.</speech>
            <speech>Veiled in secrecy, our leader awaits. Your victory has earned you an audience in the heart of shadows.</speech>
        </speeches>

        <speeches id="5">
            <speech>The celestial bodies have yet to align; our power lies dormant, awaiting the ordained time.</speech>
            <speech>Return on Friday, when the moon's glow pierces the veil of reality, and our power is at its zenith.</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Dusclops" speed="1" sprite="356" type="pokemon" x="1" y="6">
        <path>DOWNx5,RIGHTx3,LEFTx3,UPx5</path>
        <onCollisionSpeech gap="4">Dusclops!</onCollisionSpeech>
        <speech>Dusclops!</speech>
    </movingNpc>
</npcs>
