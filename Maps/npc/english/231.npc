<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Camping is all about survival skills! Let's see if my Pokémon battle skills are just as good!</speech>
        </speeches>
        <speeches id="2">
            <speech>Uh-oh maybe I should stick to roasting marshmallows</speech>
        </speeches>
        <speeches id="3">
            <speech>Uh-oh maybe I should stick to roasting marshmallows</speech>
        </speeches>
        <speeches id="4">
            <speech>Yes! Just like setting up a tent preparation is everything!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>My bugs are small, but don't underestimate them! They've got big fight in em!</speech>
        </speeches>
        <speeches id="2">
            <speech>Maybe I should've trained just a little longer</speech>
        </speeches>
        <speeches id="3">
            <speech>Maybe I should've trained just a little longer</speech>
        </speeches>
        <speeches id="4">
            <speech>See? Speed and strategy beat size any day!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>I'm a beginner, but I'll do my best! I'll give it everything I can. Watch me!</speech>
        </speeches>
        <speeches id="2">
            <speech>Sorry if I bored you! I'll try harder next time!</speech>
        </speeches>
        <speeches id="3">
            <speech>Sorry if I bored you! I'll try harder next time!</speech>
        </speeches>
        <speeches id="4">
            <speech>Oh! I forgot to finish off our battle! I still need to study more...</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>I'm gonna win all five battles and get that Nugget! you're just another step on my path to victory!</speech>
        </speeches>
        <speeches id="2">
            <speech>Wait does this mean I don't get the Nugget?</speech>
        </speeches>
        <speeches id="3">
            <speech>Wait does this mean I don't get the Nugget?</speech>
        </speeches>
        <speeches id="4">
            <speech>Yes! One step closer! That prize is mine!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>This bridge is like a catwalk, and my Pokémon are here to shine!</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh no! I totally tripped but my team still looked cute, right?</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh no! I totally tripped but my team still looked cute, right?</speech>
        </speeches>
        <speeches id="4">
            <speech>Flawless! Just like I planned grace, style, and victory!</speech>
        </speeches>
    </conversation>
    <movingNpc direction="UP" id="1" name="Luvdisc" speed="1" sprite="370" type="pokemon" x="34" y="16">
        <path>UPx5,DOWNx5</path>
        <onCollisionSpeech gap="4">Luuuuvdisssc!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="LEFT" id="2" name="Joltik" speed="1" sprite="595" type="pokemon" x="8" y="12">
        <path>LEFTx2,RIGHTx2</path>
        <onCollisionSpeech gap="4">Jooolt!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="DOWN" id="3" name="Magnemite" speed="1" sprite="81" type="pokemon" x="1" y="13">
        <path>DOWNx3,UPx3</path>
        <onCollisionSpeech gap="4">Maaag!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="UP" id="4" name="Krabby" speed="1" sprite="98" type="pokemon" x="12" y="25">
        <path>UPx4,DOWNx4</path>
        <onCollisionSpeech gap="4">Kraaaabbbby!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="5" name="Tynamo" speed="1" sprite="602" type="pokemon" x="32" y="6">
        <path>RIGHTx4,LEFTx4</path>
        <onCollisionSpeech gap="4">Tynaaaa!</onCollisionSpeech>
    </movingNpc>
    <npc direction="RIGHT" hidden="false" id="6" name="Simon" randomRotation="true" sprite="49" x="5" y="8">
        <speech>Can you feel that spark?</speech>
        <speech>With all these Electric-type Pokémon and nonstop battles, Nugget Bridge is practically buzzing with energy!</speech>
    </npc>
</npcs>
