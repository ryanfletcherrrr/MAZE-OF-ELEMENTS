<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Hm?</speech>
            <speech>$PLAYER_NAME? So, we meet again. How has it been?</speech>
            <speech>Have you been using the Mega Bracelet wisely?</speech>
            <speech>I suppose I needn't even ask, though. Not when it comes to you and your team.</speech>
            <speech>I wonder… Have you noticed? Hm? There's something here you can't see.</speech>
            <speech>Now, if I were to use this device on the invisible obstacle, it will unblock the path.</speech>
            <speech>Yes its a Pokémon which was blocking the way.</speech>
            <speech>Here let me upgrade your Devon Scope, and you will not have problems with hidden obstacles anymore.
            </speech>
            <speech>Let's meet again someday.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>It's not safe to travel any further kid.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Hey? Where do you think you are flying to?</speech>
            <speech>You don't have the wings yet to go any further! Go back!</speech>
            <speech>Now!!</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Wingull" shouldSleep="" speed="1" sprite="278" type="pokemon" x="43" y="70">
        <path>DOWNx4, UPx4, LEFTx4, RIGHTx4</path>
        <onCollisionSpeech gap="4"/>
        <speech>Peeko!</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="3" name="Richard" randomRotation="true" sprite="5" x="46" y="8">
        <speech>Did you know that the Hoenn Region was the first region to really make use of Berries as they are used today?</speech>
        <speech>The Johto region is widely considered as the first region to actively use berries in active battle, but Hoenn was the first to really refine the technique.</speech>
        <speech>It's one of the things that makes our home unique!</speech>
    </npc>
    <movingNpc direction="LEFT" id="4" name="Loralina" shouldSleep="" speed="1" sprite="22" type="npc" x="24" y="21">
        <path>LEFTx2, RIGHTx2, UPx1, DOWNx1</path>
        <onCollisionSpeech gap="4"/>
        <speech>Maybe you have... maybe you haven't?</speech>
        <speech>What's that? What am I talking about?</speech>
        <speech>Simple silly! I'm talking about your Pokémon!</speech>
        <speech>Still not catching my drift? It's easy...</speech>
        <speech>You swim on your Pokémon, I swim with my hands, if the roles were reversed...</speech>
        <speech>Wouldn't you be questioning me too?</speech>
        <speech>Not many people have the trust and skill to be able to swim using their Pokémon.</speech>
        <speech>Hence why we train so hard!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="6" name="Wailmer" shouldSleep="" speed="1" sprite="320" type="pokemon" x="3" y="81">
        <path>LEFTx2, RIGHTx2</path>
        <onCollisionSpeech gap="4"/>
        <speech>RAWR</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="9" name="Parasol Lady Katrina" randomRotation="false" sprite="27" x="11" y="7">
        <speech>I love the weather here, sometimes it's sunny, sometimes it's not. But it's always a nice day to carry a parasol around!</speech>
    </npc>
    <movingNpc direction="RIGHT" id="10" name="Feebas" speed="1" sprite="349" type="pokemon" x="45" y="75">
        <path>RIGHTx2, LEFTx6, RIGHTx4</path>
        <onCollisionSpeech gap="4">Feebas!</onCollisionSpeech>
        <speech>Feeb-as!</speech>
    </movingNpc>
    <npc direction="LEFT" hidden="false" id="11" name="Fire Starter Brand" randomRotation="false" sprite="52" x="41" y="93">
        <speech>I'm going to create a nice inferno with my Combusken!</speech>
        <speech>Wait, what?</speech>
        <speech>You mean I shouldn't with so many trees nearby?</speech>
        <speech>Trust me, I'm a professional.</speech>
        <speech>Plus... I kinda already have the logs set up. It'd be a shame to waste them! Hahaha!</speech>
    </npc>
    <conversation id="5">
        <speeches id="1">
            <speech>Oh, do you want to see the Pokémon I am proudest of?</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh my goodness! My poor Pokémon...</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh my goodness! My poor Pokémon...</speech>
        </speeches>
        <speeches id="4">
            <speech>What do you think about my dear Pokémon? Great, right?</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>My last ever battle... That's the way I'd like us to view this match...</speech>
        </speeches>
        <speeches id="2">
            <speech>It's been fun... Let's have another last battle again someday...</speech>
        </speeches>
        <speeches id="3">
            <speech>It's been fun... Let's have another last battle again someday...</speech>
        </speeches>
        <speeches id="4">
            <speech>We will meet again someday... Heh. If only that were true...</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>I am a nouveau riche celebrity, so I am stingy with my money!</speech>
        </speeches>
        <speeches id="2">
            <speech>I lost, but I won't give you my lunch money!</speech>
        </speeches>
        <speeches id="3">
            <speech>I lost, but I won't give you my lunch money!</speech>
        </speeches>
        <speeches id="4">
            <speech>Unfortunately, you've lost to me. Now, give me your lunch money!</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>What kind of Pokémon do you like? Hey, come on, show me!</speech>
        </speeches>
        <speeches id="2">
            <speech>Your taste in Pokémon is truly awful, but you are a first-class Trainer!</speech>
        </speeches>
        <speeches id="3">
            <speech>Your taste in Pokémon is truly awful, but you are a first-class Trainer!</speech>
        </speeches>
        <speeches id="4">
            <speech>Your taste in Pokémon is wonderful, but you are a disappointment as a Trainer.</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>In order to become a first-class Trainer, I was forced to come study abroad here.</speech>
        </speeches>
        <speeches id="2">
            <speech>I'm too homesick to want to do any studying...</speech>
        </speeches>
        <speeches id="3">
            <speech>I'm too homesick to want to do any studying...</speech>
        </speeches>
        <speeches id="4">
            <speech>I can learn a lot from Pokémon battles in this country.</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>Ooh la la! Little Trainer! Graceful blossom! I'm going to snippety-snip you right at the stem!</speech>
        </speeches>
        <speeches id="2">
            <speech>Hmm now let me tell you a secret! I dropped a Rare candy here while farming.</speech>
            <speech>Can you find it?</speech>
        </speeches>
        <speeches id="3">
            <speech>Hmm now let me tell you a secret! I dropped a Rare candy here while farming.</speech>
            <speech>Can you find it?</speech>
        </speeches>
        <speeches id="4">
            <speech>N-non! Not so fast! I mean you to be the prize bloom in my garden!</speech>
        </speeches>
    </conversation>
    <conversation id="12">
        <speeches id="1">
            <speech>You seem quite confident. I'll sink you straightaway.</speech>
        </speeches>
        <speeches id="2">
            <speech>Yes... You have good Pokémon... Pokémon must be happy to be raised by you...</speech>
        </speeches>
        <speeches id="3">
            <speech>Yes... You have good Pokémon... Pokémon must be happy to be raised by you...</speech>
        </speeches>
        <speeches id="4">
            <speech>AAAH! I am sooo scared! I will never do it again... Sorry!</speech>
        </speeches>
    </conversation>
    <conversation id="14">
        <speeches id="1">
            <speech>Don't you think it's a bit too much? This kimono? But, well, I can only pull it off while I'm still young.</speech>
        </speeches>
        <speeches id="2">
            <speech>Don't you think old ladies look super cute in furisode?</speech>
        </speeches>
        <speeches id="3">
            <speech>Don't you think old ladies look super cute in furisode?</speech>
        </speeches>
        <speeches id="4">
            <speech>And, well, I suppose that when I'm older... This kind of getup will be too much hassle!</speech>
        </speeches>
    </conversation>
    <conversation id="16">
        <speeches id="1">
            <speech>Oh, you look lively! What d'ya say we battle?</speech>
        </speeches>
        <speeches id="2">
            <speech>My goodness, you are so young! My partners were crushed!</speech>
        </speeches>
        <speeches id="3">
            <speech>My goodness, you are so young! My partners were crushed!</speech>
        </speeches>
        <speeches id="4">
            <speech>OK! We're all done here! How were my partners?</speech>
        </speeches>
    </conversation>
    <conversation id="18">
        <speeches id="1">
            <speech>Hey, you! Don't mess with me, or I will destroy your Pokémon!</speech>
        </speeches>
        <speeches id="2">
            <speech>How could I lose to such a wimpy move? Gaaahhh, that bugs the snot out of me!</speech>
        </speeches>
        <speeches id="3">
            <speech>How could I lose to such a wimpy move? Gaaahhh, that bugs the snot out of me!</speech>
        </speeches>
        <speeches id="4">
            <speech>Thought you might make trouble for me, but what a wimpy attack!</speech>
        </speeches>
    </conversation>
    <conversation id="19">
        <speeches id="1">
            <speech>I grow stronger with each tear I cry.</speech>
        </speeches>
        <speeches id="2">
            <speech>Now I can get even stronger. I grow with every grudge.</speech>
        </speeches>
        <speeches id="3">
            <speech>Now I can get even stronger. I grow with every grudge.</speech>
        </speeches>
        <speeches id="4">
            <speech>Don't get hung up on sadness or frustration. You can use your grudges to motivate yourself.</speech>
        </speeches>
    </conversation>
    <conversation id="20">
        <speeches id="1">
            <speech>There's nothing to do but battle... For us...</speech>
        </speeches>
        <speeches id="2">
            <speech>I wonder if we could have been friends if we had met in a world with no battles...</speech>
        </speeches>
        <speeches id="3">
            <speech>I wonder if we could have been friends if we had met in a world with no battles...</speech>
        </speeches>
        <speeches id="4">
            <speech>This result... is not what I'd hoped for...</speech>
        </speeches>
    </conversation>
    <conversation id="21">
        <speeches id="1">
            <speech>Huh? Huh? A battle? Time to go all out!</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh! You did pretty well, didn't you? You're better than I thought!</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh! You did pretty well, didn't you? You're better than I thought!</speech>
        </speeches>
        <speeches id="4">
            <speech>Terrible! You're extremely unprepared! Come back when you've learned how to throw a Poké Ball!</speech>
        </speeches>
    </conversation>
    <conversation id="22">
        <speeches id="1">
            <speech>Hey, don't be so stuck up! Battles can be left up to fate!</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh! Aren't you the lucky one! I hope you also had fun, though.</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh! Aren't you the lucky one! I hope you also had fun, though.</speech>
        </speeches>
        <speeches id="4">
            <speech>Winning, losing the end, it's all luck. But if it's fun, isn't that enough?</speech>
        </speeches>
    </conversation>
    <conversation id="28">
        <speeches id="1">
            <speech>Welcome, seeker of truths. I am [RED]Sage Eron[], the custodian of secrets long buried beneath Hoenn.</speech>
            <speech>In hushed tones, the ancients spoke of [SKY]Regice[], [GRAY]Registeel[], and [ORANGE]Regirock[], entwined with the fate of our world.</speech>
            <speech>Whispers tell of caverns where echoes of the past linger, shrouded in enigmas, beckoning the worthy.</speech>
            <speech>Venture forth to [GREEN]Ironheart Cavern[], where battles of strength are overshadowed by battles of wits.</speech>
            <speech>Gather relics lost to time, for in them lies the key to awakening truths veiled in shadow.</speech>
        </speeches>
        <speeches id="2">
            <speech>The veil of mystery cloaks your path, each step a silent plea to the echoes of antiquity.</speech>
            <speech>Within the heart of [GREEN]Ironheart Cavern[], ancient whispers await, their secrets locked in silent judgment.</speech>
            <speech>Let the light of your courage reveal what lies hidden, for Hoenn's essence is bound to these guardians.</speech>
            <speech>They are not mere titans of element; they are the pillars on which the tales of our land rest.</speech>
            <speech>Walk with humility. Your discoveries may yet rewrite the annals of our history.</speech>
        </speeches>
    </conversation>
    <conversation id="29">
        <speeches id="1">
            <speech>Ah, you've returned from [GREEN]Ironheart Cavern[]. What tales do those ancient walls whisper?</speech>
            <speech>A [GOLD]Metal Coat[] dropped by Aggron, you say? Fascinating, it bears the essence of [GRAY]Registeel[].</speech>
            <speech>This discovery, while intriguing, is but a piece of the larger puzzle.</speech>
            <speech>Your journey is far from over. The frost of [BLUE]Frostvault Cavern[] beckons you next.</speech>
            <speech>Explore its depths and return with whatever secrets you can unveil.</speech>
        </speeches>
        <speeches id="2">
            <speech>Before you depart, remember, each guardian represents a trial, a challenge to be understood.</speech>
            <speech>In [BLUE]Frostvault Cavern[], seek not just victory but insight into [SKY]Regice[]'s enduring chill.</speech>
            <speech>Return to me once you've braved its icy grasp, for your path leads yet deeper into mystery.</speech>
        </speeches>
    </conversation>
    <conversation id="30">
        <speeches id="1">
            <speech>The chill of [BLUE]Frostvault Cavern[] clings to you. What have you uncovered in its frozen embrace?</speech>
            <speech>A [CYAN]Never-Melt-Ice[], from Cryogonal? The icy silence of [SKY]Regice[] speaks through it.</speech>
            <speech>Yet, our quest does not end with these whispers of ice and steel.</speech>
            <speech>The [ORANGE]Stonegrip Cavern[] in the Route 111 Desert awaits. What secrets does it hold?</speech>
            <speech>Face its trials and return. Together, we may piece together this ancient puzzle.</speech>
        </speeches>
        <speeches id="2">
            <speech>Your journey weaves through the heart of Hoenn's myths, unearthing secrets long frozen in time.</speech>
            <speech>[ORANGE]Stonegrip Cavern[] beckons with the warmth of ancient earth, challenging you to listen to its silent tales.</speech>
            <speech>Within its depths, seek not merely conquest, but the whispers of [ORANGE]Regirock[], guardian of stone.</speech>
            <speech>What truths lie buried beneath the sands? Return with your discoveries, for they are keys to our legacy.</speech>
            <speech>Each step you take is a stride through history. Let the guardians' stories guide you to enlightenment.</speech>
        </speeches>
    </conversation>
    <conversation id="31">
        <speeches id="1">
            <speech>The sands of time shift beneath your feet. What secrets did [ORANGE]Stonegrip Cavern[] yield?</speech>
            <speech>A [BROWN]Hard Stone[], a remnant of Garganacl. It hums with the essence of [ORANGE]Regirock[].</speech>
            <speech>Each item you've uncovered threads more deeply into the fabric of Hoenn's legends.</speech>
            <speech>Yet, the puzzle remains incomplete. A deeper truth whispers, waiting to be discovered.</speech>
            <speech>My brother, shrouded in mystery, occasionally visits the [CYAN]Pacifidlog Town[].</speech>
            <speech>Seek him out, he might have uncovered something.</speech>
        </speeches>
        <speeches id="2">
            <speech>Before you set off, ponder the guardians' trials. Their essence is a beacon guiding your path.</speech>
            <speech>[CYAN]Pacifidlog Town[] may harbor my elusive brother, a wanderer between worlds, once you've faced the Elite Four.</speech>
            <speech>He, too, is drawn to the guardians' lore and may illuminate the path that lies shrouded before you.</speech>
            <speech>Carry the guardians' wisdom as a torch into the shadows. It is there, in the darkness, that truth awaits.</speech>
        </speeches>
    </conversation>

    <conversation id="32">
        <speeches id="1">
            <speech>Ah, seeker of truths, you have been drawn here by whispers carried on the wind.</speech>
            <speech>The {COLOR=SKY}Regi Pyramids{ENDCOLOR} stir with disturbances most troubling - ancient seals weaken, and shadows of the past grow restless.</speech>
            <speech>If you would unlock the path that lies shrouded before you, the guardians demand tribute.</speech>
            <speech>Three sacred offerings must be gathered:</speech>
            <speech>{COLOR=GRAY}5 Stone Plates{ENDCOLOR}, {COLOR=SKY}5 Icicle Plates{ENDCOLOR}, and {COLOR=BROWN}5 Iron Plates{ENDCOLOR}.</speech>
            <speech>Return when you have assembled these elemental tributes, for only then shall the veil of mystery part.</speech>
        </speeches>
        <speeches id="2">
            <speech>Ah, seeker of truths, you have been drawn here by whispers carried on the wind.</speech>
            <speech>The {COLOR=SKY}Regi Pyramids{ENDCOLOR} stir with disturbances most troubling - ancient seals weaken, and shadows of the past grow restless.</speech>
            <speech>If you would unlock the path that lies shrouded before you, the guardians demand tribute.</speech>
            <speech>Three sacred offerings must be gathered:</speech>
            <speech>{COLOR=GRAY}5 Stone Plates{ENDCOLOR}, {COLOR=SKY}5 Icicle Plates{ENDCOLOR}, and {COLOR=BROWN}5 Iron Plates{ENDCOLOR}.</speech>
            <speech>Wait... The elemental essence flows through your offerings - I sense their power resonating with the ancient guardians.</speech>
            <speech>Earth's strength, ice's embrace, and steel's endurance... all are present within your tributes.</speech>
            <speech>Are you prepared to offer these sacred plates to appease the guardians and unlock the path beyond?</speech>
        </speeches>
        <speeches id="3">
            <speech>The guardians will remain silent until their tribute is paid.</speech>
            <speech>When you are ready to part with these elemental offerings, return to me.</speech>
        </speeches>
        <speeches id="4">
            <speech>The plates are accepted! Earth acknowledges your determination, ice your resolve, steel your spirit.</speech>
            <speech>Now the threads of fate weave toward {COLOR=GREEN}Route 121{ENDCOLOR}, where {COLOR=GOLD}Panagiotis{ENDCOLOR} dwells with his faithful {COLOR=PURPLE}Absol{ENDCOLOR}.</speech>
            <speech>They have sensed the shifting currents of destiny. Seek them out, for your journey into shadow and mystery has only just begun.</speech>
        </speeches>
        <speeches id="5">
            <speech>The plates are accepted! Earth acknowledges your determination, ice your resolve, steel your spirit.</speech>
            <speech>Now the threads of fate weave toward {COLOR=GREEN}Route 121{ENDCOLOR}, where {COLOR=GOLD}Panagiotis{ENDCOLOR} dwells with his faithful {COLOR=PURPLE}Absol{ENDCOLOR}.</speech>
            <speech>They have sensed the shifting currents of destiny. Seek them out, for your journey into shadow and mystery has only just begun.</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="12" name="Oddish" shouldSleep="" speed="1" sprite="43" type="pokemon" x="11" y="22">
        <path>LEFTx2,DOWNx2,UPx2,RIGHTx2</path>
        <onCollisionSpeech gap="4">Oddish!</onCollisionSpeech>
        <speech>Oddish!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="13" name="Maril" shouldSleep="" speed="1" sprite="183" type="pokemon" x="23" y="33">
        <path>LEFTx4,UPx5,DOWNx5,RIGHTx4</path>
        <onCollisionSpeech gap="4">Maril!</onCollisionSpeech>
        <speech>Maril!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="14" name="Azumaril" shouldSleep="" speed="1" sprite="184" type="pokemon" x="34" y="21">
        <path>RIGHTx6,LEFTx6</path>
        <onCollisionSpeech gap="4">Azumaril!</onCollisionSpeech>
        <speech>Azuzu!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="15" name="Tropius" shouldSleep="" speed="1" sprite="357" type="pokemon" x="20" y="42">
        <path>UPx4,DOWNx4</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="16" name="Altaria" speed="1" sprite="334" type="pokemon" x="45" y="31">
        <path>UPx7,DOWNx7</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="17" name="Cacnea" shouldSleep="" speed="1" sprite="331" type="pokemon" x="52" y="20">
        <path>RIGHTx1,DOWNx2,UPx2,LEFTx1</path>
        <onCollisionSpeech gap="4">Cacnea!</onCollisionSpeech>
        <speech>Cacnea!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="18" name="Combusken" shouldSleep="" speed="1" sprite="256" type="pokemon" x="38" y="92">
        <path>DOWNx3,UPx3</path>
        <onCollisionSpeech gap="4">Combusken!</onCollisionSpeech>
        <speech>Combusken!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="19" name="Skarmory" speed="1" sprite="227" type="pokemon" x="58" y="90">
        <path>LEFTx4,UPx4,RIGHTx4,DOWNx4</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="LEFT" id="2" name="Biker Baxton" speed="1" sprite="74" type="npc" x="46" y="84">
        <path>LEFTx10, RIGHTx10</path>
        <onCollisionSpeech gap="4"/>
        <speech>Weeeee! Look at me go! Nothing beats the speed of riding your bike at mach speed!</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="20" name="Hiker Hank" randomRotation="true" sprite="10" x="11" y="60">
        <speech>Oi, mate! Ya see that mountain way over there? That's where I'm headin' next, Mt. Pyre!</speech>
        <speech>But before I tackle that beast, I gotta conquer this 'un. Ain't much, but it's got its own charm, ya know?</speech>
        <speech>The climb's tough, sure, but the view from the top? Spectacular! Gives me a taste of what's to come.</speech>
        <speech>So, wish me luck, and maybe we'll meet again at the summit of Mt. Pyre!</speech>
    </npc>
</npcs>
