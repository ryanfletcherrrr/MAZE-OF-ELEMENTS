<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Allow me to formally introduce myself. I am Wallace. The Gym Leader of Sootopolis City.</speech>
            <speech>There's something about you… A difference in your demeanor… I think I sense that in you.</speech>
            <speech>What happened inside the Cave of Origin, and what you did there…</speech>
            <speech>Our upcoming battle will make that all clear.</speech>
            <speech>Now, show me. Show me the power you wield with your Pokémon.</speech>
            <speech>And I, in turn, shall present you… with a performance of illusions in water… by me and my Pokémon!</speech>
        </speeches>
        <speeches id="2">
            <speech>I realize now your authenticity and magnificence as a Pokémon Trainer.</speech>
            <speech>I find much joy in having met you and your Pokémon. You have proven yourself worthy of the Rain Badge. Accept it.</speech>
            <speech>And so you never forget the battle we shared…</speech>
            <speech>Now, with the power of the Rain Badge, you will become able to use this HM move, Waterfall in Hoenn, to scale walls of cascading water.</speech>
            <speech>Many paths are open to you now. One path would take you to the Pokémon League.</speech>
            <speech>It is the goal that all Trainers in Hoenn aspire to reach after obtaining all eight Gym Badges.</speech>
            <speech>If that is the path you chose, then you must find your way to the island said to be the most remote in Hoenn: Ever Grande.</speech>
        </speeches>
        <speeches id="3">
            <speech>Your skills in battle are truly remarkable.</speech>
            <speech>It's clear that you and your Pokémon share a bond of trust and respect, which is the essence of being a great Trainer.</speech>
            <speech>Although I was defeated, I am not disheartened. Instead, our battle inspires me to continue improving myself.</speech>
            <speech>May your journey be as vast and deep as the ocean, filled with adventure, discovery, and the bonds of friendship between you and your Pokémon.</speech>
        </speeches>
        <speeches id="4">
            <speech>This battle was too easy for us. Nevertheless, We are happy to give you another chance.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Halt at once! You there! Let us cross lances!</speech>
        </speeches>
        <speeches id="2">
            <speech>You didn't take it easy on me at all... That was good. You're a risk-taker.</speech>
        </speeches>
        <speeches id="3">
            <speech>You didn't take it easy on me at all... That was good. You're a risk-taker.</speech>
        </speeches>
        <speeches id="4">
            <speech>Trainer, I yield! Please spare me!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Even as old as I am, I just can't give up Pokémon battles.</speech>
        </speeches>
        <speeches id="2">
            <speech>You have to be careful! Pokémon battles can steal away so much of your time...</speech>
        </speeches>
        <speeches id="3">
            <speech>You have to be careful! Pokémon battles can steal away so much of your time...</speech>
        </speeches>
        <speeches id="4">
            <speech>What would my life have been like without Pokémon?</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Go easy on me is not in my vocabulary.</speech>
        </speeches>
        <speeches id="2">
            <speech>Even if I give it my all, it's meaningless when I lose.</speech>
        </speeches>
        <speeches id="3">
            <speech>Even if I give it my all, it's meaningless when I lose.</speech>
        </speeches>
        <speeches id="4">
            <speech>To me, etiquette is mercilessly defeating my opponents in battle even the weak.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Sometimes I need a little time to rest. I'm gonna take it easy this battle, OK?</speech>
        </speeches>
        <speeches id="2">
            <speech>That was supposed to be refreshing, but now I feel more stressed out.</speech>
        </speeches>
        <speeches id="3">
            <speech>That was supposed to be refreshing, but now I feel more stressed out.</speech>
        </speeches>
        <speeches id="4">
            <speech>That was a nice and easy win. I'll work hard again tomorrow!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>I've become so absorbed in Pokémon battles that I've started to worry about myself.</speech>
        </speeches>
        <speeches id="2">
            <speech>It was fun even though I lost, but it worries me that I'm not disappointed at all.</speech>
        </speeches>
        <speeches id="3">
            <speech>It was fun even though I lost, but it worries me that I'm not disappointed at all.</speech>
        </speeches>
        <speeches id="4">
            <speech>When I win a battle, my mind goes blank. It's really worrying.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>My treasured Pokémon and I have been together for a long time. No need to go easy on us.</speech>
        </speeches>
        <speeches id="2">
            <speech>What an inconsiderate actbeating up on an old man and his Pokémon!</speech>
        </speeches>
        <speeches id="3">
            <speech>What an inconsiderate actbeating up on an old man and his Pokémon!</speech>
        </speeches>
        <speeches id="4">
            <speech>Hohoho... Is this what they call the wisdom of age?</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>I've recently remade my life completely! I've been reborn as a Dragon Beauty at last!</speech>
        </speeches>
        <speeches id="2">
            <speech>Yes, a mere half year ago I was a Black Belt! Quite the transformation, wouldn't you say?</speech>
        </speeches>
        <speeches id="3">
            <speech>Yes, a mere half year ago I was a Black Belt! Quite the transformation, wouldn't you say?</speech>
        </speeches>
        <speeches id="4">
            <speech>If you want to make your dreams reality, then you have to be completely dedicated!</speech>
        </speeches>
    </conversation>
    <npc direction="DOWN" hidden="false" id="1" name="Gym Guide" randomRotation="false" sprite="5" x="10" y="49">
        <speech>Ahoy there, Champion in the making!</speech>
        <speech>Welcome to Sootopolis Gym, where Wallace's Water-types are makin' waves.</speech>
        <speech>But don't worry! Electric, Grass, or Dragon Pokémon are your trusty companions in this aquatic adventure.</speech>
        <speech>Keep your sails set, ride the tide, and you'll surf to success alongside the elegant Wallace!</speech>
    </npc>
</npcs>
