<npcs>
    <npc direction="RIGHT" id="1000" name="Lady Beatriz" randomRotation="true" sprite="230" x="18" y="44">
        <speech>Were you afraid of the cable car?</speech>
        <speech>No? Good boy! Now enjoy the sun!</speech>
    </npc>
    <npc direction="LEFT" id="1001" name="Swimmer Anthony" sprite="21" x="18" y="29">
        <speech>I came here to swim!</speech>
        <speech>I'm not afraid of Kinglers!</speech>
    </npc>
    <npc direction="UP" id="1002" name="Fisherman Paul" sprite="16" x="40" y="32">
        <speech>I think Anthony is out of his mind.</speech>
        <speech>Strong Kinglers will hurt him!</speech>
    </npc>
    <npc direction="LEFT" id="1003" name="Simon" randomRotation="true" sprite="5" x="31" y="57">
        <speech>Have you ever heard of Sutta Gang?</speech>
        <speech>They came here a while ago searching for some children.</speech>
        <speech>Evil must be stopped somehow!</speech>
    </npc>
    <conversation canSkip="false" id="1">
        <speeches id="1">
            <speech>What? What do you want? Leave me alone and don't follow me.</speech>
            <speech>Just go away else I will smack you.</speech>
            <speech>*The boy looks very scared, is he the one who robbed the old man?**</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Do you want to travel to the Barfi Falls?</speech>
        </speeches>
        <speeches id="2">
            <speech/>
        </speeches>
    </conversation>

    <conversation id="3" canSkip="false">
        <speeches id="1">
            <!-- Before Battle Speech -->
            <speech>Ahoy, aspiring master of the seas! The currents of fate have brought you to me. Ready to test your mettle?</speech>
            <speech>In my dominion over the ocean's creatures, I've seen the mightiest of storms and the calmest of tides. What's your preference?</speech>
            <speech>Before we cast off, choose your challenge level wisely.</speech>
            <speech>Our battle today will not be repeated for [GOLD]14 days[]. Choose carefully, for the sea waits for no one.</speech>
        </speeches>
        <speeches id="2">
            <!-- Victory Speech -->
            <speech>By the depths! Your skill has truly surpassed the towering waves. A victory well-earned against the ocean's guardian.</speech>
            <speech>Take this time to reflect on your conquest, for the sea grants no swift rematches. In [GOLD]14 days[], the tides will call to you once more.</speech>
        </speeches>
        <speeches id="3">
            <!-- Not Battling Speech -->
            <speech>Withdrawing your line so soon? The ocean's heart is vast and full of patience.</speech>
            <speech>Your journey is long, and the waves will always welcome your return.</speech>
            <speech>Sharpen your skills against the gales and the depths. In [GOLD]$DURATION[], the sea will be ready to test you anew.</speech>
        </speeches>
        <speeches id="4">
            <!-- Loss Speech -->
            <speech>Like a ship caught in a squall, you've faltered.</speech>
            <speech>The sea's challenges are unyielding, but so too must be your resolve.</speech>
            <speech>Let the salt spray be your guide. Return to these shores, stronger and ready to claim victory against the tide.</speech>
        </speeches>
        <speeches id="5">
            <!-- Before Criteria Speech -->
            <speech>Your tackle box seems light, young angler. Mastery of the sea demands a [GOLD]level 50 fishing skill[].</speech>
            <speech>Without it, how can you hope to understand the ocean's true depth?</speech>
            <speech>Seek the whispers of the waves, the dance of the lure.</speech>
            <speech>When your skill reflects the sea's vastness, return to challenge its keeper.</speech>
        </speeches>
    </conversation>

</npcs>
