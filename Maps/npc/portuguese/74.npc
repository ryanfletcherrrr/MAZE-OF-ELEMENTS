<npcs>
    <npc direction="DOWN" id="1000" name="Lady Beatrice" randomRotation="true" sprite="73" x="44" y="36">
        <speech>Olá, jovem instrutor! Como você está?</speech>
        <speech>Ótimo, deixe-me tirar uma selfie com você!</speech>
        <speech>Eu adoro isso!</speech>
    </npc>
    <npc direction="DOWN" id="1001" name="Tom" randomRotation="true" sprite="80" x="18" y="26">
        <speech>Ewwww, estou demorando muito para passar.</speech>
        <speech>Eu quase consegui, mas, eca!</speech>
    </npc>
    <npc direction="UP" id="1002" name="Trainer Dane" randomRotation="true" sprite="102" x="4" y="2">
        <speech>Whatsupppp meu garoto, vamos ver quais Pokémon vivem nessa área!</speech>
        <speech>Vou pegar todos eles!</speech>
    </npc>
    <conversation id="1">
        <speeches id="1">
            <speech>É um dia maravilhoso para um piquenique, mas quem faz piquenique de verdade sabe que todo dia é bom para
                piquenique!
            </speech>
        </speeches>
        <speeches id="2">
            <speech>Bem, perdemos a luta, mas vamos aproveitar o piquenique!</speech>
        </speeches>
        <speeches id="3">
            <speech>Hum hum hum, cantarolar sua música favorita e fazer um piquenique com seus amigos mais queridos é
                maravilhoso!
            </speech>
        </speeches>
        <speeches id="4">
            <speech>Estarei aqui fora curtindo o piquenique com meus Pokémon, apareça novamente!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Um verdadeiro treinador de craques supera todos os obstáculos, vamos ver o que você tem!</speech>
        </speeches>
        <speeches id="2">
            <speech>Ouvi falar de você pelos outros treinadores ace, mas não esperava que fosse tão forte.</speech>
        </speeches>
        <speeches id="3">
            <speech>Tenho que trabalhar muito mais para vencê-lo em nossa revanche.</speech>
        </speeches>
        <speeches id="4">
            <speech>Você me deu bastante trabalho, mas, no final, você não era grande coisa.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Eu percorro a região exorcizando fantasmas malignos sempre que sou chamado, mas ultimamente um grupo chamado
                "Hexers" está causando problemas também.
            </speech>
        </speeches>
        <speeches id="2">
            <speech>Você se tornou muito próximo do seu Pokémon, posso sentir isso na batalha que acabamos de travar,
                seu futuro lhe reserva grandes surpresas.
            </speech>
        </speeches>
        <speeches id="3">
            <speech>É melhor eu me apressar e ir para minha próxima consulta de exorcismo!</speech>
        </speeches>
        <speeches id="4">
            <speech>Eu já havia previsto sua derrota aqui, você deve ficar mais forte, vá treinar, seu futuro será muito
                agitado e ocupado.
            </speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Hmm, ei, você aí, poderia me dizer o caminho para Glassmoor, tenho um encontro para pegar lá, mas
                mas isso pode esperar, você parece bem forte, vamos testá-lo.
            </speech>
        </speeches>
        <speeches id="2">
            <speech>Oh, você é realmente forte, meus olhos não me enganaram, eu também não me importaria de sair com você
                mas tenho que me apressar agora! *Piscadelas
            </speech>
        </speeches>
        <speeches id="3">
            <speech>Obrigado por me dizer a direção, ligue para mim se quiser se encontrar algum dia! *Piscadela
            </speech>
        </speeches>
        <speeches id="4">
            <speech>Acho que eu estava errado, é melhor me apressar ou vou me atrasar para o meu encontro.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Onde ela foi parar?</speech>
            <speech>Oh, olá, você viu uma garota fazendo piquenique por aqui? Nós deveríamos ter vindo juntos para cá
                juntos, mas ela se empolgou demais e saiu correndo!
            </speech>
        </speeches>
        <speeches id="2">
            <speech>Oh, meu Deus, você é demais, mas não posso mais ficar batendo papo aqui, é melhor eu ir procurá-la!</speech>
        </speeches>
        <speeches id="3">
            <speech>Ah, então ela está no caminho certo? Obrigada!</speech>
        </speeches>
        <speeches id="4">
            <speech>Droga, será que eu me subestimei? Isso foi muito fácil!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Olá, por acaso você viu um Pokémon voador por aqui? Oh, desculpe, meu nome é Fern, eu costumo
                levo os Pokémon pássaros de que cuido para abrir um pouco as asas.
            </speech>
            <speech>De qualquer forma, se você o encontrar, tome cuidado, pois ele é bastante forte.
                enfrentá-lo.
            </speech>
        </speeches>
        <speeches id="2">
            <speech>Hohoho, você é muito forte, não tem nada a temer, divirta-se em sua jornada!</speech>
        </speeches>
        <speeches id="3">
            <speech>Para onde foi esse malandro, eu o repreenderei quando ele voltar!</speech>
        </speeches>
        <speeches id="4">
            <speech>Oh, é melhor você tomar cuidado porque, se não conseguiu me vencer, pode estar em apuros contra aquele
                pequeno encrenqueiro!
            </speech>
        </speeches>
    </conversation>
</npcs>