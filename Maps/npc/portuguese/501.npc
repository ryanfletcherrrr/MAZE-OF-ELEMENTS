<npcs>
    <conversation canSkip="false" id="1">
        <speeches id="1">
            <speech>Muito lento! Muito bem! Vamos nos mudar para o laboratório do Prof. Rowan</speech>
        </speeches>
        <speeches id="2">
            <speech>.....</speech>
            <speech>O quê? Não entre na grama, certo? Não se preocupe! Não tem problema!</speech>
            <speech>Não importa que não tenhamos nenhum Pokémon. Confie em mim.</speech>
            <speech>Eu tive uma ideia! Agora ouça.</speech>
            <speech>Você sabe como os Pokémon selvagens saltam quando você entra na grama alta?</speech>
            <speech>Então, o que você faz é ir para o próximo pedaço de grama antes que qualquer Pokémon selvagem possa aparecer!
            </speech>
            <speech>Se continuarmos correndo, poderemos chegar à Cidade de Sandgem sem encontrar Pokémon selvagens!</speech>
            <speech>OK, fiquem comigo! OK, aqui vai!</speech>
        </speeches>
        <speeches id="3">
            <speech>Em suas marcas...</speech>
        </speeches>
        <speeches id="4">
            <speech>Ei, $PLAYER_NAME Esse cara velho... É o Prof. Rowan, não é? O que ele está fazendo aqui...?</speech>
        </speeches>
        <speeches id="5">
            <speech>Você pode perguntar centenas de vezes! A resposta nunca mudará!</speech>
            <speech>Nós dois responderemos centenas de vezes, nós adoramos Pokémon! Certo, $PLAYER_NAME</speech>
        </speeches>
        <speeches id="6">
            <speech>...Uh... Bem, eu, uh... ... ... ...</speech>
            <speech>Bem, então esqueça de mim, mas dê um Pokémon para o meu amigo aqui!</speech>
            <speech>Quero dizer, fui eu quem tentou entrar na grama alta e tudo mais...</speech>
        </speeches>
        <speeches id="7">
            <speech>Sério?! Prof. Rowan! Não posso acreditar! Estou tão feliz agora que não consigo manter uma cara séria!
            </speech>
            <speech>Ei, $PLAYER_NAME. Você pode escolher primeiro. Ei, sou praticamente um adulto. Tenho que mostrar alguma classe
                aqui.
            </speech>
        </speeches>
        <speeches id="8">
            <speech>Então, eu escolho você! Estou escolhendo este Piplup.</speech>
        </speeches>
        <speeches id="9">
            <speech>Então, eu escolho você! Estou escolhendo este Turtwig.</speech>
        </speeches>
        <speeches id="10">
            <speech>Então, eu escolho você! Estou escolhendo este Chimchar.</speech>
        </speeches>
        <speeches id="11">
            <speech>O que você acha disso?</speech>
            <speech>O Prof. Rowan é muito legal. Na TV, ele parece tão severo e assustador. Heheh, $PLAYER_NAME!</speech>
            <speech>Nós dois temos Pokémon agora. Só há uma coisa a fazer, certo? Você está pronto para isso?</speech>
        </speeches>
        <speeches id="12">
            <speech>O que está dizendo?! Acabamos perdendo?!</speech>
        </speeches>
        <speeches id="13">
            <speech>Você não foi ruim. Eu só sou naturalmente bom nisso!</speech>
        </speeches>
        <speeches id="14">
            <speech>Ufa! Vamos para casa. Estou exausto depois dessa batalha. Meu Pokémon também precisa descansar. Até mais, $PLAYER_NAME!
            </speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="2">
        <speeches id="1">
            <speech>Segure-o!</speech>
            <speech>Vocês dois não parecem ter nenhum Pokémon entre vocês? Então, qual é o significado de ir para a grama alta?
                grama alta?
            </speech>
        </speeches>
        <speeches id="2">
            <speech>... ... Eles tentaram ir para a grama alta porque queriam o Pokémon...</speech>
            <speech>Hmm... O que fazer...? Seu mundo certamente mudaria se eles encontrassem um Pokémon...</speech>
            <speech>É certo para mim colocá-los nesse caminho...?</speech>
            <speech>... ... Vocês dois. Vocês realmente amam Pokémon, não é?</speech>
        </speeches>
        <speeches id="3">
            <speech>...Um par de crianças imprudentes que tentam tolamente entrar na grama alta sem seus próprios Pokémon...?
            </speech>
            <speech>Fico preocupado com o que pessoas como essas fariam com o Pokémon.</speech>
        </speeches>
        <speeches id="4">
            <speech>Que grandeza de sua parte... Muito bem, então! Vou confiar a vocês dois os Pokémon!</speech>
            <speech>Peço desculpas por tê-lo feito passar por esse exercício.</speech>
            <speech>No entanto! Vocês devem me prometer que nunca mais se colocarão em perigo de forma imprudente.</speech>
            <speech>Agora, então... Hm? Agora, onde...</speech>
        </speeches>
        <speeches id="5">
            <speech>Ah! Aí está! Dawn, bom trabalho. O que eu estava prestes a fazer era confiar a esses dois seus próprios
                Pokémon.
            </speech>
        </speeches>
        <speeches id="6">
            <speech>Hm! Nós existimos lado a lado com o Pokémon.</speech>
            <speech>Chega um momento em que as pessoas devem conhecer o Pokémon.</speech>
            <speech>Há um mundo que deve ser explorado em conjunto.</speech>
            <speech>Para eles, hoje é o momento certo. O lugar, bem aqui.</speech>
            <speech>Vá em frente! Abra a maleta e escolha um Pokémon!</speech>
        </speeches>
        <speeches id="7">
            <speech>Muito bem! Vocês dois escolheram um bom Pokémon, ao que parece.</speech>
            <speech>Agora, ouça bem! Os Pokémon que lhe foram confiados não estão familiarizados com o mundo.</speech>
            <speech>Nesse aspecto, eles são muito parecidos com você. Como companheiros recém-chegados ao mundo, espero que todos vocês se saiam bem
                juntos.
            </speech>
            <speech>Se tiver algum problema, venha me ver em meu laboratório na cidade de Sandgem.</speech>
            <speech>E agora, seguiremos nosso caminho.</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="3">
        <speeches id="1">
            <speech>Professor Rowan. Você deixou sua pasta no lago! Oh? Há algo errado aqui?</speech>
        </speeches>
        <speeches id="2">
            <speech>Perdão?! Esses Pokémon são difíceis de substituir. Tem certeza de que vai doá-los?</speech>
        </speeches>
        <speeches id="3">
            <speech>Professor! Espere por mim, por favor!</speech>
        </speeches>
        <speeches id="4">
            <speech>Sinto muito... Por favor, deixe-me passar.</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="4">
        <speeches id="1">
            <speech>Muito lento! $PLAYER_NAME, estou cansado de esperar!</speech>
            <speech>Vou falar com o Prof. Rowan para poder agradecê-lo adequadamente.</speech>
            <speech>Então, tive uma ótima ideia. Ouçam, está bem? Você conhece o lago onde sempre brincamos?</speech>
            <speech>Você sabe que dizem que um Pokémon lendário vive lá?</speech>
            <speech>Você adivinhou! Vamos pegar esse Pokémon.</speech>
            <speech>Isso deixará o Prof. Rowan feliz.</speech>
            <speech>Tenho certeza disso! Eu e você juntos, não temos nada a temer!</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="5">
        <speeches id="1">
            <speech>Ei, $PLAYER_NAME! Eu disse que o lago não é por ali!</speech>
        </speeches>
    </conversation>
    <conversation canSkip="true" id="6">
        <speeches id="1">
            <speech/>
        </speeches>
        <speeches id="2">
            <speech>Ei!</speech>
            <speech>Eu trabalho em um Pokémon Mart.</speech>
            <speech>Você sabia que a saúde de um Pokémon é medida por seus pontos de vida (HP)?</speech>
            <speech>Se um Pokémon ficar sem HP, ele desmaiará e não poderá mais lutar.</speech>
            <speech>Se a saúde de um Pokémon ficar baixa, você deve curá-lo com uma poção</speech>
            <speech>Aqui, você gostaria de tomar uma poção? A primeira é grátis!</speech>
        </speeches>
        <speeches id="3">
            <speech>Tudo bem, você pode ficar com ele depois, não me importo.</speech>
        </speeches>
        <speeches id="4">
            <speech>Boa sorte na vida selvagem!</speech>
        </speeches>
        <speeches id="5">
            <speech>Você pode encontrar um Pokémon Mart nas cidades e na maioria dos grandes centros urbanos.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Eu deveria visitar minha mãe e contar a ela sobre meu novo iniciante antes de partir.</speech>
        </speeches>
    </conversation>
    <npc direction="DOWN" id="1" name="" sprite="187" x="68" y="12">
        <speech>Não seja tímido! Converse com qualquer pessoa que você encontrar.</speech>
        <speech>Ao conversar com as pessoas, você obterá informações e conselhos valiosos.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="2" name="Youngster Marcus" sprite="2" x="73" y="4">
        <speech>Essa saliência é unilateral. Pule para baixo para pegar um atalho para Twinleaf Town!</speech>
    </npc>
    <npc direction="RIGHT" id="3" name="Young Girl Verena" sprite="12" x="58" y="11">
        <speech>Se a saúde do seu Pokémon, ou seja, seu HP, estiver ficando baixa, você deve ir a um Centro Pokémon!
        </speech>
        <speech>Eles curarão seu Pokémon de graça! Seu prédio é identificado por um telhado vermelho!</speech>
    </npc>
    <npc direction="UP" id="4" name="Young Trainer Ted" sprite="4" x="43" y="19">
        <speech>Os Pokémon selvagens ficam à espreita na grama alta. Eles podem aparecer a qualquer momento.</speech>
        <speech>Portanto, se você quiser lutar contra um Pokémon selvagem, basta andar na grama alta.</speech>
        <speech>Se quiser evitar Pokémon selvagens, evite a grama alta.</speech>
    </npc>
    <movingNpc direction="RIGHT" id="5" name="Beedrill" shouldSleep="" speed="1" sprite="15" type="pokemon" x="17" y="19">
        <path>LEFTx4, DOWNx2, RIGHTx4, UPx2</path>
        <onCollisionSpeech gap="4">Buzzzzz</onCollisionSpeech>
        <speech>Beedrill....</speech>
    </movingNpc>
    <movingNpc direction="LEFT" id="6" name="Starly" shouldSleep="" speed="1" sprite="396" type="pokemon" x="72" y="21">
        <path>LEFTx4, DOWNx2, RIGHTx4, UPx2</path>
        <onCollisionSpeech gap="4">Starrr</onCollisionSpeech>
        <speech>Estrelinha... Estrelinha...</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="7" name="Gentleman Mark" sprite="5" x="12" y="5">
        <speech>À nossa esquerda está o Lago Verity! É um lugar muito bonito.</speech>
        <speech>Dizem que, ocasionalmente, você pode ouvir um grito desconhecido lá...</speech>
    </npc>
    <movingNpc direction="RIGHT" id="8" name="Youngster Atlas" shouldSleep="" speed="1" sprite="24" type="npc" x="41" y="6">
        <path>RIGHTx4, LEFTx4</path>
        <onCollisionSpeech gap="4">I'm walking here!!</onCollisionSpeech>
        <speech>Estou tentando encontrar uma Starly realmente bonita!</speech>
        <speech>Se quiser ser um treinador de Pokémon bem-sucedido, você precisa entender as naturezas!</speech>
    </movingNpc>
    <movingNpc direction="LEFT" id="9" name="Chloe" speed="1" sprite="17" type="npc" x="23" y="6">
        <path>LEFTx3, DOWNx3, RIGHTx3, UPx3</path>
        <onCollisionSpeech gap="4">Hi!</onCollisionSpeech>
        <speech>Adoro fazer grind aqui! Os spawns mudam de acordo com a hora do dia!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="10" name="Shinx" shouldSleep="" speed="1" sprite="403" type="pokemon" x="19" y="13">
        <path>RIGHTx5, LEFTx5</path>
        <onCollisionSpeech gap="4">Shiiiinx</onCollisionSpeech>
        <speech>Shinx!</speech>
    </movingNpc>
</npcs>