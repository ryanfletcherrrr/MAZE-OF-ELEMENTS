<npcs>
    <conversation id="3">
        <speeches id="1">
            <speech>Olá, garoto. Sou o especialista local em varas de pesca. Ouvi dizer que varas de pesca estão sendo distribuídas na Cidade Jubilife.</speech>
        </speeches>
        <speeches id="2">
            <speech>Olá. Sou o especialista local em varas de pesca. Posso consertar sua vara de pescar, se quiser? Por uma taxa, é claro.</speech>
            <speech>Gostaria de reparar sua haste por 500 F?</speech>
        </speeches>
        <speeches id="3">
            <speech>Parabéns, sua vara de pescar foi consertada com sucesso!</speech>
        </speeches>
        <speeches id="4">
            <speech>Volte se precisar de reparos em sua haste.</speech>
        </speeches>
        <speeches id="5">
            <speech>Sua haste já está em perfeito estado! Volte quando precisar de reparos.</speech>
        </speeches>
        <speeches id="6">
            <speech>Oops, você não tem F suficiente para consertar sua haste.</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="5">
        <speeches id="1">
            <speech>Esperem! Não vá embora sem mim!</speech>
            <speech>Você está desafiando a Liga Pokémon, não está?</speech>
            <speech>É por isso que estou aqui também. Vamos ver quem é mais digno de vencer o desafio com uma batalha!</speech>
        </speeches>
        <speeches id="2">
            <speech>O que acabou de acontecer?! Minha equipe ainda precisa de aumento?!</speech>
            <speech>Acho que não estou pronto para a Liga Pokémon se estou perdendo para você!</speech>
            <speech>Droga! Mas fique de olho! Eu vou ficar mais forte e vencer meu caminho na Liga Pokémon!</speech>
            <speech>Porque vou me tornar o Campeão, o Treinador mais forte! $PLAYER_NAME!</speech>
            <speech>É melhor você não perder para ninguém antes de mim!</speech>
        </speeches>
        <speeches id="3"/>
        <speeches id="4">
            <speech>Não perca suas esperanças. Você não era tão ruim assim. Eu é que sou bom demais.</speech>
        </speeches>
        <speeches id="5"/>
    </conversation>
    <npc direction="DOWN" hidden="false" id="1" name="Trainer Yuuki" randomRotation="false" sprite="34" x="11" y="17">
        <speech>Passei muitas horas treinando meus Pokémon para isso. Mas simplesmente não consigo vencê-los...</speech>
        <speech>Se ao menos eu tivesse treinado os EVs.</speech>
    </npc>
    <npc direction="LEFT" hidden="false" id="2" name="Trainer Amy" randomRotation="false" sprite="33" x="38" y="5">
        <speech>Eu os derrotei com muita facilidade. E quanto a você?</speech>
    </npc>
    <npc direction="RIGHT" hidden="false" id="3" name="Trainer Dan" randomRotation="false" sprite="32" x="34" y="5">
        <speech>Já tentei 3 vezes vencê-los, mas não consigo. Amy, você pode me emprestar seu Pokémon, POR FAVOR!!!</speech>
    </npc>
    <movingNpc direction="DOWN" id="4" name="Trainer Liam" speed="1" sprite="37" type="npc" x="29" y="22">
        <path>LEFTx4, RIGHTx4</path>
        <onCollisionSpeech gap="4">Oh Yeah!</onCollisionSpeech>
        <speech>Ouvi dizer que esta não é a última parte de nossa jornada! Jvaloh é uma região ainda maior do que Sinnoh! Mal posso esperar para ir treinar lá!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="5" name="Eevee" shouldSleep="" speed="1" sprite="133" type="pokemon" x="38" y="7">
        <path>RIGHTx2, LEFTx2</path>
        <onCollisionSpeech gap="4">EEEEVEEE!</onCollisionSpeech>
        <speech>*A Eevee está no nível 100</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="6" name="Riolu" shouldSleep="" speed="1" sprite="447" type="pokemon" x="32" y="6">
        <path>UPx1,DOWNx1</path>
        <onCollisionSpeech gap="4">Riolu!!</onCollisionSpeech>
        <speech>*O Riolu está no nível 37</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="7" name="Grunt" randomRotation="true" sprite="209" x="10" y="3">
        <speech>Nossos planos podem ter falhado, mas tenho certeza de que podemos roubar alguns Pokémon desses Treinadores!</speech>
    </npc>
    <npc direction="RIGHT" hidden="false" id="8" name="James" randomRotation="false" sprite="2" x="35" y="21">
        <speech>Vamos esperar que o $PLAYER_NAME ganhe, então poderemos pedir seu autógrafo!</speech>
    </npc>
    <npc direction="LEFT" hidden="false" id="9" name="Jesse" randomRotation="false" sprite="82" x="39" y="21">
        <speech>Não seja tolo, James, vamos esperar que o $PLAYER_NAME perca e roubar seus Pokémon enquanto ele estiver se sentindo mal!</speech>
    </npc>
    <movingNpc direction="DOWN" id="10" name="Doduo" shouldSleep="false" speed="1" sprite="84" type="pokemon" x="12" y="19">
        <path>LEFTx2, RIGHTx2</path>
        <onCollisionSpeech gap="4">Doduo</onCollisionSpeech>
        <speech>*Doduo parece animado</speech>
    </movingNpc>
    <conversation id="8">
        <speeches id="1">
            <speech>$PLAYER_NAME !</speech>
        </speeches>
        <speeches id="2">
            <speech>Parabéns! Você chegou tão longe...</speech>
            <speech>Mas não estou surpreso. Eu sabia desde o primeiro dia que você era especial.</speech>
            <speech>Eu só queria parabenizá-lo e agradecê-lo por tudo o que você fez até agora.</speech>
            <speech>Se precisar de mim para qualquer coisa, lembre-se de que estou sempre em Sandgem.</speech>
        </speeches>
        <speeches id="3">
            <speech>Ah, e o Barry está esperando por você lá fora.</speech>
            <speech>Ele parece estar animado com alguma coisa. Encontre-o antes de sair deste lugar.</speech>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="9">
        <speeches id="1">
            <speech>Olá, $PLAYER_NAME! Você tem coragem de desafiar Barry, o treinador mais rápido do mundo?</speech>
            <speech>Acha que consegue acompanhar minha velocidade? Vamos ver o que você tem!</speech>
        </speeches>
        <speeches id="2">
            <speech>Uau, você está realmente em alta! Até eu estou impressionado com suas habilidades.</speech>
            <speech>Mas lembre-se, eu sou o Barry e estou sempre pronto para uma revanche. Cada vez mais rápido e mais forte!</speech>
        </speeches>
        <speeches id="3">
            <speech>Espere um pouco! Preciso recuperar o fôlego e planejar minha próxima estratégia super-rápida.</speech>
            <speech>Até mesmo os mais rápidos de nós precisam de uma pausa. Vamos correr novamente depois de $DURATION, ok?</speech>
        </speeches>
        <speeches id="4">
            <speech>Parece que você não conseguiu acompanhar minha velocidade dessa vez, não é?</speech>
            <speech>Não se preocupe, todo campeão começou como um desafiante. Treine bastante e volte para outra batalha em ritmo acelerado!</speech>
        </speeches>
        <speeches id="5">
            <speech>Espere um pouco! Está faltando uma coisa. Você precisa de Empoleon, Torterra ou Infernape em seu grupo para esse desafio.</speech>
            <speech>Consiga um deles, e então teremos uma corrida de verdade em nossas mãos!</speech>
        </speeches>
    </conversation>
</npcs>