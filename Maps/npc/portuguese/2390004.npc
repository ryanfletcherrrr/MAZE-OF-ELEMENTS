<npcs>

    <conversation id="2">
        <speeches id="1">
            <speech>{Os olhos se iluminam de entusiasmo*{ENDCOLOR}</speech>
            <speech>Esperem, esperem, ESPEREM! É o {COLOR=RED}legendário brilho{ENDCOLOR} do minério de dinamite que estou vendo?</speech>
            <speech>Por favor, por favor, por favor! Negocie comigo! Tenho {COLOR=GOLD} tesouros incríveis{ENDCOLOR} esperando pela pessoa certa!</speech>
            <speech>O que você acha? Pronto para fazer um acordo que vai lhe deixar de boca aberta?</speech>
        </speeches>
        <speeches id="2">
            <speech>{*deflaciona como um balão triste*{ENDCOLOR}</speech>
            <speech>Mas... por que não? Prometo que minhas guloseimas são absolutamente incríveis!</speech>
            <speech>Quem sabe na próxima vez? Estarei aqui, sonhando com aqueles {COLOR=RED}minérios brilhantes de Dynite{ENDCOLOR}...</speech>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>{*praticamente vibrando de entusiasmo*{ENDCOLOR}</speech>
            <speech>Essas {COLOR=RED}Blaze Coins{ENDCOLOR} estão chamando meu nome! Posso ouvi-las tilintando em sua bolsa!</speech>
            <speech>Troque comigo, troque comigo! Tenho guloseimas tão boas que vão fazer sua cabeça girar!</speech>
            <speech>Vamos lá, vamos fazer a mágica {COLOR=ORANGE}fiery{ENDCOLOR} acontecer!</speech>
        </speeches>
        <speeches id="2">
            <speech>{*murmura dramaticamente*{ENDCOLOR}</speech>
            <speech>Ah, é mesmo? Mas eu tinha preparado ofertas incríveis {COLOR=RED}{ENDCOLOR}...</speech>
            <speech>Bem, se você mudar de ideia, estarei aqui polindo minha coleção!</speech>
        </speeches>
    </conversation>

    <conversation id="4">
        <speeches id="1">
            <speech>{*Gaspa e aponta com entusiasmo*{ENDCOLOR}</speech>
            <speech>Fichas de Guerras de Tripulação! O maior prêmio do campo de batalha!</speech>
            <speech>Ouça, tenho tesouros que fariam um capitão pirata chorar de alegria!</speech>
            <speech>Por favor, por favor, com uma cereja no topo?</speech>
        </speeches>
        <speeches id="2">
            <speech>{suspira melancolicamente*{ENDCOLOR}</speech>
            <speech>Ah, aquele que escapou... essas fichas teriam completado minha coleção!</speech>
            <speech>Talvez os ventos da guerra o tragam de volta para mim algum dia...</speech>
        </speeches>
    </conversation>

    <conversation id="5">
        <speeches id="1">
            <speech>{*faz uma pequena dança da vitória*{ENDCOLOR}</speech>
            <speech>Fichas de batalha por ranking! As {COLOR=RED}joias da coroa{ENDCOLOR} da glória competitiva!</speech>
            <speech>Estou praticamente pulando pelas paredes! Minhas guloseimas são de nível lendário, eu juro!</speech>
            <speech>Como vai ser, campeão? Pronto para aumentar seu inventário?</speech>
        </speeches>
        <speeches id="2">
            <speech>{*Abraça o peito dramaticamente*{ENDCOLOR}</speech>
            <speech>Meu coração! Você está partindo o coração do meu pobre colecionador!</speech>
            <speech>Esses tokens... poderiam ter sido meus! *Talvez na próxima batalha...</speech>
        </speeches>
    </conversation>

    <conversation id="6">
        <speeches id="1">
            <speech>{Os olhos brilham como joias raras*{ENDCOLOR}</speech>
            <speech>Esses são... {Tokens de batalha{ENDCOLOR} Estou vendo? A doce moeda dos campeões!</speech>
            <speech>Com essas belezas, você pode desbloquear maravilhas além de seus sonhos mais loucos!</speech>
            <speech>Aproxime-se, herói! Tenho relíquias forjadas no fogo da própria vitória!</speech>
        </speeches>
        <speeches id="2">
            <speech>{Cai como um cavaleiro derrotado*{ENDCOLOR}</speech>
            <speech>Infelizmente... mais um dia sem o tilintar dourado das fichas de batalha em minha bolsa...</speech>
            <speech>Que suas futuras batalhas sejam gloriosas e que o destino traga você - e suas fichas - de volta para mim!</speech>
        </speeches>
    </conversation>

</npcs>