<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Bem-vindo, desafiante. Eu sou {COLOR=ORANGE}Sister Hiyori{ENDCOLOR}, guardiã do {COLOR=GREEN}Ritmo ancestral da Terra{ENDCOLOR}.</speech>
            <speech>Sinto que você provou seu valor contra os {COLOR=GOLD}Elite Four{ENDCOLOR} - impressionante, mas nossas provas exigem mais.</speech>
            <speech>O verdadeiro caminho do punho ensina {COLOR=BLUE}paciência{ENDCOLOR} - como a montanha que resiste a todas as tempestades.</speech>
            <speech>Antes de poder enfrentar nosso {COLOR=GOLD}sagrado Kubfu{ENDCOLOR}, você deve provar que seu espírito de luta pode resistir.</speech>
            <speech>Mostre-me que seus {COLOR=RED}Fighting-types{ENDCOLOR} possuem a resiliência necessária para superar qualquer provação!</speech>
        </speeches>
        <speeches id="2">
            <speech>Sua persistência reflete a resistência da montanha. Você aprendeu bem a {COLOR=BLUE}primeira lição{ENDCOLOR}.</speech>
            <speech>O caminho à frente se torna mais íngreme, mas sua base é sólida. Continue até a próxima prova.</speech>
        </speeches>
        <speeches id="3">
            <speech>A terra treme com sua derrota, mas não se desespere - até mesmo as montanhas precisam sofrer erosão para ficarem mais fortes.</speech>
            <speech>Retorne em {COLOR=PURPLE}$DURATION{ENDCOLOR}, quando o {COLOR=GOLD}sagrado dia{ENDCOLOR} chegar novamente. Medite sobre a perseverança até lá.</speech>
        </speeches>
        <speeches id="4">
            <speech>Você dominou a lição da persistência. O {COLOR=GREEN}Pulse of the Earth{ENDCOLOR} reconhece sua força.</speech>
            <speech>Vá mais fundo em nosso santuário, onde desafios maiores aguardam seu espírito de luta.</speech>
        </speeches>
        <speeches id="5">
            <speech>As provas sagradas de nosso dojo são reservadas para aqueles que conquistaram a {COLOR=GOLD}Elite Four{ENDCOLOR} e provaram sua maestria.</speech>
            <speech>As portas se abrem somente na {COLOR=GOLD}Quarta-feira{ENDCOLOR}, quando as energias sagradas se alinham com nosso treinamento.</speech>
            <speech>Retorne quando chegar o dia certo e traga apenas {COLOR=RED}Companheiros do tipo lutador{ENDCOLOR} para honrar nossos costumes.</speech>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>Eu sou a {COLOR=CYAN}Irmã de Lâmina Yuna{ENDCOLOR}, rápida como o vento da montanha que corta a pedra.</speech>
            <speech>Assim, outro {COLOR=GOLD}campeão da Elite Quatro{ENDCOLOR} procura testar sua coragem contra nossos métodos antigos.</speech>
            <speech>{Velocidade e precisão{ENDCOLOR} - esses são os pilares sobre os quais se ergue o verdadeiro domínio marcial.</speech>
            <speech>Seus {COLOR=RED}Fighting-types{ENDCOLOR} devem aprender a atacar como um raio e depois desaparecer como uma névoa.</speech>
            <speech>Você consegue acompanhar o ritmo da lâmina do {COLOR=CYAN}Wind Cutter{ENDCOLOR}?</speech>
        </speeches>
        <speeches id="2">
            <speech>Você é rápido como o vento e duas vezes mais afiado. Seus {COLOR=RED}Fighting-types{ENDCOLOR} dançam com verdadeira graça.</speech>
            <speech>Você ganhou a passagem para a próxima prova. Que sua velocidade lhe seja útil no futuro.</speech>
        </speeches>
        <speeches id="3">
            <speech>O vento está contra você hoje, mas até mesmo as tempestades precisam descansar antes de se enfurecerem novamente.</speech>
            <speech>Reúna suas forças para {COLOR=PURPLE}$DURATION{ENDCOLOR}. Quando {COLOR=GOLD}Wednesday{ENDCOLOR} voltar, sua chance também voltará.</speech>
        </speeches>
        <speeches id="4">
            <speech>Como o vento que nunca para de verdade, sua determinação atravessa todos os obstáculos.</speech>
            <speech>O {COLOR=CYAN}Wind Cutter{ENDCOLOR} reconhece sua rapidez. Siga em frente para enfrentar provações maiores.</speech>
        </speeches>
        <speeches id="5">
            <speech>Somente aqueles que venceram a {COLOR=GOLD}Elite Four{ENDCOLOR} podem testemunhar nossas técnicas sagradas.</speech>
            <speech>Os ventos da sabedoria sopram somente na {COLOR=GOLD}Quarta-feira{ENDCOLOR}, quando nosso dojo abre seus salões sagrados.</speech>
            <speech>Retorne com seus aliados {COLOR=RED}Fighting-type{ENDCOLOR} quando o dia certo amanhecer novamente.</speech>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>{O Discípulo Hiro{ENDCOLOR} está diante de você! Sinta a onda elétrica do puro espírito de luta!</speech>
            <speech>Um campeão da {COLOR=GOLD}Elite Four{ENDCOLOR}! Perfeito - você precisará dessa experiência para o que vem a seguir!</speech>
            <speech>Nas artes marciais, às vezes a vitória exige {COLOR=RED}tudo em um único e decisivo momento{ENDCOLOR}!</speech>
            <speech>Seus {COLOR=RED}Fighting-types{ENDCOLOR} devem aprender quando liberar seu {COLOR=YELLOW}Lightning Fang{ENDCOLOR} - todo poder, sem hesitação!</speech>
            <speech>Mostre-me a força explosiva {COLOR=RED}{ENDCOLOR} que arde em sua equipe!</speech>
        </speeches>
        <speeches id="2">
            <speech>{Incrível! Seus {COLOR=RED}Tipos de luta{ENDCOLOR} atacaram com a fúria de uma tempestade!</speech>
            <speech>Você entendeu a lição do relâmpago - às vezes {COLOR=RED}poder bruto{ENDCOLOR} é a única resposta. Continue em frente!</speech>
        </speeches>
        <speeches id="3">
            <speech>Os raios desaparecem, mas as tempestades sempre voltam com mais fúria do que antes!</speech>
            <speech>Treine bem seus {COLOR=RED}Tipos de luta{ENDCOLOR} durante a espera {COLOR=PURPLE}$DURATION{ENDCOLOR}. Quando {COLOR=GOLD}Wednesday{ENDCOLOR} chegar, ataque com mais força!</speech>
        </speeches>
        <speeches id="4">
            <speech>Seu poder crepita como um verdadeiro relâmpago! O {COLOR=YELLOW}Lightning Fang{ENDCOLOR} reconhece sua força!</speech>
            <speech>Apenas mais uma prova o separa de nosso honrado Sensei. Dê tudo de si!</speech>
        </speeches>
        <speeches id="5">
            <speech>Essas provações sagradas exigem a força de um conquistador da elite quatro{ENDCOLOR}!</speech>
            <speech>A {COLOR=YELLOW}Lightning Fang{ENDCOLOR} ataca somente na {COLOR=GOLD}Wed Wednesday{ENDCOLOR}, quando chega o nosso dia sagrado de treinamento!</speech>
            <speech>Traga seus melhores {COLOR=RED}Tipos de combate{ENDCOLOR} quando voltar - eles precisarão de toda a sua energia!</speech>
        </speeches>
    </conversation>

    <conversation id="4">
        <speeches id="1">
            <speech>Eu sou {COLOR=PURPLE}Sensei Ayaka{ENDCOLOR}, mestre do {COLOR=PURPLE}Perfect Tempo{ENDCOLOR} - o ritmo que guia todo combate verdadeiro.</speech>
            <speech>Sua vitória sobre a {COLOR=GOLD}Elite Four{ENDCOLOR} é promissora, mas você consegue encontrar nosso ritmo sagrado?</speech>
            <speech>Cada ataque tem seu momento, cada defesa tem sua batida. Lutar sem ritmo é lutar sem alma.</speech>
            <speech>Seus {COLOR=RED}Fighting-types{ENDCOLOR} devem provar que conseguem encontrar o {COLOR=PURPLE}Perfect Tempo{ENDCOLOR} que flui por todas as artes marciais.</speech>
            <speech>Você está pronto para dançar o ritmo da batalha eterna comigo?</speech>
        </speeches>
        <speeches id="2">
            <speech>Seus {COLOR=RED}tipos de luta{ENDCOLOR} se movem em {COLOR=PURPLE}perfeita harmonia{ENDCOLOR} - você encontrou o verdadeiro ritmo do combate.</speech>
            <speech>Você é digno de enfrentar nosso mestre. Prossiga para o julgamento final com minha bênção.</speech>
        </speeches>
        <speeches id="3">
            <speech>O ritmo se quebra, mas, como toda música, pode ser aprendido novamente com prática e paciência.</speech>
            <speech>Retorne em {COLOR=PURPLE}$DURATION{ENDCOLOR} quando {COLOR=GOLD}Wednesday's sacred tempo{ENDCOLOR} retornar. Encontre então seu ritmo perfeito.</speech>
        </speeches>
        <speeches id="4">
            <speech>{Perfeito! Seu ritmo combina com o ritmo antigo que pulsa no coração do nosso dojo.</speech>
            <speech>O {COLOR=GOLD}Karate Master{ENDCOLOR} o aguarda. Mostre a ele o {COLOR=PURPLE}Perfect Tempo{ENDCOLOR} que você dominou aqui.</speech>
        </speeches>
        <speeches id="5">
            <speech>Nossos ritmos antigos se revelam apenas aos campeões da elite quatro{ENDCOLOR} que compreendem a verdadeira força.</speech>
            <speech>O {COLOR=PURPLE}Perfect Tempo{ENDCOLOR} só pode ser alcançado em {COLOR=GOLD}Wed Wednesday{ENDCOLOR}, nosso dia de prática sagrada.</speech>
            <speech>Retorne com sua equipe de {COLOR=RED}Luta{ENDCOLOR} quando o ritmo adequado da semana se alinhar novamente.</speech>
        </speeches>
    </conversation>

    <conversation id="5">
        <speeches id="1">
            <speech>Então... você superou as quatro provações e chegou ao coração do nosso santuário.</speech>
            <speech>Eu sou o {COLOR=GOLD}Mestre de Karatê{ENDCOLOR}, guardião dos caminhos antigos, guardião do {COLOR=GOLD}sagrado Kubfu{ENDCOLOR}.</speech>
            <speech>Seu triunfo sobre os {COLOR=GOLD}Elite Four{ENDCOLOR} o trouxe até aqui, mas nossas provações testam algo mais profundo.</speech>
            <speech>Há muito tempo, fomos deixados de lado, considerados obsoletos por aqueles que temiam nossa verdadeira força.</speech>
            <speech>Mas aqui, nesses salões ocultos, preservamos a {COLOR=RED}pura essência da maestria do tipo Fighting{ENDCOLOR}.</speech>
            <speech>Se quiser ganhar o direito de conhecer nosso companheiro sagrado, você deve provar que seus punhos ardem com uma vontade inquebrantável{ENDCOLOR}!</speech>
            <speech>Mostre-me o resultado final de tudo o que você aprendeu!</speech>
        </speeches>
        <speeches id="2">
            <speech>{Incrível... seus {COLOR=RED}tipos de luta{ENDCOLOR} incorporam o verdadeiro espírito que protegemos durante todos esses anos.</speech>
            <speech>Você não luta por glória ou conquista, mas com a {COLOR=BLUE}força humilde{ENDCOLOR} que vem de um vínculo genuíno.</speech>
            <speech>Tanta dedicação... tanto {COLOR=RED}espírito marcial puro{ENDCOLOR}... Sim, você é digno.</speech>
            <speech>O {COLOR=GOLD}sagrado Kubfu{ENDCOLOR} terá a honra de treinar ao lado de um lutador de seu calibre.</speech>
        </speeches>
        <speeches id="3">
            <speech>Seu espírito brilha intensamente, mas hoje a chama ainda não estava quente o suficiente para iluminar nossos segredos mais profundos.</speech>
            <speech>Continue seu treinamento, jovem lutador. Em {COLOR=PURPLE}$DURATION{ENDCOLOR}, quando {COLOR=GOLD}Wednesday{ENDCOLOR} retornar, sua oportunidade também retornará.</speech>
            <speech>O caminho do punho é longo e árduo - deixe que esse contratempo o forje em algo mais forte.</speech>
        </speeches>
        <speeches id="4">
            <speech>Você provou ser um {COLOR=GOLD} mestre nas artes da luta{ENDCOLOR}, digno de nossas antigas tradições.</speech>
            <speech>O {COLOR=GOLD}sagrado Kubfu{ENDCOLOR} sente seu coração puro. Esses encontros são lendários.</speech>
            <speech>Lembre-se deste momento - você tocou em algo eterno dentro desses corredores ocultos.</speech>
        </speeches>
        <speeches id="5">
            <speech>Nossos segredos mais profundos são reservados apenas para aqueles que conquistaram a {COLOR=GOLD}Elite Four{ENDCOLOR} e trilham o caminho do punho.</speech>
            <speech>As provas sagradas só podem começar na {COLOR=GOLD}quarta-feira{ENDCOLOR}, quando os antigos espíritos de combate se agitam.</speech>
            <speech>Retorne com seus {COLOR=RED}companheiros de luta{ENDCOLOR} quando chegar o dia certo. Nós estaremos esperando.</speech>
        </speeches>
    </conversation>
</npcs>