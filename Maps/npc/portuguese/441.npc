<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Se eles expandirem o mar, haverá menos habitats para Pokémon e pessoas!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Se eles expandirem a terra, não haverá água suficiente para os Pokémon e as pessoas!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Não precisamos tanto de água quanto de espaço para os Pokémon e as pessoas viverem.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>A água foi depositada na Terra por antigos cometas e meteoros.</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>Afaste-se!!!</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>Saiam do meu maldito caminho, seus malvados da Equipe Magma! Ou enfrentem uma quilha!</speech>
            <speech>Confundam todos vocês! Deixem-me passar, seus ratos de porão!</speech>
        </speeches>
    </conversation>
    <npc direction="DOWN" hidden="false" id="1" name="" randomRotation="true" sprite="187" x="36" y="47">
        <speech>Mt. Chimney (para cima)</speech>
        <speech>Jagged Pass (para baixo)</speech>
    </npc>
    <!---->
    <conversation id="15">
        <speeches id="1">
            <speech>Nós da Equipe Magma estamos trabalhando duro para o bem de todos.</speech>
            <speech>Por exemplo, se houver mais terra, haverá mais lugares para morar.</speech>
            <speech>Todos ficarão felizes!
            </speech>
        </speeches>
        <speeches id="2">
            <speech>Como assim? Como assim, eu perdi!
            </speech>
        </speeches>
        <speeches id="3">
            <speech>Como assim? Como assim, eu perdi!
            </speech>
        </speeches>
        <speeches id="4">
            <speech>Agora não volte mais.</speech>
        </speeches>
        <speeches id="5">
            <speech>Nós da Equipe Magma estamos trabalhando duro para o bem de todos.</speech>
            <speech>Por exemplo, se houver mais terras, haverá mais lugares para morar.</speech>
            <speech>Todos ficarão felizes!</speech>
        </speeches>
    </conversation>
    <conversation id="16">
        <speeches id="1">
            <speech>Hyahyahya?! É você! Foi você quem tentou me interromper, Tabitha, nas Cataratas do Meteoro!</speech>
            <speech>D-tem a intenção de me atrapalhar mais uma vez?</speech>
            <speech>Unngh!</speech>
            <speech>Você é realmente... realmente, realmente, realmente, realmente, realmente, realmente, realmente...</speech>
            <speech>realmente, realmente, realmente, realmente, realmente, realmente, realmente, realmente, realmente, realmente, realmente... reeeallllyyyyy...
                uma criança detestável, não é mesmo?!
            </speech>
            <speech>Ahh... Ah... Eu vou... esmagar você. Para que você... nunca mais fique no meu caminho... novamente.</speech>
        </speeches>
        <speeches id="2">
            <speech>Mais uma vez? Hyuhn!</speech>
            <speech>Eu sabia que você seria forte.</speech>
            <speech>Mas que pena! O meteorito que recebemos do Professor Seja Lá Quem For já está nas mãos do nosso chefe!
            </speech>
            <speech>Onde está o chefe, você pergunta? Ah, sim, sim, por aqui!</speech>
            <speech>Oh, espero que o verdadeiro poder da Equipe Magma seja mostrado a você! Ahya! Ahyahyahyahya!</speech>
        </speeches>
        <speeches id="3">
            <speech>Mas que pena! O meteorito que recebemos do Professor Seja Lá Quem For já está nas mãos do nosso chefe!</speech>
            <speech>Onde está o chefe, você pergunta? Ah, sim, sim, por aqui!</speech>
            <speech>Oh, espero que o verdadeiro poder da Equipe Magma seja mostrado a você! Ahya! Ahyahyahyahya!</speech>
        </speeches>
        <speeches id="4">
            <speech>Não tente novamente.</speech>
        </speeches>
    </conversation>
    <conversation id="17">
        <speeches id="1">
            <speech>O poder contido no Meteorito...</speech>
            <speech>Se combinarmos a energia explosiva contida no núcleo do planeta com o poder do meteorito...
            </speech>
            <speech>Lembro-me desses olhos. E a vontade indomável que parece arder por trás deles. Ahhh. Agora eu
                me lembro.
            </speech>
            <speech>Foi você quem nos desafiou no Oceanic Museum de Slateport.</speech>
            <speech>E sua presença aqui me diz que você derrotou a Tabitha.</speech>
            <speech>Sim, vejo agora que o interesse que senti não era descabido.</speech>
            <speech>Hmph. Você demonstra ser uma verdadeira promessa. Muito bem. Tentarei educá-lo.</speech>
            <speech>Milhares de anos atrás, existia um ser muito poderoso que se dizia ser capaz de criar
                novas terras no planeta.
            </speech>
            <speech>O poder que nós da Equipe Magma buscamos - Esse poder, que pode expandir a massa de terra disponível, pertence a um
                a um Pokémon lendário e superantigo.
            </speech>
            <speech>Embora agora ele esteja adormecido, tendo perdido a fonte de seu poder e ficado preso em um sono profundo.</speech>
            <speech>Então, o que devemos fazer para despertar esse gigante adormecido?</speech>
            <speech>Nossa pesquisa nos levou até aqui, ao Monte Chimney. Sim, aqui... a este mesmo meteorito.</speech>
            <speech>Se criarmos as condições certas, poderemos alterar as qualidades desse meteorito.
                qualidades desse meteorito.
            </speech>
            <speech>Sim, até mesmo em uma Mega Stone. Até mesmo em uma Key Stone.</speech>
            <speech>E aqui, no Mt. Chimney - Hmph... Não devo falar muito. Esse é o fim da lição de hoje.
            </speech>
            <speech>Agora, então. Acredito que é hora de começarmos. Chegou a hora do expurgo.</speech>
            <speech>Acredito que fui bem claro quando estivemos em Slateport pela última vez.</speech>
            <speech>Eu o avisei que qualquer tolo que se interpusesse em nosso caminho seria recebido sem piedade!</speech>
            <speech>Eu o enterrarei com minhas próprias mãos. Espero que você aprecie essa honra!</speech>
        </speeches>
        <speeches id="2">
            <speech>Ugh! Você é... muito capaz... Fiquei para trás, mas só por um centímetro...</speech>
            <speech>Ah? Então você repeliu o grande Maxie na batalha. Haha... Você nunca deixa de me divertir!</speech>
            <speech>Um excelente começo! Desta vez, permita-me liberar toda a minha força!</speech>
            <speech>Depois de provar o poder Mega Evoluído do meu Pokémon, você dirá adeus à sua última réstia de esperança!</speech>
            <speech>Hm? Sim, sou eu. ...Oh? Então é o Monte Pyre. Eu entendo. Irei imediatamente.</speech>
            <speech>Lamento interromper nossa batalha, mas receio ter que me desculpar.</speech>
            <speech>Essa grosseria exige uma reparação. Aceite este Meteorito como minhas desculpas.</speech>
            <speech>Você pode fazer o que quiser com ele.</speech>
            <speech>E nunca mais esquecerei o rosto do Treinador que conseguiu me derrotar na batalha!</speech>
        </speeches>
        <speeches id="3">
            <speech>Ugh! Você é... muito capaz... Fiquei para trás, mas só por um centímetro...</speech>
            <speech>Ah? Então você repeliu o grande Maxie na batalha. Haha... Você nunca deixa de me divertir!</speech>
            <speech>Um excelente começo! Desta vez, permita-me liberar toda a minha força!</speech>
            <speech>Depois de provar o poder Mega Evoluído do meu Pokémon, você dirá adeus à sua última réstia de esperança!</speech>
            <speech>Hm? Sim, sou eu. ...Oh? Então é o Monte Pyre. Eu entendo. Irei imediatamente.</speech>
            <speech>Lamento interromper nossa batalha, mas receio ter que me desculpar.</speech>
            <speech>Essa grosseria exige uma reparação. Aceite este Meteorito como minhas desculpas.</speech>
            <speech>Você pode fazer o que quiser com ele.</speech>
            <speech>E nunca mais esquecerei o rosto do Treinador que conseguiu me derrotar na batalha!</speech>
        </speeches>
        <speeches id="4">
            <speech>Não tente novamente.</speech>
        </speeches>
    </conversation>
    <conversation id="18">
        <speeches id="1">
            <speech>O quê? Se não é aquele safado!</speech>
            <speech>Mas que se dane o Maxie! Ele acabou de escapar de nós!</speech>
            <speech>E ele acabou de deixar para trás o Meteorito que ele estava louco para encontrar?</speech>
            <speech>Não pode ser...! Será que ele descobriu onde os orbes verdadeiros estão escondidos?!</speech>
            <speech>Esse pequeno e sorrateiro cientista!</speech>
            <speech>Sempre fico observando seu traseiro ossudo correr dois passos à minha frente!</speech>
        </speeches>
    </conversation>
    <conversation id="22">
        <speeches id="1">
            <speech>Olá, $PLAYER_NAME! Já faz algum tempo, não é? Tenho treinado sem parar aqui no Mt. Chimney Peak.</speech>
            <speech>A vista é incrível, mas não é por isso que estou aqui.</speech>
            <speech>Meu objetivo é me tornar um campeão da Elite Four, assim como você.</speech>
            <speech>Mas, para chegar lá, preciso impulsionar ainda mais minha equipe, especialmente Blaziken.</speech>
            <speech>Durante o treinamento, deparei-me com esse item incrível.</speech>
            <speech>É diferente de tudo que já vi, e Blaziken reagiu a ela imediatamente. É um tipo de... mega pedra, eu acho.</speech>
            <speech>Mas há um problema. Desde que o encontrou, Blaziken tem estado... diferente, mais intenso e difícil de acalmar.</speech>
            <speech>É aí que você entra. Preciso de sua ajuda.</speech>
            <speech>Lembro-me desse velho amigo próximo à Rota 113, um mestre em melodias e flautas calmantes.</speech>
            <speech>Espero que uma flauta especial possa ajudar Blaziken a voltar ao normal.</speech>
            <speech>Você poderia visitá-lo para mim? Ele é conhecido por fabricar flautas com fragmentos vermelhos, verdes e azuis.</speech>
            <speech>Para essa tarefa, precisaremos de uma Flauta Vermelha, feita especificamente com garras de Torchic.</speech>
            <speech>Pegar Torchics de alto IV no Safari e trocá-los em sua loja deve ser suficiente.</speech>
            <speech>Quando você tiver a flauta, volte para cá. Nós a usaremos para alcançar Blaziken e, com sorte, ajudá-lo a controlar esse novo poder.</speech>
            <speech>Você está dentro?</speech>
        </speeches>
        <speeches id="2">
            <speech>Olá, $PLAYER_NAME! Como está indo a busca pela Red Flute? Você conseguiu pegar Torchics de alto IV suficientes no Safari para obtê-la?</speech>
            <speech>Meu amigo perto da Rota 113 é o melhor quando se trata de criar essas flautas especiais.</speech>
            <speech>Tenho certeza de que ele pode forjar a Flauta Vermelha perfeita com as garras de Torchic.</speech>
            <speech>Blaziken e eu estamos contando com você. Essa flauta é a chave para acalmar Blaziken e ajudá-lo a dominar o poder da mega pedra.</speech>
            <speech>Não se preocupe, eu sei que é um grande pedido. Mas eu acredito em você, $PLAYER_NAME.</speech>
            <speech>Estamos juntos nisso, certo? Avise-me assim que tiver a flauta. O tempo é essencial!</speech>
        </speeches>
    </conversation>
    <conversation id="23">
        <speeches id="1">
            <speech>**A melodia da Flauta Vermelha se esforça para penetrar no caos enquanto o fogo indomável de Mega Blaziken ruge contra a melodia calmante.</speech>
            <speech>**As chamas selvagens dançam ao redor, refletindo uma criatura perdida em seu próprio poder. A melodia pode alcançar o coração da tempestade?</speech>
            <speech>**Os gritos do Mega Blaziken, agudos e implacáveis, cortam o ar, desafiando a própria essência de sua determinação.</speech>
        </speeches>
        <speeches id="2">
            <speech>**Gradualmente, as chamas caóticas se acalmam, uma prova de seu espírito inabalável e da antiga melodia da Flauta Vermelha.</speech>
            <speech>**"Você acalmou a tempestade dentro de mim, Trainer. Sua força... ressoa até mesmo em meu frenesi", o silêncio parece sussurrar.</speech>
            <speech>**Reconhecendo seu poder, o Mega Blaziken recua, sua energia selvagem agora é uma chama controlada, recuando com dignidade para o abraço do vulcão.</speech>
        </speeches>
        <speeches id="3">
            <speech>**Sua hesitação aumenta ainda mais a fúria de Mega Blaziken. A batalha está perdida para aqueles que vacilam", grita o inferno ao seu redor.</speech>
            <speech>**"Volte apenas quando seu espírito arder tão ferozmente quanto o meu. Até lá, seremos apenas sombras um para o outro", o calor crepita.</speech>
        </speeches>
        <speeches id="4">
            <speech>**A risada ardente do Mega Blaziken zomba de sua partida. "O fogo o assusta, Trainer?", ele parece zombar em meio às chamas.</speech>
            <speech>**"Busque força no coração do fogo. Só então, ouse me desafiar novamente", as brasas sibilam enquanto você se afasta.</speech>
        </speeches>
        <speeches id="5">
            <speech>**A presença do Mega Blaziken domina a área, seu controle foi perdido pelas chamas selvagens que o envolvem.</speech>
            <speech>**Os gritos que ele emite são uma mistura de poder e desespero, um chamado para um oponente digno ou um salvador.</speech>
            <speech>**Sem a Flauta Vermelha, qualquer tentativa de se comunicar ou acalmá-la parece inútil.</speech>
        </speeches>
    </conversation>
    <conversation id="24">
        <speeches id="1">
            <speech>Parece que Blaziken ainda está inquieto. Ainda não conseguimos acalmá-lo. Mas eu não perdi a esperança, $PLAYER_NAME.</speech>
            <speech>Talvez precisemos tentar novamente, ou talvez haja outra maneira de chegar a Blaziken. Não vamos desistir ainda.</speech>
        </speeches>
        <speeches id="2">
            <speech>Você conseguiu! A Flauta Vermelha... realmente funcionou! Blaziken está se acalmando. Não posso acreditar, $PLAYER_NAME!</speech>
            <speech>Isso é muito importante para mim. Obrigada a você. Com o Blaziken acalmado, sinto que podemos superar qualquer coisa juntos.</speech>
            <speech>Você poderia vir me visitar no Supermercado Lilycove para uma batalha? Seria muito importante tê-lo lá.</speech>
        </speeches>
        <speeches id="3">
            <speech>Você não vai? Estou vendo... Talvez eu ainda não esteja pronto. Vou continuar treinando até ficar forte o suficiente para merecer sua visita.</speech>
            <speech>Obrigado, $PLAYER_NAME. Por tudo. Você me ajudou mais do que imagina. Estarei mais forte na próxima vez que nos encontrarmos.</speech>
            <speech>Até lá, continuarei treinando aqui!</speech>
        </speeches>
        <speeches id="4">
            <speech>É mesmo? Isso é incrível! Estarei esperando por você no Supermercado Lilycove, então. É um encontro!</speech>
            <speech>Obrigado, $PLAYER_NAME, não apenas por ajudar a Blaziken, mas também por me dar algo pelo qual ansiar. Vejo você lá!</speech>
        </speeches>
        <speeches id="5"/>
    </conversation>
    <movingNpc direction="DOWN" id="2" name="Slugma" shouldSleep="" speed="1" sprite="218" type="pokemon" x="36" y="58">
        <path>RIGHTx4,LEFTx4</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="3" name="Slugma" shouldSleep="" speed="1" sprite="218" type="pokemon" x="36" y="2">
        <path>DOWNx7,UPx7</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="4" name="Slugma" shouldSleep="" speed="1" sprite="218" type="pokemon" x="34" y="12">
        <path>DOWNx5,UPx5</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="5" name="Magcargo" shouldSleep="" speed="1" sprite="219" type="pokemon" x="22" y="12">
        <path>UPx7,DOWNx7</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="6" name="Magcargo" shouldSleep="" speed="1" sprite="219" type="pokemon" x="28" y="12">
        <path>LEFTx4,RIGHTx4</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="7" name="Numel" shouldSleep="" speed="1" sprite="322" type="pokemon" x="49" y="31">
        <path>UPx6,DOWNx6</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="9" name="Torkoal" shouldSleep="" speed="1" sprite="324" type="pokemon" x="4" y="23">
        <path>UPx7,DOWNx7</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="10" name="Torkoal" shouldSleep="" speed="1" sprite="324" type="pokemon" x="11" y="37">
        <path>LEFTx4,RIGHTx4</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="11" name="Torkoal" shouldSleep="" speed="1" sprite="324" type="pokemon" x="22" y="43">
        <path>RIGHTx3,LEFTx3</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="12" name="Koffing" shouldSleep="" speed="1" sprite="109" type="pokemon" x="45" y="42">
        <path>LEFTx2,RIGHTx2</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="13" name="Koffing" shouldSleep="" speed="1" sprite="109" type="pokemon" x="48" y="55">
        <path>UPx6,DOWNx6</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="8" name="Numel" shouldSleep="" speed="1" sprite="322" type="pokemon" x="19" y="25">
        <path>RIGHTx4,LEFTx4</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="14" name="Skarmory" speed="1" sprite="227" type="pokemon" x="13" y="0">
        <path>DOWNx4,LEFTx10,UPx4,RIGHTx10</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="15" name="Machoke" shouldSleep="" speed="1" sprite="67" type="pokemon" x="44" y="16">
        <path>UPx7,DOWNx7</path>
        <onCollisionSpeech gap="4">Machoke!</onCollisionSpeech>
        <speech>Machoke!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="16" name="Machamp" shouldSleep="" speed="1" sprite="68" type="pokemon" x="52" y="13">
        <path>UPx6,RIGHTx4,LEFTx4,DOWNx6</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="17" name="Koffing" speed="1" sprite="109" type="pokemon" x="32" y="43">
        <path>LEFTx3,RIGHTx3</path>
        <onCollisionSpeech gap="4">Koffing!</onCollisionSpeech>
        <speech>Koffing!</speech>
    </movingNpc>
</npcs>