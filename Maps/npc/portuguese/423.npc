<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Oh, olá, $PLAYER_NAME!</speech>
            <speech>...Ah, entendo, meu pai lhe deu um Pokémon de presente.</speech>
            <speech>Já que estamos aqui, vamos fazer uma batalha rápida! Vou lhe dar um gostinho de como é ser um Trainer.</speech>
        </speeches>
        <speeches id="2">
            <speech>Uau! Isso é ótimo! $PLAYER_NAME, você é muito bom!</speech>
            <speech>Acho que agora sei por que meu pai está de olho em você.</speech>
            <speech>Quero dizer, você acabou de adquirir esse Pokémon, mas ele já gosta de você.</speech>
            <speech>Você poderá fazer amizade com qualquer tipo de Pokémon facilmente.</speech>
            <speech>Você deve seguir para oeste de Oldale Town em direção a Rustboro City e procurar o primeiro emblema de ginásio.</speech>
            <speech>Eu o verei lá.</speech>
        </speeches>
        <speeches id="3">
            <speech>Acho que agora sei por que meu pai está de olho em você.</speech>
            <speech>Quero dizer, você acabou de adquirir esse Pokémon, mas ele já gosta de você.</speech>
            <speech>Você poderá fazer amizade com qualquer tipo de Pokémon facilmente.</speech>
            <speech>Você deve seguir para oeste de Oldale Town em direção a Rustboro City e procurar o primeiro emblema de ginásio.</speech>
            <speech>Eu o verei lá.</speech>
        </speeches>
        <speeches id="4">
            <speech>Para ser um treinador, é preciso mais do que apenas carregar um monte de Pokeballs.</speech>
        </speeches>
    </conversation>
    <movingNpc direction="RIGHT" id="1" name="Wingull" speed="2" sprite="278" type="pokemon" x="31" y="13">
        <path>RIGHTx20,LEFTx20</path>
        <onCollisionSpeech gap="4">Mine?Mine?</onCollisionSpeech>
        <speech>GUUUUUULL!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Wingull" speed="2" sprite="278" type="pokemon" x="34" y="19">
        <path>UPx7,DOWNx7</path>
        <onCollisionSpeech gap="4">Mine? Mine?</onCollisionSpeech>
        <speech>GUUUULL! GUUULL!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="3" name="Wingull" speed="2" sprite="278" type="pokemon" x="37" y="15">
        <path>RIGHTx5,DOWNx5,LEFTx5,UPx5</path>
        <onCollisionSpeech gap="4">Mine? Mine?</onCollisionSpeech>
        <speech>GUGUUUUUL!</speech>
    </movingNpc>
    <npc direction="RIGHT" hidden="false" id="4" name="Zackary" randomRotation="false" sprite="16" x="25" y="7">
        <speech>Veja! Um bando de gaivotas!</speech>
        <speech>Se eu pudesse voar como eles, poderia ver o que há do outro lado.</speech>
    </npc>
    <npc direction="RIGHT" hidden="false" id="5" name="Xander" randomRotation="false" sprite="16" x="26" y="14">
        <speech>Pare de gritar, Zackary!</speech>
        <speech>Você está assustando os peixes...</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="6" name="Anna" randomRotation="false" sprite="82" x="65" y="18">
        <speech>Se o seu Pokémon souber surfar, você poderá atravessar esse caminho de água e acessar rapidamente a cidade de Odale.</speech>
        <speech>Apenas tome cuidado com o Wingull.</speech>
        <speech>Parece que há alguns presos aqui.</speech>
    </npc>
    <movingNpc direction="DOWN" id="7" name="Linoone" shouldSleep="" speed="1" sprite="264" type="pokemon" x="84" y="16">
        <path>RIGHTx3,LEFTx3</path>
        <onCollisionSpeech gap="4">Linoone</onCollisionSpeech>
        <speech>Linoone!</speech>
    </movingNpc>
    <conversation id="2">
        <speeches id="1">
            <speech>Sou muito forte. Nunca perderei.</speech>
        </speeches>
        <speeches id="2">
            <speech>WAAAH!</speech>
        </speeches>
        <speeches id="3">
            <speech>WAAAH!</speech>
        </speeches>
        <speeches id="4">
            <speech>Papai me deu meu Pokémon! Eles têm que ser os mais fortes!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Ooh la la! Pequeno treinador! Flor graciosa! Vou cortá-la bem no caule!</speech>
        </speeches>
        <speeches id="2">
            <speech>Se ao menos minha habilidade fosse Rain Dish...</speech>
        </speeches>
        <speeches id="3">
            <speech>Se ao menos minha habilidade fosse Rain Dish...</speech>
        </speeches>
        <speeches id="4">
            <speech>N-não! Não tão rápido! Quero que você seja a flor premiada do meu jardim!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Recentemente, reformulei minha vida completamente! Finalmente, renasci como uma beldade!</speech>
        </speeches>
        <speeches id="2">
            <speech>Sim, há apenas meio ano eu era faixa preta! Uma transformação e tanto, você não acha?</speech>
        </speeches>
        <speeches id="3">
            <speech>Sim, há apenas meio ano eu era faixa preta! Uma transformação e tanto, você não acha?</speech>
        </speeches>
        <speeches id="4">
            <speech>Se quiser realizar seus sonhos, você precisa se dedicar totalmente!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Existem pessoas jovens e bonitas, mas juventude é diferente de beleza.</speech>
        </speeches>
        <speeches id="2">
            <speech>A juventude é apenas juventude. Gostaria de ter percebido isso naquela época.</speech>
        </speeches>
        <speeches id="3">
            <speech>A juventude é apenas juventude. Gostaria de ter percebido isso naquela época.</speech>
        </speeches>
        <speeches id="4">
            <speech>Se eu soubesse disso quando era jovem, não estaria passando por um momento tão difícil agora...</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Sou o que se chama de saco de pancadas profissional. Trabalho aqui para ganhar a vida.</speech>
        </speeches>
        <speeches id="2">
            <speech>Sou um saco de pancadas profissional, portanto, o que importa é que você esteja satisfeito com sua vitória.</speech>
        </speeches>
        <speeches id="3">
            <speech>Sou um saco de pancadas profissional, portanto, o que importa é que você esteja satisfeito com sua vitória.</speech>
        </speeches>
        <speeches id="4">
            <speech>Tentei perder de propósito para fazer você se sentir bem... Isso não é bom. Definitivamente vou ser demitido por isso...</speech>
        </speeches>
    </conversation>
</npcs>