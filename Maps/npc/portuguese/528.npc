<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Olá! Sou um jardineiro! Minhas tesouras são minhas únicas amigas de verdade.</speech>
        </speeches>
        <speeches id="2">
            <speech>Eu sabia que odiava humanos! Tudo o que eu preciso é de uma tesoura!</speech>
        </speeches>
        <speeches id="3">
            <speech>Eu sabia que odiava humanos! Tudo o que eu preciso é de uma tesoura!</speech>
        </speeches>
        <speeches id="4">
            <speech>Minha especialidade e meu hobby são cortar coisas! Meu movimento favorito com a tesoura é a guilhotina!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Minha estratégia é enganar meus adversários com minha velocidade.</speech>
        </speeches>
        <speeches id="2">
            <speech>Como você pode ser mais rápido do que eu? O que está vestindo?</speech>
        </speeches>
        <speeches id="3">
            <speech>Como você pode ser mais rápido do que eu? O que está vestindo?</speech>
        </speeches>
        <speeches id="4">
            <speech>Ahahaha... Como foi? Aposto que isso o deixou tonto.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Vim aqui por causa do meu irmão mais velho, que sempre se esconde em seu quarto.</speech>
        </speeches>
        <speeches id="2">
            <speech>Gostaria que meu irmão mais velho saísse de seu quarto e brincasse comigo...</speech>
        </speeches>
        <speeches id="3">
            <speech>Gostaria que meu irmão mais velho saísse de seu quarto e brincasse comigo...</speech>
        </speeches>
        <speeches id="4">
            <speech>Meu irmão mais velho, olhe para fora pelo menos uma vez! Eu ganhei para você! Então, saia e brinque!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Aqui vou eu! Vou lutar pela honra da filial!</speech>
        </speeches>
        <speeches id="2">
            <speech>Urk! F-farewell por enquanto! Vou me lembrar disso, criança!</speech>
        </speeches>
        <speeches id="3">
            <speech>Urk! F-farewell por enquanto! Vou me lembrar disso, criança!</speech>
        </speeches>
        <speeches id="4">
            <speech>Sou gerente de uma filial do Pokémon Fan Club e ganhei!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Quando você estiver cansado de treinar Pokémon, é hora de batalhar! Esse é o truque para trabalhar como Breeder!</speech>
        </speeches>
        <speeches id="2">
            <speech>Se eu perder, isso lhe dirá que eu estava apenas matando tempo. Isso não prejudica meu ego de forma alguma.</speech>
        </speeches>
        <speeches id="3">
            <speech>Se eu perder, isso lhe dirá que eu estava apenas matando tempo. Isso não prejudica meu ego de forma alguma.</speech>
        </speeches>
        <speeches id="4">
            <speech>Sou tão talentoso que posso ganhar apenas para mudar meu humor.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Comecei a andar de skate porque ouvi dizer que as garotas gostavam de caras que andavam de skate. Não está funcionando de jeito nenhum.</speech>
        </speeches>
        <speeches id="2">
            <speech>De qualquer forma, há poucos lugares onde você pode andar de skate. Honestamente, eles não são úteis para se locomover.</speech>
        </speeches>
        <speeches id="3">
            <speech>De qualquer forma, há poucos lugares onde você pode andar de skate. Honestamente, eles não são úteis para se locomover.</speech>
        </speeches>
        <speeches id="4">
            <speech>E também sou péssimo em batalhas Pokémon! Agora nunca vou conseguir uma namorada...</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Em meu país, dizemos que garotas bonitas podem esconder todos os tipos de pecados. Não é ótimo?</speech>
        </speeches>
        <speeches id="2">
            <speech>Não me importa se vou ganhar ou perder, desde que eu possa escapar desse tédio.</speech>
        </speeches>
        <speeches id="3">
            <speech>Não me importa se vou ganhar ou perder, desde que eu possa escapar desse tédio.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ah, esqueça! Não quero mais roupas chiques! Vou me livrar dessa roupa e vou me bronzear!</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>Para mim, os lugares assustadores são os melhores. Eu adoraria morar em um cemitério...</speech>
        </speeches>
        <speeches id="2">
            <speech>Derrotar-me é incrível! Você deve estar meio amaldiçoado também!</speech>
        </speeches>
        <speeches id="3">
            <speech>Derrotar-me é incrível! Você deve estar meio amaldiçoado também!</speech>
        </speeches>
        <speeches id="4">
            <speech>Em um cemitério onde a festa começa depois que o dia termina. Sim, essa é a vida para mim...</speech>
        </speeches>
    </conversation>
</npcs>