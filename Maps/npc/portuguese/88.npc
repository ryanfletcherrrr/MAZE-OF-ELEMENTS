<npcs>
    <npc direction="DOWN" id="1000" name="Fisherman Andre" sprite="16" x="22" y="46">
        <speech>Esse é, de fato, um lugar muito solitário para pescar. Não sei ao certo por que ninguém pesca aqui.</speech>
    </npc>

    <npc direction="DOWN" id="1001" name="Fisherman Juan" sprite="16" x="46" y="38">
        <speech>Oh meu Deus, onde fica o lago? Eu quero pescar, mas estou perdido.</speech>
    </npc>

    <conversation canSkip="false" id="1">
        <speeches id="1">
            <speech>Está me seguindo?</speech>
            <speech>*Parece que ele é o garoto que roubou as lanternas do caminhante.</speech>
            <speech>*O garoto foge.</speech>
            <speech>*Devo encontrar esse garoto o mais rápido possível.</speech>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="2">
        <speeches id="1">
            <speech>Admiro o fato de você ser tão idiota.</speech>
            <speech>Agora, deixe-me enviá-lo ao PokeCenter.</speech>
        </speeches>
        <speeches id="2">
            <speech>HORUS! HORUS! ME AJUDE! Esse idiota não está me deixando em paz.</speech>
            <speech>*Tikku foge, mas deixa cair uma lanterna.</speech>
        </speeches>
        <speeches id="3">
            <speech/>
        </speeches>
        <speeches id="4">
            <speech>Ah, você queria me derrotar?</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>Parece que você também é um treinador de Pokémon. Vamos lutar com todas as nossas forças.</speech>
        </speeches>
        <speeches id="2">
            <speech>Perdi, mas foi uma boa batalha.</speech>
        </speeches>
        <speeches id="3">
            <speech>Perdi, mas foi uma boa batalha.</speech>
        </speeches>
        <speeches id="4">
            <speech>Gosto da maneira como você se coordenou com seu Pokémon. É uma pena que você tenha perdido.</speech>
        </speeches>
    </conversation>

    <conversation id="4">
        <speeches id="1">
            <speech>Os insetos também existem na água, e eu os estou colecionando. Vou lhe mostrar o poder dos Pokémon do tipo Bug Water.</speech>
        </speeches>
        <speeches id="2">
            <speech>Não tenho um número suficiente desses Pokémon.</speech>
        </speeches>
        <speeches id="3">
            <speech>Não tenho o suficiente deles. Dê-me algum tempo e juro que o derrotarei.</speech>
        </speeches>
        <speeches id="4">
            <speech>Hahaha. Então, quem riu por último?</speech>
        </speeches>
    </conversation>

    <conversation id="5">
        <speeches id="1">
            <speech>Eu sou um mochileiro, mas quem se importa com uma batalha Pokémon. Vamos lá.</speech>
        </speeches>
        <speeches id="2">
            <speech>Material interessante.</speech>
        </speeches>
        <speeches id="3">
            <speech>Venho com frequência a essa parte de Jvaloh. Essa área não é famosa entre os mochileiros devido à sua proximidade com as cidades.</speech>
        </speeches>
        <speeches id="4">
            <speech>Não me importo com outra batalha quando você estiver pronto novamente.</speech>
        </speeches>
    </conversation>

    <conversation id="6">
        <speeches id="1">
            <speech>Ho Ho Ho... Treinador em um penhasco. Vamos lutar.</speech>
        </speeches>
        <speeches id="2">
            <speech>Ho Ho Ho... Eu perdi.</speech>
        </speeches>
        <speeches id="3">
            <speech>Ho Ho Ho... Você é forte.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ho Ho Ho... Você é fraco.</speech>
        </speeches>
    </conversation>
</npcs>