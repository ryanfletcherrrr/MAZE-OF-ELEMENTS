<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Psst! Aqui. Aqui. Esta reunião da Equipe Galáctica... Qual é o significado disso?</speech>
        </speeches>
        <speeches id="2">
            <speech>...Ufa. Então, esse era Cyrus, o chefe da Equipe Galáctica.</speech>
            <speech>Um desempenho e tanto, não?</speech>
            <speech>Impressionante para alguém de apenas 27 anos de idade.</speech>
            <speech>...Mas criar um mundo para a Equipe Galáctica e nenhum outro?</speech>
            <speech>É absurdo. Tanto que faz minha cabeça girar. Um novo mundo?</speech>
            <speech>O que é isso? E o que é esse mundo incompleto?</speech>
            <speech>Muito bem. A investigação de tais assuntos é tarefa da Polícia Internacional.</speech>
            <speech>Do qual sou um membro em boa posição. E é meu trabalho, portanto.</speech>
            <speech>Vamos nos separar aqui. Tome muito cuidado, meu amigo!</speech>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>Companheiros da Equipe Galáctica! Ouçam-me! Meu nome, como me apresento a vocês hoje, é Cyrus.</speech>
            <speech>Este nosso mundo é rudimentar. Em uma palavra, ele é incompleto.</speech>
            <speech>Foi, e sempre será, uma luta para sobreviver neste mundo.</speech>
            <speech>Nós, humanos e Pokémon, somos igualmente incompletos. Por sermos tão carentes, lutamos, mutilamos...</speech>
            <speech>É feio. Odeio a incompletude. O fato de sermos todos incompletos, odeio isso com todo o meu corpo e meu ser.</speech>
            <speech>O mundo deve ser completo. O mundo deve mudar.</speech>
            <speech>Então, quem vai mudar isso? Eu, Cyrus. E a Equipe Galáctica.</speech>
            <speech>Sim, todos vocês. Juntos, analisamos os mitos e expusemos seus segredos.</speech>
            <speech>Juntos, capturamos Pokémon lendários.</speech>
            <speech>E agora, a Equipe Galáctica obteve a energia para mudar o mundo!</speech>
            <speech>O poder dos sonhos está ao nosso alcance! Entendam isso, colegas membros!</speech>
            <speech>Meu tão sonhado mundo dos sonhos está prestes a se tornar realidade.</speech>
            <speech>Todos os que estão indo para o Monte Coronet e os que permanecem aqui...</speech>
            <speech>Embora nossas missões possam ser diferentes, nossos corações batem como um só.</speech>
            <speech>Que venha a glória para a Equipe Galáctica!</speech>
        </speeches>
    </conversation>
</npcs>