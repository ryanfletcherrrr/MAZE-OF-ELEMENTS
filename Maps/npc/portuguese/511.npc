<npcs>
    <conversation canSkip="false" id="1">
        <speeches id="1">
            <speech>O quê? Ah, é você, $PLAYER_NAME! Você finalmente chegou aqui?</speech>
            <speech>Você é lento como sempre. Você é tão lento que o líder do ginásio já se foi há muito tempo. Ele disse que tinha que ir...
            </speech>
            <speech>Uh...</speech>
            <speech>Ah, sim, para a mina de Oreburgh! Já recebi meu distintivo, então não é nada demais para mim, mas...</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="2">
        <speeches id="1">
            <speech>Que baque!!! Opa!</speech>
            <speech>$PLAYER_NAME! Você recebeu o emblema do ginásio, não foi?</speech>
            <speech>Eterna City é o próximo lugar com um ginásio que distribui distintivos, certo?</speech>
            <speech>Então, sim, fui para a Rota 207, mas não consegui correr sem minha bicicleta.</speech>
            <speech>Fiz minha equipe batalhar e os fortaleci, então não foi um desperdício.</speech>
            <speech>Então, estou voltando para a Cidade Jubilife. Próxima parada, o distintivo do ginásio Eterna!</speech>
            <speech>Dez segundos antes de eu sair correndo!</speech>
            <speech>Nove...</speech>
            <speech>Bah! Quem tem tempo para contar?!</speech>
        </speeches>
        <speeches id="2">
            <speech/>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="5">
        <speeches id="1">
            <speech>Ei, você! Você é um treinador, certo? Por favor, me ajude.</speech>
            <speech>Há um Onix preso entre as rochas e que está causando estragos nas minas.</speech>
            <speech>O Onix é louco e perigoso. Você pode derrotar o Onix e salvar a caverna da destruição?
            </speech>
        </speeches>
    </conversation>

    <conversation id="6">
        <speeches id="1">
            <speech>Uau, você realmente derrotou aquele Onix!</speech>
            <speech>Você foi incrível lá dentro! A maneira como você e seu pokémon lutaram contra aquele Onix foi incrível!</speech>
            <speech>Aqui, pegue esta Pedra da Lua que encontrei nas minas.</speech>
        </speeches>
        <speeches id="2">
            <speech>Continue se fortalecendo, estaremos acompanhando sua jornada!</speech>
        </speeches>
    </conversation>

    <movingNpc direction="DOWN" id="1" name="Alan" shouldSleep="" speed="1" sprite="10" type="npc" x="54" y="27">
        <path>UPx2,LEFTx2,DOWNx3,RIGHTx2</path>
        <onCollisionSpeech gap="4"/>
        <speech>À frente, há uma enorme montanha que se ergue acima de tudo.</speech>
        <speech>Ele divide Sinnoh em duas metades distintas.</speech>
    </movingNpc>
    <movingNpc direction="LEFT" id="2" name="Kelly" shouldSleep="" speed="1" sprite="27" type="npc" x="37" y="25">
        <path>UPx2,DOWNx2</path>
        <onCollisionSpeech gap="4">I wasted my TMs!</onCollisionSpeech>
        <speech>Os TMs são de uso único, mas os HMs podem ser usados várias vezes.</speech>
        <speech>É complicado tentar decidir quais Pokémon devem aprender quais movimentos.</speech>
    </movingNpc>
    <movingNpc direction="LEFT" id="3" name="Fred" shouldSleep="" speed="1" sprite="32" type="npc" x="39" y="21">
        <path>RIGHTx3,LEFTx3</path>
        <onCollisionSpeech gap="4">Stop looking at me!</onCollisionSpeech>
        <speech>Quando corro com meus tênis de corrida, sou o centro das atenções!</speech>
        <speech>...Pelo menos é o que parece. Há sempre alguém olhando para mim.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="4" name="Mary" shouldSleep="" speed="1" sprite="17" type="npc" x="34" y="17">
        <path>UPx2,DOWNx2</path>
        <onCollisionSpeech gap="4"/>
        <speech>O Gym Leader é jovem, mas é o supervisor de segurança da mina.</speech>
        <speech>Ele é um especialista em mais de um campo!</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="5" name="Xavier" sprite="101" x="19" y="26">
        <speech>Essas aberturas de ventilação trocam o ar quente da parte inferior com o ar fresco da parte externa.</speech>
        <speech>Olhar para eles me dá vontade de começar a gritar neles! Olá!</speech>
    </npc>
    <movingNpc direction="DOWN" id="6" name="Jerry" shouldSleep="" speed="1" sprite="49" type="npc" x="25" y="14">
        <path>LEFTx2,RIGHTx2</path>
        <onCollisionSpeech gap="4"/>
        <speech>Você já viu os respiradouros? Eles liberam vapor de baixo para cima.</speech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="7" name="Machoke" shouldSleep="" speed="1" sprite="67" type="pokemon" x="42" y="56">
        <path>RIGHTx2, LEFTx2</path>
        <onCollisionSpeech gap="4">*The Machoke is carrying a boulder*</onCollisionSpeech>
        <speech>Machoke!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="8" name="Machop" shouldSleep="" speed="1" sprite="66" type="pokemon" x="66" y="43">
        <path>DOWNx1, UPx1</path>
        <onCollisionSpeech gap="4">*Machop seems to be moving stones onto the conveyor belt*</onCollisionSpeech>
        <speech>Chop Chop!!!</speech>
    </movingNpc>
    <npc direction="UP" hidden="false" id="9" name="Foreman Tony" sprite="35" x="58" y="58">
        <speech>Meu Machoke e Machamp estão ajudando na construção enquanto eu faço uma pausa...</speech>
        <speech>Na região de Hoenn, os Machoke's são conhecidos por serem "Pokemon Movers"</speech>
        <speech>Eles ajudam os novos residentes a se mudarem para suas novas casas!</speech>
        <speech>Os Pokémon não são apenas para batalhas!</speech>
    </npc>

    <conversation id="7">
        <speeches id="2">
            <speech>Olá! Sou um palhaço da campanha do Tutorial do PBO. Vamos lá, minha pergunta!</speech>
            <speech>Você pode criar sua própria equipe depois de obter três distintivos?</speech>
        </speeches>
        <speeches id="3">
            <speech>Essa não é a resposta correta. Vamos tentar novamente.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ding-ding!</speech>
            <speech>Você está absolutamente correto.</speech>
        </speeches>
        <speeches id="5">
            <speech>Aqui está! Por favor, aceite estas Poções!</speech>
            <speech>Ele restaura o HP de um Pokémon em 20 pontos.</speech>
        </speeches>
    </conversation>

    <conversation id="9">
        <speeches id="1">
            <speech>Meu Deus, você tem Fichas de Batalha por Ranking, não tem? Por favor, troque-os comigo! Eu lhe darei ótimos
                brindes em troca!
            </speech>
        </speeches>
        <speeches id="2">
            <speech>Mas por quê?</speech>
        </speeches>
    </conversation>

    <conversation id="10">
        <speeches id="1">
            <speech>O quê? Ah, é você, $PLAYER_NAME! Você finalmente chegou aqui?</speech>
            <speech>Você é lento como sempre. Você é tão lento que o líder do ginásio já se foi há muito tempo. Ele disse que tinha que ir...
            </speech>
            <speech>Uh...</speech>
            <speech>Ah, sim, para a mina de Oreburgh! Já recebi meu distintivo, então não é nada demais para mim, mas...</speech>
        </speeches>
    </conversation>
</npcs>