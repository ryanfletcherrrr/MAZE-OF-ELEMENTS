<npcs>
    <npc direction="UP" hidden="false" id="1" name="Zoe" sprite="12" x="21" y="13">
        <speech>Pretendo visitar Jvaloh um dia. Dizem que a região é cheia de mistérios. Fico imaginando o que ela guarda.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="2" name="Julia" sprite="27" x="16" y="6">
        <speech>Essas plantas não são aromáticas?</speech>
    </npc>
    <movingNpc direction="LEFT" id="3" name="Raticate" shouldSleep="" speed="1" sprite="20" type="pokemon" x="5" y="12">
        <path>LEFTx2,RIGHTx2</path>
        <onCollisionSpeech gap="4">Ouch.. This Raticate is trying to bite me</onCollisionSpeech>
        <speech>Rati... Rati...!</speech>
    </movingNpc>
    <npc direction="UP" hidden="false" id="4" name="Alex" sprite="2" x="0" y="20">
        <speech>Há um Raticate no primeiro andar deste PokeCenter que estava tentando me morder!</speech>
        <speech>Estou me escondendo disso.</speech>
    </npc>
    <npc direction="UP" hidden="false" id="5" name="Eugene" sprite="24" x="20" y="20">
        <speech>Será que eles têm Pokémon de insetos melhores em Jvaloh do que em Sinnoh?</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="6" name="Noriko" sprite="39" x="14" y="16">
        <speech>Recentemente, todos os PokeCenters de Sinnoh foram reformulados.</speech>
        <speech>As telhas de madeira são feitas de madeira importada do vilarejo de Nuzbar, na região de Jvaloh.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="7" name="Sam" sprite="2" x="5" y="11">
        <speech>Meu irmão tem medo de ratos, mas eu adoro brincar com eles.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="8" name="Ronald" sprite="5" x="19" y="10">
        <speech>Eu gosto de vir ao PokeCenter e relaxar. Quer se juntar a mim?</speech>
    </npc>
    <npc direction="UP" hidden="false" id="9" name="Danny" sprite="5" x="11" y="4">
        <speech>Há muito tempo, na região de Jvaloh, muitos treinadores usaram o Pokémon "Cloyster" em seus desafios de ginásio...</speech>
        <speech>Ele tinha a vantagem única de usar a habilidade Link, que, quando combinada com uma boa natureza, permitia que ele fosse um batedor rápido e pesado...</speech>
        <speech>Se você sabe, então você sabe...</speech>
		<speech>Gostou da minha Cloyster? Compre a sua!</speech>
		<speech>*resmunga audivelmente sobre crianças e cloysters*.</speech>
    </npc>
    <movingNpc direction="DOWN" id="10" name="Cloyster" shouldSleep="" speed="1" sprite="91" type="pokemon" x="12" y="3">
        <path>DOWNx1, UPx1</path>
        <onCollisionSpeech gap="4">*Cloyster winks at you*</onCollisionSpeech>
        <speech>Clooooyster!</speech>
    </movingNpc>

    <conversation id="8">
        <speeches id="1">
            <speech>Então, você quer trocar seus Goodwill Tokens por itens?</speech>
        </speeches>
        <speeches id="2">
            <speech>Sem problemas. Volte novamente se mudar de ideia.</speech>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="9">
        <speeches id="1">
            <speech>{COLOR=YELLOW}Saudações, $PLAYER_NAME! Chegou a hora de testar seus melhores dragões!{ENDCOLOR}</speech>
            <speech>Apresente-me {COLOR=CYAN}até 5 Bagon, Cyclizar ou Dratini capturados por você mesmo{ENDCOLOR}, e eu julgarei seu potencial.</speech>
            <speech>O {COLOR=GOLD}mais forte, mais perfeito{ENDCOLOR} entre eles vencerá!</speech>
            <speech>Você tem o que é preciso para conquistar o prêmio?</speech>
        </speeches>

        <speeches id="2">
            <speech>{COLOR=RED}A competição terminou!{ENDCOLOR}</speech>
            <speech>Todas as pontuações foram registradas, e o dragão mais poderoso foi coroado.</speech>
            <speech>Volte na próxima vez para testar novamente sua habilidade!</speech>
        </speeches>

        <speeches id="3">
            <speech>{COLOR=YELLOW}Um contratempo, $PLAYER_NAME!{ENDCOLOR}</speech>
            <speech>Você não tem {COLOR=CYAN}Bagon, Cyclizar ou Dratini suficientes capturados por você mesmo{ENDCOLOR} para que eu possa julgar.</speech>
            <speech>Procure mais e retorne quando estiver pronto.</speech>
        </speeches>

        <speeches id="4">
            <speech>{COLOR=GREEN}Você atingiu o máximo de 5 inscrições!{ENDCOLOR}</speech>
            <speech>Se desejar alterar suas entradas, você pode redefinir suas seleções.</speech>
        </speeches>

        <speeches id="5">
            <speech>{COLOR=RED}Este não se qualifica!{ENDCOLOR}</speech>
            <speech>Sua inscrição não tem a {COLOR=GOLD}força e potencial perfeitos{ENDCOLOR} que buscamos.</speech>
            <speech>Apenas os melhores serão considerados - traga-me exemplares mais fortes!</speech>
        </speeches>

        <speeches id="6">
            <speech>{COLOR=CYAN}Uma inscrição digna!{ENDCOLOR}</speech>
            <speech>Os juízes reconheceram seu Pokémon.</speech>
            <speech>Você agora tem chance de conquistar a {COLOR=RED}primeira posição!{ENDCOLOR}</speech>
        </speeches>

        <speeches id="7">
            <speech>{COLOR=PURPLE}Suas inscrições anteriores foram redefinidas.{ENDCOLOR}</speech>
            <speech>O caminho está aberto para novos concorrentes. Escolha com sabedoria desta vez!</speech>
        </speeches>

        <speeches id="8">
            <speech>{COLOR=YELLOW}Você realmente deseja redefinir suas inscrições, $PLAYER_NAME?{ENDCOLOR}</speech>
            <speech>Isso apagará todas as entradas anteriores, permitindo que novos concorrentes sejam julgados.</speech>
            <speech>Mas uma vez feito, não poderá ser desfeito. Tem certeza?</speech>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="10">
        <speeches id="1">
            <speech>{COLOR=YELLOW}Ah, $PLAYER_NAME! Busco os dragões mais... infelizes.{ENDCOLOR}</speech>
            <speech>Apresente-me {COLOR=CYAN}até 5 Bagon, Cyclizar ou Dratini capturados por você mesmo{ENDCOLOR}, e eu os julgarei de maneira mais incomum.</speech>
            <speech>O {COLOR=RED}menos dotado, mais medíocre{ENDCOLOR} entre eles receberá um prêmio especial para seu treinador!</speech>
            <speech>Você ousa participar deste concurso inusitado?</speech>
        </speeches>

        <speeches id="2">
            <speech>{COLOR=RED}A competição terminou!{ENDCOLOR}</speech>
            <speech>O dragão mais... medíocre foi escolhido, e os resultados são finais.</speech>
            <speech>Volte na próxima vez para mais uma chance de vitória.</speech>
        </speeches>

        <speeches id="3">
            <speech>{COLOR=YELLOW}Hmm, algo está faltando, $PLAYER_NAME.{ENDCOLOR}</speech>
            <speech>Você ainda não tem {COLOR=CYAN}Bagon, Cyclizar ou Dratini suficientes capturados por você mesmo{ENDCOLOR} para que eu possa julgar.</speech>
            <speech>Aventure-se e traga mais candidatos.</speech>
        </speeches>

        <speeches id="4">
            <speech>{COLOR=GREEN}Você atingiu o máximo de 5 inscrições!{ENDCOLOR}</speech>
            <speech>Se quiser reconsiderar suas escolhas, pode redefinir suas inscrições.</speech>
            <speech>Mas lembre-se, apenas o mais fraco conquistará o prêmio!</speech>
        </speeches>

        <speeches id="5">
            <speech>{COLOR=RED}Este é impressionante demais!{ENDCOLOR}</speech>
            <speech>Seu Pokémon tem {COLOR=GOLD}potencial e habilidade demais!{ENDCOLOR}</speech>
            <speech>Apenas os {COLOR=YELLOW}mais infelizes{ENDCOLOR} espécimes serão aceitos aqui.</speech>
        </speeches>

        <speeches id="6">
            <speech>{COLOR=CYAN}Sim, sim... isso servirá!{ENDCOLOR}</speech>
            <speech>Seu Pokémon foi considerado suficientemente sem talento.</speech>
            <speech>Você está um passo mais próximo de se tornar o mestre.</speech>
        </speeches>

        <speeches id="7">
            <speech>{COLOR=PURPLE}Suas inscrições anteriores foram apagadas.{ENDCOLOR}</speech>
            <speech>O palco está pronto para novos candidatos - ou melhor, os sem esperança. Escolha suas inscrições com sabedoria.</speech>
        </speeches>

        <speeches id="8">
            <speech>{COLOR=YELLOW}Tem certeza de que deseja redefinir suas inscrições, $PLAYER_NAME?{ENDCOLOR}</speech>
            <speech>Isso limpará todas as entradas anteriores, permitindo que novos concorrentes sejam julgados.</speech>
            <speech>Uma vez feito, não poderá ser revertido. Prossiga com cautela.</speech>
        </speeches>
    </conversation>
</npcs>