<npcs>
    <npc direction="DOWN" id="1000" name="Guide Hari" sprite="23" x="14" y="41">
        <speech>Saudações, desafiante! Arturo é um usuário de Pokémon do tipo terrestre.</speech>
        <speech>Os tipos água, grama e gelo se saem bem contra ele.</speech>
        <speech>Não subestime os tipos terrestres dele, especialmente em uma tempestade de areia.</speech>
        <speech>Lembre-se de que Sand Rush é para os pokémons do tipo terrestre o que Adrenaline Rush é para os humanos. Boa sorte!</speech>
    </npc>
    <conversation id="1">
        <speeches id="1">
            <speech>Você veio aqui para desafiar Arturo?</speech>
            <speech>Antes disso, vamos ver se você vale o tempo dele!</speech>
        </speeches>
        <speeches id="2">
            <speech>Ah, tudo bem. Você não é tão ruim, sabe.</speech>
        </speeches>
        <speeches id="3">
            <speech>Ah, tudo bem. Você não é tão ruim, sabe.</speech>
        </speeches>
        <speeches id="4">
            <speech>Volte, você só fará com que ele perca tempo.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Troll... troll na masmorra!</speech>
        </speeches>
        <speeches id="2">
            <speech>Eu estava apenas brincando sobre a questão do "troll". Não leve isso tão a sério!</speech>
        </speeches>
        <speeches id="3">
            <speech>Eu estava apenas brincando sobre a questão do "troll". Não leve isso tão a sério!</speech>
        </speeches>
        <speeches id="4">
            <speech>O troll foi derrotado! Haha</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Parece que você ficou preso no quebra-cabeça de areia. Que pena, pois sua sorte está prestes a ficar muito pior!</speech>
        </speeches>
        <speeches id="2">
            <speech>Eu estava errado. Sua sorte brilha intensamente, e ela pode levá-lo a Arturo, acredito.</speech>
        </speeches>
        <speeches id="3">
            <speech>Eu estava errado. Sua sorte brilha intensamente, e ela pode levá-lo a Arturo, acredito.</speech>
        </speeches>
        <speeches id="4">
            <speech>E esse é o beijo da morte!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Veja como a areia tira sua força e meus Pokémon roubam seu espírito!</speech>
        </speeches>
        <speeches id="2">
            <speech>Seu espírito é forte - mais forte que meu Pokémon.</speech>
        </speeches>
        <speeches id="3">
            <speech>Seu espírito é forte - mais forte que meu Pokémon.</speech>
        </speeches>
        <speeches id="4">
            <speech>Agora descanse na escuridão eterna!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Você realmente acha que pode vencer o Arturo? Isso é muita confiança, ou é apenas arrogância mal colocada?</speech>
        </speeches>
        <speeches id="2">
            <speech>Vejo que sua confiança é justificada, mas simplesmente estar confiante não é suficiente para superar Arturo.</speech>
        </speeches>
        <speeches id="3">
            <speech>Você precisa se adaptar, porque só assim poderá realmente ter uma chance contra alguém com o calibre de Arturo.</speech>
        </speeches>
        <speeches id="4">
            <speech>Então, afinal, era arrogância.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Aonde você pensa que vai, garoto?</speech>
        </speeches>
        <speeches id="2">
            <speech>Você está indo na direção certa.</speech>
        </speeches>
        <speeches id="3">
            <speech>Depois de escolher um caminho, persista nele até obter sucesso. Essas são as palavras de Arturo.</speech>
        </speeches>
        <speeches id="4">
            <speech>Você precisa escolher seu caminho com sabedoria, garoto!</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Você veio desafiar Arturo?</speech>
            <speech>Tudo bem. Mas, primeiro, mostre-me o que você aprendeu até agora!</speech>
        </speeches>
        <speeches id="2">
            <speech>Arturo disse certa vez que uma pessoa aprende com seus fracassos.</speech>
        </speeches>
        <speeches id="3">
            <speech>Arturo disse certa vez que uma pessoa aprende com seus fracassos.</speech>
        </speeches>
        <speeches id="4">
            <speech>Você precisa aprender com seus fracassos!</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>Gosto de procurar Pokémon raros para realizar meu sonho como treinador.</speech>
            <speech>Mas, neste momento, parece que derrotá-lo fará com que eu me sinta melhor.</speech>
        </speeches>
        <speeches id="2">
            <speech>Uma vez encontrei um Pupitar aqui. Vou continuar minha busca por esses Pokémons.</speech>
        </speeches>
        <speeches id="3">
            <speech>Uma vez encontrei um Pupitar aqui. Vou continuar minha busca por esses Pokémons.</speech>
        </speeches>
        <speeches id="4">
            <speech>Estou me sentindo tão bem...</speech>
        </speeches>
    </conversation>
</npcs>