<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Somos a Equipe Galáctica! Vamos pegar todos os Pokémon que quisermos!</speech>
            <speech>Estamos raptando todos os Pokémon desta Ilha de Ferro enferrujada!</speech>
        </speeches>
        <speeches id="2">
            <speech>Os Pokémon aqui são terríveis.</speech>
            <speech>De qualquer forma, nem sei qual é o grande plano da Equipe Galáctica!</speech>
        </speeches>
        <speeches id="4">
            <speech>Não tente interferir nos assuntos da Equipe Galáctica novamente.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Não sou um simples caminhante. Me chamem de alpinista.</speech>
        </speeches>
        <speeches id="2">
            <speech>Um especialista em assuntos montanhosos. É um alpinista.</speech>
        </speeches>
        <speeches id="3">
            <speech>Um especialista em assuntos montanhosos. É um alpinista.</speech>
        </speeches>
        <speeches id="4">
            <speech>Um maníaco por montanhas como eu é chamado adequadamente de alpinista.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Harrumph! Harooo!</speech>
        </speeches>
        <speeches id="2">
            <speech>Hora de um haiku de batalha! Não posso acreditar nisso. Ainda posso continuar. Ainda posso batalhar.</speech>
        </speeches>
        <speeches id="3">
            <speech>Hora de um haiku de batalha! Não posso acreditar nisso. Ainda posso continuar. Ainda posso batalhar.</speech>
        </speeches>
        <speeches id="4">
            <speech>Harrumph!!!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Louvo sua coragem em me desafiar! Pois eu sou o que tem o chute mais forte!</speech>
        </speeches>
        <speeches id="2">
            <speech>Hmmm... Se eu fosse perder de qualquer maneira, esperava ficar totalmente confuso no processo.</speech>
        </speeches>
        <speeches id="3">
            <speech>Hmmm... Se eu fosse perder de qualquer maneira, esperava ficar totalmente confuso no processo.</speech>
        </speeches>
        <speeches id="4">
            <speech>Oh. O Pokémon fez a luta. Meu chute forte não ajudou nem um pouco.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Ser brando comigo não faz parte do meu vocabulário.</speech>
        </speeches>
        <speeches id="2">
            <speech>Mesmo que eu dê tudo de mim, não faz sentido quando eu perco.</speech>
        </speeches>
        <speeches id="3">
            <speech>Mesmo que eu dê tudo de mim, não faz sentido quando eu perco.</speech>
        </speeches>
        <speeches id="4">
            <speech>Para mim, etiqueta é derrotar impiedosamente meus oponentes na batalha, mesmo os mais fracos.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Vou lhe mostrar que podemos acabar com você. Estamos treinando em campo!</speech>
        </speeches>
        <speeches id="2">
            <speech>Que estranho... Como isso é possível... Eu não deveria ter sido derrotado.</speech>
        </speeches>
        <speeches id="3">
            <speech>Que estranho... Como isso é possível... Eu não deveria ter sido derrotado.</speech>
        </speeches>
        <speeches id="4">
            <speech>Como estavam meus Pokémon? Poderosos, não eram?</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Nossas vidas têm muitos dias comuns... então eu preciso ter Pokémon!</speech>
        </speeches>
        <speeches id="2">
            <speech>Não fazer birra quando se perde faz parte de ser um Treinador, certo?</speech>
        </speeches>
        <speeches id="3">
            <speech>Não fazer birra quando se perde faz parte de ser um treinador, certo?</speech>
        </speeches>
        <speeches id="4">
            <speech>Quando olho para uma pessoa especial como você, eu simplesmente me derreto.</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>Para me desafiar, você deve ser uma pessoa imprudente, destemida e que não conhece seu lugar!</speech>
        </speeches>
        <speeches id="2">
            <speech>Você é um instrutor inteligente, considerando que não sabe muito.</speech>
        </speeches>
        <speeches id="3">
            <speech>Você é um Trainer inteligente, considerando que não sabe muito.</speech>
        </speeches>
        <speeches id="4">
            <speech>Hmmph... O fato de me desafiar deve significar que até a ignorância tem seu limite!</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>Mesmo que as pessoas o chamem de Ace Trainer, você não recebe nada de especial por isso.</speech>
        </speeches>
        <speeches id="2">
            <speech>No final, ser bom em lutar sozinho não é suficiente, não importa o quão forte você seja.</speech>
        </speeches>
        <speeches id="3">
            <speech>No final, ser bom em lutar sozinho não é suficiente, não importa o quão forte você seja.</speech>
        </speeches>
        <speeches id="4">
            <speech>Sou apenas bom em batalhas. Eu nem sequer tenho um emprego. Sou apenas mais um desempregado.</speech>
        </speeches>
    </conversation>
</npcs>