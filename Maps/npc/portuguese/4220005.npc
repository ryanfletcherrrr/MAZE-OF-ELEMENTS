<npcs>
    <conversation id="1">
        <speeches id="2">
            <speech>O que foi isso?! Quem são vocês?!</speech>
            <speech>Jovem $GENDER_MAN_LADY... Ah, $PLAYER_NAME, não é? Essa foi uma situação bastante tensa!</speech>
            <speech>Obrigado por me ajudar!</speech>
            <speech>Ah, sim, quase me esqueci de que você trouxe as peças de Devon! Posso ficar com elas?</speech>
        </speeches>
        <speeches id="3">
            <speech>Por quê?</speech>
        </speeches>
        <speeches id="4">
            <speech>É isso aí! Não posso ficar parado aqui!</speech>
            <speech>Finalmente chegou a hora de partirmos em nossa expedição ao fundo do oceano!</speech>
            <speech>Obrigado por isso, e me desculpe!</speech>
        </speeches>
        <speeches id="5">
            <speech>É isso aí! Não posso ficar parado aqui!</speech>
            <speech>Finalmente chegou a hora de partirmos em nossa expedição ao fundo do oceano!</speech>
            <speech>Obrigado por isso, e me desculpe!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Ha Ha Ha!</speech>
            <speech>Espere um pouco e estaremos levando essas peças!</speech>
        </speeches>
        <speeches id="2">
            <speech>Isso é bastante desastroso.</speech>
            <speech>Nesse ritmo, vou me tornar o alvo da fúria do chefe.</speech>
        </speeches>
        <speeches id="3">
            <speech>Isso é bastante desastroso.</speech>
            <speech>Nesse ritmo, vou me tornar o alvo da fúria do chefe.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ha Ha Ha!</speech>
            <speech>Agora nos dê essas peças!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Ha Ha Ha!</speech>
            <speech>Essas partes são nossas para levar!</speech>
        </speeches>
        <speeches id="2">
            <speech>Hmph.</speech>
            <speech>Eu nunca teria imaginado que uma simples criança seria um obstáculo tão grande.</speech>
        </speeches>
        <speeches id="2">
            <speech>Hmph.</speech>
            <speech>Eu nunca teria imaginado que uma simples criança seria um obstáculo tão grande.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ha Ha Ha!</speech>
            <speech>Agora nos dê essas peças!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Agora, eu estava me perguntando como você poderia ser retido pelo simples ato de apreender uma mala.</speech>
            <speech>Presumo que esteja sendo impedido por essa criança?"</speech>
            <speech>Hmm. Embora você seja apenas uma criança, seus olhos me falam de sua determinação feroz.</speech>
            <speech>Meu coração está batendo forte no peito...</speech>
            <speech>Sim, acho que posso ver por que meus humildes Grunhidos não conseguiram resistir um minuto contra você. Eu me chamo
                Maxie.
            </speech>
            <speech>Sou o líder da Equipe Magma, uma organização nobre cujo objetivo é impulsionar a humanidade a patamares ainda maiores de progresso e evolução.
                maiores alturas de progresso e evolução.
            </speech>
            <speech>De fato. E você é um dos jovens que podem moldar o futuro de nossa sociedade.</speech>
            <speech>Considerando esse fato, acredito que devo educá-lo nos costumes do mundo.</speech>
            <speech>A terra... É o palco no qual a humanidade se encontra.</speech>
            <speech>A terra existe para que nós, humanos, possamos continuar avançando e subindo, entrando no futuro...</speech>
            <speech>Para continuarmos crescendo e evoluindo, os seres humanos precisam de um grande palco para se posicionar.</speech>
            <speech>Uma terra na qual podemos avançar... Uma terra que podemos explorar... desenvolver... explorar...</speech>
            <speech>Essa é a base para o crescimento de todos os empreendimentos humanos.</speech>
            <speech>É por isso que nós, da Equipe Magma, precisamos aumentar a massa de terra do mundo!</speech>
            <speech>Acredite que isso levará a um futuro de felicidade eterna para a humanidade...</speech>
            <speech>E, consequentemente, para toda a vida!</speech>
            <speech>Humph. Suponho que o conceito ainda seja muito difícil de ser compreendido por uma criança.</speech>
            <speech>É esse o caso? Pelo menos tentei abrir sua mente. Vou me retirar por enquanto.</speech>
            <speech>Sugiro que você tome cuidado para nunca mais enfrentar a Equipe Magma.</speech>
            <speech>Não serei tão tolerante da próxima vez. Peço que você se lembre disso.</speech>
            <speech>Já terminamos aqui.</speech>
        </speeches>
    </conversation>
    <npc direction="DOWN" hidden="false" id="1" name="Corey " randomRotation="true" sprite="11" x="15" y="9">
        <speech>O Oceanic Museum não é apenas um prédio; é um santuário para entusiastas marinhos como eu.</speech>
        <speech>As exposições aqui contam a história de nossa profunda conexão com o mar, e o Capitão Stern é o guardião desse legado.</speech>
    </npc>
    <movingNpc direction="DOWN" id="2" name="Tito" shouldSleep="" speed="1" sprite="8" type="npc" x="4" y="17">
        <path>RIGHTx3,LEFTx3</path>
        <onCollisionSpeech gap="4"/>
        <speech>O Capitão Stern é um farol de conhecimento quando se trata de história marítima.</speech>
        <speech>Sua dedicação à preservação de nosso patrimônio oceânico é realmente inspiradora.</speech>
        <speech>É uma pena que a Equipe Magma tenha decidido perturbar a tranquilidade deste lugar.</speech>
    </movingNpc>
</npcs>