<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Quem é você e o que um garoto como você está fazendo aqui?</speech>
        </speeches>
        <speeches id="2">
            <speech>Urgh ...</speech>
        </speeches>
        <speeches id="3">
            <speech>Vá embora antes que você se machuque seriamente.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ahh, então você veio aqui para levar uma surra.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>O que estamos fazendo aqui? Não é da sua conta!</speech>
        </speeches>
        <speeches id="2">
            <speech>Hmph!</speech>
        </speeches>
        <speeches id="3">
            <speech>Você não é bem-vindo aqui.</speech>
        </speeches>
        <speeches id="4">
            <speech>Eu lhe disse que não é da sua conta.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Estamos ocupados aqui, então vá embora.</speech>
            <speech>Você não quer? Então acho que vou obrigá-lo!</speech>
        </speeches>
        <speeches id="2">
            <speech>Droga!</speech>
        </speeches>
        <speeches id="3">
            <speech>Por que você precisa ser tão chato?</speech>
        </speeches>
        <speeches id="4">
            <speech>Agora fuja!</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
   <!-- <conversation id="5">
        <speeches id="1">
            <speech>This may seem like rubble and ruins to you, but to me it doesn't.</speech>
            <speech>It is quitessential to study what's happened in the past, to prevent failures in the future.</speech>
            <speech>We must cherish the past, while looking to the future.</speech>
            <speech>Is there something else I can help you with, young trainer?</speech>
            <speech>*$PLAYER_NAME explains what happened*</speech>
            <speech>Oh, is that so?</speech>
            <speech>Nothing would make me more happy than giving my special prayer bead to you, $PLAYER_NAME...</speech>
            <speech>But I cannot do so. An ill-meaning stranger stole the bead from me and ran off.</speech>
            <speech>I believe if you thoroughly search the vicinity, you'll find him deeper in the cave. </speech>
            <speech>Would you be so kind as to retreive the special prayer bead, $PLAYER_NAME?</speech>
        </speeches>
        <speeches id="2">
            <speech>By Ho-Oh, you found it! Marvelous, young trainer!</speech>
            <speech>Can you please bring this bead to Head Monk Xha Le?</speech>
        </speeches>
    </conversation>-->
    <conversation id="5">
        <speeches id="1">
            <speech>Então você é o garoto que trouxe o equilíbrio de volta a Jvaloh...</speech>
            <speech>Bastante jovem, devo dizer...</speech>
            <speech>De qualquer forma, meditei durante 50 anos de minha vida para poder falar telepaticamente com Raikou.</speech>
            <speech>Eu fiz isso para poder proteger Jvaloh de qualquer perigo invisível. E veja como isso aconteceu</speech>
            <speech>Você quer cuidar do Raikou? Hmm, depois do que aconteceu em Jvaloh, acho que o Raikou não se importará com um mestre.</speech>
            <speech>Mas para que eu possa convocá-lo para você, preciso testar sua força.</speech>
            <speech>Derrote-me e eu convocarei o Raikou para você!</speech>
        </speeches>
        <speeches id="2">
            <speech>Saia da frente!</speech>
            <speech>...</speech>
            <speech>Raikou apareceu agora em Jvaloh.</speech>
            <speech>Boa sorte, treinador!</speech>
        </speeches>
        <speeches id="3">
            <speech>Não tão cedo, garoto. Levo tempo para reunir energia para me comunicar telepaticamente.</speech>
            <speech>Volte depois de $DAYS.</speech>
        </speeches>
        <speeches id="4">
            <speech>Você precisa treinar mais. Volte quando estiver pronto.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
</npcs>