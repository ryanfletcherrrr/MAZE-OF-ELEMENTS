<npcs>
    <movingNpc direction="DOWN" id="1" name="Delcatty" shouldSleep="" speed="1" sprite="301" type="pokemon" x="4" y="13">
        <path>LEFTx2,RIGHTx2</path>
        <onCollisionSpeech gap="4">:3</onCollisionSpeech>
        <speech>mewmew? :3</speech>
    </movingNpc>
    <npc direction="LEFT" hidden="false" id="2" name="Leo" randomRotation="false" sprite="5" x="11" y="5">
        <speech>Gosto muito da reformulação que o prédio do Pokémon Center sofreu ao longo dos anos.</speech>
        <speech>O melhor que já vi em minha vida até agora.</speech>
        <speech>Viver uma vida longa pode ter suas recompensas.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="3" name="Randy" randomRotation="true" sprite="26" x="2" y="9">
        <speech>Fique à vontade para usar este PC, ele é para todos!</speech>
    </npc>

    <conversation id="7">
        <speeches id="1">
            <speech>Ah, a emoção de colecionar Pokémon, nada se compara a isso, certo?</speech>
            <speech>Como alguém acostumado com as coisas mais finas, acho que escolher o próximo Pokémon para minha prestigiosa coleção é uma provação.</speech>
            <speech>Você poderia fazer a gentileza de me conceder uma breve pausa? Preciso pensar em qual espécime raro devo admirar em seguida.</speech>
            <speech>Volte em $DURATION, e certamente terei uma tarefa tentadora para nós.</speech>
            <speech>Minha coleção é vasta, mas sempre há espaço para mais.</speech>
        </speeches>
    </conversation>

    <conversation id="8">
        <speeches id="2">
            <speech>Oh, olá! Não acredito que já nos conhecemos. Você pode me chamar de Entusiasta de Pokémon.</speech>
            <speech>Tenho estado bastante entediado ultimamente, relaxando com todos os luxos com os quais se poderia sonhar... exceto por alguma emoção genuína.</speech>
            <speech>Aqui está uma ideia: Desenvolvi um súbito fascínio por Poochyena.</speech>
            <speech>É um Pokémon tão briguento, não é?</speech>
            <speech>Mostre-me uma Poochyena de nível 10, sim?</speech>
            <speech>Eu ficaria muito feliz em ver um de perto e estou disposto a fazer com que valha a pena.</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh, você não está interessado? Que decepção terrível.</speech>
            <speech>Mas acho que nem todos compartilham minha paixão por Pokémon.</speech>
            <speech>Bem, se você mudar de ideia, me avise!</speech>
        </speeches>
        <speeches id="4">
            <speech>Fantástico! Eu sabia que tinha visto em você um colega aficionado por coisas finas.</speech>
            <speech>Traga-me uma Poochyena de nível 10 e eu lhe prometo que a recompensa será muito generosa.</speech>
            <speech>Eu sempre mantenho minha palavra, especialmente quando se trata de meus caprichos.</speech>
        </speeches>
    </conversation>

    <conversation id="9">
        <speeches id="1">
            <speech>Você já conseguiu dar uma olhada na Poochyena de nível 10? Minha curiosidade está absolutamente aguçada!</speech>
        </speeches>

        <speeches id="2">
            <speech>Ah, então você encontrou uma Poochyena de nível 10? Maravilhoso! Posso dar uma olhada? Não é todo dia que se vê um espécime assim.</speech>
            <speech>Ver essas criaturas alimenta ainda mais minha paixão por Pokémon. Quer me mostrar o que você encontrou?</speech>
        </speeches>

        <speeches id="3">
            <speech>Não está se sentindo à altura da tarefa? Isso é um pouco decepcionante, mas eu entendo.</speech>
            <speech>Nem todo mundo tem o dom de atender a pedidos extravagantes.</speech>
            <speech>No entanto, agradecemos suas contribuições até o momento.</speech>
            <speech>Se o espírito de aventura bater novamente, sinta-se à vontade para voltar.</speech>
        </speeches>

        <speeches id="4">
            <speech>Seu esforço para satisfazer minha curiosidade é realmente louvável.</speech>
            <speech>Já estou pensando em qual Pokémon eu gostaria de conhecer em seguida.</speech>
            <speech>Permita-me um momento para decidir sobre nossa próxima aventura Pokémon. Sua ajuda foi divertida e esclarecedora.</speech>
            <speech>Obrigado por sua dedicação. Como sinal de minha gratidão, aqui está uma pequena lembrança por seus problemas.</speech>
            <speech>Eu lhe asseguro que é bastante generoso.</speech>
        </speeches>
    </conversation>

    <conversation id="10">
        <speeches id="2">
            <speech>Vejo que você está de volta! Sua última descoberta foi realmente um espetáculo. Que experiência emocionante!</speech>
            <speech>Sabe, meu interesse mudou para algo bastante... elétrico. Já ouviu falar do Hisuian Voltorb?</speech>
            <speech>Não se trata de um Voltorb comum, veja bem. É da região de Hisui, repleta de história e mística!</speech>
            <speech>Você toparia a tarefa de me mostrar um Hisuian Voltorb? Ouvi dizer que eles são um espetáculo e tanto.</speech>
            <speech>E sim, vou garantir que a recompensa seja, como sempre, muito atraente.</speech>
        </speeches>
        <speeches id="3">
            <speech>Não se sente tentado pelo fascínio de Hisuian Voltorb? Essa é uma grande surpresa, vinda de um aventureiro como você.</speech>
            <speech>No entanto, respeito sua escolha. Lembre-se de que minha oferta continua válida caso a curiosidade o leve a melhor.</speech>
        </speeches>
        <speeches id="4">
            <speech>Decisão maravilhosa! Mal posso esperar para ver um Hisuian Voltorb com meus próprios olhos.</speech>
            <speech>Traga um para mim no Nível 12 e eu lhe garanto que a recompensa refletirá meu imenso apreço por seus esforços.</speech>
        </speeches>
    </conversation>

    <conversation id="11">
        <speeches id="1">
            <speech>Você já encontrou um Hisuian Voltorb de nível 12? Minha expectativa é enorme!</speech>
        </speeches>
        <speeches id="2">
            <speech>Um Hisuian Voltorb no nível 12? Esplêndido! Posso incomodá-lo para dar uma olhada? Essas raridades são um espetáculo para se ver.</speech>
            <speech>Cada novo Pokémon que você me mostra amplia meus horizontes. Você se importaria de compartilhar essa descoberta?</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh, decidiu não fazer isso? Um pouco decepcionante, mas eu entendo.</speech>
            <speech>Perseguir um Pokémon específico não é do agrado de todos.</speech>
            <speech>No entanto, seus esforços até agora não passaram despercebidos.</speech>
            <speech>Se você quiser reacender a emoção da caça, minha porta está sempre aberta.</speech>
        </speeches>
        <speeches id="4">
            <speech>Maravilhoso! Sua persistência em satisfazer meus caprichos nunca deixa de surpreender.</speech>
            <speech>Vou precisar de um momento para pensar em qual Pokémon vai me agradar mais...</speech>
            <speech>Suas aventuras trazem histórias tão vibrantes para meus dias que, de outra forma, seriam monótonos.</speech>
            <speech>Aceite este símbolo de minha gratidão por seu trabalho árduo e dedicação.</speech>
            <speech>Fique tranquilo, é uma recompensa bastante suntuosa.</speech>
        </speeches>
    </conversation>

    <conversation id="12">
        <speeches id="2">
            <speech>Nossa última descoberta realmente estabeleceu um novo padrão de referência. Sua dedicação é louvável!</speech>
            <speech>Desta vez, estou de olho em algo bastante eletrizante. Você já conhece o Tynamo?</speech>
            <speech>Um Tynamo de nível 10, para ser mais preciso. É uma criatura que pulsa com vigor elétrico e charme!</speech>
            <speech>Estou ansioso para ver um pessoalmente. Que tal? Você vai trazer um Tynamo nível 10 para me deslumbrar?</speech>
            <speech>E não se preocupe, a recompensa certamente o eletrizará em troca.</speech>
        </speeches>
        <speeches id="3">
            <speech>Optando por ignorar a busca pelo Tynamo? Devo admitir que estou um pouco decepcionado.</speech>
            <speech>No entanto, a porta permanece aberta, caso a faísca da curiosidade se acenda mais uma vez em você.</speech>
        </speeches>
        <speeches id="4">
            <speech>Sua vontade de mergulhar nesse desafio me deixa entusiasmado! Um Tynamo nível 10 certamente será um espetáculo a ser visto.</speech>
            <speech>Aguardo sua chegada com a respiração suspensa. Traga-o e vamos iluminar a emoção juntos!</speech>
        </speeches>
    </conversation>

    <conversation id="13">
        <speeches id="1">
            <speech>Um Tynamo nível 10 já está iluminando sua jornada? Minha empolgação está positivamente carregada!</speech>
        </speeches>
        <speeches id="2">
            <speech>Ver um Tynamo de nível 10? Isso sim é um pensamento energizante! Posso me deliciar com seu brilho?</speech>
            <speech>Suas aventuras continuam a despertar fascínio. Por favor, compartilhe sua descoberta eletrizante comigo.</speech>
        </speeches>
        <speeches id="3">
            <speech>Hesitante em seguir a trilha da Tynamo? Sou todo ouvidos para saber o motivo, mas lembre-se de que a oferta continua na mesa.</speech>
            <speech>Se as correntes o levarem de volta, saiba que um público ávido o aguarda.</speech>
        </speeches>
        <speeches id="4">
            <speech>Incrível! A corrente de sua determinação flui mais forte do que nunca.</speech>
            <speech>Enquanto eu pondero sobre a próxima maravilha a ser perseguida, considere isso como um símbolo de minha gratidão pela demonstração elétrica de comprometimento.</speech>
        </speeches>
    </conversation>

</npcs>