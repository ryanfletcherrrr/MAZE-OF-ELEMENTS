<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Olá, $PLAYER_NAME. Sou o artesão que forja os Red Shards das garras dos Torchics.</speech>
            <speech>Para a forja, precisamos de um tipo específico de Torchic:</speech>
            <speech>Apanhado no Safári de Hoenn, sem nenhum item.</speech>
            <speech>Deve ter um total de IVs de 100 ou mais e ser Ultra Raro.</speech>
            <speech>Além disso, ele deve ter pelo menos nível 1 e ter sido capturado originalmente por você.</speech>
            <speech>Quando você encontrar um Torchic que atenda a esses critérios, traga-o para mim.</speech>
        </speeches>
        <speeches id="2">
            <speech>Olá, $PLAYER_NAME. Sou o artesão que forja os Red Shards das garras dos Torchics.</speech>
            <speech>Para a forja, precisamos de um tipo específico de Torchic:</speech>
            <speech>Apanhado no Safári de Hoenn, sem nenhum item.</speech>
            <speech>Deve ter um total de IVs de 100 ou mais e ser Ultra Raro.</speech>
            <speech>Além disso, ele deve ter pelo menos nível 1 e ter sido capturado originalmente por você.</speech>
            <speech>Oh! você tem Torchic(s) que atende(m) às nossas necessidades. Como artesão, forjarei um fragmento vermelho de suas garras.</speech>
            <speech>Esse processo é permanente, o que significa que o Torchic será levado para sempre. Tem certeza de sua escolha?</speech>
            <speech>Selecione a Torchic que você deseja usar para o fragmento vermelho. Escolha com cuidado, pois isso não pode ser desfeito e o Torchic ficará sob nossos cuidados para sempre.</speech>
        </speeches>
        <speeches id="3">
            <speech>Sem problemas, $PLAYER_NAME. Essas decisões não devem ser apressadas. Retorne quando estiver pronto.</speech>
        </speeches>
        <speeches id="4">
            <speech>Entendo sua decisão. Vamos prosseguir com a forja.</speech>
            <speech>...E está pronto. Aqui está seu fragmento vermelho, criado a partir das garras de seu Torchic.</speech>
            <speech>Esse fragmento possui propriedades poderosas. Use-o com sabedoria. Obrigado por confiar sua Torchic a mim.</speech>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>Bem-vindo, $PLAYER_NAME. Para criar a Red Flute, são necessários 10 Red Shards (fragmentos vermelhos), obtidos dos Torchics mais raros.</speech>
            <speech>Esses fragmentos incorporam a essência da natureza selvagem de Hoenn. Se você for baixo, a aventura continua.</speech>
        </speeches>
        <speeches id="2">
            <speech>Maravilhoso, você adquiriu 10 fragmentos vermelhos! Com eles, posso forjar a flauta conhecida por acalmar os espíritos.</speech>
            <speech>A criação da Flauta Vermelha não é pouca coisa. Pronto para prosseguir? Quando começo, não há como voltar atrás.</speech>
        </speeches>
        <speeches id="3">
            <speech>Entendo sua hesitação. É uma decisão que não deve ser tomada de ânimo leve.</speech>
            <speech>Reflita sobre sua escolha. Quando a certeza o encontrar, eu estarei aqui.</speech>
        </speeches>
        <speeches id="4">
            <speech>Vamos começar. Sua confiança em mim não ficará sem recompensa.</speech>
            <speech>...E está completo. Aqui, a Flauta Vermelha, imbuída da harmonia da natureza.</speech>
            <speech>Trate-a com cuidado. Suas melodias são potentes, capazes de acalmar a tempestade interior.</speech>
            <speech>Preciso partir agora para reunir mais recursos. A natureza selvagem de Hoenn é vasta, e seus segredos são muitos.</speech>
            <speech>Na próxima vez que nos encontrarmos, espero ouvir histórias sobre como a Flauta Vermelha o ajudou. Adeus, por enquanto.</speech>
        </speeches>
        <speeches id="5">
            <speech>Esta flauta marca um vínculo entre nós, $PLAYER_NAME. No entanto, minha jornada por materiais me chama para longe.</speech>
            <speech>Preciso partir agora para reunir mais recursos. A natureza selvagem de Hoenn é vasta, e seus segredos são muitos.</speech>
            <speech>Na próxima vez que nos encontrarmos, espero ouvir histórias sobre como a Flauta Vermelha o ajudou. Adeus, por enquanto.</speech>
        </speeches>
    </conversation>

</npcs>