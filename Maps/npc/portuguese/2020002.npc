<npcs>
    <conversation id="3">
        <speeches id="1">
            <speech>Ah, o momento perfeito! Tenho um pacote de pesquisa urgente {COLOR=PURPLE}{ENDCOLOR} que precisa chegar ao {COLOR=BLUE}Professor Oak{ENDCOLOR} imediatamente.</speech>
            <speech>Ele contém dados críticos de nossos estudos de campo mais recentes - material sensível ao tempo que não pode esperar pela entrega regular.</speech>
            <speech>Você parece ser um instrutor competente. Você estaria disposto a entregar isso ao {COLOR=BLUE}Professor{ENDCOLOR} pessoalmente?</speech>
            <speech>Ele deve estar em seu laboratório em {COLOR=CYAN}Pallet Town{ENDCOLOR}. Isso seria de grande ajuda para nossos esforços de pesquisa.</speech>
        </speeches>
        <speeches id="2">
            <speech>Excelente! {O professor Oak ficará muito aliviado por receber esses dados dentro do prazo.</speech>
            <speech>Sua ajuda garante que nossa pesquisa possa continuar sem atrasos. Muito obrigado, de verdade.</speech>
            <speech>Boa viagem para {COLOR=CYAN}Pallet Town{ENDCOLOR} - e, por favor, manuseie esse pacote com cuidado!</speech>
        </speeches>
    </conversation>
    <movingNpc direction="LEFT" id="1" name="Sophia" speed="1" sprite="104" type="npc" x="14" y="10">
        <path>LEFTx1,RIGHTx1</path>
        <onCollisionSpeech gap="4"/>
        <speech>Você deve sempre estocar Antídotos antes de ir para a floresta.</speech>
    </movingNpc>
</npcs>