<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>A adrenalina está bombando na minha equipe! Eu também! Farei desta uma batalha incrível!</speech>
        </speeches>
        <speeches id="2">
            <speech>Fiz o que vim fazer, e foi assim que aconteceu. Não há mais nada a dizer.</speech>
        </speeches>
        <speeches id="3">
            <speech>Fiz o que vim fazer, e foi assim que aconteceu. Não há mais nada a dizer.</speech>
        </speeches>
        <speeches id="4">
            <speech>O que acha disso? Somos incríveis, certo? Você conseguiu explodir, não foi?</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>A experiência gera poder! Não é isso que dizem?! De qualquer forma, você não vai lutar comigo?</speech>
        </speeches>
        <speeches id="2">
            <speech>Essa batalha foi uma experiência valiosa. Ainda preciso ganhar mais experiência!</speech>
        </speeches>
        <speeches id="3">
            <speech>Essa batalha foi uma experiência valiosa. Ainda preciso ganhar mais experiência!</speech>
        </speeches>
        <speeches id="4">
            <speech>Até mesmo um amador como eu pode vencer! A experiência é o melhor professor, é o que dizem.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Hora de um haiku de batalha! Este é muito bom. Meu oponente é uma criança. Com certeza vou ganhar.</speech>
        </speeches>
        <speeches id="2">
            <speech>Hora de um haiku de batalha! Não posso acreditar nisso. Ainda posso continuar. Ainda posso batalhar.</speech>
        </speeches>
        <speeches id="3">
            <speech>Hora de um haiku de batalha! Não posso acreditar nisso. Ainda posso continuar. Ainda posso batalhar.</speech>
        </speeches>
        <speeches id="4">
            <speech>Hora de um haiku de batalha! Eu sabia que venceria. Sim, meu Pokémon e eu somos realmente tão fortes.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Minha última batalha... É assim que eu gostaria que víssemos essa partida...</speech>
        </speeches>
        <speeches id="2">
            <speech>Foi muito divertido... Vamos ter outra última batalha novamente algum dia...</speech>
        </speeches>
        <speeches id="3">
            <speech>Foi muito divertido... Vamos ter outra última batalha novamente algum dia...</speech>
        </speeches>
        <speeches id="4">
            <speech>Um dia nos encontraremos novamente... Heh. Se isso fosse verdade...</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Hehe, eu o enganei, não foi?</speech>
        </speeches>
        <speeches id="2">
            <speech>Bem, eu deveria voltar a me esconder.</speech>
        </speeches>
        <speeches id="3">
            <speech>Bem, eu deveria voltar a me esconder.</speech>
        </speeches>
        <speeches id="4">
            <speech>Como instrutor, você deve tomar todas as medidas com precaução.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>As batalhas continuam para sempre! Bem-vindo ao mundo sem fim!</speech>
        </speeches>
        <speeches id="2">
            <speech>Ahahaha! Aí está! É isso mesmo! Você já está se sentindo em casa neste mundo!</speech>
        </speeches>
        <speeches id="3">
            <speech>Ahahaha! Lá está ele! É isso mesmo! Você já está se sentindo em casa neste mundo!</speech>
        </speeches>
        <speeches id="4">
            <speech>Se já estiver perdendo, talvez seja melhor voltar atrás agora.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Talento? Ah! Essa é apenas uma desculpa conveniente que os instrutores preguiçosos usam para explicar suas perdas.</speech>
        </speeches>
        <speeches id="2">
            <speech>OK, OK... eu perdi. Talvez eu continue trabalhando duro.</speech>
        </speeches>
        <speeches id="3">
            <speech>OK, OK... eu perdi. Talvez eu continue trabalhando duro.</speech>
        </speeches>
        <speeches id="4">
            <speech>O chamado talento não é mais do que uma ilusão... Os esforços próprios são tudo o que é real.</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>A minha mulher me deixou... Acho que a culpa é toda minha...</speech>
        </speeches>
        <speeches id="2">
            <speech>Fiquei muito viciado em batalhas de Pokémon e, por isso, não fazia nada em casa.</speech>
        </speeches>
        <speeches id="3">
            <speech>Fiquei muito viciado em batalhas de Pokémon e, por isso, não fazia nada em casa.</speech>
        </speeches>
        <speeches id="4">
            <speech>Agora não há ninguém me incomodando com as coisas, então posso batalhar o quanto quiser!</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>Já nos conhecemos ou não? Eu realmente não me lembro. Bem, acho que é um prazer conhecê-lo de qualquer forma!</speech>
        </speeches>
        <speeches id="2">
            <speech>De jeito nenhum... DE JEITO NENHUM! Como eu poderia perder de novo...</speech>
        </speeches>
        <speeches id="3">
            <speech>De jeito nenhum... DE JEITO NENHUM! Como eu poderia perder de novo...</speech>
        </speeches>
        <speeches id="4">
            <speech>Oba, oba, oba! Eu consegui! Ganhei de novo!</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>Estou aqui para me bronzear. O calor da batalha pode acelerar o processo ;)
</speech>
        </speeches>
        <speeches id="2">
            <speech>Deveria ter ficado em casa e usado um spray.</speech>
        </speeches>
        <speeches id="3">
            <speech>Deveria ter ficado em casa e usado um spray.</speech>
        </speeches>
        <speeches id="4">
            <speech>Não estou bonita?</speech>
        </speeches>
    </conversation>
</npcs>