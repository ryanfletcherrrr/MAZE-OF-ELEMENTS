<npc>

    <conversation id="1">
        <speeches id="1">
            <speech>Seus Pokémon parecem cansados. Gostaria que eu os curasse?</speech>
        </speeches>
        <speeches id="2">
            <speech>Aí está, todos saudáveis e felizes!</speech>
        </speeches>
        <speeches id="3">
            <speech>Tenho certeza de que eles gostariam de ter descansado.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ah, eu só posso curar seu Pokémon se você tiver uma assinatura do PBO. Você pode comprar uma na loja de doadores.</speech>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>Dragonite......!!</speech>
        </speeches>
        <speeches id="2">
            <speech>Dragão... Drag Drag...!!!</speech>
        </speeches>
        <speeches id="3">
            <speech>*Dragoniteeeee*.</speech>
        </speeches>
        <speeches id="4">
            <speech>Dragão!!! Drago Nite!!!</speech>
        </speeches>
        <speeches id="5">
            <speech>*A dragonita parece não ter reconhecido você ainda.</speech>
        </speeches>
    </conversation>

    <conversation id="7">
        <speeches id="1">
            <speech>Você de novo? Chegou um pouco tarde demais.</speech>
            <speech>Você não vê que minha Isis está comigo novamente?</speech>
            <speech>Não vou deixar que você estrague meu momento.</speech>
            <speech>Horus, acabe com esse pirralho de uma vez por todas.</speech>
            <speech>Preciso afastar minha amada Isis de seu animal de estimação Rayquaza, pois ele está fora de controle.</speech>
        </speeches>
        <speeches id="2">
            <speech>É assim que você me paga?</speech>
            <speech>Você é o meu pior erro, e agora sofrerão juntos como uma família.</speech>
        </speeches>
        <speeches id="3">
            <speech>Ha Ha Ha! Eu peguei você do lixo e fiz de você o que você é.</speech>
            <speech>Não há nada de especial em você ou em sua família. Deixe-me mostrar a você quem eu sou.</speech>
            <speech>Muito bem, garoto, vamos lá!</speech>
        </speeches>
        <speeches id="4">
            <speech>Você venceu contra mim! Mas não me importo, porque agora tenho minha esposa comigo.</speech>
            <speech>Isis, meu amor, vamos lá.</speech>
        </speeches>
        <speeches id="5">
            <speech>Ela não parece estar em seu juízo neste momento.</speech>
            <speech>Acho que Ho-Oh é melhor em ressuscitar Pokémon do que humanos, mas vou amar minha esposa mesmo assim.</speech>
            <speech>Agora vamos sair daqui, Isis... vamos para um lugar onde eles nunca nos encontrarão e isso está prestes a explodir.</speech>
        </speeches>
    </conversation>

    <conversation id="14">
        <speeches id="1">
            <speech>Não, sou grato por tudo o que você fez por mim.</speech>
            <speech>Mas isso está indo longe demais, e eles vão destruir este lugar se não fizermos nada.</speech>
            <speech>$PLAYER_NAME, lute contra Osiris enquanto eu libero Suicune, Raikou e Entei.</speech>
        </speeches>
        <speeches id="2">
            <speech>Boa sorte com isso, Osiris.</speech>
            <speech>Sou irmão de $PLAYER_NAME e sei que $GENDER_HE_SHE conseguirá cuidar de você sozinho.</speech>
        </speeches>
    </conversation>

    <conversation id="15">
        <speeches id="1">
            <speech>Grrr... Grrr...</speech>
        </speeches>
        <speeches id="2">
            <speech>Grrr... Grrr...</speech>
        </speeches>
    </conversation>

    <conversation id="16">
        <speeches id="1">
            <speech>$PLAYER_NAME. Sei que não conseguimos deter totalmente o Osiris, mas essa batalha foi intensa.</speech>
            <speech>Eu nunca poderia ter aceitado que meu verdadeiro $BROTHER_SISTER fosse tão forte.</speech>
            <speech>Além disso, a torre está prestes a desabar.</speech>
            <speech>O Ho-Oh não é capaz de se manter contra esse Rayquaza.</speech>
            <speech>Precisamos derrotar esse Rayquaza antes que ele destrua tudo, inclusive o Ho-Oh.</speech>
            <speech>Sim, eu vou ajudar a limpar a Dragon Tower, mas, enquanto isso, conto com você para derrotar o Rayquaza.</speech>
            <speech>Eu o verei lá fora.</speech>
        </speeches>
    </conversation>

    <conversation id="17">
        <speeches id="1">
            <speech>QUAAAAAAA..........</speech>
        </speeches>
        <speeches id="2">
            <speech>QUAAAAAAA..........</speech>
        </speeches>
        <speeches id="3">
            <speech>QUAAAAAAA..........</speech>
        </speeches>
    </conversation>

    <conversation id="18">
        <speeches id="1">
            <speech>No topo da Torre do Dragão, onde apenas os corajosos se atrevem a subir. Você certamente ganhou meu respeito.</speech>
            <speech>Minha Altaria voa acima, dominando os céus. Vamos ver se sua equipe consegue igualar as alturas que alcançamos.</speech>
        </speeches>
        <speeches id="2">
            <speech>Derrotado novamente! Seu domínio dos dragões, incluindo Kingdra e Altaria, é realmente notável.</speech>
            <speech>Mas a jornada de um Mestre dos Dragões nunca termina. Há mais um desafio que tenho para você.</speech>
            <speech>Sua vitória chega tão alto quanto as nuvens. Essa batalha será um vento orientador para seus desafios futuros.</speech>
            <speech>Encontre-me onde os meteoros tocam a terra e o rugido dos dragões ecoa pelas cataratas. Nosso teste final nos aguarda.</speech>
        </speeches>
        <speeches id="3">
            <speech>Recuando? As lições do vento são duras, mas necessárias. Volte quando estiver pronto para voar.</speech>
            <speech>Seu Kingdra e Altaria devem ser como um só com o vento. É nesse momento que você realmente entenderá.</speech>
        </speeches>
        <speeches id="4">
            <speech>Os ventos sussurram histórias de força não testada. Sua jornada conosco ainda não está completa.</speech>
            <speech>Quando estiver pronto, retorne a essas alturas, onde os espíritos dos dragões se elevam e nos desafiam novamente.</speech>
        </speeches>
        <speeches id="5">
            <speech>Para conquistar os céus, o vínculo com sua Altaria e Kingdra é essencial. No entanto, mais um aliado o aguarda para completar nossa história.</speech>
            <speech>Busque o lugar onde a terra encontra os céus e o grito dos dragões ressoa. Só então sua provação estará completa.</speech>
        </speeches>
    </conversation>

</npc>