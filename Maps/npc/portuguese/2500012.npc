<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>{COLOR=YELLOW}Por favor, selecione um andar.{ENDCOLOR}</speech>
            <speech>Os botões aguardam sua entrada, prontos para levá-lo aonde você precisa.</speech>
        </speeches>
        <speeches id="2">
            <speech>{O console do elevador se fecha com um clique suave.</speech>
            <speech>Você precisará ativá-lo novamente se quiser usá-lo.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>{A porta está trancada. Talvez seja necessário um cartão-chave especial.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>{A porta está trancada. Talvez seja necessário um cartão-chave especial.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>{A porta está trancada. Talvez seja necessário um cartão-chave especial.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>{A porta está trancada. Talvez seja necessário um cartão-chave especial.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>{A porta está trancada. Talvez seja necessário um cartão-chave especial.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>{A porta está trancada. Talvez seja necessário um cartão-chave especial.</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="8">
        <speeches id="1">
            <speech>Por que você ficou com $PLAYER_NAME? Hahaha! Achei que você apareceria se eu esperasse aqui! Acho que a Equipe Rocket o atrasou!</speech>
            <speech>Não que eu me importe! Eu o vi no Saffron, então decidi ver se você melhorou!</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh-oh! Então, você está pronto para o Boss Rocket!</speech>
            <speech>Bem, $PLAYER_NAME! Estou subindo e seguindo em frente!</speech>
            <speech>Ao verificar meu Pokédex, estou começando a ver o que é forte e como eles evoluem!</speech>
            <speech>Estou indo para a Liga Pokémon para expulsar a Elite Four!</speech>
            <speech>Eu me tornarei o treinador mais poderoso do mundo! $PLAYER_NAME, boa sorte para você! Não se preocupe com isso! Cheire você!
            </speech>
        </speeches>
        <speeches id="3"/>
        <speeches id="4">
            <speech>Como posso dizer isso? Você não é bom o suficiente para jogar com nós, garotos grandes!</speech>
        </speeches>
        <speeches id="5"/>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>Acabei de entrar para a Equipe Rocket e já estou esmagando os intrusos! Você é o próximo!</speech>
        </speeches>
        <speeches id="2">
            <speech>Espere, espere, isso não deveria ter acontecido!</speech>
        </speeches>
        <speeches id="3">
            <speech>Espere, espere, isso não deveria ter acontecido!</speech>
        </speeches>
        <speeches id="4">
            <speech>Hah! Talvez eu já devesse ter sido promovido!</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>As batalhas nada mais são do que equações. E eu nunca resolvo o fracasso.</speech>
        </speeches>
        <speeches id="2">
            <speech>Recalculando... Essa variável não foi contabilizada.</speech>
        </speeches>
        <speeches id="3">
            <speech>Recalculando... Essa variável não foi contabilizada.</speech>
        </speeches>
        <speeches id="4">
            <speech>Resultado esperado alcançado. Agora, vá embora.</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>Garoto, eu estou na Equipe Rocket há mais tempo do que você é um Treinador. Você não tem a menor chance!</speech>
        </speeches>
        <speeches id="2">
            <speech>Hmph... Talvez eu esteja ficando enferrujado...</speech>
        </speeches>
        <speeches id="3">
            <speech>Hmph... Talvez eu esteja ficando enferrujado...</speech>
        </speeches>
        <speeches id="4">
            <speech>A experiência vence as batalhas, não a sorte. Volte quando tiver aprendido alguma coisa.</speech>
        </speeches>
    </conversation>
    <conversation id="12">
        <speeches id="1">
            <speech>...Você deveria ter voltado atrás enquanto tinha a chance.</speech>
        </speeches>
        <speeches id="2">
            <speech>Tch... Não importa. Isso não muda nada.</speech>
        </speeches>
        <speeches id="3">
            <speech>Tch... Não importa. Isso não muda nada.</speech>
        </speeches>
        <speeches id="4">
            <speech>Fique abaixado. Você só está perdendo tempo.</speech>
        </speeches>
    </conversation>
    <conversation id="13">
        <speeches id="1">
            <speech>O mundo teme o que não entende... e em breve, eles terão medo de mim!</speech>
        </speeches>
        <speeches id="2">
            <speech>Não! Minha pesquisa... está arruinada!</speech>
        </speeches>
        <speeches id="3">
            <speech>Não! Minha pesquisa... está arruinada!</speech>
        </speeches>
        <speeches id="4">
            <speech>A ciência avança, enquanto você é deixado para trás!</speech>
        </speeches>
    </conversation>
    <conversation id="14">
        <speeches id="1">
            <speech>Oh, meu Deus! Parece que sua festa {COLOR=RED} está lotada{ENDCOLOR} e suas caixas de PCs {COLOR=BLUE} estão completamente embaladas{ENDCOLOR}!</speech>
            <speech>Sou a Dra. Marina, {COLOR=CYAN}pesquisadora sênior{ENDCOLOR} da Divisão de Combate Aquático da Silph Co.</speech>
            <speech>Tenho um Basulegion{ENDCOLOR} muito especial que gostaria de lhe dar - é um tipo raro de {COLOR=GRAY}Ghost/Water{ENDCOLOR} com incrível {COLOR=RED}potencial de batalha{ENDCOLOR}!</speech>
            <speech>Mas primeiro você precisará criar algum espaço {COLOR=GREEN} em seu grupo ou PC{ENDCOLOR}!</speech>
            <speech>Volte quando tiver espaço - este {COLOR=PURPLE}Basculegion{ENDCOLOR} é um {COLOR=GOLD}valioso ativo corporativo{ENDCOLOR}!</speech>
        </speeches>
        <speeches id="2">
            <speech>Na hora certa! Sou a Dra. Marina e supervisiono a {COLOR=CYAN}armamento aquático avançado{ENDCOLOR} aqui na Silph Co.</speech>
            <speech>Estou desenvolvendo aplicativos de combate para esse {COLOR=PURPLE}Basculegion{ENDCOLOR} - um tipo {COLOR=GRAY}Ghost/Water{ENDCOLOR} com {COLOR=RED}potencial devastador{ENDCOLOR}!</speech>
            <speech>Esse espécime evoluiu por meio de {COLOR=RED}traumas intensos de batalha{ENDCOLOR} - as almas caídas criam {COLOR=PURPLE}poder sobrenatural{ENDCOLOR}!</speech>
            <speech>Os espíritos vingativos lhe concedem {COLOR=GRAY}habilidades de faseamento{ENDCOLOR} e {COLOR=CYAN}controle hidrocinético{ENDCOLOR} sobre escolas inteiras!</speech>
            <speech>Nossa diretoria quer dados de campo sobre seu desempenho. Você aceitaria essa parceria corporativa {COLOR=GOLD}{ENDCOLOR}?</speech>
        </speeches>
        <speeches id="3">
            <speech>A hesitação é compreensível - a {COLOR=PURPLE}Basculegion{ENDCOLOR} carrega as {COLOR=GRAY}almas dos derrotados{ENDCOLOR}...</speech>
            <speech>Mas pense na vantagem estratégica {COLOR=GOLD}{ENDCOLOR}! Estamos oferecendo esse poder de nível corporativo!</speech>
        </speeches>
        <speeches id="4">
            <speech>{Excelente decisão! A Silph Co. está confiando a você nosso {COLOR=PURPLE}protótipo de unidade de batalha{ENDCOLOR}!</speech>
            <speech>Esse {COLOR=PURPLE}Basculegion{ENDCOLOR} foi {COLOR=RED}aprimorado{ENDCOLOR} por meio de nossos protocolos de treinamento corporativo!</speech>
            <speech>Sua {COLOR=GRAY}fase espectral{ENDCOLOR} e {COLOR=CYAN}dominância aquática{ENDCOLOR} fazem dele uma arma {COLOR=RED}formidável{ENDCOLOR}!</speech>
            <speech>Use-o com sabedoria - a Silph Co. espera {COLOR=GOLD}resultados impressionantes{ENDCOLOR} de nosso investimento!</speech>
            <speech>Lembre-se de que o Basculegion pode se infiltrar em qualquer defesa baseada na água e comandar exércitos marinhos!</speech>
            <speech>Deixe nossa corporação orgulhosa com seu novo {COLOR=PURPLE}tactical asset{ENDCOLOR}!</speech>
        </speeches>
        <speeches id="5">
            <speech>Acredito que a {COLOR=PURPLE}Basculegion{ENDCOLOR} está provando seu {COLOR=RED}valor corporativo{ENDCOLOR} no campo!</speech>
            <speech>Esse foi o nosso único protótipo pronto para o campo - a Silph Co. está contando com o seu sucesso!</speech>
        </speeches>
    </conversation>
    <conversation id="15">
        <speeches id="1">
            <speech>Você chegou até aqui? {Notável{ENDCOLOR}... mas também {COLOR=PURPLE} tolo{ENDCOLOR}.</speech>
            <speech>Eu sou {COLOR=RED}Elite Grunt Lex{ENDCOLOR} - especialista em {COLOR=PURPLE}manipulação dimensional{ENDCOLOR} e {COLOR=GOLD}força esmagadora{ENDCOLOR}!</speech>
            <speech>Minhas táticas de {COLOR=PURPLE}Trick Room{ENDCOLOR} vão virar a velocidade contra você - quanto mais lento {COLOR=RED}, mais morto{ENDCOLOR}!</speech>
            <speech>Com a {COLOR=PURPLE}Tera Energy{ENDCOLOR} amplificando minhas varreduras, eu o esmagarei em um {COLOR=RED}único turno devastador{ENDCOLOR}!</speech>
        </speeches>
        <speeches id="2">
            <speech>Impossível! Minha {COLOR=PURPLE}Trick Room{ENDCOLOR} estava perfeitamente calibrada...</speech>
            <speech>Nem mesmo meus {COLOR=RED}mais poderosos{ENDCOLOR} {COLOR=PURPLE}Tera-enhanced{ENDCOLOR} sweepers não conseguiram passar!</speech>
            <speech>Vocês interromperam nossa pesquisa {COLOR=GOLD}dimensional{ENDCOLOR}, mas isso está longe de terminar!</speech>
            <speech>A {COLOR=RED}verdadeira mente mestra{ENDCOLOR} do {COLOR=GOLD}Project T.E.R.A.{ENDCOLOR} espera por você acima... Boa sorte ao sobreviver {COLOR=PURPLE}a isso{ENDCOLOR}!</speech>
        </speeches>
        <speeches id="3">
            <speech>Meus {COLOR=PURPLE}Geradores de sala de truques{ENDCOLOR} estão completamente fritados... Os campos dimensionais entraram em colapso.</speech>
            <speech>Você atrasou em meses nossa pesquisa de manipulação do espaço-tempo {COLOR=GOLD}{ENDCOLOR}!</speech>
            <speech>Mas destruir nossas {COLOR=RED}operações inferiores{ENDCOLOR} não significa nada... O {COLOR=PURPLE}final boss{ENDCOLOR} lhe mostrará o {COLOR=GOLD}verdadeiro poder{ENDCOLOR}!</speech>
        </speeches>
        <speeches id="4">
            <speech>Perfeito! Minha estratégia {COLOR=PURPLE}dimensional{ENDCOLOR} funcionou perfeitamente!</speech>
            <speech>Quando a {COLOR=RED}potência bruta{ENDCOLOR} encontra a {COLOR=PURPLE}Tera Energy{ENDCOLOR}, até os treinadores mais fortes caem!</speech>
            <speech>Sua derrota fornecerá dados valiosos para nossos {COLOR=GOLD}protocolos de aprimoramento ofensivo{ENDCOLOR}!</speech>
        </speeches>
        <speeches id="5"/>
    </conversation>
</npcs>