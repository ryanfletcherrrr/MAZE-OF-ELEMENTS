<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Meus amigos e eu estamos participando de um evento em que tentamos fugir daqui!</speech>
        </speeches>
        <speeches id="2">
            <speech>Muito bem! Agora posso fugir!</speech>
        </speeches>
        <speeches id="3">
            <speech>Incrível! Volte em $DURATION e teremos outra batalha épica de fuga!</speech>
        </speeches>
        <speeches id="4">
            <speech>O quê? Eu ganhei? Então não podemos escapar!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Tenho uma política rígida com relação ao meu penteado. É a minha vida inteira, por isso fico muito animada com isso.</speech>
        </speeches>
        <speeches id="2">
            <speech>Estou tendo um dia de cabelo ruim, então não há nada que eu pudesse ter feito.</speech>
        </speeches>
        <speeches id="3">
            <speech>Não foi meu melhor dia de cabelo, não é? Volte em $DURATION e veja o verdadeiro poder do meu penteado!</speech>
        </speeches>
        <speeches id="4">
            <speech>Quando meu penteado está bem definido, fico muito animada!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Que bom... Você ainda é uma criança... Gostaria de poder voltar atrás...</speech>
        </speeches>
        <speeches id="2">
            <speech>Eu era tão inocente naquela época... Para onde foi aquela garota?</speech>
        </speeches>
        <speeches id="3">
            <speech>Ah, aqueles dias de juventude... Talvez em $DURATION, eu me lembre novamente em nossa próxima batalha!</speech>
        </speeches>
        <speeches id="4">
            <speech>Tornei-me um adulto cínico e, por isso, faço trapaças até mesmo durante as batalhas.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Heheh... Estou vendo tudo claramente... Você é um médico de um planeta maligno, não é?</speech>
        </speeches>
        <speeches id="2">
            <speech>Eh... ondas de rádio... Há ondas de rádio saindo de seu nariz...</speech>
        </speeches>
        <speeches id="3">
            <speech>Ondas de rádio, você diz? Bem, em $DURATION, meus poderes podem decifrá-las. Então, retorne!</speech>
        </speeches>
        <speeches id="4">
            <speech>Ugh... Meus poderes... Meus poderes são... Acho que preciso de uma enfermeira...</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Desculpe, amigo. Não é nada pessoal, mas estou prestes a fazer todo tipo de loucura com seu Pokémon!</speech>
        </speeches>
        <speeches id="2">
            <speech>Arghhh! Seu pequeno! Isso dói. Mas, bem, é assim que acontece, certo?</speech>
        </speeches>
        <speeches id="3">
            <speech>Uau, essa é difícil! Dê-me $DURATION, e estarei pronto para outra rodada selvagem!</speech>
        </speeches>
        <speeches id="4">
            <speech>Erro meu, erro meu! Um pouco demais para você, não? Mas não se pode puxar os socos em uma briga, certo?</speech>
        </speeches>
    </conversation>

    <conversation id="6">
        <speeches id="1">
            <speech>Meu nome é Mike e sou o proprietário desta casa.</speech>
            <speech>Adoro ver batalhas de Pokémon.</speech>
            <speech>Mostre-me alguns fósforos quentes! Eu dirijo a Seashore House apenas por esse motivo!</speech>
        </speeches>
        <speeches id="2">
            <speech>Essas batalhas foram muito intensas!</speech>
            <speech>Aceite isso como recompensa por ter me mostrado esses jogos quentes.</speech>
        </speeches>
        <speeches id="3">
            <speech>O quê? Você não está sentindo o calor?</speech>
        </speeches>
        <speeches id="4">
            <speech>Aqui está! Aproveite!</speech>
        </speeches>
        <speeches id="5">
            <speech>Volte amanhã e eu o recompensarei novamente por essas batalhas incríveis!</speech>
        </speeches>
    </conversation>
</npcs>