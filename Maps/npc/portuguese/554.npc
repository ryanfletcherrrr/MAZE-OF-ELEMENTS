<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Vocês não vão se safar dessa, Equipe Galáctica!</speech>
        </speeches>
        <speeches id="2">
            <speech>... ... Sim, é isso mesmo! Eu não poderia fazer nada contra a Equipe Galáctica!</speech>
            <speech>Aquele Pokémon chamado Uxie... Ele estava sofrendo...</speech>
            <speech>Vou me tornar mais duro... Não se trata de ganhar ou perder... Isso não é bom o suficiente...</speech>
            <speech>Tenho que ser mais forte... Não basta apenas querer ser o Treinador mais poderoso de todos os tempos...</speech>
            <speech>É preciso um esforço honesto... E um coração determinado.</speech>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>Oh? Você já terminou? Seus Pokémon não são ruins, mas você é ridiculamente fraco.</speech>
            <speech>Você realmente pensou que poderia salvar os Pokémon do lago? E se tornar o Campeão Pokémon?</speech>
            <speech>Vai sonhando, garotinho. Mas, eca, está tão frio aqui.</speech>
            <speech>Vamos voltar para a sede da Veilstone.</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh? Eu não o conheço? Nós nos conhecemos em Eterna City.</speech>
            <speech>Ouça. A Equipe Galáctica vai fazer algo grandioso para o bem de todos.</speech>
            <speech>É por isso que você deve ficar fora do caminho da Equipe Galáctica.</speech>
            <speech>Não venha se queixar de Pokémon ruins e outras coisas triviais como essas.</speech>
            <speech>Não perca seu tempo vindo ao nosso QG em Veilstone. Agora, se você me der licença.</speech>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>J'enchante ma vie, I bid you bonjour! Quer trocar seu Clamperl pelo meu [Pokémon Comerciante]? Pingar, Pingar, Gota.</speech>
        </speeches>
        <speeches id="2">
            <speech>O que é isso, o que são essas manobras? Estou indo embora agora. Pingo, pingo, pingo. Vou levar a chuva comigo.</speech>
        </speeches>
        <speeches id="3">
            <speech>Obrigado por seu Clamperl, eu o adoro. Gotejamento, gotejamento, gotejamento. Desejo a você o melhor com seu Corpish.</speech>
        </speeches>
        <speeches id="4">
            <speech>Pingar, Pingar, Gota. Noelle é a mulher da chuva. A chuva está sempre comigo, e que tipo de pessoa você é?</speech>
            <speech>Pingar, Pingar, Gota. Meu Corpish seria uma ótima adição à sua equipe, mas hoje não está chuvoso o suficiente para negociar.</speech>
            <speech>Volte no próximo dia 28 do mês com um Clamperl, nível 40 ou superior, para trocar pelo meu Corpish!</speech>
            <speech>Só aceitarei um Clamperl, e não adquirido por meio de uma troca. Portanto, certifique-se de que o Clamperl seja capturado por você.</speech>
        </speeches>
        <speeches id="5">
            <speech>Pingar, Pingar, Gota. Noelle é a mulher da chuva. A chuva está sempre comigo, e que tipo de pessoa você é?</speech>
            <speech>Gotejamento, gotejamento, gotejamento. My Corpish seria um ótimo complemento para a sua equipe.</speech>
            <speech>Hoje é o 28º dia do mês, suficientemente chuvoso para negociar, mas há outro problema.</speech>
            <speech>Volte no próximo dia 7 do mês com um Clamperl, nível 40 ou superior, para trocar pelo meu Corpish!</speech>
        </speeches>
    </conversation>

    <conversation id="4">
        <speeches id="1">
            <speech>Lass Lass... FROOSS</speech>
            <speech>*O capuchinho parece estar apontando para o Tentacruel na frente da caverna.</speech>
            <speech>*Parece que está tentando ir para a caverna com seu amigo Mismagius, mas está com medo do Tentacruel.</speech>
        </speeches>

        <speeches id="2">
            <speech>Lasss :* :*</speech>
            <speech>*O Próspero está nos convidando para a caverna.</speech>
            <speech>*Você quer aceitar o convite?</speech>
        </speeches>

        <speeches id="3">
            <speech>...</speech>
            <speech>*O burro de carga está triste porque você rejeitou o convite.</speech>
        </speeches>

        <speeches id="4">
            <speech>Froslass!!! :) :)</speech>
            <speech>*O Grumete parece estar feliz e foi para a caverna.</speech>
        </speeches>
    </conversation>

    <conversation id="5">
        <speeches id="1">
            <speech/>
        </speeches>
        <speeches id="2">
            <speech>TENTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</speech>
        </speeches>
        <speeches id="3">
            <speech>TENTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</speech>
        </speeches>
        <speeches id="4">
            <speech>TENTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</speech>
        </speeches>
        <speeches id="5">
            <speech>TENTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</speech>
        </speeches>
    </conversation>

    <conversation id="6">
        <speeches id="1">
            <speech>Seus Pokémon parecem cansados. Gostaria que eu os curasse?</speech>
        </speeches>
        <speeches id="2">
            <speech>Aí está, todos saudáveis e felizes!</speech>
        </speeches>
        <speeches id="3">
            <speech>Tenho certeza de que eles gostariam de ter descansado.</speech>
        </speeches>
    </conversation>

    <conversation canSkip="false" id="7">
        <speeches id="1">
            <!-- Before Battle Speech -->
            <speech>Ah, é você de novo? Tenho ouvido falar de sua pequena sequência. Uma sequência de 120 vitórias na Battle Tower, certo?</speech>
            <speech>Impressionante para uma criança, mas vamos ver como você se sai em um desafio real. Não vou me conter!</speech>
            <speech>Escolha seu nível de batalha. Lembre-se de que, na Team Galactic, não fazemos as coisas pela metade.</speech>
        </speeches>
        <speeches id="2">
            <!-- Victory Speech -->
            <speech>Derrotado por você? Isso deve ser algum tipo de piada! Os Comandantes da Equipe Galáctica não perdem para crianças!</speech>
            <speech>Isso não acontecerá novamente. Da próxima vez, você testemunhará o verdadeiro poder da Equipe Galactic. É só esperar!</speech>
        </speeches>
        <speeches id="3">
            <!-- Not Battling Speech -->
            <speech>Está tentando me desafiar agora? Você deve estar brincando. Ainda não estou pronto para você.</speech>
            <speech>Volte depois de $DURATION. Use esse tempo para pensar sobre o que significa se opor à Equipe Galáctica.</speech>
        </speeches>
        <speeches id="4">
            <!-- Loss Speech -->
            <speech>Então, você conseguiu se destacar dessa vez. Não pense que isso o torna superior.</speech>
            <speech>Você tem um longo caminho a percorrer antes de poder realmente desafiar a Equipe Galáctica. A próxima vez não será tão fácil.</speech>
        </speeches>
        <speeches id="5">
            <!-- Before Criteria Speech -->
            <speech>Uma sequência de 120 vitórias na [GOLD]Battle Tower[]? Você ainda não conseguiu isso? Patético.</speech>
            <speech>Volte quando for mais do que apenas um incômodo. A Equipe Galáctica não tem tempo para fracos.</speech>
        </speeches>
    </conversation>
</npcs>