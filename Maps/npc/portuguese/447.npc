<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>O quê?</speech>
            <speech>$PLAYER_NAME? Então, nos encontramos novamente. Como tem sido?</speech>
            <speech>Você tem usado a Mega Bracelete com sabedoria?</speech>
            <speech>Mas acho que não preciso nem perguntar. Não quando se trata de você e sua equipe.</speech>
            <speech>Eu me pergunto... Você notou? Hm? Há algo aqui que você não consegue ver.</speech>
            <speech>Agora, se eu usar esse dispositivo no obstáculo invisível, ele desbloqueará o caminho.</speech>
            <speech>Sim, é um Pokémon que estava bloqueando o caminho.</speech>
            <speech>Permita-me atualizar o Devon Scope e você não terá mais problemas com obstáculos ocultos.
            </speech>
            <speech>Vamos nos encontrar novamente algum dia.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Não é seguro viajar para mais longe, garoto.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>E aí? Para onde você acha que está voando?</speech>
            <speech>Você ainda não tem asas para ir mais longe! Volte para trás!</speech>
            <speech>Agora!!!</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Wingull" shouldSleep="" speed="1" sprite="278" type="pokemon" x="43" y="70">
        <path>DOWNx4, UPx4, LEFTx4, RIGHTx4</path>
        <onCollisionSpeech gap="4"/>
        <speech>Peeko!</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="3" name="Richard" randomRotation="true" sprite="5" x="46" y="8">
        <speech>Você sabia que a Região de Hoenn foi a primeira região a realmente usar os Berries como são usados hoje?</speech>
        <speech>A região de Johto é amplamente considerada como a primeira região a usar ativamente as bagas em uma batalha ativa, mas Hoenn foi a primeira a realmente refinar a técnica.</speech>
        <speech>É uma das coisas que tornam nossa casa única!</speech>
    </npc>
    <movingNpc direction="LEFT" id="4" name="Loralina" shouldSleep="" speed="1" sprite="22" type="npc" x="24" y="21">
        <path>LEFTx2, RIGHTx2, UPx1, DOWNx1</path>
        <onCollisionSpeech gap="4"/>
        <speech>Talvez você tenha... talvez não tenha?</speech>
        <speech>O que é isso? Do que estou falando?</speech>
        <speech>Simplesmente bobo! Estou falando do seu Pokémon!</speech>
        <speech>Ainda não está entendendo o que quero dizer? É fácil...</speech>
        <speech>Você nada em seu Pokémon, eu nado com minhas mãos, se os papéis fossem invertidos...</speech>
        <speech>Você não estaria me questionando também?</speech>
        <speech>Poucas pessoas têm a confiança e a habilidade de nadar usando seus Pokémon.</speech>
        <speech>Por isso, treinamos tanto!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="6" name="Wailmer" shouldSleep="" speed="1" sprite="320" type="pokemon" x="3" y="81">
        <path>LEFTx2, RIGHTx2</path>
        <onCollisionSpeech gap="4"/>
        <speech>RAWR</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="9" name="Parasol Lady Katrina" randomRotation="false" sprite="27" x="11" y="7">
        <speech>Adoro o clima daqui, às vezes está ensolarado, às vezes não. Mas é sempre um bom dia para carregar um guarda-sol por aí!</speech>
    </npc>
    <movingNpc direction="RIGHT" id="10" name="Feebas" speed="1" sprite="349" type="pokemon" x="45" y="75">
        <path>RIGHTx2, LEFTx6, RIGHTx4</path>
        <onCollisionSpeech gap="4">Feebas!</onCollisionSpeech>
        <speech>Feeb-as!</speech>
    </movingNpc>
    <npc direction="LEFT" hidden="false" id="11" name="Fire Starter Brand" randomRotation="false" sprite="52" x="41" y="93">
        <speech>Vou criar um belo inferno com meu Combusken!</speech>
        <speech>Espera, o quê?</speech>
        <speech>Quer dizer que eu não deveria, com tantas árvores por perto?</speech>
        <speech>Confie em mim, sou um profissional.</speech>
        <speech>Além disso... Eu já tenho os registros configurados. Seria uma pena desperdiçá-los! Hahaha!</speech>
    </npc>
    <conversation id="5">
        <speeches id="1">
            <speech>Ah, você quer ver o Pokémon do qual mais me orgulho?</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh, meu Deus! Meu pobre Pokémon...</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh, meu Deus! Meu pobre Pokémon...</speech>
        </speeches>
        <speeches id="4">
            <speech>O que você acha do meu querido Pokémon? Ótimo, não é?</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Minha última batalha... É assim que eu gostaria que víssemos essa partida...</speech>
        </speeches>
        <speeches id="2">
            <speech>Foi muito divertido... Vamos ter outra última batalha novamente algum dia...</speech>
        </speeches>
        <speeches id="3">
            <speech>Foi muito divertido... Vamos ter outra última batalha novamente algum dia...</speech>
        </speeches>
        <speeches id="4">
            <speech>Um dia nos encontraremos novamente... Heh. Se isso fosse verdade...</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Sou uma celebridade nova-rica, portanto, sou mesquinho com meu dinheiro!</speech>
        </speeches>
        <speeches id="2">
            <speech>Perdi, mas não lhe darei o dinheiro do meu almoço!</speech>
        </speeches>
        <speeches id="3">
            <speech>Perdi, mas não lhe darei o dinheiro do meu almoço!</speech>
        </speeches>
        <speeches id="4">
            <speech>Infelizmente, você perdeu para mim. Agora, me dê o dinheiro do seu almoço!</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>De que tipo de Pokémon você gosta? Ei, vamos lá, me mostre!</speech>
        </speeches>
        <speeches id="2">
            <speech>Seu gosto por Pokémon é realmente horrível, mas você é um Treinador de primeira classe!</speech>
        </speeches>
        <speeches id="3">
            <speech>Seu gosto por Pokémon é realmente horrível, mas você é um Treinador de primeira classe!</speech>
        </speeches>
        <speeches id="4">
            <speech>Seu gosto por Pokémon é maravilhoso, mas você é uma decepção como Treinador.</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>Para me tornar um instrutor de primeira classe, fui obrigado a vir estudar no exterior aqui.</speech>
        </speeches>
        <speeches id="2">
            <speech>Estou com muita saudade de casa e não quero estudar...</speech>
        </speeches>
        <speeches id="3">
            <speech>Estou com muita saudade de casa e não quero estudar...</speech>
        </speeches>
        <speeches id="4">
            <speech>Posso aprender muito com as batalhas Pokémon neste país.</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>Ooh la la! Pequeno treinador! Flor graciosa! Vou cortá-la bem no caule!</speech>
        </speeches>
        <speeches id="2">
            <speech>Hmm, agora vou lhe contar um segredo! Deixei cair um doce raro aqui enquanto cultivava.</speech>
            <speech>Você consegue encontrá-lo?</speech>
        </speeches>
        <speeches id="3">
            <speech>Hmm, agora vou lhe contar um segredo! Deixei cair um doce raro aqui enquanto cultivava.</speech>
            <speech>Você consegue encontrá-lo?</speech>
        </speeches>
        <speeches id="4">
            <speech>N-não! Não tão rápido! Quero que você seja a flor premiada do meu jardim!</speech>
        </speeches>
    </conversation>
    <conversation id="12">
        <speeches id="1">
            <speech>Você parece bastante confiante. Vou afundá-lo imediatamente.</speech>
        </speeches>
        <speeches id="2">
            <speech>Sim... Você tem bons Pokémon... Os Pokémon devem estar felizes por serem criados por você...</speech>
        </speeches>
        <speeches id="3">
            <speech>Sim... Você tem bons Pokémon... Os Pokémon devem estar felizes por serem criados por você...</speech>
        </speeches>
        <speeches id="4">
            <speech>AAAH! Estou com muito medo! Nunca mais vou fazer isso de novo... Desculpe!</speech>
        </speeches>
    </conversation>
    <conversation id="14">
        <speeches id="1">
            <speech>Você não acha que é um pouco demais? Esse quimono? Mas, bem, só posso usá-lo enquanto ainda for jovem.</speech>
        </speeches>
        <speeches id="2">
            <speech>Você não acha que as senhoras idosas ficam muito bonitas em um furisode?</speech>
        </speeches>
        <speeches id="3">
            <speech>Você não acha que as senhoras idosas ficam muito bonitas em um furisode?</speech>
        </speeches>
        <speeches id="4">
            <speech>E, bem, acho que quando eu for mais velho... Esse tipo de roupa será muito incômodo!</speech>
        </speeches>
    </conversation>
    <conversation id="16">
        <speeches id="1">
            <speech>Oh, você parece animado! O que você acha de lutarmos?</speech>
        </speeches>
        <speeches id="2">
            <speech>Meu Deus, você é tão jovem! Meus parceiros ficaram arrasados!</speech>
        </speeches>
        <speeches id="3">
            <speech>Meu Deus, você é tão jovem! Meus parceiros ficaram arrasados!</speech>
        </speeches>
        <speeches id="4">
            <speech>OK! Já terminamos aqui! Como foram meus parceiros?</speech>
        </speeches>
    </conversation>
    <conversation id="18">
        <speeches id="1">
            <speech>Ei, você! Não mexa comigo, ou eu destruirei seu Pokémon!</speech>
        </speeches>
        <speeches id="2">
            <speech>Como eu poderia perder para um movimento tão fraco? Gaaahhh, isso me deixa muito irritado!</speech>
        </speeches>
        <speeches id="3">
            <speech>Como eu poderia perder para um movimento tão fraco? Gaaahhh, isso me deixa muito irritado!</speech>
        </speeches>
        <speeches id="4">
            <speech>Pensei que você poderia causar problemas para mim, mas que ataque fraco!</speech>
        </speeches>
    </conversation>
    <conversation id="19">
        <speeches id="1">
            <speech>Fico mais forte a cada lágrima que choro.</speech>
        </speeches>
        <speeches id="2">
            <speech>Agora posso ficar ainda mais forte. Eu cresço com cada rancor.</speech>
        </speeches>
        <speeches id="3">
            <speech>Agora posso ficar ainda mais forte. Eu cresço com cada rancor.</speech>
        </speeches>
        <speeches id="4">
            <speech>Não se prenda à tristeza ou à frustração. Você pode usar seus ressentimentos para se motivar.</speech>
        </speeches>
    </conversation>
    <conversation id="20">
        <speeches id="1">
            <speech>Não há nada a fazer a não ser lutar... Por nós...</speech>
        </speeches>
        <speeches id="2">
            <speech>Fico imaginando se poderíamos ter sido amigos se tivéssemos nos conhecido em um mundo sem batalhas...</speech>
        </speeches>
        <speeches id="3">
            <speech>Fico imaginando se poderíamos ter sido amigos se tivéssemos nos conhecido em um mundo sem batalhas...</speech>
        </speeches>
        <speeches id="4">
            <speech>Esse resultado... não é o que eu esperava...</speech>
        </speeches>
    </conversation>
    <conversation id="21">
        <speeches id="1">
            <speech>O quê? O quê? Uma batalha? Está na hora de dar tudo de si!</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh! Você se saiu muito bem, não foi? Você é melhor do que eu pensava!</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh! Você se saiu muito bem, não foi? Você é melhor do que eu pensava!</speech>
        </speeches>
        <speeches id="4">
            <speech>Terrível! Você está extremamente despreparado! Volte quando tiver aprendido a lançar uma Pokébola!</speech>
        </speeches>
    </conversation>
    <conversation id="22">
        <speeches id="1">
            <speech>Ei, não seja tão convencido! As batalhas podem ser deixadas por conta do destino!</speech>
        </speeches>
        <speeches id="2">
            <speech>Que sorte a sua! Espero que você também tenha se divertido.</speech>
        </speeches>
        <speeches id="3">
            <speech>Que sorte a sua! Espero que você também tenha se divertido.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ganhar, perder no final, é tudo sorte. Mas se for divertido, isso não é suficiente?</speech>
        </speeches>
    </conversation>
    <conversation id="28">
        <speeches id="1">
            <speech>Bem-vindo, buscador de verdades. Eu sou [RED]Sage Eron[], o guardião de segredos há muito enterrados em Hoenn.</speech>
            <speech>Em tons abafados, os antigos falavam de [SKY]Regice[], [GRAY]Registeel[] e [ORANGE]Regirock[], entrelaçados com o destino de nosso mundo.</speech>
            <speech>Os sussurros falam de cavernas onde os ecos do passado permanecem, envoltos em enigmas, chamando os dignos.</speech>
            <speech>Aventure-se na [GREEN]Ironheart Cavern[], onde as batalhas de força são ofuscadas por batalhas de inteligência.</speech>
            <speech>Reúna relíquias perdidas no tempo, pois nelas está a chave para despertar verdades ocultas na sombra.</speech>
        </speeches>
        <speeches id="2">
            <speech>O véu do mistério cobre seu caminho, cada passo é uma súplica silenciosa aos ecos da antiguidade.</speech>
            <speech>No coração da [VERDE]Caverna do Coração de Ferro[], sussurros antigos aguardam, com seus segredos trancados em um julgamento silencioso.</speech>
            <speech>Deixe que a luz de sua coragem revele o que está oculto, pois a essência de Hoenn está ligada a esses guardiões.</speech>
            <speech>Eles não são meros titãs do elemento; são os pilares sobre os quais se apóiam as histórias de nossa terra.</speech>
            <speech>Caminhe com humildade. Suas descobertas ainda podem reescrever os anais de nossa história.</speech>
        </speeches>
    </conversation>
    <conversation id="29">
        <speeches id="1">
            <speech>Ah, você voltou da [VERDE]Caverna Coração de Ferro[]. Que histórias essas paredes antigas sussurram?</speech>
            <speech>Um [GOLD]Metal Coat[] lançado por Aggron, você diz? Fascinante, ele tem a essência de [GRAY]Registeel[].</speech>
            <speech>Essa descoberta, embora intrigante, é apenas uma peça de um quebra-cabeça maior.</speech>
            <speech>Sua jornada está longe de terminar. A geada da [AZUL]Caverna Frostvault[] o chama a seguir.</speech>
            <speech>Explore suas profundezas e retorne com todos os segredos que puder desvendar.</speech>
        </speeches>
        <speeches id="2">
            <speech>Antes de partir, lembre-se de que cada guardião representa uma provação, um desafio a ser compreendido.</speech>
            <speech>Em [BLUE]Frostvault Cavern[], busque não apenas a vitória, mas também uma visão do frio duradouro de [SKY]Regice[].</speech>
            <speech>Volte para mim depois de ter enfrentado suas garras geladas, pois seu caminho leva ainda mais fundo no mistério.</speech>
        </speeches>
    </conversation>
    <conversation id="30">
        <speeches id="1">
            <speech>O frio da [AZUL]Caverna Frostvault[] se agarra a você. O que você descobriu em seu abraço gelado?</speech>
            <speech>Um [CYAN]Never-Melt-Ice[], da Cryogonal? O silêncio gelado de [SKY]Regice[] fala através dele.</speech>
            <speech>No entanto, nossa busca não termina com esses sussurros de gelo e aço.</speech>
            <speech>A [LARANJA]Caverna Stonegrip[] no Deserto da Rota 111 está esperando por você. Que segredos ela guarda?</speech>
            <speech>Enfrente suas provações e retorne. Juntos, poderemos montar esse antigo quebra-cabeça.</speech>
        </speeches>
        <speeches id="2">
            <speech>Sua jornada percorre o coração dos mitos de Hoenn, desenterrando segredos há muito congelados no tempo.</speech>
            <speech>A [LARANJA]Stonegrip Cavern[] acena com o calor da terra antiga, desafiando-o a ouvir suas histórias silenciosas.</speech>
            <speech>Em suas profundezas, busque não apenas a conquista, mas os sussurros de [ORANGE]Regirock[], guardião da pedra.</speech>
            <speech>Que verdades estão enterradas sob as areias? Retorne com suas descobertas, pois elas são a chave para o nosso legado.</speech>
            <speech>Cada passo que você dá é um passo na história. Deixe que as histórias dos guardiões o guiem para a iluminação.</speech>
        </speeches>
    </conversation>
    <conversation id="31">
        <speeches id="1">
            <speech>As areias do tempo se movem sob seus pés. Que segredos a [ORANGE]Stonegrip Cavern[] revelou?</speech>
            <speech>Uma [BROWN]Hard Stone[], um remanescente de Garganacl. Ela zumbe com a essência de [LARANJA]Regirock[].</speech>
            <speech>Cada item que você descobre se aprofunda ainda mais no tecido das lendas de Hoenn.</speech>
            <speech>No entanto, o quebra-cabeça permanece incompleto. Uma verdade mais profunda sussurra, esperando para ser descoberta.</speech>
            <speech>Meu irmão, envolto em mistério, ocasionalmente visita o [CYAN]Pacifidlog Town[].</speech>
            <speech>Procure-o, ele pode ter descoberto algo.</speech>
        </speeches>
        <speeches id="2">
            <speech>Antes de partir, reflita sobre as provações dos guardiões. A essência deles é um farol que orienta seu caminho.</speech>
            <speech>A [CYAN]Pacifidlog Town[] pode abrigar meu irmão esquivo, um andarilho entre mundos, depois que você enfrentar a Elite Four.</speech>
            <speech>Ele também é atraído pela sabedoria dos guardiões e pode iluminar o caminho que está envolto diante de você.</speech>
            <speech>Leve a sabedoria dos guardiões como uma tocha para as sombras. É lá, na escuridão, que a verdade aguarda.</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="12" name="Oddish" shouldSleep="" speed="1" sprite="43" type="pokemon" x="11" y="22">
        <path>LEFTx2,DOWNx2,UPx2,RIGHTx2</path>
        <onCollisionSpeech gap="4">Oddish!</onCollisionSpeech>
        <speech>Estranho!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="13" name="Maril" shouldSleep="" speed="1" sprite="183" type="pokemon" x="23" y="33">
        <path>LEFTx4,UPx5,DOWNx5,RIGHTx4</path>
        <onCollisionSpeech gap="4">Maril!</onCollisionSpeech>
        <speech>Maril!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="14" name="Azumaril" shouldSleep="" speed="1" sprite="184" type="pokemon" x="34" y="21">
        <path>RIGHTx6,LEFTx6</path>
        <onCollisionSpeech gap="4">Azumaril!</onCollisionSpeech>
        <speech>Azuzu!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="15" name="Tropius" shouldSleep="" speed="1" sprite="357" type="pokemon" x="20" y="42">
        <path>UPx4,DOWNx4</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="16" name="Altaria" speed="1" sprite="334" type="pokemon" x="45" y="31">
        <path>UPx7,DOWNx7</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="17" name="Cacnea" shouldSleep="" speed="1" sprite="331" type="pokemon" x="52" y="20">
        <path>RIGHTx1,DOWNx2,UPx2,LEFTx1</path>
        <onCollisionSpeech gap="4">Cacnea!</onCollisionSpeech>
        <speech>Cacnéia!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="18" name="Combusken" shouldSleep="" speed="1" sprite="256" type="pokemon" x="38" y="92">
        <path>DOWNx3,UPx3</path>
        <onCollisionSpeech gap="4">Combusken!</onCollisionSpeech>
        <speech>Combusken!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="19" name="Skarmory" speed="1" sprite="227" type="pokemon" x="58" y="90">
        <path>LEFTx4,UPx4,RIGHTx4,DOWNx4</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="LEFT" id="2" name="Biker Baxton" speed="1" sprite="74" type="npc" x="46" y="84">
        <path>LEFTx10, RIGHTx10</path>
        <onCollisionSpeech gap="4"/>
        <speech>Weeeee! Olhe para mim! Nada supera a velocidade de andar de bicicleta na velocidade máxima!</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="20" name="Hiker Hank" randomRotation="true" sprite="10" x="11" y="60">
        <speech>Oi, amigo! Está vendo aquela montanha ali? É para lá que estou indo em seguida, Mt. Pyre!</speech>
        <speech>Mas antes de enfrentar essa fera, preciso conquistar este. Não é grande coisa, mas tem seu próprio charme, sabe?</speech>
        <speech>A subida é difícil, com certeza, mas a vista do topo? Espetacular! Isso me dá um gostinho do que está por vir.</speech>
        <speech>Portanto, deseje-me sorte e talvez nos encontremos novamente no cume do Monte Pyre!</speech>
    </npc>
</npcs>