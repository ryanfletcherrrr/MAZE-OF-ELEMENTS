<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Você chamou a atenção da Equipe Magma, hein? Vamos testar sua coragem contra nossa paixão ardente!</speech>
        </speeches>
        <speeches id="2">
            <speech>Então, você me superou... A determinação da Equipe Magma só se fortalece com esses desafios!</speech>
            <speech>Vamos nos retirar por enquanto, mas não será a última vez que vocês nos verão. As chamas da Equipe Magma não podem ser extintas tão facilmente!</speech>
        </speeches>
        <speeches id="3">
            <speech>Sua força é louvável, mas não pense que isso acabou. A Equipe Magma ressurgirá dessas cinzas mais forte do que antes!</speech>
            <speech>Vamos nos reagrupar e refinar nossas estratégias. Na próxima vez que nos encontrarmos, o resultado será diferente.</speech>
        </speeches>
        <speeches id="4">
            <speech>A vitória é nossa. Não apareça aqui novamente.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Ops, quase mostrei meu lado novato. Vamos à luta!</speech>
        </speeches>
        <speeches id="2">
            <speech>Então, a sorte do novato acabou. Volto ao treinamento para mim!</speech>
        </speeches>
        <speeches id="3">
            <speech>Acho que estamos voltando ao básico. A jornada de um novato nunca termina!</speech>
        </speeches>
        <speeches id="4">
            <speech>Parece que eu o superestimei!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Normalmente, só ouço música clássica, mas, se eu perder, acho que vou experimentar um pouco de new age!</speech>
        </speeches>
        <speeches id="2">
            <speech>Agora posso ficar ainda mais forte. Eu cresço com cada rancor.</speech>
        </speeches>
        <speeches id="3">
            <speech>Agora posso ficar ainda mais forte. Eu cresço com cada rancor.</speech>
        </speeches>
        <speeches id="4">
            <speech>Acho que vou me limitar aos meus clássicos. Você ainda não está pronto para minha nova era!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>...Ha.</speech>
            <speech>... ... Analisando.</speech>
            <speech>...Hah.</speech>
        </speeches>
        <speeches id="2">
            <speech>...engraçado.</speech>
            <speech>...Novamente? Isso é inesperado. ...Eu sabia. Você... é interessante! ...Haha.</speech>
            <speech>Estou ansioso para... Quando nós... poderemos nos encontrar novamente.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Humph. Então foi você... Sinto muito por ter adiado minha derrota para você no Mt. Chimney.</speech>
            <speech>E agora, sinto muito por ter que adiá-la mais uma vez.</speech>
            <speech>Não posso me dar ao luxo de desperdiçar um único segundo agora. Para o Red Orb que foi consagrado aqui no Mt. Pyre...</speech>
            <speech>Agora pertence a mim, o grande Maxie!</speech>
        </speeches>
        <speeches id="2">
            <speech>Courtney. Você deve cuidar para que nosso querido visitante não seja negligenciado devido à minha incapacidade de batalhar agora...</speech>
            <speech>Faça a gentileza de combatê-lo com toda a medida de sua força...</speech>
            <speech>e esmagar esse garoto para que ele nunca mais sonhe em desafiar nossa equipe!</speech>
            <speech>Fufufu... Com esse Orbe Vermelho em minha posse, não preciso do poder do Meteorito para despertar a fera das profundezas!</speech>
            <speech>Tudo o que preciso agora é de uma maneira de chegar ao local onde ele dorme...</speech>
            <speech>A única tarefa que resta é obter o submarino que está sendo construído em Slateport!</speech>
            <speech>Vamos partir imediatamente, equipe! Nosso próximo destino... Slateport City!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Sim, eu, que desastre...</speech>
            <speech>O Orbe Vermelho... Roubado de nossa guarda...</speech>
            <speech>A Red Orb e a Blue Orb nunca devem ser separadas.</speech>
            <speech>Eles devem ficar juntos...</speech>
            <speech>Mmm...</speech>
            <speech>Confiarei a você o Orbe Azul restante.</speech>
        </speeches>
        <speeches id="2">
            <speech>E eu lhe peço... Persigam esses ladrões e recuperem a esfera deles!</speech>
            <speech>O miserável líder deles...</speech>
            <speech>Tenho certeza de que ele disse que eles estavam indo para Slateport City em seguida...</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Saudações, viajante! Sou conhecido em Hoenn como o Eon Flute Expert, um mestre em invocar os lendários Latios e Latias.</speech>
            <speech>No entanto, devo informá-lo de que um serviço tão raro e místico tem um custo. Minha taxa é de 50.000F, e parece que você não tem o suficiente no momento.</speech>
            <speech>A invocação dessas criaturas majestosas requer não apenas habilidade, mas também uma profunda conexão com sua energia ancestral.</speech>
        </speeches>
        <speeches id="2">
            <speech>Ah, bem-vindo! Vejo que você possui uma Eon Flute.</speech>
            <speech>Um instrumento extraordinário, mas que exige habilidades únicas para aproveitar seu verdadeiro poder - habilidades que aperfeiçoei ao longo dos anos.</speech>
            <speech>Por uma taxa de 50.000F, posso usar sua flauta Eon para tecer uma melodia que ressoe com a alma de Latios ou Latias.</speech>
            <speech>Essa flauta antiga, quando tocada corretamente, pode unir mundos, invocando o Eon Duo dos confins do céu.</speech>
            <speech>Então, diga-me, qual desses seres celestiais você gostaria de convocar? Escolha com sabedoria, pois cada um deles oferece uma experiência tão atemporal quanto as próprias estrelas.</speech>
        </speeches>
        <speeches id="3">
            <speech>A melodia da flauta de Eon agora dança nos ventos, uma canção mais antiga que a própria Hoenn, alcançando o Duo de Eon.</speech>
            <speech>Olhe para os céus, pois logo o majestoso Latios ou Latias responderá ao nosso chamado, agraciando-nos com sua presença lendária.</speech>
            <speech>Uma visão que poucos já viram.</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>Sussurros de um poder antigo ecoam pela noite. Você se atreve a atender ao chamado deles?</speech>
            <speech>Sob o olhar atento da lua, nosso convênio se reúne. O desafio das eras aguarda sua coragem.</speech>
        </speeches>
        <speeches id="2">
            <speech>Embora vocês triunfem, a escuridão eterna tece sua paciência. Nossa determinação permanece inabalável, intacta.</speech>
            <speech>As sombras se separam, revelando um caminho para nosso enigmático líder. Uma recompensa para os corajosos, os fortes e os vitoriosos.</speech>
        </speeches>
        <speeches id="3">
            <speech>Incrível! Sua força perfura o véu da noite, rivalizando com os antigos poderes que comandamos.</speech>
            <speech>Velado em segredo, nosso líder o aguarda. Sua vitória lhe rendeu uma audiência no coração das sombras.</speech>
            <speech>Nossos rituais, ligados à dança celestial, não são favoráveis a esta hora. O momento certo ainda nos escapa.</speech>
            <speech>Retorne quando a lua reinar suprema sobre a noite, em $DURATION. Só então o véu se levantará.</speech>
        </speeches>
        <speeches id="4">
            <speech>Incrível! Sua força perfura o véu da noite, rivalizando com os poderes antigos que comandamos.</speech>
            <speech>Velado em segredo, nosso líder o aguarda. Sua vitória lhe rendeu uma audiência no coração das sombras.</speech>
        </speeches>
        <speeches id="5">
            <speech>Os corpos celestes ainda não se alinharam; nosso poder está adormecido, aguardando o tempo determinado.</speech>
            <speech>Retorne na sexta-feira, quando o brilho da lua perfurar o véu da realidade e nosso poder estiver em seu auge.</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>Sussurros de um poder antigo ecoam pela noite. Você se atreve a atender ao chamado deles?</speech>
            <speech>Sob o olhar atento da lua, nosso convênio se reúne. O desafio das eras aguarda sua coragem.</speech>
        </speeches>
        <speeches id="2">
            <speech>Embora vocês triunfem, a escuridão eterna tece sua paciência. Nossa determinação permanece inabalável, intacta.</speech>
            <speech>As sombras se separam, revelando um caminho para nosso enigmático líder. Uma recompensa para os corajosos, os fortes e os vitoriosos.</speech>
        </speeches>
        <speeches id="3">
            <speech>Incrível! Sua força perfura o véu da noite, rivalizando com os poderes antigos que comandamos.</speech>
            <speech>Velado em segredo, nosso líder o aguarda. Sua vitória lhe rendeu uma audiência no coração das sombras.</speech>
            <speech>Nossos rituais, ligados à dança celestial, não são favoráveis a esta hora. O momento certo ainda nos escapa.</speech>
            <speech>Retorne quando a lua reinar suprema sobre a noite, em $DURATION. Só então o véu se levantará.</speech>
        </speeches>
        <speeches id="4">
            <speech>Incrível! Sua força perfura o véu da noite, rivalizando com os antigos poderes que comandamos.</speech>
            <speech>Velado em segredo, nosso líder o aguarda. Sua vitória lhe rendeu uma audiência no coração das sombras.</speech>
        </speeches>
        <speeches id="5">
            <speech>Os corpos celestes ainda não se alinharam; nosso poder está adormecido, aguardando o tempo determinado.</speech>
            <speech>Retorne na sexta-feira, quando o brilho da lua perfurar o véu da realidade e nosso poder estiver em seu auge.</speech>
        </speeches>
    </conversation>
    <conversation id="12">
        <speeches id="2">
            <speech>Veja! Contra o vasto silêncio do desconhecido, através de reinos tortuosos e mapas inexplorados, você triunfou.</speech>
            <speech>Uma centena de Espíritos Etéreos, cada um deles um sussurro do coração oculto do mundo, agora vibram com poder em seu poder.</speech>
            <speech>Esse ato, um testemunho de sua determinação e coragem inabaláveis, nos une em um pacto de magia antiga.</speech>
            <speech>Em troca desse feito, eu lhe concedo a Sabletite, envolta em mistérios tão antigos quanto o cosmos.</speech>
            <speech>Que ele sirva como um farol, guiando-o através da escuridão, um companheiro em batalhas invisíveis e desafios não ditos.</speech>
            <speech>Você aceita esse presente, vinculado ao pacto etéreo, para levar adiante seu legado nas sombras e além?</speech>
        </speeches>

        <speeches id="3">
            <speech>Sua hesitação fala, viajante. O caminho do destino é variado, e nem todas as estradas devem ser percorridas ao mesmo tempo.</speech>
            <speech>Se seu coração encontrar determinação e seus passos o levarem de volta, o pacto permanecerá, esperando, na sombra silenciosa.</speech>
        </speeches>

        <speeches id="4">
            <speech>Com uma palavra, o futuro é tecido e o pacto é selado. O Sabletite, antigo e enigmático, agora é seu para comandar.</speech>
            <speech>Carregue-a com honra, pois seu poder é igualado apenas pela profundidade de sua determinação. Que ela ilumine suas horas mais sombrias.</speech>
        </speeches>
    </conversation>

    <movingNpc direction="DOWN" id="1" name="Wingull" speed="1" sprite="278" type="pokemon" x="3" y="4">
        <path>RIGHTx18,DOWNx3,LEFTx18,UPx3</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Wingull" speed="1" sprite="278" type="pokemon" x="17" y="21">
        <path>UPx10,LEFTx9,DOWNx10,RIGHTx9</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="3" name="Wingull" speed="1" sprite="278" type="pokemon" x="2" y="28">
        <path>UPx8,RIGHTx15,LEFTx15,DOWNx8</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="4" name="Wingull" speed="1" sprite="278" type="pokemon" x="35" y="2">
        <path>DOWNx4,RIGHTx16,LEFTx16,UPx4</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="5" name="Wingull" speed="1" sprite="278" type="pokemon" x="47" y="13">
        <path>RIGHTx14,LEFTx14</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="6" name="Duskull" speed="1" sprite="355" type="pokemon" x="15" y="56">
        <path>DOWNx4,RIGHTx1,LEFTx1,UPx4</path>
        <onCollisionSpeech gap="4">Duskull!</onCollisionSpeech>
        <speech>Duskull!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="7" name="Chimecho" speed="1" sprite="358" type="pokemon" x="41" y="57">
        <path>LEFTx2,RIGHTx2</path>
        <onCollisionSpeech gap="4">Chimecho!</onCollisionSpeech>
        <speech>Chimecho!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="8" name="Shuppet" speed="1" sprite="353" type="pokemon" x="59" y="50">
        <path>LEFTx2,UPx1,DOWNx1,RIGHTx2</path>
        <onCollisionSpeech gap="4">Shuppet!</onCollisionSpeech>
        <speech>Shuppet!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="9" name="Duskull" speed="1" sprite="355" type="pokemon" x="11" y="36">
        <path>UPx4,DOWNx4</path>
        <onCollisionSpeech gap="4">Duskull</onCollisionSpeech>
        <speech>Duskull</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="10" name="Vulpix" shouldSleep="" speed="1" sprite="37" type="pokemon" x="51" y="25">
        <path>DOWNx1,RIGHTx2,UPx1,DOWNx1,LEFTx2,UPx1</path>
        <onCollisionSpeech gap="4">Vulpix!</onCollisionSpeech>
        <speech>Vulpix!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="11" name="Shuppet" speed="1" sprite="353" type="pokemon" x="32" y="41">
        <path>RIGHTx9,LEFTx9</path>
        <onCollisionSpeech gap="4">Shuppet!</onCollisionSpeech>
        <speech>Shuppet!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="12" name="Duskull" speed="1" sprite="355" type="pokemon" x="34" y="62">
        <path>UPx1,RIGHTx18,LEFTx18,DOWNx1</path>
        <onCollisionSpeech gap="4">Duskull!</onCollisionSpeech>
        <speech>Duskull!</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="13" name="Hex Maniac Xanthe" randomRotation="true" sprite="169" x="34" y="49">
        <speech>Em meio às sombras silenciosas do Monte Pyre, onde os espíritos vagam e os sussurros permanecem, eu caminho com meu Pokémon.</speech>
        <speech>Nesse santuário fantasmagórico, o ar é denso com o eco de almas perdidas, e cada passo é assombrado pelo passado.</speech>
        <speech>Juntos, navegamos pelo reino espectral, buscando consolo no abraço do desconhecido.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="14" name="Hex Maniac Valencia" randomRotation="true" sprite="171" x="44" y="41">
        <speech>Na névoa sinistra do Monte Pyre, onde os espíritos permanecem e as sombras brincam, meu Pokémon e eu vagamos.</speech>
        <speech>Em meio aos sussurros dos que partiram, pisamos com cuidado, pois o reino etéreo guarda seus segredos.</speech>
        <speech>Nesse santuário fantasmagórico, cada passo é uma aventura no desconhecido, onde a realidade se curva e o véu espectral se dilui.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="15" name="Hex Maniac Isolde" randomRotation="true" sprite="170" x="13" y="46">
        <speech>No coração da tradição de Hoenn está a história de um treinador perdido, atraído para o Monte Pyre em busca de consolo.</speech>
        <speech>As lendas falam de seu aprisionamento em seu abraço espectral, condenados a vagar eternamente por seus corredores sombrios.</speech>
        <speech>Enquanto viajo com meus Pokémon, sinto a presença persistente daquele espírito atormentado, um lembrete do fino véu entre nosso mundo e o próximo.</speech>
    </npc>
    <movingNpc direction="DOWN" id="16" name="Bisharp" speed="1" sprite="625" type="pokemon" x="15" y="38">
        <path>LEFTx6,RIGHTx6</path>
        <onCollisionSpeech gap="4">Bisharp!</onCollisionSpeech>
        <speech>Bisharp!</speech>
    </movingNpc>
</npcs>