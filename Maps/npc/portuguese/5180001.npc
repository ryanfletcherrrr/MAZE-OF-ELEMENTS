<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>O quê?! Não pode ser! Você tem a chave?</speech>
            <speech>Trancar a porta não fazia sentido! Afinal, eu sou o perdedor nessa história!</speech>
            <speech>Não é hora de ter pena de si mesmo! Tenho que alertar o Comandante!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Oi! Isso não é diversão e jogos! Isso é trabalho de verdade, eu lhe digo!</speech>
        </speeches>
        <speeches id="2">
            <speech>O que....?! Um pirralho bagunçou meu trabalho...</speech>
        </speeches>
        <speeches id="3">
            <speech>O que....?! Um pirralho bagunçou meu trabalho...</speech>
        </speeches>
        <speeches id="4">
            <speech>Vá embora, pirralho!</speech>
        </speeches>
        <speeches id="5"/>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Coleta de eletricidade do Valley Windworks... Essa é a nossa missão.</speech>
        </speeches>
        <speeches id="2">
            <speech>Eu realmente não gosto de crianças que também são treinadores durões...</speech>
        </speeches>
        <speeches id="3">
            <speech>Eu realmente não gosto de crianças que também são treinadores durões...</speech>
        </speeches>
        <speeches id="4">
            <speech>Você não tem a menor ideia do que a Equipe Galáctica está tentando alcançar!</speech>
        </speeches>
        <speeches id="5"/>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Sou um dos três comandantes da Equipe Galáctica.</speech>
            <speech>...Não, espere. Esse é um dos quatro Comandantes. Meu nome é Mars!</speech>
            <speech>Estamos tentando criar um novo mundo que seja melhor do que este...</speech>
            <speech>Mas as pessoas têm demonstrado pouca compreensão sobre o que fazemos.</speech>
            <speech>Você também não entende, não é? É um pouco triste...</speech>
            <speech>Portanto, vamos realizar uma batalha para decidir o que devemos fazer em seguida.</speech>
            <speech>Se eu ganhar, você vai embora.</speech>
            <speech>Se você vencer, nós, da Equipe Galáctica, iremos embora!</speech>
        </speeches>
        <speeches id="2">
            <speech>Ops! Fiz uma bagunça nessa! Mas não tem problema. Gostei bastante de nossa batalha.</speech>
        </speeches>
        <speeches id="3"/>
        <speeches id="4">
            <speech>Você não tem a menor ideia do que a Equipe Galáctica está tentando alcançar!</speech>
        </speeches>
        <speeches id="5"/>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Meus Pokémon não podem mais batalhar.</speech>
            <speech>Eles vão tirar meus Pokémon por bagunçarem esse aqui...</speech>
            <speech>Humph! Espere só! Nosso comandante vai lhe dar uma surra!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Nossa, nossa. Perder para uma criança, não é? Mas, não importa. Nós coletamos muita eletricidade.</speech>
            <speech>Com o poder que obtivemos, podemos fazer algo bastante espetacular.</speech>
            <speech>Parece bastante óbvio para mim, Charon, o gênio que até o chefe reconhece. Agora, Marte, devemos ir
                indo.
            </speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Equipe Galáctica...</speech>
            <speech>Eles estavam dizendo que precisavam reunir Pokémon e energia, não importava o que acontecesse.</speech>
            <speech>Era para criar um novo universo, ou assim eles diziam.</speech>
            <speech>Nada do que eles disseram fez qualquer tipo de sentido para mim.</speech>
            <speech>Não tenho palavras para lhe dizer o quanto sou grato por ter me salvado.</speech>
            <speech>Finalmente poderei ver minha filhinha novamente!</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh, desculpe! Ahaha! Eles me fizeram trabalhar sem parar!</speech>
        </speeches>
        <speeches id="3">
            <speech>Ah, sim, um Pokémon balão aparece na frente dos moinhos de vento.</speech>
            <speech>É sempre em um determinado dia da semana, mas não tenho certeza de qual dia.</speech>
            <speech>Será que sua aparência tem algo a ver com o fato de essa usina eólica fundir a energia gerada pelo vento?</speech>
            <speech>O Valley Windworks usa turbinas para captar a energia dos ventos que sopram das montanhas desse cânion.</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>Papai!</speech>
            <speech>Que nojo! Papai, você está fedendo! Vá tomar banho agora, fedorento!</speech>
        </speeches>
        <speeches id="2">
            <speech>Obrigado, treinador! Você fez com que essas pessoas ruins fossem embora!</speech>
            <speech>Acho que o Pokémon balão virá nos visitar novamente!</speech>
        </speeches>
    </conversation>
    <!--<npc direction="DOWN" hidden="false" id="1" name="Kaio" sprite="37" x="22" y="5">
        <speech>The Valley Windworks uses turbines to capture energy from winds driven from the mountains in this canyon.</speech>
        <speech>We produce energy from the power of nature itself. It's quite wonderful.</speech>
    </npc>
    <npc direction="LEFT" hidden="false" id="2" name="Marie" sprite="82" x="25" y="6">
        <speech>If the balloon Pokémon came, the wind would blow it away!</speech>
    </npc>-->
</npcs>