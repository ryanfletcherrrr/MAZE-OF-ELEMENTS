<npcs>
    <conversation id="2">
        <speeches id="1">
            <speech>Não há limites para essa jornada! Onde está minha aventura?!</speech>
        </speeches>
        <speeches id="2">
            <speech>Cheirar, cheirar... Isso não é bom... Não consigo sentir o perfume do amor. Tchau!</speech>
        </speeches>
        <speeches id="3">
            <speech>Cheirar, cheirar... Isso não é bom... Não consigo sentir o perfume do amor. Tchau!</speech>
        </speeches>
        <speeches id="4">
            <speech>A jornada ainda não terminou. É só você esperar! Eu lhe mostrarei a maior aventura de todos os tempos!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Você parece tão sério e chato... Pode me manter entretido?</speech>
        </speeches>
        <speeches id="2">
            <speech>Ah... Você não foi ruim... O que só me deixa infeliz...</speech>
        </speeches>
        <speeches id="3">
            <speech>Ah... Você não foi ruim... O que só me deixa infeliz...</speech>
        </speeches>
        <speeches id="4">
            <speech>Ei, acabamos de começar! É aqui que as coisas começam a ficar boas!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Huhuehuehue... Não chore quando você perder...</speech>
        </speeches>
        <speeches id="2">
            <speech>Sniffle... Sniffle sniffle... Estou desapontado... Muito decepcionado...</speech>
        </speeches>
        <speeches id="3">
            <speech>Sniffle... Sniffle sniffle... Estou desapontado... Muito decepcionado...</speech>
        </speeches>
        <speeches id="4">
            <speech>Ei, ei! Sem choro! Não tenho tempo para as lágrimas de uma criança!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Ahhh, um instrutor que está lindo! Espero que sua batalha seja tão bonita quanto.</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh, meu Deus, nossa batalha foi igualmente maravilhosa. Eu me sinto atraído por você.</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh, meu Deus, nossa batalha foi igualmente maravilhosa. Eu me sinto atraído por você.</speech>
        </speeches>
        <speeches id="4">
            <speech>Uma pessoa tão bonita perdida para mim?! Estou um pouco decepcionado.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Você sabe o que é necessário para ser um instrutor?</speech>
        </speeches>
        <speeches id="2">
            <speech>Você não pode se tornar um instrutor lutando dessa forma.</speech>
        </speeches>
        <speeches id="3">
            <speech>Você não pode se tornar um instrutor lutando dessa forma.</speech>
        </speeches>
        <speeches id="4">
            <speech>É claro que sou forte e não perco. É importante que eu vença com elegância.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Não importa a velocidade do Pokémon, eu o pegarei em minha bicicleta superveloz!</speech>
        </speeches>
        <speeches id="2">
            <speech>Sei cantar, dançar e andar de bicicleta. Agora tentarei me tornar um ídolo que também sabe lutar.</speech>
        </speeches>
        <speeches id="3">
            <speech>Sei cantar, dançar e andar de bicicleta. Agora vou tentar me tornar um ídolo que também sabe lutar.</speech>
        </speeches>
        <speeches id="4">
            <speech>Cara, eu sou tão rápido e suave! Eu deveria estar no So You Think You Can Bike!</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>O fato de eu ser a filhinha do papai não significa necessariamente que eu seja feminina!</speech>
        </speeches>
        <speeches id="2">
            <speech>Essa força... Você é como uma próspera erva daninha de beira de estrada...</speech>
        </speeches>
        <speeches id="3">
            <speech>Essa força... Você é como uma próspera erva daninha de beira de estrada...</speech>
        </speeches>
        <speeches id="4">
            <speech>Eu faço o que eu quero! Vivo como quero! É assim que a garotinha do papai se comporta!</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>Pai... Mãe... Cuide de minha batalha...</speech>
        </speeches>
        <speeches id="2">
            <speech>Pai... Mãe... O que devo fazer?</speech>
        </speeches>
        <speeches id="3">
            <speech>Pai... Mãe... O que devo fazer?</speech>
        </speeches>
        <speeches id="4">
            <speech>Pai... Mãe... Vocês viram? Eu ganhei uma batalha... Eu realmente ganhei!</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>Ho lá! Você é uma montanha que está no meu caminho, não é?</speech>
        </speeches>
        <speeches id="2">
            <speech>Grrr... Minha vitória desapareceu em alguma fenda escura...</speech>
        </speeches>
        <speeches id="3">
            <speech>Grrr... Minha vitória desapareceu em alguma fenda escura...</speech>
        </speeches>
        <speeches id="4">
            <speech>Yahoo! Yahooooo!!! Ouçam meu grito de triunfo!</speech>
        </speeches>
    </conversation>
    <conversation id="12">
        <speeches id="1">
            <speech>Vejo que você provou seu valor e é forte o suficiente para sobreviver com outros domadores lá dentro.</speech>
            <speech>Permitirei que você entre na caverna Wayward e se teste.</speech>
        </speeches>
        <speeches id="2">
            <speech>Então você quer entrar na caverna Wayward?</speech>
            <speech>Não, não posso deixar você passar, garoto. Você não é forte o suficiente.</speech>
            <speech>Você precisa derrotar o Champion Cynthia e deve registrar pelo menos 100 Pokémon em seu dex.</speech>
            <speech>Vamos ver se você é capaz ou não.</speech>
        </speeches>
    </conversation>

    <conversation id="13">
        <speeches id="2">
            <speech>Olá! Sou um palhaço da campanha do Tutorial do PBO. Vamos lá, minha pergunta!</speech>
            <speech>Você consegue encontrar enxames todos os dias no PBO e caçar Pokémon raros?</speech>
        </speeches>
        <speeches id="3">
            <speech>Essa não é a resposta correta. Vamos tentar novamente.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ding-ding!</speech>
            <speech>Você está absolutamente correto.</speech>
            <speech>Todos os dias você poderá ver que há enxames na região de Sinnoh!</speech>
            <speech>Recomendo enfaticamente que você dê uma olhada neles! Talvez você encontre todos eles!</speech>
        </speeches>
        <speeches id="5">
            <speech>Aqui está! Por favor, aceite esta Grande Bola!</speech>
            <speech>Esperamos que você consiga capturar um Pokémon Ultra Raro com ele!</speech>
        </speeches>
    </conversation>
</npcs>