<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Deleite-se com os artistas aéreos mais graciosos de todo o mundo!</speech>
        </speeches>
        <speeches id="2">
            <speech>O show deve continuar mesmo depois de um tropeço.</speech>
        </speeches>
        <speeches id="3">
            <speech>O show deve continuar mesmo depois de um tropeço.</speech>
        </speeches>
        <speeches id="4">
            <speech>Impecável! Uma demonstração perfeita de habilidade e elegância!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Deixo o vento guiar minhas batalhas... assim como meus Pokémon!</speech>
        </speeches>
        <speeches id="2">
            <speech>Parece que fui pego em um rascunho ruim.</speech>
        </speeches>
        <speeches id="3">
            <speech>Parece que fui pego em um rascunho ruim.</speech>
        </speeches>
        <speeches id="4">
            <speech>O vento estava a meu favor! É bom aproveitar a brisa para vencer!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>As batalhas do tipo voador têm tudo a ver com posicionamento. Você consegue acompanhar?</speech>
        </speeches>
        <speeches id="2">
            <speech>Hmph... Calculei mal. Da próxima vez, não serei tão descuidado.</speech>
        </speeches>
        <speeches id="3">
            <speech>Hmph... Calculei mal. Da próxima vez, não serei tão descuidado.</speech>
        </speeches>
        <speeches id="4">
            <speech>Exatamente como planejado. A vitória consiste em saber quando atacar!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Um dia, voarei com meus Pokémon. Até lá, eu batalho com eles!</speech>
        </speeches>
        <speeches id="2">
            <speech>Aterrado, mas encontrarei minhas asas novamente.</speech>
        </speeches>
        <speeches id="3">
            <speech>Aterrado, mas encontrarei minhas asas novamente.</speech>
        </speeches>
        <speeches id="4">
            <speech>Cada vitória é um passo mais perto de tocar o céu!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Eu luto com Pokémon difíceis todos os dias. Você acha que tem o que é preciso para me derrotar?</speech>
        </speeches>
        <speeches id="2">
            <speech>Bem, parece que eu fui eliminado dessa batalha!</speech>
        </speeches>
        <speeches id="3">
            <speech>Bem, parece que eu fui eliminado dessa batalha!</speech>
        </speeches>
        <speeches id="4">
            <speech>É assim que se lida com uma briga! Agora, não fique chorando em seu chapéu, ouviu?</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Aqui fora, é a sobrevivência do mais apto. Vamos ver se você aguenta o calor, parceiro!</speech>
        </speeches>
        <speeches id="2">
            <speech>Bem, agora parece que fui derrotado. Acho que vou tirar meu chapéu para você.</speech>
        </speeches>
        <speeches id="3">
            <speech>Bem, agora parece que fui derrotado. Acho que vou tirar meu chapéu para você.</speech>
        </speeches>
        <speeches id="4">
            <speech>Por aqui, a experiência leva a melhor. Melhor sorte na próxima vez!</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Você acha que pode me acompanhar? Minha equipe e meu carro são feitos para a velocidade!</speech>
        </speeches>
        <speeches id="2">
            <speech>Acho que tive um problema de velocidade, mas voltarei mais rápido do que nunca!</speech>
        </speeches>
        <speeches id="3">
            <speech>Acho que tive um problema de velocidade, mas voltarei mais rápido do que nunca!</speech>
        </speeches>
        <speeches id="4">
            <speech>Haha! Você está comendo minha poeira, novato!</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>Para lutar e andar de bicicleta, é preciso saber quando acelerar e quando ir com calma.</speech>
        </speeches>
        <speeches id="2">
            <speech>Ufa... Talvez eu tenha pegado leve demais dessa vez.</speech>
        </speeches>
        <speeches id="3">
            <speech>Ufa... Talvez eu tenha pegado leve demais dessa vez.</speech>
        </speeches>
        <speeches id="4">
            <speech>Está vendo? Uma viagem tranquila leva à vitória!</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>Sem freios, sem medo! Apenas eu, meu carro e uma batalha a toda velocidade!</speech>
        </speeches>
        <speeches id="2">
            <speech>Urgh! Acho que eu deveria ter diminuído um pouco a velocidade...</speech>
        </speeches>
        <speeches id="3">
            <speech>Urgh! Acho que eu deveria ter diminuído um pouco a velocidade...</speech>
        </speeches>
        <speeches id="4">
            <speech>É assim que se queima borracha! Você não pode me impedir!</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>O caminho é infinito, mas para você, essa batalha será um beco sem saída.</speech>
        </speeches>
        <speeches id="2">
            <speech>Hmph... Toda perda é apenas mais um caminho a ser percorrido.</speech>
        </speeches>
        <speeches id="3">
            <speech>Hmph... Toda perda é apenas mais um caminho a ser percorrido.</speech>
        </speeches>
        <speeches id="4">
            <speech>Outra batalha, outra vitória. A estrada me chama para frente.</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Chansey" speed="1" sprite="113" type="pokemon" x="8" y="4">
        <path>DOWNx4,LEFTx4,DOWNx1,UPx1,RIGHTx4,UPx4</path>
        <onCollisionSpeech gap="4">Chaaanseeey!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Pidgeotto" speed="1" sprite="17" type="pokemon" x="24" y="18">
        <path>DOWNx18,UPx18</path>
        <onCollisionSpeech gap="4">KREEEEH!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="UP" id="3" name="Tropius" speed="1" sprite="357" type="pokemon" x="22" y="53">
        <path>UPx10,DOWNx10</path>
        <onCollisionSpeech gap="4">THROOOH-HAAAW!</onCollisionSpeech>
    </movingNpc>
    <npc direction="RIGHT" hidden="false" id="5" name="Liam" randomRotation="false" sprite="34" x="14" y="16">
        <speech>Meu Primeape evoluiu para um Annihilape depois de usar o Rage Fist três vezes em uma batalha.</speech>
        <speech>Agora, ele é muito mais durão!</speech>
    </npc>
    <movingNpc direction="UP" id="4" name="Mason" speed="1" sprite="86" type="npc" x="8" y="52">
        <path>UPx5,DOWNx5</path>
        <onCollisionSpeech gap="4"/>
        <speech>De acordo com meu amigo, há mais de um tipo de EXP Share.</speech>
    </movingNpc>
</npcs>