<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Uma viagem no S.S. Anne é melhor apreciada com uma boa dose de battling. Quer me fazer a vontade?</speech>
        </speeches>
        <speeches id="2">
            <speech>Esplêndido! Essa foi uma troca revigorante! Talvez eu deva repensar a composição da minha equipe.</speech>
        </speeches>
        <speeches id="3">
            <speech>Esplêndido! Essa foi uma troca revigorante! Talvez eu deva repensar a composição da minha equipe.</speech>
        </speeches>
        <speeches id="4">
            <speech>Uma exibição brilhante de ambos os lados. Um cavalheiro sempre aprecia um desafio digno!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Esse navio é tão chique! Aposto que meus Pokémon batalham tão elegantemente quanto eu!</speech>
        </speeches>
        <speeches id="2">
            <speech>Ah, não! Meu recorde perfeito... arruinado!</speech>
        </speeches>
        <speeches id="3">
            <speech>Ah, não! Meu recorde perfeito... arruinado!</speech>
        </speeches>
        <speeches id="4">
            <speech>Isso foi gracioso, não foi? Uma verdadeira performance de habilidade e beleza!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Estou de férias, mas isso não significa que estou relaxando! Meu Pokémon e eu estamos treinando todos os dias!</speech>
        </speeches>
        <speeches id="2">
            <speech>Ugh... talvez eu devesse ter feito uma pausa, afinal...</speech>
        </speeches>
        <speeches id="3">
            <speech>Ugh... talvez eu devesse ter feito uma pausa, afinal...</speech>
        </speeches>
        <speeches id="4">
            <speech>Está vendo? O trabalho árduo sempre compensa! Mesmo nas férias!</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Madison" speed="1" sprite="31" type="npc" x="9" y="8">
        <path>DOWNx4,UPx4</path>
        <onCollisionSpeech gap="4"/>
        <speech>Ugh... Estou começando a me sentir enjoado.</speech>
        <speech>Gostaria de poder fazer um Full Heal e acabar logo com isso.</speech>
        <speech>É uma pena que isso não funcione em problemas da vida real!</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="2" name="Lucas" randomRotation="true" sprite="58" x="19" y="11">
        <speech>Estou tendo dificuldades para escolher em que evoluir meu Eevee...</speech>
        <speech>Há tantas opções incríveis!</speech>
    </npc>
    <movingNpc direction="RIGHT" id="3" name="Eevee" speed="1" sprite="133" type="pokemon" x="19" y="13">
        <path>RIGHTx3,LEFTx3</path>
        <onCollisionSpeech gap="4">Eeevvveeee!</onCollisionSpeech>
    </movingNpc>
</npcs>