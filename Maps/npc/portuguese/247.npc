<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Um verdadeiro cavalheiro valoriza tanto a etiqueta quanto a força. Permita-me demonstrar ambos nesta batalha!</speech>
        </speeches>
        <speeches id="2">
            <speech>Ah, esplêndido! Uma batalha bem travada. Eu admiro um oponente digno.</speech>
        </speeches>
        <speeches id="3">
            <speech>Ah, esplêndido! Uma batalha bem travada. Eu admiro um oponente digno.</speech>
        </speeches>
        <speeches id="4">
            <speech>Graça e compostura, meu caro treinador. Um cavalheiro nunca vacila sob pressão.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Meu Pokémon e eu treinamos o dia todo! Preparem-se, pois sou imparável!</speech>
        </speeches>
        <speeches id="2">
            <speech>O quê?! Mas eu tinha tanta certeza de que venceria! Talvez eu precise treinar dois dias inteiros!!!</speech>
        </speeches>
        <speeches id="3">
            <speech>O quê?! Mas eu tinha tanta certeza de que venceria! Talvez eu precise treinar dois dias inteiros!!!</speech>
        </speeches>
        <speeches id="4">
            <speech>Ah! Eu lhe disse! Talvez você devesse treinar o dia todo como eu!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Meus Pokémon são super fortes! Eu os treinei... uh... correndo em círculos! Isso funciona, certo?</speech>
        </speeches>
        <speeches id="2">
            <speech>Espera, correr em círculos não torna os Pokémon mais fortes? Mentiram para mim!</speech>
        </speeches>
        <speeches id="3">
            <speech>Espera, correr em círculos não torna os Pokémon mais fortes? Mentiram para mim!</speech>
        </speeches>
        <speeches id="4">
            <speech>Está vendo? Meu treinamento em círculo funciona totalmente! Eu deveria escrever um livro sobre isso!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Meus Pokémon são como o vento, rápidos e livres! Vamos ver se você consegue acompanhá-los!</speech>
        </speeches>
        <speeches id="2">
            <speech>Parece que as asas dos meus Pokémons foram cortadas hoje, mas eles voarão mais alto da próxima vez!</speech>
        </speeches>
        <speeches id="3">
            <speech>Parece que as asas dos meus Pokémons foram cortadas hoje, mas eles voarão mais alto da próxima vez!</speech>
        </speeches>
        <speeches id="4">
            <speech>Ah! Você não pode pegar meus pássaros quando eles estão voando alto! A vitória parece uma brisa!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Meu treinamento é cronometrado ao minuto! Meus Pokémon batalham com precisão perfeita. Você pode quebrar nosso ritmo?</speech>
        </speeches>
        <speeches id="2">
            <speech>Interessante... sua imprevisibilidade atrapalhou meus cálculos. É hora de recalibrar.</speech>
        </speeches>
        <speeches id="3">
            <speech>Interessante... sua imprevisibilidade atrapalhou meus cálculos. É hora de recalibrar.</speech>
        </speeches>
        <speeches id="4">
            <speech>Como esperado. A estratégia e o treinamento tornam a vitória certa. Você deve refinar sua abordagem.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>O tempo é uma ilusão, e as batalhas são a dança do destino. Vamos ver se você consegue acompanhar o ritmo!</speech>
        </speeches>
        <speeches id="2">
            <speech>É interessante que o futuro está sempre mudando, mas eu prevejo uma vitória na próxima vez.</speech>
        </speeches>
        <speeches id="3">
            <speech>É interessante que o futuro está sempre mudando, mas eu prevejo uma vitória na próxima vez.</speech>
        </speeches>
        <speeches id="4">
            <speech>Tudo acontece como deve acontecer. Sua derrota foi simplesmente parte do caminho para seu crescimento.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Nada melhor do que uma boa caminhada e uma batalha Pokémon! Vamos ver se você consegue lidar com a natureza!</speech>
        </speeches>
        <speeches id="2">
            <speech>Acho que tomei o caminho errado, mas todo caminho leva a uma lição!</speech>
        </speeches>
        <speeches id="3">
            <speech>Acho que tomei o caminho errado, mas todo caminho leva a uma lição!</speech>
        </speeches>
        <speeches id="4">
            <speech>Está vendo? Um pouco de treinamento ao ar livre faz maravilhas! Você deveria tentar acampar algum dia!</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>A Rota 11 forja campeões! Eu estudei todas as técnicas. Vocês estão prontos para o auge do meu treinamento?</speech>
        </speeches>
        <speeches id="2">
            <speech>Hmph... Não cometerei os mesmos erros da próxima vez. Aproveite essa vitória enquanto ela durar.</speech>
        </speeches>
        <speeches id="3">
            <speech>Hmph... Não cometerei os mesmos erros da próxima vez. Aproveite essa vitória enquanto ela durar.</speech>
        </speeches>
        <speeches id="4">
            <speech>Assim como eu previ na Rota 11, a preparação decide a vitória!</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>A engenharia tem tudo a ver com eficiência. Vamos ver se sua estratégia de batalha é tão bem construída quanto meus gadgets!</speech>
        </speeches>
        <speeches id="2">
            <speech>Hmm, de volta à prancheta de desenho! Preciso ajustar minha estratégia para a próxima vez.</speech>
        </speeches>
        <speeches id="3">
            <speech>Hmm, de volta à prancheta de desenho! Preciso ajustar minha estratégia para a próxima vez.</speech>
        </speeches>
        <speeches id="4">
            <speech>Sucesso! Um plano bem elaborado sempre dá certo no final, assim como minhas máquinas!</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>Meus Pokémon estão vestidos com os melhores acessórios que o dinheiro pode comprar! Seu treinamento foi igualmente caro. Quer ver como são as batalhas premium?</speech>
        </speeches>
        <speeches id="2">
            <speech>Absurdo! Você sabe quanto eu gastei com professores particulares? Papai vai ficar sabendo desse constrangimento...</speech>
        </speeches>
        <speeches id="3">
            <speech>Absurdo! Você sabe quanto eu gastei com professores particulares? Papai vai ficar sabendo desse constrangimento...</speech>
        </speeches>
        <speeches id="4">
            <speech>É claro que eu ganhei! Quando você pode comprar o melhor de tudo, a vitória é simplesmente mais um luxo a ser colecionado. Melhor sorte ao economizar para sua próxima tentativa!</speech>
        </speeches>
    </conversation>
    <npc direction="DOWN" hidden="false" id="1" name="Beast Gohan" randomRotation="true" sprite="35" x="44" y="23">
        <speech>Então, tudo bem...</speech>
        <speech>Acho que é a minha vez!</speech>
    </npc>
    <npc direction="UP" hidden="false" id="2" name="Cell Max" randomRotation="false" sprite="69" x="44" y="27">
        <speech>.......</speech>
        <speech>.............</speech>
        <speech>Gruughhhhhhh!</speech>
    </npc>
    <movingNpc direction="RIGHT" id="3" name="Alomomola" speed="1" sprite="594" type="pokemon" x="1" y="29">
        <path>RIGHTx4,DOWNx1,UPx1,LEFTx4</path>
        <onCollisionSpeech gap="4">Lo-lo-mooo...</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="LEFT" id="4" name="Gastrodon" speed="1" sprite="423" type="pokemon" x="17" y="29">
        <path>LEFTx4,UPx1,LEFTx4,RIGHTx4,DOWNx1,RIGHTx4</path>
        <onCollisionSpeech gap="4">Gasssss!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="5" name="Pawmi" speed="1" sprite="1396" type="pokemon" x="54" y="37">
        <path>RIGHTx4,DOWNx4,LEFTx4,UPx4</path>
        <onCollisionSpeech gap="4">Pii-ziiip!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="LEFT" id="6" name="Diglett" speed="1" sprite="50" type="pokemon" x="16" y="8">
        <path>LEFTx3,RIGHTx3</path>
        <onCollisionSpeech gap="4">diiiiiig!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="DOWN" id="7" name="Paige" speed="1" sprite="94" type="npc" x="24" y="15">
        <path>DOWNx5,UPx5</path>
        <onCollisionSpeech gap="4"/>
        <speech>Meu pai disse que posso lutar contra os Gym Leaders novamente depois de derrotá-los!</speech>
        <speech>Isso não é fantástico?</speech>
        <speech>Vou receber muitos prêmios em dinheiro!</speech>
    </movingNpc>
    <npc direction="LEFT" hidden="false" id="8" name="Peter Pan" randomRotation="false" sprite="24" x="66" y="16">
        <speech>Tudo o que é preciso é fé, confiança e um pouco de pó de fada.</speech>
    </npc>
    <movingNpc direction="LEFT" id="9" name="Mime. Jr" speed="1" sprite="439" type="pokemon" x="55" y="18">
        <path>LEFTx8,DOWNx3,LEFTx2,RIGHTx2,DOWNx0,UPx3,RIGHTx8</path>
        <onCollisionSpeech gap="4">Mee-mee!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="DOWN" id="10" name="Jacob" speed="1" sprite="34" type="npc" x="75" y="27">
        <path>DOWNx2,RIGHTx2,UPx2,LEFTx2</path>
        <onCollisionSpeech gap="4"/>
        <speech>Há um Snorlax bloqueando a estrada à frente. Se estiver tentando chegar a Celadon City, terá de fazer o caminho mais longo</speech>
        <speech>pelo Rock Tunnel, a leste de Cerulean.</speech>
    </movingNpc>
</npcs>