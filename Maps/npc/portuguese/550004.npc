<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Ajude-me, meu jovem, por favor, ajude-me!</speech>
            <speech>Meu amigo mais querido me foi roubado.</speech>
            <speech>Meu amado Spiritomb desapareceu!</speech>
            <speech>Você poderia fazer a gentileza de encontrar e trazer de volta minha alma gêmea para mim?</speech>
        </speeches>
        <speeches id="2">
        <speech>Você está de volta! Por favor, diga-me que tem boas notícias para mim.</speech>
        <speech>Você veio trazer meu Spiritomb de volta para mim?</speech>
        </speeches>
        <speeches id="3">
            <speech>*Oh não...</speech>
            <speech>*Você vê que a senhora idosa está com o coração partido e sozinha.</speech>
        </speeches>
        <speeches id="4">
            <speech>Oh, obrigado, jovem viajante.</speech>
            <speech>Espero que meu amigo não tenha lhe causado muitos problemas.</speech>
            <speech>Err, eu quis dizer Spiritomb...</speech>
            <speech>Adeus, por enquanto...</speech>
        </speeches>
        <speeches id="5">
            <speech>Oh, obrigado, jovem viajante.</speech>
            <speech>Espero que meu amigo não tenha lhe causado muitos problemas.</speech>
            <speech>Err, eu quis dizer Spiritomb...</speech>
            <speech>Adeus, por enquanto...</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Um fantasma nas sombras;
                sinistro e escuro;
                ele saboreia sua vida;
                mas não deixa marcas~</speech>
        </speeches>
        <speeches id="2">
            <speech>Um fantasma nas sombras;
                sinistro e sombrio;
                ele saboreia sua vida:
                mas não deixa marcas~</speech>
            <speech>Chame-me de esquisito, chame-me de maluco, mas, $PLAYER_NAME, este é o pokémon que eu procuro?</speech>
        </speeches>
        <speeches id="3">
            <speech>Não há certo, não há errado, mas isso não é o que eu quero; VÁ EMBORA!</speech>
        </speeches>
        <speeches id="4">
            <speech>Esplêndido, jovem mestre, estou feliz por você.</speech>
            <speech>Mas diga-me, caro $PLAYER_NAME: você está pronto para a segunda rodada?</speech>
        </speeches>
        <speeches id="5">
            <speech>Esplêndido, jovem mestre, estou feliz por você.</speech>
            <speech>Mas diga-me, caro $PLAYER_NAME: você está pronto para a segunda rodada?</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Ela traz a praga, pelo menos é o que dizem:
                "É a nêmesis do trigo e do feno~"
                Ela se move em grupos e se multiplica;
                poderia fazer muito mais, mas nunca tenta~</speech>
        </speeches>
        <speeches id="2">
            <speech>Gosto do jeito que você costumava fazer, entendeu minha dica sutil?</speech>
        </speeches>
        <speeches id="3">
            <speech>Por um momento, pensei que sua mente fosse afiada e única.
                Mal sabe você que poucos viajantes foram tão fracos.</speech>
        </speeches>
        <speeches id="4">
            <speech>Isso é o que eu queria, isso é o que eu chamo de negócio!
                Prezado $PLAYER_NAME, bem-vindo ao Culto dos Espíritos, por favor, aceite este selo.</speech>
            <speech>Com esse pequeno selo de papel, você poderá ver outros membros do culto em todo o mundo.</speech>
            <speech>Tenha cuidado com isso, $PLAYER_NAME. Uma vez que você demonstre sua devoção, não poderá voltar atrás!</speech>
            <speech>Uma explosão infernal, uma onda de umidade,
                Ou as pétalas da própria natureza? Você não se arrependerá
                Decida-se, seja cauteloso em sua escolha;
                Se sua alma e sua mente estiverem alinhadas, você se alegrará.</speech>
        </speeches>
        <speeches id="5">
            <speech>Isso é o que eu queria, isso é o que eu chamo de negócio!
                Prezado $PLAYER_NAME, bem-vindo ao Culto dos Espíritos, por favor, aceite este selo.</speech>
            <speech>Com esse pequeno selo de papel, você poderá ver outros membros do culto em todo o mundo.</speech>
            <speech>Tenha cuidado com isso, $PLAYER_NAME. Uma vez que você demonstre sua devoção, não poderá voltar atrás!</speech>
            <speech>Uma explosão infernal, uma onda de umidade,
                Ou as pétalas da própria natureza? Você não se arrependerá
                Decida-se, seja cauteloso em sua escolha;
                Se sua alma e sua mente estiverem alinhadas, você se alegrará.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Você busca as chamas místicas; você gosta de jogos ardentes~</speech>
            <speech>Se você quiser ultrapassar seus limites, deverá trazer os cães de caça.</speech>
            <speech>Faça o que eu digo e a chama lhe mostrará o caminho~</speech>
        </speeches>
        <speeches id="2">
            <speech>Você traz os cães de caça; é hora de mais rodadas~</speech>
            <speech>Veja como o fogo do inferno se enfurece; ecoando a voz dos sábios~</speech>
            <speech>Ultrapasse seus limites; solte os cães de caça?~</speech>
        </speeches>
        <speeches id="3">
            <speech>Você anseia pelas chamas, mas refreia a fúria delas</speech>
            <speech>Por mais infeliz que seja, você nunca atingirá a maioridade~</speech>
        </speeches>
        <speeches id="4">
            <speech>As chamas responderão; na noite em que começar~</speech>
            <speech>Os mundos se alinharão; em uma harmonia de chamas!</speech>
        </speeches>
        <speeches id="5">
            <speech>Busque a santidade; busque a chama</speech>
            <speech>Na noite escura e fatídica, ele lhe mostrará o verdadeiro caminho</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Você busca as marés místicas; você aprecia a agitação dos mares~</speech>
            <speech>Traga-me a escuridão do mar, para que apenas a luz permaneça~.</speech>
            <speech>Faça o que eu digo e as marés o levarão à glória~</speech>
        </speeches>
        <speeches id="2">
            <speech>Você traz a escuridão; exatamente como eu havia pedido~</speech>
            <speech>Observe como os oceanos amaldiçoados sobem, expondo o que estava mascarado~</speech>
            <speech>Traga os mares; dê-me o que eu quero, por favor?~</speech>
        </speeches>
        <speeches id="3">
            <speech>Você rejeita as marés; você abandona os mares~</speech>
            <speech>Agora você deve observar como o poder dele o coloca de joelhos~</speech>
        </speeches>
        <speeches id="4">
            <speech>As marés responderão; na noite em que começar~</speech>
            <speech>Os mundos se alinharão; em uma harmonia de opereta oceânica~</speech>
        </speeches>
        <speeches id="5">
            <speech>Busque o sino; busque os oceanos~</speech>
            <speech>Na noite escura e fatídica, eles lhe mostrarão suas verdadeiras emoções~</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Você procura os bosques assombrados; você não teme os capuzes do ceifador~</speech>
            <speech>Traga-me o espinho; traga-me sua maldição~</speech>
            <speech>Faça o que eu digo; caso contrário, nosso destino será pior~</speech>
        </speeches>
        <speeches id="2">
            <speech>Você traz o espinho; você traz sua dor sombria~</speech>
            <speech>Agora os bosques amaldiçoados responderão; com trovões e chuva~</speech>
            <speech>O horror, a vergonha; não é um jogo~</speech>
            <speech>Confie em mim, meu jovem, você desejaria nunca ter nascido~</speech>
            <speech>Então, alivie seu fardo e me dê o espinho?</speech>
        </speeches>
        <speeches id="3">
            <speech>Você anseia pela floresta, mas não demonstra dedicação~</speech>
            <speech>O que você precisa fazer é meditar bastante~</speech>
        </speeches>
        <speeches id="4">
            <speech>Os bosques uivantes responderão; na noite em que começar~</speech>
            <speech>Os mundos se alinharão e as florestas surgirão!</speech>
        </speeches>
        <speeches id="5">
            <speech>Procurem o santificado; procurem os bosques;</speech>
            <speech>Na noite escura e fatídica, eles lhe mostrarão a realidade~</speech>
        </speeches>
    </conversation>
</npcs>