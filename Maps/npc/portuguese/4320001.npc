<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Ah, saudações, intrépido explorador! Você se deparou com o covil do maior fanático por fósseis - esse sou eu!</speech>
            <speech>Vivo para a emoção de desenterrar o passado, um fóssil de cada vez. As histórias que essas relíquias antigas sussurram... Ah, música para meus ouvidos!</speech>
            <speech>Você sabia? As minas são um tesouro dessas maravilhas pré-históricas.</speech>
            <speech>A um golpe de picareta de descobrir a história!</speech>
            <speech>Então, o que você acha? Tem algum fóssil com você?</speech>
            <speech>Entregue-os e eu os trocarei por baús repletos de maravilhas.</speech>
            <speech>Escolha com sabedoria! Cada fóssil guarda um segredo único, uma história que está esperando para ser contada. Qual deles você vai confiar a mim hoje?</speech>
        </speeches>
        <speeches id="2">
            <speech>Ah, não há fósseis para trocar hoje? Isso é como encontrar uma pedra onde você esperava encontrar um Kabuto!</speech>
            <speech>Mas não tema! As minas o aguardam, repletas de segredos de eras passadas. Quem sabe quais descobertas sua próxima aventura trará?</speech>
            <speech>Cada fóssil que você encontra é um fragmento da história, uma peça do quebra-cabeça de um mundo há muito desaparecido.</speech>
            <speech>Estarei bem aqui, pronto para quando você voltar com seus tesouros.</speech>
            <speech>Então, pegue sua picareta e parta! As profundezas da Terra escondem maravilhas esperando que alguém como você as descubra.</speech>
            <speech>Aguardo ansiosamente sua próxima visita!</speech>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>Saudações, $PLAYER_NAME. Você se encontra em uma encruzilhada de história e lenda.</speech>
            <speech>Eu procuro os fragmentos de uma era passada, especificamente ligados ao Aerodactyl, um titã dos céus antigos.</speech>
            <speech>Fragmento de asa de avião, fragmento de mandíbula pré-histórica,</speech>
            <speech>Fossilized Talon Segment, Ancient Rib Fragment e Tail Fin Slice são as chaves para desvendar esse quebra-cabeça.</speech>
            <speech>Se você encontrar essas relíquias em suas viagens, considere o poder delas e o papel que você pode desempenhar para reviver uma lenda.</speech>
            <speech>Cada peça é uma história, um pedaço da história que está esperando para ser contado. A Aerodacylite, uma pedra de imenso poder, pode ser forjada a partir desses fragmentos.</speech>
            <speech>Imagine, $PLAYER_NAME, a oportunidade de testemunhar o ressurgimento do Aerodactyl, de ficar ao lado de uma criatura mítica e poderosa.</speech>
            <speech>Se essa busca o chama, procure esses fragmentos. Quando estiver pronto, estarei aqui, esperando para guiá-lo nessa jornada pelos anais do tempo.</speech>
        </speeches>
        <speeches id="2">
            <speech>Você reuniu todos os fragmentos! Juntas, essas relíquias falam de uma época em que o Aerodactyl dominava os céus.</speech>
            <speech>Você está preparado para confiar essas peças a mim? Em troca, ofereço o Aerodacylite, um canal para o passado, uma chave para despertar o poder do Aerodactyl.</speech>
            <speech>Essa decisão é monumental, $PLAYER_NAME. Não se trata apenas de reviver uma lenda; trata-se de se reconectar com o mundo antigo</speech>
        </speeches>
        <speeches id="3">
            <speech>Entendo sua hesitação. As relíquias do passado carregam peso, histórias não contadas e mistérios não revelados.</speech>
            <speech>Caso seu caminho o leve de volta a mim, saiba que o Aerodacylite e a lenda que ele abriga aguardam sua decisão.</speech>
        </speeches>
        <speeches id="4">
            <speech>Sua decisão de compartilhar essas relíquias abriu uma porta para o passado.</speech>
            <speech>Aqui, pegue o Aerodacylite, um símbolo de nossa jornada para reviver o Aerodactyl.</speech>
            <speech>Deixe que esta pedra sirva como um testemunho de sua coragem e curiosidade. Juntos, transformamos a lenda em realidade.</speech>
        </speeches>
    </conversation>

</npcs>