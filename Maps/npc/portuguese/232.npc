<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Parabéns! Você venceu nossos cinco treinadores do concurso! Acabou de ganhar um prêmio fabuloso! Uma batalha comigo!</speech>
            <speech>A propósito, gostaria de fazer parte da Equipe Rocket? Somos um grupo de criminosos profissionais especializados em Pokémon!</speech>
            <speech>Deseja participar? Tem certeza?</speech>
            <speech>Venha, junte-se a nós!</speech>
            <speech>Estou dizendo para você participar! OK, você precisa ser convencido! Vou lhe fazer uma oferta irrecusável!</speech>
        </speeches>
        <speeches id="2">
            <speech>O senhor... Obrigado... Agora minha jornada pode chegar ao fim...</speech>
        </speeches>
        <speeches id="3">
            <speech>O senhor... Obrigado... Agora minha jornada pode chegar ao fim...</speech>
        </speeches>
        <speeches id="4">
            <speech>Ganhei novamente... Minha jornada ainda não terminou...</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Não é que eu esteja chamando as montanhas. São as montanhas que estão me chamando!</speech>
        </speeches>
        <speeches id="2">
            <speech>Posso ouvir uma voz chorosa... As montanhas estão chorando...</speech>
        </speeches>
        <speeches id="3">
            <speech>Posso ouvir uma voz chorosa... As montanhas estão chorando...</speech>
        </speeches>
        <speeches id="4">
            <speech>Um homem que é amado pelas montanhas... Culpado como acusado...</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>A luta é como a moda. Você precisa de estilo, graça e execução perfeita!</speech>
        </speeches>
        <speeches id="2">
            <speech>O quê?! Isso não deveria ter acontecido... Talvez eu precise de uma reforma na batalha</speech>
        </speeches>
        <speeches id="3">
            <speech>O quê?! Isso não deveria ter acontecido... Talvez eu precise de uma reforma na batalha</speech>
        </speeches>
        <speeches id="4">
            <speech>Impecável, como esperado! Beleza e força formam uma combinação perfeita!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Posso ser jovem, mas meus Pokémon são durões! Prepare-se para perder!</speech>
        </speeches>
        <speeches id="2">
            <speech>Espere, mas eu achava que tinha essa!</speech>
        </speeches>
        <speeches id="3">
            <speech>Espere, mas eu achava que tinha essa!</speech>
        </speeches>
        <speeches id="4">
            <speech>Ah! Eu disse a você! Talvez quando você for mais velho, você seja tão bom quanto eu!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Nada supera uma boa caminhada e uma boa batalha! Vamos ver se você aguenta a escalada!</speech>
        </speeches>
        <speeches id="2">
            <speech>Parece que cheguei a uma estrada rochosa, mas isso é apenas parte da jornada!</speech>
        </speeches>
        <speeches id="3">
            <speech>Parece que cheguei a uma estrada rochosa, mas isso é apenas parte da jornada!</speech>
        </speeches>
        <speeches id="4">
            <speech>Ah! Uma base sólida faz toda a diferença tanto nas caminhadas quanto nas batalhas!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Meus Pokémon são super-duper fortes! Você vai perder com certeza!</speech>
        </speeches>
        <speeches id="2">
            <speech>Waaah! Não é justo! Você é apenas um grande malvado!</speech>
        </speeches>
        <speeches id="3">
            <speech>Waaah! Não é justo! Você é apenas um grande malvado!</speech>
        </speeches>
        <speeches id="4">
            <speech>Boa, boa! Eu ganhei! Sou o melhor treinador de todos!</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Não se deixe enganar pelo meu sorriso doce. Sou uma competidora feroz!</speech>
        </speeches>
        <speeches id="2">
            <speech>Ops! Acho que não estava tão preparado quanto pensei, mas tudo bem, tentarei novamente!</speech>
        </speeches>
        <speeches id="3">
            <speech>Ops! Acho que não estava tão preparado quanto pensei, mas tudo bem, tentarei novamente!</speech>
        </speeches>
        <speeches id="4">
            <speech>Hehe, eu disse a você que eu era durão! Bonito e forte, essa é a melhor combinação!</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>Eu já escalei montanhas e cruzei vales, isso vai ser moleza!</speech>
        </speeches>
        <speeches id="2">
            <speech>Hah! Bem, parece que ainda tenho um longo caminho a percorrer... até mesmo os caminhantes mais resistentes tropeçam às vezes.</speech>
        </speeches>
        <speeches id="3">
            <speech>Hah! Bem, parece que ainda tenho um longo caminho a percorrer... até mesmo os caminhantes mais resistentes tropeçam às vezes.</speech>
        </speeches>
        <speeches id="4">
            <speech>Assim como o caminho para o cume, firme e forte, eu consegui chegar ao topo!</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Trapinch" speed="1" sprite="328" type="pokemon" x="3" y="7">
        <path>DOWNx2,UPx2</path>
        <onCollisionSpeech gap="4">Traaa!</onCollisionSpeech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="2" name="Emma" randomRotation="true" sprite="82" x="15" y="11">
        <speech>Você tem visto algum Trapinch por aí ultimamente?</speech>
        <speech>Tentando pegar um porque Flygon é o melhor Pokémon do tipo Dragão!</speech>
    </npc>
    <movingNpc direction="RIGHT" id="3" name="Cacnea" speed="1" sprite="331" type="pokemon" x="37" y="23">
        <path>RIGHTx4,LEFTx4</path>
        <onCollisionSpeech gap="4">Caacneaaaa!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="4" name="Joltik" speed="1" sprite="595" type="pokemon" x="23" y="6">
        <path>RIGHTx2,LEFTx2</path>
        <onCollisionSpeech gap="4">Jooolt!</onCollisionSpeech>
    </movingNpc>
    <movingNpc direction="DOWN" id="5" name="Liam" speed="1" sprite="21" type="npc" x="61" y="28">
        <path>LEFTx6,RIGHTx6</path>
        <onCollisionSpeech gap="4"/>
        <speech>Desculpe, garoto.</speech>
        <speech>Preciso dar essas voltas se quiser impressionar Misty e ganhar minha chance no Cerulean Gym!</speech>
    </movingNpc>
    <npc direction="RIGHT" hidden="false" id="6" name="Rafiki" randomRotation="false" sprite="20" x="97" y="14">
        <speech>Ah, sim, o passado pode machucar.</speech>
        <speech>Mas, do meu ponto de vista, você pode fugir disso ou aprender com isso.</speech>
    </npc>
</npcs>