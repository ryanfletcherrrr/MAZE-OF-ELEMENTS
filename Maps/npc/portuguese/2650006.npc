<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Posso ser um marinheiro, mas sou o melhor cozinheiro do navio! Vamos ver se você aguenta o calor!</speech>
        </speeches>
        <speeches id="2">
            <speech>Acho que sou melhor com uma frigideira do que com um plano de batalha...</speech>
        </speeches>
        <speeches id="3">
            <speech>Acho que sou melhor com uma frigideira do que com um plano de batalha...</speech>
        </speeches>
        <speeches id="4">
            <speech>Meus Pokémon são como minha culinária... temperados com perfeição!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Já comi mais peixes do que você já viu! Não pense que você pode me vencer em uma batalha!</speech>
        </speeches>
        <speeches id="2">
            <speech>Acho que estou passando muito tempo na mesa de jantar...</speech>
        </speeches>
        <speeches id="3">
            <speech>Acho que estou passando muito tempo na mesa de jantar...</speech>
        </speeches>
        <speeches id="4">
            <speech>Nada como uma vitória para abrir o apetite! Hora de comer mais patas de caranguejo!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Já limpei esses decks da proa à popa, agora vou limpar essa batalha também!</speech>
        </speeches>
        <speeches id="2">
            <speech>Parece que vou ter que limpar essa bagunça também...</speech>
        </speeches>
        <speeches id="3">
            <speech>Parece que vou ter que limpar essa bagunça também...</speech>
        </speeches>
        <speeches id="4">
            <speech>O trabalho árduo compensa, tanto nas batalhas quanto no navio!</speech>
        </speeches>
    </conversation>
    <movingNpc direction="RIGHT" id="1" name="Raticate" speed="1" sprite="20" type="pokemon" x="14" y="10">
        <path>RIGHTx5,LEFTx5</path>
        <onCollisionSpeech gap="4">Remmmmmmy?</onCollisionSpeech>
    </movingNpc>
    <npc direction="UP" hidden="false" id="2" name="Auguste" randomRotation="false" sprite="58" x="11" y="10">
        <speech>Não tenho certeza de como vim parar aqui, mas Remy e eu fazemos refeições porque qualquer um pode cozinhar!</speech>
    </npc>
</npcs>