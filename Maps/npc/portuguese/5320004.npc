<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Estou muito perto de ser promovido a Comandante. Vou impressionar meu grande chefe derrotando você.</speech>
        </speeches>
        <speeches id="2">
            <speech>Não acho que serei promovido tão cedo.</speech>
        </speeches>
        <speeches id="3">
            <speech>Não acho que serei promovido tão cedo.</speech>
        </speeches>
        <speeches id="4">
            <speech>A promoção não está muito longe.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>Está se divertindo com as brincadeiras em nosso QG, seu intruso sorrateiro?</speech>
            <speech>Seu trabalho de desbravar trilhas será muito glorioso agora mesmo!</speech>
        </speeches>
        <speeches id="2">
            <speech>Sua trajetória de pioneirismo continua viva.</speech>
        </speeches>
        <speeches id="3">
            <speech>Sua trajetória de pioneirismo continua viva.</speech>
        </speeches>
        <speeches id="4">
            <speech>Sua série termina aqui, intruso.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>Você já deve estar cansado. É a vez da Equipe Galáctica brilhar!</speech>
        </speeches>
        <speeches id="2">
            <speech>Estou amargurado porque você brilha como purpurina.</speech>
        </speeches>
        <speeches id="3">
            <speech>Estou amargurado porque você brilha como purpurina.</speech>
        </speeches>
        <speeches id="4">
            <speech>Nós brilhamos como purpurina, seu rosto parece amargo.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>

    <conversation id="5">
        <speeches id="1">
            <speech>Não vou deixar que você atrapalhe minha pesquisa. Ela é muito valiosa para a Equipe Galáctica.</speech>
        </speeches>
        <speeches id="2">
            <speech>Fui chicoteado... Estou parecendo patético...</speech>
        </speeches>
        <speeches id="3">
            <speech>Fui chicoteado... Estou parecendo patético...</speech>
        </speeches>
        <speeches id="4">
            <speech>Eu deveria escrever um trabalho de pesquisa sobre como chicotear jovens treinadores.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
</npcs>