<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Ahahaha! Como você parece patético agora. O tolo, Archie.</speech>
        </speeches>
        <speeches id="2">
            <speech>Fuhahaha! Exatamente como eu havia previsto.</speech>
        </speeches>
        <speeches id="3">
            <speech>Até eu, o grande Maxie, já me peguei desejando algo que não posso justificar.</speech>
            <speech>E o desejo ilógico que eu nutria era tê-lo presente aqui neste momento.</speech>
            <speech>Hahahaha... E agora o desejo desse tolo se tornou realidade. Fantástico!</speech>
            <speech>Nada poderia me agradar mais! Suponho que eu deva fazer apresentações...</speech>
            <speech>Apresento-lhes meu incomparável parceiro, que ajudará a Equipe Magma a levar a humanidade ao próximo nível.
                seu próximo nível!
            </speech>
            <speech>O super-antigo Pokémon...</speech>
            <speech>Groudon! Vejam! Essa grande forma adormecida, desafiando até mesmo a lava fervente que a cerca!
            </speech>
            <speech>Há tanto tempo estou esperando por esse dia...</speech>
            <speech>Imensuravelmente longo!</speech>
            <speech>Esse mundo tolo atrasou o progresso da humanidade por causa de um idealismo equivocado em relação à
                coexistência de humanos e Pokémon.
            </speech>
            <speech>Mas essa antiga criatura pode levar isso ao seu devido fim, criando uma nova terra na qual a
                a humanidade possa avançar livremente.
            </speech>
            <speech>Agora que finalmente obtive o poder do Groudon Primordial!</speech>
            <speech>E agora, você é o último obstáculo que resta entre mim e meus objetivos.</speech>
            <speech>Cabe a mim usar todas as ferramentas à minha disposição para eliminá-lo.</speech>
            <speech>De fato! Até mesmo a Mega Evolução! Não se iluda achando que você e seu Pokémon são os únicos
                capazes de fazer isso.
            </speech>
            <speech>Peço desculpas por tê-lo feito esperar durante nossos encontros no Mt. Chimney e no Mt. Pyre sem
                sem lhe mostrar essa visão.
            </speech>
            <speech>Prepare-se para o meu ataque final! Fuhahaha!</speech>
        </speeches>
        <speeches id="4">
            <speech>Você realmente conseguiu, criança. Você demonstrou um poder que excede o do grande Maxie!</speech>
        </speeches>
        <speeches id="5">
            <speech>Hah... Hah... Hahhh...</speech>
            <speech>... Ah. Aha... Fuhahaha... Kahahahaha!</speech>
            <speech>GAHAHAHAHAHAHA!</speech>
            <speech>Esplêndido. Simplesmente esplêndido, meu jovem Trainer.</speech>
            <speech>Não, é mais do que isso! Eu deveria chamá-lo de meu jovem herói!</speech>
            <speech>Acreditando até o fim que um mundo onde a humanidade e os Pokémon coexistem deve ser o melhor...
            </speech>
            <speech>Rejeitando meus ideais sem pensar duas vezes...</speech>
            <speech>Sim, vendo você lutar desesperadamente para impedir o início do fim do mundo...</speech>
            <speech>Você é, sem dúvida, um herói! Tão nobre... E ainda assim.</speech>
            <speech>Não vou me render! Não vou me curvar! Meus ideais não serão abalados!</speech>
            <speech>Meu sonho para o próximo passo do mundo nunca mudará!</speech>
            <speech>Usarei a Red Orb para despertar o Groudon, revertê-lo à sua forma original e acabar com tudo o mais.
                outros!
            </speech>
        </speeches>
        <speeches id="6">
            <speech>Buh?! Tabitha?!</speech>
            <speech>Humph. Você achou que eu não tinha notado?</speech>
            <speech>Que, de alguma forma, eu não percebi que você estava atrás da minha vaga? É realmente um desenvolvimento muito triste.</speech>
            <speech>Ser traído pelo meu número dois...</speech>
            <speech>No final, há apenas um ser do qual posso depender! Agora, Groudon!</speech>
            <speech>Absorva todo o poder contido nesse Red Orb e recupere-se!</speech>
            <speech>Volte à sua forma primordial! Este é o momento de recuperar a grande evolução que você perdeu no
                passado antigo!
            </speech>
            <speech>Recupere a possibilidade que você já teve!</speech>
        </speeches>
        <speeches id="7">
            <speech>Gahahahaha! Até que enfim... AT LAST!</speech>
            <speech>Finalmente consegui!!!</speech>
            <speech>Um novo mundo para a evolução humana nascerá!!! Vamos seguir em frente!!!</speech>
        </speeches>
        <speeches id="8">
            <speech>... O quê?</speech>
            <speech>Uma mensagem de nossos membros do exterior?</speech>
            <speech>O que é isso? Então o sol se tornou impiedosamente feroz em seu calor.</speech>
            <speech>Eu deveria esperar que sim. Isso é o que eu tenho há muito tempo - Não, o que NÓS temos desejado há muito tempo.</speech>
            <speech>O quê? O calor é maior do que o previsto nas simulações?</speech>
            <speech>Será um risco para nossa própria segurança se isso continuar...!</speech>
            <speech>Isso não pode ser... Ele acabou de despertar... De onde ele está obtendo tanta energia?</speech>
            <speech>E quanto mais ele ganhará quando sofrer a Reversão Primordial...</speech>
            <speech>C-continue suas leituras! Depois, faça um relatório!</speech>
        </speeches>
        <speeches id="9">
            <speech>Tudo o que importa é... Que eu usei a esfera vermelha para despertar o Groudon.</speech>
            <speech>E agora... Transformarei este planeta em uma terra ideal para a humanidade.</speech>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>Ugh...</speech>
            <speech>Ugh! Arghhh... M-Maxie... você...!</speech>
        </speeches>
        <speeches id="2">
            <speech>Malandro...</speech>
        </speeches>
        <speeches id="3">
            <speech>Ei, Maxie. Parece que subestimamos o poder do Pokémon superantigo...</speech>
            <speech>O poder da Reversão Primal...</speech>
            <speech>O Primal Groudon traz um "fim", sem dúvida.</speech>
            <speech>Mas você não pode escolher o fim.</speech>
            <speech>Isso vai levar todos os seres vivos do planeta à morte!</speech>
            <speech>A única coisa que nos espera é o desespero. Um desespero do qual não podemos nem mesmo fugir.</speech>
            <speech>Um desespero que vai esmagar a humanidade.</speech>
            <speech>Seu maldito idiota...</speech>
            <speech>E tudo isso está acontecendo porque você foi arrogante o suficiente para pensar que poderia controlar o poder do Pokémon superantigo!</speech>
        </speeches>
    </conversation>

    <conversation id="4">
        <speeches id="1">
            <speech>Espere! Maxie!</speech>
            <speech>Pare com isso agora...</speech>
            <speech>Por favor! Maxie! Você simplesmente não está entendendo!</speech>
            <speech>O que Groudon trará ao despertar é o fim do mundo!</speech>
        </speeches>
        <speeches id="2">
            <speech>Ohh... O que você fez... Chefe... O que...</speech>
        </speeches>
        <speeches id="3">
            <speech>Chefe?! Maxie?! O que está acontecendo na superfície?!</speech>
        </speeches>
        <speeches id="4">
            <speech>Portanto, as informações que recebemos do Weather Institute eram verdadeiras...</speech>
            <speech>Chefe Maxie! Nunca chegaremos a lugar algum se ficarmos parados aqui desse jeito!</speech>
            <speech>Não há um momento a perder! Precisamos confirmar a situação do lado de fora!</speech>
            <speech>Criança! Você também está vindo! Apresse-se!</speech>
        </speeches>
    </conversation>
</npcs>