<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Levantaremos âncora a qualquer momento para você! Então me diga, meu amigo, para onde estamos indo?</speech>
        </speeches>
        <speeches id="2">
            <speech>Tem certeza disso? Bem, a Peeko deve a vida dela a você.</speech>
            <speech>É só ir em frente e me dizer sempre que quiser zarpar. Eu enfrentarei qualquer maré por você!</speech>
        </speeches>
    </conversation>
    <npc direction="DOWN" hidden="false" id="2" name="Nina" randomRotation="true" sprite="53" x="45" y="10">
        <speech>As crianças pequenas podem se movimentar muito rapidamente.</speech>
        <speech>Você não ousa tirar os olhos deles nem por um instante! É muito cansativo.</speech>
        <speech>Acho que não devo me preocupar, já que o meu está com seu pokémon guardião, mas nunca se sabe...</speech>
    </npc>
    <movingNpc direction="DOWN" id="3" name="Trapinch" speed="1" sprite="328" type="pokemon" x="59" y="11">
        <path>DOWNx2,RIGHTx2,LEFTx2,UPx2</path>
        <onCollisionSpeech gap="4">Trapin,pinch!</onCollisionSpeech>
        <speech>O Trapinch parece concentrado em sua tarefa de criar um enorme castelo de areia.</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="5" name="Aaricia" randomRotation="true" sprite="6" x="66" y="42">
        <speech>O que é isso?</speech>
        <speech>Uma garota não pode tomar banho de sol em paz?</speech>
        <speech>Tenha sua própria ilha!</speech>
    </npc>
    <movingNpc direction="DOWN" id="6" name="Corphish" shouldSleep="" speed="1" sprite="341" type="pokemon" x="50" y="34">
        <path>RIGHTx7,UPx5,RIGHTx5,LEFTx5,DOWNx5,LEFTx7</path>
        <onCollisionSpeech gap="4">Cor, Phish?</onCollisionSpeech>
        <speech>Phish PHISH!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="7" name="Corphish" shouldSleep="" speed="1" sprite="341" type="pokemon" x="31" y="21">
        <path>DOWNx6,RIGHTx5,DOWNx5,UPx5,LEFTx5,UPx6</path>
        <onCollisionSpeech gap="4">Cor. Phish! Cor. Phish!</onCollisionSpeech>
        <speech>Cor! Phish!</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="8" name="Richard" randomRotation="true" sprite="48" x="29" y="5">
        <speech>Estou começando a achar que não foi uma ideia muito brilhante levar o almoço para a praia quando ela está cheia de Wingull....</speech>
    </npc>
    <movingNpc direction="DOWN" id="9" name="Wingull" speed="1" sprite="278" type="pokemon" x="26" y="7">
        <path>RIGHTx5,UPx4,LEFTx5,DOWNx4</path>
        <onCollisionSpeech gap="4">Wingull!</onCollisionSpeech>
        <speech>Wingull parece realmente interessado na comida que Richard está tentando esconder...</speech>
        <speech>assim como seus amigos.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="10" name="Wingull" speed="1" sprite="278" type="pokemon" x="31" y="7">
        <path>UPx4,LEFTx5,DOWNx4,RIGHTx5</path>
        <onCollisionSpeech gap="4">Wingull!</onCollisionSpeech>
        <speech>Wingull parece realmente interessado na comida que Richard está tentando esconder...</speech>
        <speech>assim como seus amigos.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="11" name="Wingull" speed="1" sprite="278" type="pokemon" x="31" y="3">
        <path>LEFTx5,DOWNx4,RIGHTx5,UPx4</path>
        <onCollisionSpeech gap="4"/>
        <speech>Wingull parece realmente interessado na comida que Richard está tentando esconder...</speech>
        <speech>assim como seus amigos.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="12" name="Wingull" speed="1" sprite="278" type="pokemon" x="26" y="3">
        <path>DOWNx4,RIGHTx5,UPx4,LEFTx5</path>
        <onCollisionSpeech gap="4">Wingull!!</onCollisionSpeech>
        <speech>Wingull parece realmente interessado na comida que Richard está tentando esconder...</speech>
        <speech>assim como seus amigos.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="13" name="Tentacool" shouldSleep="" speed="1" sprite="72" type="pokemon" x="19" y="30">
        <path>DOWNx8,UPx8</path>
        <onCollisionSpeech gap="4">tacool, tentatenta ^^</onCollisionSpeech>
        <speech>Tentacool está flutuando nas ondas.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="14" name="Staryu" speed="1" sprite="120" type="pokemon" x="35" y="55">
        <path>RIGHTx15,LEFTx15</path>
        <onCollisionSpeech gap="4">Sta!</onCollisionSpeech>
        <speech>Staryu!</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="15" name="Robinson" randomRotation="true" sprite="48" x="19" y="56">
        <speech>Como cheguei aqui???</speech>
        <speech>Onde está meu amigo?</speech>
        <speech>WILSON!!!!! WIIIIIIILSSOOOOON!</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="16" name="Collector Aaron" randomRotation="true" sprite="37" x="27" y="76">
        <speech>Essas conchas são minhas.</speech>
        <speech>Vá embora!</speech>
    </npc>
    <movingNpc direction="DOWN" id="17" name="Wailmer" speed="1" sprite="320" type="pokemon" x="36" y="76">
        <path>RIGHTx15,DOWNx4,LEFTx15,UPx4</path>
        <onCollisionSpeech gap="4">Wailmer!</onCollisionSpeech>
        <speech>Wailmer parece surpreso por você ter conseguido alcançá-lo</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="18" name="Hugo" randomRotation="true" sprite="16" x="58" y="69">
        <speech>Parece que fui parar na ilha Corphish.</speech>
        <speech>Há muitos deles.</speech>
    </npc>
    <movingNpc direction="DOWN" id="19" name="Corphish" speed="1" sprite="341" type="pokemon" x="55" y="66">
        <path>RIGHTx4,UPx4,RIGHTx2,UPx2,RIGHTx7,DOWNx2,RIGHTx2,DOWNx6,LEFTx2,DOWNx6,LEFTx13,UPx8</path>
        <onCollisionSpeech gap="4">Corphish!</onCollisionSpeech>
        <speech>O Corphish gosta de caminhar na areia</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="20" name="Artist Monica" randomRotation="true" sprite="28" x="66" y="64">
        <speech>Tantos Corphish, todos fazendo coisas diferentes...</speech>
        <speech>Não sei qual deles deve ser o tema de minha pintura.</speech>
    </npc>
    <movingNpc direction="DOWN" id="21" name="Corphish" shouldSleep="" speed="1" sprite="341" type="pokemon" x="70" y="70">
        <path>LEFTx1,DOWNx1,RIGHTx1,UPx1</path>
        <onCollisionSpeech gap="4">Cor-corphish</onCollisionSpeech>
        <speech>Corphish está brincando em uma pequena poça.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="22" name="Corphish" shouldSleep="" speed="1" sprite="341" type="pokemon" x="62" y="67">
        <path>RIGHTx2,DOWNx2,LEFTx2,UPx2</path>
        <onCollisionSpeech gap="4">Cooooorrrr! Phish!</onCollisionSpeech>
        <speech>O Corphish está tentando desenterrar esse shell.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="23" name="Corphish" speed="1" sprite="341" type="pokemon" x="70" y="68">
        <path>LEFTx2,DOWNx6,LEFTx13,UPx8,RIGHTx4,UPx4,RIGHTx2,UPx2,RIGHTx7,DOWNx2,RIGHTx2,DOWNx6</path>
        <onCollisionSpeech gap="4">Phish!</onCollisionSpeech>
        <speech>O Corphish gosta de andar na areia.</speech>
    </movingNpc>
    <conversation id="2">
        <speeches id="1">
            <speech>A experiência gera poder! Não é isso que dizem?! De qualquer forma, você não vai lutar comigo?</speech>
        </speeches>
        <speeches id="2">
            <speech>Essa batalha foi uma experiência valiosa. Ainda preciso ganhar mais experiência!</speech>
        </speeches>
        <speeches id="3">
            <speech>Essa batalha foi uma experiência valiosa. Ainda preciso ganhar mais experiência!</speech>
        </speeches>
        <speeches id="4">
            <speech>Até mesmo um amador como eu pode vencer! A experiência é o melhor professor, é o que dizem.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Eu sou a heroína da justiça! Sua pessoa misteriosa e maligna! Eu o expulsarei daqui!</speech>
        </speeches>
        <speeches id="2">
            <speech>Opa! O mundo está caindo nas mãos do mal! Será que estamos caminhando para um final infeliz?</speech>
        </speeches>
        <speeches id="3">
            <speech>Opa! O mundo está caindo nas mãos do mal! Será que estamos caminhando para um final infeliz?</speech>
        </speeches>
        <speeches id="4">
            <speech>O quê? Eu me dei ao trabalho de derrubá-lo, mas você não explodiu como na TV!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Estou cansado de ser chamado de Beleza.</speech>
        </speeches>
        <speeches id="2">
            <speech>Você precisa fazer muitos sacrifícios para ser uma Bela. Não tenho mais esse esforço. Vamos em frente!</speech>
        </speeches>
        <speeches id="3">
            <speech>Você precisa fazer muitos sacrifícios para ser uma Bela. Não tenho mais esse esforço. Vamos em frente!</speech>
        </speeches>
        <speeches id="4">
            <speech>Quando as pessoas me chamam de Bela, elas não percebem a pressão que isso exerce sobre mim.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Não há limites para essa jornada! Onde está minha aventura?!</speech>
        </speeches>
        <speeches id="2">
            <speech>Cheirar, cheirar... Isso não é bom... Não consigo sentir o perfume do amor. Tchau!</speech>
        </speeches>
        <speeches id="3">
            <speech>Cheirar, cheirar... Isso não é bom... Não consigo sentir o perfume do amor. Tchau!</speech>
        </speeches>
        <speeches id="4">
            <speech>A jornada ainda não terminou. É só você esperar! Eu lhe mostrarei a maior aventura de todos os tempos!</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Eu treinei e me treinei sem parar, então agora sou tão rápido quanto o vento!</speech>
        </speeches>
        <speeches id="2">
            <speech>Aposto que os caras que sabem surfar conseguem mais garotas do que os caras que andam de patins. Eu gostaria de poder surfar...</speech>
        </speeches>
        <speeches id="3">
            <speech>Aposto que os caras que sabem surfar conseguem mais garotas do que os caras que andam de patins. Eu gostaria de poder surfar...</speech>
        </speeches>
        <speeches id="4">
            <speech>Ow! Ai! Ai! Meu rosto! Sou o garoto-propaganda das queimaduras de vento!</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Este não é um uniforme - é apenas o que eu gosto de usar. Eu mesmo o fiz.</speech>
        </speeches>
        <speeches id="2">
            <speech>Uau, essa foi por pouco. Quase sujei minhas roupas.</speech>
        </speeches>
        <speeches id="3">
            <speech>Uau, essa foi por pouco. Quase sujei minhas roupas.</speech>
        </speeches>
        <speeches id="4">
            <speech>Gostaria de poder viver nos mundos que vejo em jogos, animes e quadrinhos.</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>Mesmo que as pessoas o chamem de Ace Trainer, você não recebe nada de especial por isso.</speech>
        </speeches>
        <speeches id="2">
            <speech>No final, ser bom em lutar sozinho não é suficiente, não importa o quão forte você seja.</speech>
        </speeches>
        <speeches id="3">
            <speech>No final, ser bom em lutar sozinho não é suficiente, não importa o quão forte você seja.</speech>
        </speeches>
        <speeches id="4">
            <speech>Sou apenas bom em batalhas. Eu nem sequer tenho um emprego. Sou apenas mais um desempregado.</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>Sinceramente, não sou muito bom em batalhas Pokémon... No entanto, quando penso em meu futuro, parece que não tenho escolha a não ser batalhar!</speech>
        </speeches>
        <speeches id="2">
            <speech>Veja... Eu sabia que não conseguiria vencer. Não fui feito para competir.</speech>
        </speeches>
        <speeches id="3">
            <speech>Veja... Eu sabia que não conseguiria vencer. Não fui feito para competir.</speech>
        </speeches>
        <speeches id="4">
            <speech>Detesto dizer isso, mas se você não consegue nem me vencer, o resto do caminho vai ser muito difícil.</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>Tenho quatro anos de idade! Vou dar o meu melhor! Treinador, você também deve dar o seu melhor!</speech>
        </speeches>
        <speeches id="2">
            <speech>Uau! Isso é o que eu esperava de um instrutor experiente! Forte!</speech>
        </speeches>
        <speeches id="3">
            <speech>Uau! Isso é o que eu esperava de um instrutor experiente! Forte!</speech>
        </speeches>
        <speeches id="4">
            <speech>Tenho quatro anos de idade! Fiz o meu melhor! Treinador, você também deu o seu melhor!</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>Sabe, os preços nessa região são realmente incríveis, não é mesmo?</speech>
        </speeches>
        <speeches id="2">
            <speech>Eu poderia viver uma vida de luxo em um país onde tudo custa tão pouco!</speech>
        </speeches>
        <speeches id="3">
            <speech>Eu poderia viver uma vida de luxo em um país onde tudo custa tão pouco!</speech>
        </speeches>
        <speeches id="4">
            <speech>Eu não poderia viver em um país onde tudo custa tão caro!</speech>
        </speeches>
    </conversation>
    <conversation id="12">
        <speeches id="1">
            <speech>Estou cansado de servir meu chefe. Você aí! Sirva-me agora!</speech>
        </speeches>
        <speeches id="2">
            <speech>Atender às pessoas é difícil. Você não pode escolher seu chefe, então é estressante.</speech>
        </speeches>
        <speeches id="3">
            <speech>Atender às pessoas é difícil. Você não pode escolher seu chefe, então é estressante.</speech>
        </speeches>
        <speeches id="4">
            <speech>Muito bem! De agora em diante, eu sou seu chefe.</speech>
        </speeches>
    </conversation>
    <movingNpc direction="DOWN" id="1" name="Samuel" shouldSleep="" speed="1" sprite="71" type="npc" x="48" y="23">
        <path>RIGHTx8,DOWNx3,LEFTx8,UPx3</path>
        <onCollisionSpeech gap="4">ouch that hurts!</onCollisionSpeech>
        <speech>Olá! Quer ver meus amigos Pokémon?</speech>
        <speech>Eu tenho um Zigzagoon superveloz e um Wingull voador! Eles são meus melhores amigos!</speech>
        <speech>Eu realmente quero pegar um Pokémon super raro, como um Corphish ou um grande Wailmer!</speech>
        <speech>Adoro brincar com as ondas e procurar tesouros escondidos na areia!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="24" name="Wingull" speed="1" sprite="278" type="pokemon" x="48" y="56">
        <path>UPx10,RIGHTx13,DOWNx10,LEFTx13</path>
        <onCollisionSpeech gap="4">Wingull!</onCollisionSpeech>
        <speech>Wingull!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="25" name="Wingull" speed="1" sprite="278" type="pokemon" x="4" y="72">
        <path>RIGHTx20,UPx20,LEFTx20,DOWNx20</path>
        <onCollisionSpeech gap="4">Wingull!</onCollisionSpeech>
        <speech>Wingull!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="26" name="Relicanth" speed="1" sprite="369" type="pokemon" x="43" y="95">
        <path>LEFTx17,RIGHTx17</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="27" name="Relicanth" speed="1" sprite="369" type="pokemon" x="70" y="88">
        <path>LEFTx20,RIGHTx20</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="28" name="Wingull" speed="1" sprite="278" type="pokemon" x="84" y="67">
        <path>DOWNx11,LEFTx11,UPx11,RIGHTx11</path>
        <onCollisionSpeech gap="4">Wingull!</onCollisionSpeech>
        <speech>Wingull!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="29" name="Pelipper" speed="1" sprite="279" type="pokemon" x="68" y="35">
        <path>RIGHTx10,DOWNx4,LEFTx10,UPx4</path>
        <onCollisionSpeech gap="4">Pelipper!</onCollisionSpeech>
        <speech>Pelipper!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="30" name="Pelipper" speed="1" sprite="279" type="pokemon" x="82" y="51">
        <path>UPx15,LEFTx20,DOWNx15,RIGHTx20</path>
        <onCollisionSpeech gap="4">Pelipper!</onCollisionSpeech>
        <speech>Pelipper!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="31" name="Tentacruel" shouldSleep="" speed="1" sprite="73" type="pokemon" x="35" y="72">
        <path>UPx11,DOWNx11,LEFTx6,RIGHTx6</path>
        <onCollisionSpeech gap="4">Tentacruel!</onCollisionSpeech>
        <speech>Tentacruel!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="4" name="Kira" speed="1" sprite="94" type="npc" x="62" y="12">
        <path>UPx2,LEFTx2,RIGHTx2,DOWNx2</path>
        <onCollisionSpeech gap="4">nooo!! leave our castle alone!</onCollisionSpeech>
        <speech>Construir um castelo na areia é muito mais fácil e divertido com um pokémon de tipo terrestre.</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="32" name="Tentacruel" speed="1" sprite="73" type="pokemon" x="5" y="4">
        <path>DOWNx20,UPx20</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="33" name="Wingull" speed="1" sprite="278" type="pokemon" x="2" y="28">
        <path>RIGHTx20,UPx5,LEFTx20,DOWNx5</path>
        <onCollisionSpeech gap="4">Wingull!</onCollisionSpeech>
        <speech>Wingull!</speech>
    </movingNpc>
</npcs>