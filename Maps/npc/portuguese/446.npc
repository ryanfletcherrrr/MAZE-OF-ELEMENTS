<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Ei, você!</speech>
            <speech>Fique longe do Weather Institute. Ele não é seguro.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>$PLAYER_NAME! Puxa, onde você estava se escondendo? Eu estava procurando por você em todos os lugares!</speech>
            <speech>Uau! Então essa é uma Mega Bracelete? E você pode usá-la para a Mega Evolução...</speech>
            <speech>Onde você conseguiu essa coisa em seu pulso? É uma pulseira muito bonita...</speech>
            <speech>...  Acho que agora você pode ficar ainda mais perto do seu Pokémon, não é?</speech>
            <speech>Alguns caras têm toda a sorte... Mas eu não vou perder para você e para um acessório!</speech>
            <speech>Vamos ver quem é o melhor na batalha! Seus Pokémon estão prontos? Claro que sim! Vamos lá!</speech>
        </speeches>
        <speeches id="2">
            <speech>Achah! Você é tão forte quanto eu esperava!</speech>
            <speech>Bem, até nos encontrarmos novamente! E, da próxima vez, não perderei!</speech>
        </speeches>
        <speeches id="3">
            <speech>Achah! Você é tão forte quanto eu esperava!</speech>
            <speech>Bem, até nos encontrarmos novamente! E, da próxima vez, não perderei!</speech>
        </speeches>
        <speeches id="4">
            <speech>Para ser um treinador, é preciso mais do que apenas exibir acessórios sofisticados.</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>Estou preparado para proteger a natureza por todos os meios necessários!</speech>
        </speeches>
        <speeches id="2">
            <speech>Você está ouvindo? Lembre-se disso... Nunca subestime o poder da natureza...</speech>
        </speeches>
        <speeches id="3">
            <speech>Você está ouvindo? Lembre-se disso... Nunca subestime o poder da natureza...</speech>
        </speeches>
        <speeches id="4">
            <speech>Tudo tem sua origem na natureza! Todos devem reverenciá-la!</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>As únicas pessoas que conseguem usar um furisode são garotas chamativas e senhoras idosas, certo?</speech>
        </speeches>
        <speeches id="2">
            <speech>Você não acha que as senhoras idosas ficam muito bonitas em um furisode?</speech>
        </speeches>
        <speeches id="3">
            <speech>Você não acha que as senhoras idosas ficam muito bonitas em um furisode?</speech>
        </speeches>
        <speeches id="4">
            <speech>É melhor pensar na sua idade ao escolher roupas, certo?</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>Pokémon obedientes, Pokémon egoístas... Os Pokémon têm características únicas.</speech>
        </speeches>
        <speeches id="2">
            <speech>Ao contrário do meu eu diabólico, esses são alguns bons Pokémon.</speech>
        </speeches>
        <speeches id="3">
            <speech>Ao contrário do meu eu diabólico, esses são alguns bons Pokémon.</speech>
        </speeches>
        <speeches id="4">
            <speech>É importante cultivar e treinar as características de cada Pokémon.</speech>
        </speeches>
    </conversation>
    <conversation id="12">
        <speeches id="1">
            <speech>O segredo da força de meus Pokémon é sua comida especialmente misturada.</speech>
        </speeches>
        <speeches id="2">
            <speech>Como isso pôde acontecer com meu Pokémon... O que você está alimentando seu Pokémon?</speech>
        </speeches>
        <speeches id="3">
            <speech>Como isso pôde acontecer com meu Pokémon... O que você está alimentando seu Pokémon?</speech>
        </speeches>
        <speeches id="4">
            <speech>O que acha disso? Forte, não é? O que você come é importante!</speech>
        </speeches>
    </conversation>
    <conversation id="13">
        <speeches id="1">
            <speech>Em minha busca pelo sucesso, me tornei mais solitário do que imaginava...</speech>
        </speeches>
        <speeches id="2">
            <speech>As pessoas com habilidades extraordinárias podem, às vezes, se sentir solitárias.</speech>
        </speeches>
        <speeches id="3">
            <speech>As pessoas com habilidades extraordinárias podem, às vezes, se sentir solitárias.</speech>
        </speeches>
        <speeches id="4">
            <speech>A solidão do gênio... Não há como você compreender isso.</speech>
        </speeches>
    </conversation>
    <conversation id="14">
        <speeches id="1">
            <speech>Preciso estar em uma bicicleta com pneus acro para atravessar essa saliência.</speech>
        </speeches>
    </conversation>
    <conversation id="15">
        <speeches id="1">
            <speech>Não fique nervoso, deixe isso comigo. Se é de técnica que estamos falando, estou confiante.</speech>
        </speeches>
        <speeches id="2">
            <speech>Para o meu Pokémon não ter a menor chance, você deve ser um técnico e tanto!</speech>
        </speeches>
        <speeches id="3">
            <speech>Para o meu Pokémon não ter a menor chance, você deve ser um técnico e tanto!</speech>
        </speeches>
        <speeches id="4">
            <speech>Como foi? Foi divertido, certo? Eu sabia que minha técnica seria a vencedora!</speech>
        </speeches>
    </conversation>

    <conversation id="18">
        <speeches id="1">
            <speech>Olá, $PLAYER_NAME! Estou em uma situação um pouco complicada.</speech>
            <speech>Estávamos estudando o fenômeno Feebas quando um Sceptile, afetado por algumas mudanças climáticas extremas, começou a causar o caos.</speech>
            <speech>Parece que o experimento do Weather Institute pode ter dado errado e, agora, eles não conseguem controlar o clima, influenciando o comportamento do Sceptile.</speech>
            <speech>O instituto e eu desenvolvemos um condensador de raios que acreditamos ser capaz de acalmar o Sceptile, mas ele requer Treecko Scales para funcionar.</speech>
            <speech>Essas escamas têm propriedades exclusivas que as tornam essenciais para o condensador. Você poderia nos ajudar a reuni-las?</speech>
            <speech>Você encontrará Treeckos em áreas densas de vegetação. As escamas são cruciais para o nosso dispositivo e para pesquisas futuras no instituto.</speech>
            <speech>Quando tivermos escalas suficientes, poderemos construir o condensador e, com sorte, reverter o Sceptile para seu estado normal. Conto com a sua ajuda.</speech>
            <speech>Por favor, $PLAYER_NAME, precisamos dessas balanças para evitar mais estragos. Você pode nos ajudar nessa questão urgente?</speech>
        </speeches>
        <speeches id="2">
            <speech>Como vai a caça às escamas de Treecko, $PLAYER_NAME? Esses pequeninos podem ser esquivos, mas suas escamas são fundamentais para nossa solução.</speech>
            <speech>Os cientistas do Weather Institute estão no limite e, sem o condensador, estamos parados. Todos nós dependemos do seu sucesso.</speech>
            <speech>Lembre-se de que as balanças que você coletar nos ajudarão a acalmar o Sceptile em fúria e a restaurar o equilíbrio do sistema meteorológico da área.</speech>
            <speech>Obrigado por assumir essa tarefa. Não é todo dia que enfrentamos um desafio como esse, mas acredito em você. Continuem com o bom trabalho!</speech>
        </speeches>
    </conversation>

    <conversation id="19">
        <speeches id="1">
            <speech>**O ar vibra com a tensão enquanto a energia do Mega Sceptile crepita, reagindo descontroladamente ao clima perturbado da área.**</speech>
            <speech>**As folhas rodopiam em uma dança frenética, cada movimento do Mega Sceptile é nítido e imprevisível.</speech>
            <speech>A potência do condensador será suficiente?</speech>
            <speech>**Os rugidos do Mega Sceptile cortam o tumulto, um desafio à tempestade e à sua coragem.</speech>
        </speeches>
        <speeches id="2">
            <speech>**Lentamente, a tempestade dentro do Mega Sceptile começa a diminuir, o condensador de raios se harmonizando com sua energia natural.</speech>
            <speech>**"A tempestade dentro de mim se acalma, Trainer.</speech>
            <speech>Suas ações... falam mais alto do que qualquer grito de guerra".</speech>
            <speech>a calma recém-descoberta parece reconhecer.</speech>
            <speech>**Com um aceno de respeito, o Mega Sceptile se retira para as profundezas da floresta,</speech>
            <speech>sua energia caótica agora é um mero sussurro entre as árvores.</speech>
        </speeches>
        <speeches id="3">
            <speech>**A hesitação só alimenta a inquietação do Mega Sceptile. A vitória favorece os audaciosos", a tempestade ao seu redor parece se enfurecer.</speech>
            <speech>**Volte quando estiver pronto para se manter firme contra o vendaval.</speech>
            <speech>Até lá, seguimos caminhos diferentes", parecem dizer as folhas farfalhantes.</speech>
        </speeches>
        <speeches id="4">
            <speech>**A risada do Mega Sceptile quase se perde no vento uivante.</speech>
            <speech>"É a tempestade que você teme, Trainer?", ele zomba de dentro da tempestade.</speech>
            <speech>**"Encontre sua posição em meio ao caos. Só então pense em me enfrentar mais uma vez", aconselha o dossel sussurrante enquanto você reconsidera sua abordagem.</speech>
        </speeches>
        <speeches id="5">
            <speech>**A aura do Mega Sceptile é palpável, uma força selvagem indomada pelos recentes experimentos que não deram certo.</speech>
            <speech>**Seus apelos, uma mistura de desafio e desafio, ecoam para que surja um desafiante.</speech>
            <speech>**Sem o condensador de raios, enfrentar o Mega Sceptile parece uma tarefa intransponível.</speech>
        </speeches>
    </conversation>

    <conversation id="20">
        <speeches id="1">
            <speech>Apesar de nossos esforços, o Mega Sceptile ainda está agitado. Nossa abordagem não penetrou totalmente em seu frenesi. No entanto, continuo esperançoso, $PLAYER_NAME.</speech>
            <speech>Talvez precisemos reavaliar nossa estratégia ou explorar métodos alternativos para pacificá-la. Abandonar a esperança não é uma opção para nós.</speech>
        </speeches>
        <speeches id="2">
            <speech>Sucesso! O efeito do Condensador de Raios foi mais profundo do que eu esperava. A raiva do Mega Sceptile está diminuindo.</speech>
            <speech>Sua determinação tornou isso possível, $PLAYER_NAME!</speech>
            <speech>Esse marco não apenas traz paz ao Mega Sceptile, mas também enriquece nossa compreensão das respostas ambientais dos Pokémon.</speech>
            <speech>Seu envolvimento tem sido crucial, e sou muito grato.</speech>
            <speech>Sua proeza me inspirou a reconsiderar meu hiato das batalhas.</speech>
            <speech>Você poderia me agraciar com sua presença para uma batalha em minha residência em Fallarbor?</speech>
            <speech>Parece que você reacendeu uma chama que eu achava que tinha se apagado.</speech>
        </speeches>
        <speeches id="3">
            <speech>Estamos em declínio, não é mesmo? Não há problema algum. O momento deve ser perfeito, assim como a precisão em nossa pesquisa.</speech>
            <speech>Seu sucesso hoje me leva a refletir sobre minha própria jornada.</speech>
            <speech>Talvez seja hora de sair de meu retiro acadêmico para abraçar novamente o desafio da batalha.</speech>
            <speech>Sua assistência hoje foi nada menos que transformadora, $PLAYER_NAME.</speech>
            <speech>Isso despertou uma parte de mim que eu havia deixado de lado. Quando estiver pronto, espero testar minha coragem contra a sua.</speech>
            <speech>Até lá, vou mergulhar em meus estudos, revigorado pela ideia de nosso futuro encontro.</speech>
        </speeches>
        <speeches id="4">
            <speech>É maravilhoso ouvir isso! Aguardarei ansiosamente sua chegada à minha casa em Fallarbor.</speech>
            <speech>É uma chance não apenas de lutar, mas de aprender uns com os outros.</speech>
            <speech>Sua ajuda com o Mega Sceptile foi um farol de esperança. Estou ansioso por nossa batalha e por outras colaborações.</speech>
            <speech>Vejo você em Fallarbor, $PLAYER_NAME!</speech>
        </speeches>
        <speeches id="5"/>
    </conversation>

    <movingNpc direction="DOWN" id="1" name="Sharpedo" speed="1" sprite="319" type="pokemon" x="29" y="66">
        <path>LEFTx10,UPx8,RIGHTx10,DOWNx8</path>
        <onCollisionSpeech gap="4"/>
        <speech>Sharpedo!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Sharpedo" speed="1" sprite="319" type="pokemon" x="19" y="58">
        <path>RIGHTx10,DOWNx8,LEFTx10,UPx8</path>
        <onCollisionSpeech gap="4"/>
        <speech>Sharpedo!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="3" name="Pelipper" speed="1" sprite="279" type="pokemon" x="28" y="110">
        <path>UPx2,RIGHTx6,DOWNx2,LEFTx6</path>
        <onCollisionSpeech gap="4">Pelipper!</onCollisionSpeech>
        <speech>Pelipper!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="4" name="Pelipper" speed="1" sprite="279" type="pokemon" x="37" y="98">
        <path>UPx12,RIGHTx4,DOWNx12,LEFTx4</path>
        <onCollisionSpeech gap="4">Pelipper!</onCollisionSpeech>
        <speech>Pelipper!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="5" name="Sharpedo" speed="1" sprite="319" type="pokemon" x="39" y="102">
        <path>UPx20,DOWNx20</path>
        <onCollisionSpeech gap="4">Sharpedo!</onCollisionSpeech>
        <speech>Sharpedo!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="6" name="Nuzleaf" shouldSleep="" speed="1" sprite="274" type="pokemon" x="41" y="109">
        <path>DOWNx4,UPx4</path>
        <onCollisionSpeech gap="4">Nuzleaf!</onCollisionSpeech>
        <speech>Nuzleaf!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="7" name="Seedot" shouldSleep="" speed="1" sprite="273" type="pokemon" x="12" y="100">
        <path>UPx3,DOWNx3</path>
        <onCollisionSpeech gap="4">Seedot!</onCollisionSpeech>
        <speech>Seedot!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="8" name="Tentacruel" shouldSleep="" speed="1" sprite="73" type="pokemon" x="27" y="74">
        <path>RIGHTx7,LEFTx7</path>
        <onCollisionSpeech gap="4">Tentacruel!</onCollisionSpeech>
        <speech>Tentacruel!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="9" name="Castform" shouldSleep="" speed="1" sprite="351" type="pokemon" x="15" y="49">
        <path>LEFTx3,RIGHTx3</path>
        <onCollisionSpeech gap="4">Castform!</onCollisionSpeech>
        <speech>Forma de elenco!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="10" name="Lombre" shouldSleep="" speed="1" sprite="271" type="pokemon" x="20" y="72">
        <path>LEFTx3,RIGHTx3</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="11" name="Carvanha" speed="1" sprite="318" type="pokemon" x="21" y="12">
        <path>LEFTx10,UPx4,DOWNx4,RIGHTx10</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="12" name="Carvanha" speed="1" sprite="318" type="pokemon" x="21" y="5">
        <path>LEFTx7,RIGHTx7</path>
        <onCollisionSpeech gap="4">Carvanha!</onCollisionSpeech>
        <speech>Carvanha!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="13" name="Lotad" shouldSleep="" speed="1" sprite="270" type="pokemon" x="20" y="30">
        <path>UPx5,DOWNx5</path>
        <onCollisionSpeech gap="4">Lotad!</onCollisionSpeech>
        <speech>Lotad!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="14" name="Shiftry" shouldSleep="" speed="1" sprite="275" type="pokemon" x="13" y="33">
        <path>LEFTx6,RIGHTx6</path>
        <onCollisionSpeech gap="4">Shiftry!</onCollisionSpeech>
        <speech>Shiftry!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="15" name="Carvanha" speed="1" sprite="318" type="pokemon" x="25" y="35">
        <path>UPx6,DOWNx6</path>
        <onCollisionSpeech gap="4"/>
    </movingNpc>
    <movingNpc direction="DOWN" id="16" name="Tropius" shouldSleep="" speed="1" sprite="357" type="pokemon" x="38" y="11">
        <path>DOWNx4,UPx4</path>
        <onCollisionSpeech gap="4">Tropius!</onCollisionSpeech>
        <speech>Trópio!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="17" name="Tropius" shouldSleep="" speed="1" sprite="357" type="pokemon" x="38" y="28">
        <path>LEFTx2,DOWNx3,UPx3,RIGHTx2</path>
        <onCollisionSpeech gap="4">Tropius!</onCollisionSpeech>
        <speech>Trópio!</speech>
    </movingNpc>
</npcs>