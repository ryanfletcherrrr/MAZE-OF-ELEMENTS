<npcs>
    <npc direction="DOWN" id="10001" name="Sailor Silva" sprite="11" x="13" y="7">
        <speech>Venho de uma cidade muito distante - Sunshire Town.</speech>
        <speech>Essa cidade parece ser um bom lugar para passar as férias com minha família.</speech>
    </npc>
    <npc direction="LEFT" id="10002" name="Explorer Monteiro" sprite="20" x="27" y="31">
        <speech>Eu não tinha a menor ideia de como resolver os mistérios do Scorched's Desert, então decidi pedir ao meu amigo Silva para viajar comigo.
            comigo.
        </speech>
        <speech>Meu objetivo é bancar o detetive e talvez eu encontre algo útil em todo o mundo.</speech>
        <speech>Até que eu resolva todos os mistérios de minha cidade natal...</speech>
    </npc>
    <npc direction="LEFT" id="10003" name="Brandy" randomRotation="true" sprite="82" x="47" y="30">
        <speech>Esse parque é repleto de lindas flores!</speech>
    </npc>
    <npc direction="DOWN" id="10004" name="Mark" randomRotation="true" sprite="72" x="56" y="32">
        <speech>Afaste-se, estou meditando.</speech>
    </npc>
    <npc direction="LEFT" id="10005" name="Sports Addict Brenda" randomRotation="true" sprite="80" x="54" y="22">
        <speech>Esse piso é ótimo para patinação, uau!</speech>
    </npc>
    <conversation id="1">
        <speeches id="1">
            <speech>Eu vim com meu pai para pegar alguns Pokémon insetos, os Pokémon insetos são incríveis!</speech>
        </speeches>
        <speeches id="2">
            <speech>Você acabou de ter sorte! Hmph!"</speech>
        </speeches>
        <speeches id="3">
            <speech>Tenho que encontrar mais Pokémon do que meu pai!</speech>
        </speeches>
        <speeches id="4">
            <speech>Hehehe, você é bom! Mas eu era melhor!!!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Ei, você viu esses novos gadgets no mercado? Eles são ótimos! Mas meus Pokémon também são!</speech>
        </speeches>
        <speeches id="2">
            <speech>Acho que preciso fazer mais pesquisas!</speech>
        </speeches>
        <speeches id="3">
            <speech>*Checks PokePad* Será uma venda on-line?? Tenho que correr para casa!</speech>
        </speeches>
        <speeches id="4">
            <speech>Somos elétricos!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Alguns de meus amigos decidiram se dedicar às salas de treinamento para ajudar os outros, mas eu prefiro usar minhas
                habilidades no mundo exterior, pois assim você conhece mais pessoas.
            </speech>
        </speeches>
        <speeches id="2">
            <speech>Você é mais forte do que eu pensava, acho que preciso levar isso mais a sério.</speech>
        </speeches>
        <speeches id="3">
            <speech>Tenho que treinar mais...</speech>
        </speeches>
        <speeches id="4">
            <speech>Isso é tudo o que você pode fazer? Tenho certeza de que você pode fazer melhor.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Ah? Então você já conheceu aquele meu casal de colegas que é feliz? Então você sabe o que nós, Rangers, fazemos.
            </speech>
        </speeches>
        <speeches id="2">
            <speech>Não é de se admirar que você tenha passado por aqueles dois, você é realmente forte, com você no mountain ranger eu posso me sentir à vontade.
                tranquilidade, você parece ser uma pessoa muito boa!
            </speech>
        </speeches>
        <speeches id="3">
            <speech>Cuidado lá na frente, pois está ficando mais frio!</speech>
        </speeches>
        <speeches id="4">
            <speech>Você quase me pegou lá! Seus Pokémon são fortes e você também, apareça novamente se quiser uma revanche.
                sempre fico feliz em ver treinadores fortes!
            </speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Vejo que você já conhece meu filho, Max, ele lhe causou problemas?</speech>
            <speech>Hehe, nós dois somos muito entusiasmados quando se trata de Pokémon Insetos, vamos lá, vamos batalhar também!
            </speech>
        </speeches>
        <speeches id="2">
            <speech>Bom, bom, você é muito capaz, se você também derrotou meu filho, posso imaginar como ele agiu, ele odeia absolutamente perder.
                ele odeia perder!
            </speech>
        </speeches>
        <speeches id="3">
            <speech>Bem, vou ir devagar e deixar que o Max consiga mais Pokémon do que eu, pois não vou aguentar a reclamação dele se
                ele perder para mim novamente.... *sigh*
            </speech>
        </speeches>
        <speeches id="4">
            <speech>Bem, eu não seria tão fácil quanto meu filho!</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="6">
        <speeches id="1">
            <speech>Olá. Você poderia me ajudar a derrotar esses grunhidos?</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="7">
        <speeches id="1">
            <speech>Será melhor se você não interferir em nossos negócios...</speech>
        </speeches>
        <speeches id="2">
            <speech>Interessante. Eu o subestimei. Mas não se sinta feliz, pois nosso chefe é muito mais forte do que eu.
            </speech>
        </speeches>
        <speeches id="3">
            <speech/>
        </speeches>
        <speeches id="4">
            <speech>Hmph... você é tão lamentavelmente fraco.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="10">
        <speeches id="1">
            <speech>Ufa!!!</speech>
            <speech>Eu simplesmente não entendo. Não entendo.</speech>
            <speech>Eu estava passando tranquilamente, e eles começaram a me perguntar sobre o Ho-Oh.</speech>
            <speech>Eles disseram algo sobre reviver alguém.</speech>
            <speech>Não faz sentido para mim.</speech>
            <speech>Bem, temos que continuar nossa jornada.</speech>
            <speech>Ok, ok, não vou fazer isso de novo {EVENT=mood-4-11-20}</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="11">
        <speeches id="1">
            <speech>Eu deveria falar com $JVALOH_RIVAL antes de deixar a floresta.</speech>
        </speeches>
    </conversation>
</npcs>